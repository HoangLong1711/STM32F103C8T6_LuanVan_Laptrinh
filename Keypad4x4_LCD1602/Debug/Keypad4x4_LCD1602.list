
Keypad4x4_LCD1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001718  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001824  08001824  00011824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001854  08001854  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001854  08001854  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001854  08001854  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001854  08001854  00011854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001858  08001858  00011858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800185c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  08001868  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08001868  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ea1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f5e  00000000  00000000  00022ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00023e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  00024248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167d7  00000000  00000000  000245c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004fde  00000000  00000000  0003ad97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f9b9  00000000  00000000  0003fd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bf72e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ddc  00000000  00000000  000bf780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800180c 	.word	0x0800180c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800180c 	.word	0x0800180c

0800014c <lcd_init>:
#include "lcd_text.h"

/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	HAL_Delay(30);
 8000150:	201e      	movs	r0, #30
 8000152:	f000 fc8b 	bl	8000a6c <HAL_Delay>

	PIN_LOW(D4_PORT,D4_PIN);
 8000156:	2200      	movs	r2, #0
 8000158:	2140      	movs	r1, #64	; 0x40
 800015a:	481a      	ldr	r0, [pc, #104]	; (80001c4 <lcd_init+0x78>)
 800015c:	f000 ff29 	bl	8000fb2 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000160:	2201      	movs	r2, #1
 8000162:	2180      	movs	r1, #128	; 0x80
 8000164:	4817      	ldr	r0, [pc, #92]	; (80001c4 <lcd_init+0x78>)
 8000166:	f000 ff24 	bl	8000fb2 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 800016a:	2200      	movs	r2, #0
 800016c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000170:	4814      	ldr	r0, [pc, #80]	; (80001c4 <lcd_init+0x78>)
 8000172:	f000 ff1e 	bl	8000fb2 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000176:	2200      	movs	r2, #0
 8000178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800017c:	4811      	ldr	r0, [pc, #68]	; (80001c4 <lcd_init+0x78>)
 800017e:	f000 ff18 	bl	8000fb2 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000182:	2200      	movs	r2, #0
 8000184:	2110      	movs	r1, #16
 8000186:	480f      	ldr	r0, [pc, #60]	; (80001c4 <lcd_init+0x78>)
 8000188:	f000 ff13 	bl	8000fb2 <HAL_GPIO_WritePin>

	PIN_HIGH(EN_PORT,EN_PIN);
 800018c:	2201      	movs	r2, #1
 800018e:	2120      	movs	r1, #32
 8000190:	480c      	ldr	r0, [pc, #48]	; (80001c4 <lcd_init+0x78>)
 8000192:	f000 ff0e 	bl	8000fb2 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000196:	2200      	movs	r2, #0
 8000198:	2120      	movs	r1, #32
 800019a:	480a      	ldr	r0, [pc, #40]	; (80001c4 <lcd_init+0x78>)
 800019c:	f000 ff09 	bl	8000fb2 <HAL_GPIO_WritePin>

	lcd_write(0,0x28);
 80001a0:	2128      	movs	r1, #40	; 0x28
 80001a2:	2000      	movs	r0, #0
 80001a4:	f000 f810 	bl	80001c8 <lcd_write>
	lcd_write(0,0x0c);
 80001a8:	210c      	movs	r1, #12
 80001aa:	2000      	movs	r0, #0
 80001ac:	f000 f80c 	bl	80001c8 <lcd_write>
	lcd_write(0,0x06);
 80001b0:	2106      	movs	r1, #6
 80001b2:	2000      	movs	r0, #0
 80001b4:	f000 f808 	bl	80001c8 <lcd_write>
	lcd_write(0,0x01);
 80001b8:	2101      	movs	r1, #1
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 f804 	bl	80001c8 <lcd_write>
}
 80001c0:	bf00      	nop
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	40010c00 	.word	0x40010c00

080001c8 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 80001d8:	2002      	movs	r0, #2
 80001da:	f000 fc47 	bl	8000a6c <HAL_Delay>
	if(type)
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d005      	beq.n	80001f0 <lcd_write+0x28>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2110      	movs	r1, #16
 80001e8:	4853      	ldr	r0, [pc, #332]	; (8000338 <lcd_write+0x170>)
 80001ea:	f000 fee2 	bl	8000fb2 <HAL_GPIO_WritePin>
 80001ee:	e004      	b.n	80001fa <lcd_write+0x32>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2110      	movs	r1, #16
 80001f4:	4850      	ldr	r0, [pc, #320]	; (8000338 <lcd_write+0x170>)
 80001f6:	f000 fedc 	bl	8000fb2 <HAL_GPIO_WritePin>
	}

	//Send High Nibble
	if(data&0x80)
 80001fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	da06      	bge.n	8000210 <lcd_write+0x48>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000202:	2201      	movs	r2, #1
 8000204:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000208:	484b      	ldr	r0, [pc, #300]	; (8000338 <lcd_write+0x170>)
 800020a:	f000 fed2 	bl	8000fb2 <HAL_GPIO_WritePin>
 800020e:	e005      	b.n	800021c <lcd_write+0x54>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000210:	2200      	movs	r2, #0
 8000212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000216:	4848      	ldr	r0, [pc, #288]	; (8000338 <lcd_write+0x170>)
 8000218:	f000 fecb 	bl	8000fb2 <HAL_GPIO_WritePin>
	}

	if(data&0x40)
 800021c:	79bb      	ldrb	r3, [r7, #6]
 800021e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000222:	2b00      	cmp	r3, #0
 8000224:	d006      	beq.n	8000234 <lcd_write+0x6c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800022c:	4842      	ldr	r0, [pc, #264]	; (8000338 <lcd_write+0x170>)
 800022e:	f000 fec0 	bl	8000fb2 <HAL_GPIO_WritePin>
 8000232:	e005      	b.n	8000240 <lcd_write+0x78>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023a:	483f      	ldr	r0, [pc, #252]	; (8000338 <lcd_write+0x170>)
 800023c:	f000 feb9 	bl	8000fb2 <HAL_GPIO_WritePin>
	}

	if(data&0x20)
 8000240:	79bb      	ldrb	r3, [r7, #6]
 8000242:	f003 0320 	and.w	r3, r3, #32
 8000246:	2b00      	cmp	r3, #0
 8000248:	d005      	beq.n	8000256 <lcd_write+0x8e>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800024a:	2201      	movs	r2, #1
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	483a      	ldr	r0, [pc, #232]	; (8000338 <lcd_write+0x170>)
 8000250:	f000 feaf 	bl	8000fb2 <HAL_GPIO_WritePin>
 8000254:	e004      	b.n	8000260 <lcd_write+0x98>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000256:	2200      	movs	r2, #0
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	4837      	ldr	r0, [pc, #220]	; (8000338 <lcd_write+0x170>)
 800025c:	f000 fea9 	bl	8000fb2 <HAL_GPIO_WritePin>
	}

	if(data&0x10)
 8000260:	79bb      	ldrb	r3, [r7, #6]
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	d005      	beq.n	8000276 <lcd_write+0xae>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800026a:	2201      	movs	r2, #1
 800026c:	2140      	movs	r1, #64	; 0x40
 800026e:	4832      	ldr	r0, [pc, #200]	; (8000338 <lcd_write+0x170>)
 8000270:	f000 fe9f 	bl	8000fb2 <HAL_GPIO_WritePin>
 8000274:	e004      	b.n	8000280 <lcd_write+0xb8>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000276:	2200      	movs	r2, #0
 8000278:	2140      	movs	r1, #64	; 0x40
 800027a:	482f      	ldr	r0, [pc, #188]	; (8000338 <lcd_write+0x170>)
 800027c:	f000 fe99 	bl	8000fb2 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000280:	2201      	movs	r2, #1
 8000282:	2120      	movs	r1, #32
 8000284:	482c      	ldr	r0, [pc, #176]	; (8000338 <lcd_write+0x170>)
 8000286:	f000 fe94 	bl	8000fb2 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	482a      	ldr	r0, [pc, #168]	; (8000338 <lcd_write+0x170>)
 8000290:	f000 fe8f 	bl	8000fb2 <HAL_GPIO_WritePin>


	//Send Low Nibble
	if(data&0x08)
 8000294:	79bb      	ldrb	r3, [r7, #6]
 8000296:	f003 0308 	and.w	r3, r3, #8
 800029a:	2b00      	cmp	r3, #0
 800029c:	d006      	beq.n	80002ac <lcd_write+0xe4>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a4:	4824      	ldr	r0, [pc, #144]	; (8000338 <lcd_write+0x170>)
 80002a6:	f000 fe84 	bl	8000fb2 <HAL_GPIO_WritePin>
 80002aa:	e005      	b.n	80002b8 <lcd_write+0xf0>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b2:	4821      	ldr	r0, [pc, #132]	; (8000338 <lcd_write+0x170>)
 80002b4:	f000 fe7d 	bl	8000fb2 <HAL_GPIO_WritePin>
	}

	if(data&0x04)
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	f003 0304 	and.w	r3, r3, #4
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <lcd_write+0x108>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c8:	481b      	ldr	r0, [pc, #108]	; (8000338 <lcd_write+0x170>)
 80002ca:	f000 fe72 	bl	8000fb2 <HAL_GPIO_WritePin>
 80002ce:	e005      	b.n	80002dc <lcd_write+0x114>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d6:	4818      	ldr	r0, [pc, #96]	; (8000338 <lcd_write+0x170>)
 80002d8:	f000 fe6b 	bl	8000fb2 <HAL_GPIO_WritePin>
	}

	if(data&0x02)
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d005      	beq.n	80002f2 <lcd_write+0x12a>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2180      	movs	r1, #128	; 0x80
 80002ea:	4813      	ldr	r0, [pc, #76]	; (8000338 <lcd_write+0x170>)
 80002ec:	f000 fe61 	bl	8000fb2 <HAL_GPIO_WritePin>
 80002f0:	e004      	b.n	80002fc <lcd_write+0x134>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2180      	movs	r1, #128	; 0x80
 80002f6:	4810      	ldr	r0, [pc, #64]	; (8000338 <lcd_write+0x170>)
 80002f8:	f000 fe5b 	bl	8000fb2 <HAL_GPIO_WritePin>
	}

	if(data&0x01)
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d005      	beq.n	8000312 <lcd_write+0x14a>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000306:	2201      	movs	r2, #1
 8000308:	2140      	movs	r1, #64	; 0x40
 800030a:	480b      	ldr	r0, [pc, #44]	; (8000338 <lcd_write+0x170>)
 800030c:	f000 fe51 	bl	8000fb2 <HAL_GPIO_WritePin>
 8000310:	e004      	b.n	800031c <lcd_write+0x154>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000312:	2200      	movs	r2, #0
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	4808      	ldr	r0, [pc, #32]	; (8000338 <lcd_write+0x170>)
 8000318:	f000 fe4b 	bl	8000fb2 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800031c:	2201      	movs	r2, #1
 800031e:	2120      	movs	r1, #32
 8000320:	4805      	ldr	r0, [pc, #20]	; (8000338 <lcd_write+0x170>)
 8000322:	f000 fe46 	bl	8000fb2 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	4803      	ldr	r0, [pc, #12]	; (8000338 <lcd_write+0x170>)
 800032c:	f000 fe41 	bl	8000fb2 <HAL_GPIO_WritePin>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40010c00 	.word	0x40010c00

0800033c <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	603a      	str	r2, [r7, #0]
 8000346:	71fb      	strb	r3, [r7, #7]
 8000348:	460b      	mov	r3, r1
 800034a:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b03      	cmp	r3, #3
 8000350:	d836      	bhi.n	80003c0 <lcd_puts+0x84>
 8000352:	a201      	add	r2, pc, #4	; (adr r2, 8000358 <lcd_puts+0x1c>)
 8000354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000358:	08000369 	.word	0x08000369
 800035c:	08000379 	.word	0x08000379
 8000360:	08000389 	.word	0x08000389
 8000364:	08000399 	.word	0x08000399
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	3b80      	subs	r3, #128	; 0x80
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	2000      	movs	r0, #0
 8000372:	f7ff ff29 	bl	80001c8 <lcd_write>
			break;
 8000376:	e017      	b.n	80003a8 <lcd_puts+0x6c>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8000378:	79bb      	ldrb	r3, [r7, #6]
 800037a:	3b40      	subs	r3, #64	; 0x40
 800037c:	b2db      	uxtb	r3, r3
 800037e:	4619      	mov	r1, r3
 8000380:	2000      	movs	r0, #0
 8000382:	f7ff ff21 	bl	80001c8 <lcd_write>
			break;
 8000386:	e00f      	b.n	80003a8 <lcd_puts+0x6c>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8000388:	79bb      	ldrb	r3, [r7, #6]
 800038a:	3b70      	subs	r3, #112	; 0x70
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4619      	mov	r1, r3
 8000390:	2000      	movs	r0, #0
 8000392:	f7ff ff19 	bl	80001c8 <lcd_write>
			break;
 8000396:	e007      	b.n	80003a8 <lcd_puts+0x6c>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	3b30      	subs	r3, #48	; 0x30
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4619      	mov	r1, r3
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ff11 	bl	80001c8 <lcd_write>
			break;
 80003a6:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif

	while(*string)
 80003a8:	e00a      	b.n	80003c0 <lcd_puts+0x84>
	{
		lcd_write(1,*string);
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	f993 3000 	ldrsb.w	r3, [r3]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	4619      	mov	r1, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	f7ff ff07 	bl	80001c8 <lcd_write>
		string++;
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	3301      	adds	r3, #1
 80003be:	603b      	str	r3, [r7, #0]
	while(*string)
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	f993 3000 	ldrsb.w	r3, [r3]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1ef      	bne.n	80003aa <lcd_puts+0x6e>
	}
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <read_keypad>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char key;
char stringArray[40] = "";
int count = 0;
char read_keypad(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */

	HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2104      	movs	r1, #4
 80003dc:	48b0      	ldr	r0, [pc, #704]	; (80006a0 <read_keypad+0x2cc>)
 80003de:	f000 fde8 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2108      	movs	r1, #8
 80003e6:	48ae      	ldr	r0, [pc, #696]	; (80006a0 <read_keypad+0x2cc>)
 80003e8:	f000 fde3 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2110      	movs	r1, #16
 80003f0:	48ab      	ldr	r0, [pc, #684]	; (80006a0 <read_keypad+0x2cc>)
 80003f2:	f000 fdde 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2120      	movs	r1, #32
 80003fa:	48a9      	ldr	r0, [pc, #676]	; (80006a0 <read_keypad+0x2cc>)
 80003fc:	f000 fdd9 	bl	8000fb2 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	48a7      	ldr	r0, [pc, #668]	; (80006a0 <read_keypad+0x2cc>)
 8000404:	f000 fdbe 	bl	8000f84 <HAL_GPIO_ReadPin>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d109      	bne.n	8000422 <read_keypad+0x4e>
			{
		while ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 800040e:	bf00      	nop
 8000410:	2140      	movs	r1, #64	; 0x40
 8000412:	48a3      	ldr	r0, [pc, #652]	; (80006a0 <read_keypad+0x2cc>)
 8000414:	f000 fdb6 	bl	8000f84 <HAL_GPIO_ReadPin>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0f8      	beq.n	8000410 <read_keypad+0x3c>
			;
		return '1';
 800041e:	2331      	movs	r3, #49	; 0x31
 8000420:	e13b      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	489e      	ldr	r0, [pc, #632]	; (80006a0 <read_keypad+0x2cc>)
 8000426:	f000 fdad 	bl	8000f84 <HAL_GPIO_ReadPin>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d109      	bne.n	8000444 <read_keypad+0x70>
			{
		while ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 8000430:	bf00      	nop
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	489a      	ldr	r0, [pc, #616]	; (80006a0 <read_keypad+0x2cc>)
 8000436:	f000 fda5 	bl	8000f84 <HAL_GPIO_ReadPin>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f8      	beq.n	8000432 <read_keypad+0x5e>
			;
		return '4';
 8000440:	2334      	movs	r3, #52	; 0x34
 8000442:	e12a      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 8000444:	2101      	movs	r1, #1
 8000446:	4897      	ldr	r0, [pc, #604]	; (80006a4 <read_keypad+0x2d0>)
 8000448:	f000 fd9c 	bl	8000f84 <HAL_GPIO_ReadPin>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d109      	bne.n	8000466 <read_keypad+0x92>
			{
		while ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 8000452:	bf00      	nop
 8000454:	2101      	movs	r1, #1
 8000456:	4893      	ldr	r0, [pc, #588]	; (80006a4 <read_keypad+0x2d0>)
 8000458:	f000 fd94 	bl	8000f84 <HAL_GPIO_ReadPin>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f8      	beq.n	8000454 <read_keypad+0x80>
			;
		return '7';
 8000462:	2337      	movs	r3, #55	; 0x37
 8000464:	e119      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000466:	2102      	movs	r1, #2
 8000468:	488e      	ldr	r0, [pc, #568]	; (80006a4 <read_keypad+0x2d0>)
 800046a:	f000 fd8b 	bl	8000f84 <HAL_GPIO_ReadPin>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d109      	bne.n	8000488 <read_keypad+0xb4>
			{
		while ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000474:	bf00      	nop
 8000476:	2102      	movs	r1, #2
 8000478:	488a      	ldr	r0, [pc, #552]	; (80006a4 <read_keypad+0x2d0>)
 800047a:	f000 fd83 	bl	8000f84 <HAL_GPIO_ReadPin>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f8      	beq.n	8000476 <read_keypad+0xa2>
			;
		return '*';
 8000484:	232a      	movs	r3, #42	; 0x2a
 8000486:	e108      	b.n	800069a <read_keypad+0x2c6>
	}

	HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2104      	movs	r1, #4
 800048c:	4884      	ldr	r0, [pc, #528]	; (80006a0 <read_keypad+0x2cc>)
 800048e:	f000 fd90 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	2108      	movs	r1, #8
 8000496:	4882      	ldr	r0, [pc, #520]	; (80006a0 <read_keypad+0x2cc>)
 8000498:	f000 fd8b 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2110      	movs	r1, #16
 80004a0:	487f      	ldr	r0, [pc, #508]	; (80006a0 <read_keypad+0x2cc>)
 80004a2:	f000 fd86 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2120      	movs	r1, #32
 80004aa:	487d      	ldr	r0, [pc, #500]	; (80006a0 <read_keypad+0x2cc>)
 80004ac:	f000 fd81 	bl	8000fb2 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 80004b0:	2140      	movs	r1, #64	; 0x40
 80004b2:	487b      	ldr	r0, [pc, #492]	; (80006a0 <read_keypad+0x2cc>)
 80004b4:	f000 fd66 	bl	8000f84 <HAL_GPIO_ReadPin>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d109      	bne.n	80004d2 <read_keypad+0xfe>
			{
		while ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 80004be:	bf00      	nop
 80004c0:	2140      	movs	r1, #64	; 0x40
 80004c2:	4877      	ldr	r0, [pc, #476]	; (80006a0 <read_keypad+0x2cc>)
 80004c4:	f000 fd5e 	bl	8000f84 <HAL_GPIO_ReadPin>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f8      	beq.n	80004c0 <read_keypad+0xec>
			;
		return '2';
 80004ce:	2332      	movs	r3, #50	; 0x32
 80004d0:	e0e3      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	4872      	ldr	r0, [pc, #456]	; (80006a0 <read_keypad+0x2cc>)
 80004d6:	f000 fd55 	bl	8000f84 <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d109      	bne.n	80004f4 <read_keypad+0x120>
			{
		while ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 80004e0:	bf00      	nop
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	486e      	ldr	r0, [pc, #440]	; (80006a0 <read_keypad+0x2cc>)
 80004e6:	f000 fd4d 	bl	8000f84 <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0f8      	beq.n	80004e2 <read_keypad+0x10e>
			;
		return '5';
 80004f0:	2335      	movs	r3, #53	; 0x35
 80004f2:	e0d2      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 80004f4:	2101      	movs	r1, #1
 80004f6:	486b      	ldr	r0, [pc, #428]	; (80006a4 <read_keypad+0x2d0>)
 80004f8:	f000 fd44 	bl	8000f84 <HAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d109      	bne.n	8000516 <read_keypad+0x142>
			{
		while ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 8000502:	bf00      	nop
 8000504:	2101      	movs	r1, #1
 8000506:	4867      	ldr	r0, [pc, #412]	; (80006a4 <read_keypad+0x2d0>)
 8000508:	f000 fd3c 	bl	8000f84 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f8      	beq.n	8000504 <read_keypad+0x130>
			;
		return '8';
 8000512:	2338      	movs	r3, #56	; 0x38
 8000514:	e0c1      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000516:	2102      	movs	r1, #2
 8000518:	4862      	ldr	r0, [pc, #392]	; (80006a4 <read_keypad+0x2d0>)
 800051a:	f000 fd33 	bl	8000f84 <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d109      	bne.n	8000538 <read_keypad+0x164>
			{
		while ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000524:	bf00      	nop
 8000526:	2102      	movs	r1, #2
 8000528:	485e      	ldr	r0, [pc, #376]	; (80006a4 <read_keypad+0x2d0>)
 800052a:	f000 fd2b 	bl	8000f84 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0f8      	beq.n	8000526 <read_keypad+0x152>
			;
		return '0';
 8000534:	2330      	movs	r3, #48	; 0x30
 8000536:	e0b0      	b.n	800069a <read_keypad+0x2c6>
	}

	HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 8000538:	2201      	movs	r2, #1
 800053a:	2104      	movs	r1, #4
 800053c:	4858      	ldr	r0, [pc, #352]	; (80006a0 <read_keypad+0x2cc>)
 800053e:	f000 fd38 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 8000542:	2201      	movs	r2, #1
 8000544:	2108      	movs	r1, #8
 8000546:	4856      	ldr	r0, [pc, #344]	; (80006a0 <read_keypad+0x2cc>)
 8000548:	f000 fd33 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_RESET);  // Pull the R3 High
 800054c:	2200      	movs	r2, #0
 800054e:	2110      	movs	r1, #16
 8000550:	4853      	ldr	r0, [pc, #332]	; (80006a0 <read_keypad+0x2cc>)
 8000552:	f000 fd2e 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 8000556:	2201      	movs	r2, #1
 8000558:	2120      	movs	r1, #32
 800055a:	4851      	ldr	r0, [pc, #324]	; (80006a0 <read_keypad+0x2cc>)
 800055c:	f000 fd29 	bl	8000fb2 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	484f      	ldr	r0, [pc, #316]	; (80006a0 <read_keypad+0x2cc>)
 8000564:	f000 fd0e 	bl	8000f84 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d109      	bne.n	8000582 <read_keypad+0x1ae>
			{
		while ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 800056e:	bf00      	nop
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	484b      	ldr	r0, [pc, #300]	; (80006a0 <read_keypad+0x2cc>)
 8000574:	f000 fd06 	bl	8000f84 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f8      	beq.n	8000570 <read_keypad+0x19c>
			;
		return '3';
 800057e:	2333      	movs	r3, #51	; 0x33
 8000580:	e08b      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	4846      	ldr	r0, [pc, #280]	; (80006a0 <read_keypad+0x2cc>)
 8000586:	f000 fcfd 	bl	8000f84 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d109      	bne.n	80005a4 <read_keypad+0x1d0>
			{
		while ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 8000590:	bf00      	nop
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	4842      	ldr	r0, [pc, #264]	; (80006a0 <read_keypad+0x2cc>)
 8000596:	f000 fcf5 	bl	8000f84 <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f8      	beq.n	8000592 <read_keypad+0x1be>
			;
		return '6';
 80005a0:	2336      	movs	r3, #54	; 0x36
 80005a2:	e07a      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 80005a4:	2101      	movs	r1, #1
 80005a6:	483f      	ldr	r0, [pc, #252]	; (80006a4 <read_keypad+0x2d0>)
 80005a8:	f000 fcec 	bl	8000f84 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d109      	bne.n	80005c6 <read_keypad+0x1f2>
			{
		while ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 80005b2:	bf00      	nop
 80005b4:	2101      	movs	r1, #1
 80005b6:	483b      	ldr	r0, [pc, #236]	; (80006a4 <read_keypad+0x2d0>)
 80005b8:	f000 fce4 	bl	8000f84 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f8      	beq.n	80005b4 <read_keypad+0x1e0>
			;
		return '9';
 80005c2:	2339      	movs	r3, #57	; 0x39
 80005c4:	e069      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 80005c6:	2102      	movs	r1, #2
 80005c8:	4836      	ldr	r0, [pc, #216]	; (80006a4 <read_keypad+0x2d0>)
 80005ca:	f000 fcdb 	bl	8000f84 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d109      	bne.n	80005e8 <read_keypad+0x214>
			{
		while ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 80005d4:	bf00      	nop
 80005d6:	2102      	movs	r1, #2
 80005d8:	4832      	ldr	r0, [pc, #200]	; (80006a4 <read_keypad+0x2d0>)
 80005da:	f000 fcd3 	bl	8000f84 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f8      	beq.n	80005d6 <read_keypad+0x202>
			;
		return '#';
 80005e4:	2323      	movs	r3, #35	; 0x23
 80005e6:	e058      	b.n	800069a <read_keypad+0x2c6>
	}

	HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 80005e8:	2201      	movs	r2, #1
 80005ea:	2104      	movs	r1, #4
 80005ec:	482c      	ldr	r0, [pc, #176]	; (80006a0 <read_keypad+0x2cc>)
 80005ee:	f000 fce0 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 80005f2:	2201      	movs	r2, #1
 80005f4:	2108      	movs	r1, #8
 80005f6:	482a      	ldr	r0, [pc, #168]	; (80006a0 <read_keypad+0x2cc>)
 80005f8:	f000 fcdb 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4827      	ldr	r0, [pc, #156]	; (80006a0 <read_keypad+0x2cc>)
 8000602:	f000 fcd6 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_RESET);  // Pull the R4 High
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	4825      	ldr	r0, [pc, #148]	; (80006a0 <read_keypad+0x2cc>)
 800060c:	f000 fcd1 	bl	8000fb2 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 8000610:	2140      	movs	r1, #64	; 0x40
 8000612:	4823      	ldr	r0, [pc, #140]	; (80006a0 <read_keypad+0x2cc>)
 8000614:	f000 fcb6 	bl	8000f84 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d109      	bne.n	8000632 <read_keypad+0x25e>
			{
		while ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 800061e:	bf00      	nop
 8000620:	2140      	movs	r1, #64	; 0x40
 8000622:	481f      	ldr	r0, [pc, #124]	; (80006a0 <read_keypad+0x2cc>)
 8000624:	f000 fcae 	bl	8000f84 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f8      	beq.n	8000620 <read_keypad+0x24c>
			;
		return 'A';
 800062e:	2341      	movs	r3, #65	; 0x41
 8000630:	e033      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	481a      	ldr	r0, [pc, #104]	; (80006a0 <read_keypad+0x2cc>)
 8000636:	f000 fca5 	bl	8000f84 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d109      	bne.n	8000654 <read_keypad+0x280>
			{
		while ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 8000640:	bf00      	nop
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	4816      	ldr	r0, [pc, #88]	; (80006a0 <read_keypad+0x2cc>)
 8000646:	f000 fc9d 	bl	8000f84 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f8      	beq.n	8000642 <read_keypad+0x26e>
			;
		return 'B';
 8000650:	2342      	movs	r3, #66	; 0x42
 8000652:	e022      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 8000654:	2101      	movs	r1, #1
 8000656:	4813      	ldr	r0, [pc, #76]	; (80006a4 <read_keypad+0x2d0>)
 8000658:	f000 fc94 	bl	8000f84 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d109      	bne.n	8000676 <read_keypad+0x2a2>
			{
		while ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 8000662:	bf00      	nop
 8000664:	2101      	movs	r1, #1
 8000666:	480f      	ldr	r0, [pc, #60]	; (80006a4 <read_keypad+0x2d0>)
 8000668:	f000 fc8c 	bl	8000f84 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f8      	beq.n	8000664 <read_keypad+0x290>
			;
		return 'C';
 8000672:	2343      	movs	r3, #67	; 0x43
 8000674:	e011      	b.n	800069a <read_keypad+0x2c6>
	}
	if ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000676:	2102      	movs	r1, #2
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <read_keypad+0x2d0>)
 800067a:	f000 fc83 	bl	8000f84 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d109      	bne.n	8000698 <read_keypad+0x2c4>
			{
		while ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000684:	bf00      	nop
 8000686:	2102      	movs	r1, #2
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <read_keypad+0x2d0>)
 800068a:	f000 fc7b 	bl	8000f84 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0f8      	beq.n	8000686 <read_keypad+0x2b2>
			;
		return 'D';
 8000694:	2344      	movs	r3, #68	; 0x44
 8000696:	e000      	b.n	800069a <read_keypad+0x2c6>
	}
	return '/';
 8000698:	232f      	movs	r3, #47	; 0x2f
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40010800 	.word	0x40010800
 80006a4:	40010c00 	.word	0x40010c00

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 f97c 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f830 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f874 	bl	80007a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80006b8:	f7ff fd48 	bl	800014c <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		key = read_keypad();
 80006bc:	f7ff fe8a 	bl	80003d4 <read_keypad>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <main+0x5c>)
 80006c6:	701a      	strb	r2, [r3, #0]
		if (key != '/') {
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <main+0x5c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b2f      	cmp	r3, #47	; 0x2f
 80006ce:	d00f      	beq.n	80006f0 <main+0x48>
			stringArray[count] = key;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <main+0x60>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <main+0x5c>)
 80006d6:	7811      	ldrb	r1, [r2, #0]
 80006d8:	4a0c      	ldr	r2, [pc, #48]	; (800070c <main+0x64>)
 80006da:	54d1      	strb	r1, [r2, r3]
			lcd_puts(1, 0, (int8_t*) stringArray);
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <main+0x64>)
 80006de:	2100      	movs	r1, #0
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff fe2b 	bl	800033c <lcd_puts>
			count++;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <main+0x60>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <main+0x60>)
 80006ee:	6013      	str	r3, [r2, #0]
		}
		lcd_puts(0, 0, (int8_t*) "Test LCD 1602");
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <main+0x68>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fe21 	bl	800033c <lcd_puts>
		HAL_Delay(100);
 80006fa:	2064      	movs	r0, #100	; 0x64
 80006fc:	f000 f9b6 	bl	8000a6c <HAL_Delay>
		key = read_keypad();
 8000700:	e7dc      	b.n	80006bc <main+0x14>
 8000702:	bf00      	nop
 8000704:	20000028 	.word	0x20000028
 8000708:	20000054 	.word	0x20000054
 800070c:	2000002c 	.word	0x2000002c
 8000710:	08001824 	.word	0x08001824

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b090      	sub	sp, #64	; 0x40
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	2228      	movs	r2, #40	; 0x28
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f86a 	bl	80017fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000752:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fc41 	bl	8000fe4 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000768:	f000 f892 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f000 feae 	bl	80014e8 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000792:	f000 f87d 	bl	8000890 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3740      	adds	r7, #64	; 0x40
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <MX_GPIO_Init+0xe4>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a32      	ldr	r2, [pc, #200]	; (8000884 <MX_GPIO_Init+0xe4>)
 80007ba:	f043 0320 	orr.w	r3, r3, #32
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b30      	ldr	r3, [pc, #192]	; (8000884 <MX_GPIO_Init+0xe4>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0320 	and.w	r3, r3, #32
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <MX_GPIO_Init+0xe4>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <MX_GPIO_Init+0xe4>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0xe4>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <MX_GPIO_Init+0xe4>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a26      	ldr	r2, [pc, #152]	; (8000884 <MX_GPIO_Init+0xe4>)
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <MX_GPIO_Init+0xe4>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	213c      	movs	r1, #60	; 0x3c
 8000800:	4821      	ldr	r0, [pc, #132]	; (8000888 <MX_GPIO_Init+0xe8>)
 8000802:	f000 fbd6 	bl	8000fb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800080c:	481f      	ldr	r0, [pc, #124]	; (800088c <MX_GPIO_Init+0xec>)
 800080e:	f000 fbd0 	bl	8000fb2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000812:	233c      	movs	r3, #60	; 0x3c
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2302      	movs	r3, #2
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	4817      	ldr	r0, [pc, #92]	; (8000888 <MX_GPIO_Init+0xe8>)
 800082a:	f000 fa27 	bl	8000c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800082e:	23c0      	movs	r3, #192	; 0xc0
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_GPIO_Init+0xe8>)
 8000842:	f000 fa1b 	bl	8000c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000846:	2303      	movs	r3, #3
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084e:	2301      	movs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	4619      	mov	r1, r3
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_GPIO_Init+0xec>)
 800085a:	f000 fa0f 	bl	8000c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800085e:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000862:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4619      	mov	r1, r3
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_GPIO_Init+0xec>)
 8000878:	f000 fa00 	bl	8000c7c <HAL_GPIO_Init>

}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	40010800 	.word	0x40010800
 800088c:	40010c00 	.word	0x40010c00

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <HAL_MspInit+0x5c>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <HAL_MspInit+0x5c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_MspInit+0x5c>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x5c>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_MspInit+0x5c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x5c>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_MspInit+0x60>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_MspInit+0x60>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010000 	.word	0x40010000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000946:	f000 f875 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}

0800094e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
	...

0800095c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	; (8000994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	; (80009a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000982:	f7ff ffe4 	bl	800094e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f000 ff15 	bl	80017b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fe8d 	bl	80006a8 <main>
  bx lr
 800098e:	4770      	bx	lr
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000998:	0800185c 	.word	0x0800185c
  ldr r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a0:	2000005c 	.word	0x2000005c

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f92b 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff ff6a 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f935 	bl	8000c62 <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 f90b 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x20>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <HAL_IncTick+0x20>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000058 	.word	0x20000058

08000a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_GetTick+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000058 	.word	0x20000058

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff fff0 	bl	8000a58 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffe0 	bl	8000a58 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff90 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff49 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff5e 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff90 	bl	8000b6c <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5f 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffb0 	bl	8000bd0 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b08b      	sub	sp, #44	; 0x2c
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8e:	e169      	b.n	8000f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c90:	2201      	movs	r2, #1
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f040 8158 	bne.w	8000f5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4a9a      	ldr	r2, [pc, #616]	; (8000f1c <HAL_GPIO_Init+0x2a0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d05e      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000cb8:	4a98      	ldr	r2, [pc, #608]	; (8000f1c <HAL_GPIO_Init+0x2a0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d875      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cbe:	4a98      	ldr	r2, [pc, #608]	; (8000f20 <HAL_GPIO_Init+0x2a4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d058      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000cc4:	4a96      	ldr	r2, [pc, #600]	; (8000f20 <HAL_GPIO_Init+0x2a4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d86f      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cca:	4a96      	ldr	r2, [pc, #600]	; (8000f24 <HAL_GPIO_Init+0x2a8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d052      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000cd0:	4a94      	ldr	r2, [pc, #592]	; (8000f24 <HAL_GPIO_Init+0x2a8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d869      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cd6:	4a94      	ldr	r2, [pc, #592]	; (8000f28 <HAL_GPIO_Init+0x2ac>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d04c      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000cdc:	4a92      	ldr	r2, [pc, #584]	; (8000f28 <HAL_GPIO_Init+0x2ac>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d863      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000ce2:	4a92      	ldr	r2, [pc, #584]	; (8000f2c <HAL_GPIO_Init+0x2b0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d046      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000ce8:	4a90      	ldr	r2, [pc, #576]	; (8000f2c <HAL_GPIO_Init+0x2b0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d85d      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cee:	2b12      	cmp	r3, #18
 8000cf0:	d82a      	bhi.n	8000d48 <HAL_GPIO_Init+0xcc>
 8000cf2:	2b12      	cmp	r3, #18
 8000cf4:	d859      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cf6:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <HAL_GPIO_Init+0x80>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d77 	.word	0x08000d77
 8000d00:	08000d51 	.word	0x08000d51
 8000d04:	08000d63 	.word	0x08000d63
 8000d08:	08000da5 	.word	0x08000da5
 8000d0c:	08000dab 	.word	0x08000dab
 8000d10:	08000dab 	.word	0x08000dab
 8000d14:	08000dab 	.word	0x08000dab
 8000d18:	08000dab 	.word	0x08000dab
 8000d1c:	08000dab 	.word	0x08000dab
 8000d20:	08000dab 	.word	0x08000dab
 8000d24:	08000dab 	.word	0x08000dab
 8000d28:	08000dab 	.word	0x08000dab
 8000d2c:	08000dab 	.word	0x08000dab
 8000d30:	08000dab 	.word	0x08000dab
 8000d34:	08000dab 	.word	0x08000dab
 8000d38:	08000dab 	.word	0x08000dab
 8000d3c:	08000dab 	.word	0x08000dab
 8000d40:	08000d59 	.word	0x08000d59
 8000d44:	08000d6d 	.word	0x08000d6d
 8000d48:	4a79      	ldr	r2, [pc, #484]	; (8000f30 <HAL_GPIO_Init+0x2b4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d4e:	e02c      	b.n	8000daa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e029      	b.n	8000dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	623b      	str	r3, [r7, #32]
          break;
 8000d60:	e024      	b.n	8000dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	3308      	adds	r3, #8
 8000d68:	623b      	str	r3, [r7, #32]
          break;
 8000d6a:	e01f      	b.n	8000dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	330c      	adds	r3, #12
 8000d72:	623b      	str	r3, [r7, #32]
          break;
 8000d74:	e01a      	b.n	8000dac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	623b      	str	r3, [r7, #32]
          break;
 8000d82:	e013      	b.n	8000dac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d105      	bne.n	8000d98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	611a      	str	r2, [r3, #16]
          break;
 8000d96:	e009      	b.n	8000dac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	615a      	str	r2, [r3, #20]
          break;
 8000da2:	e003      	b.n	8000dac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
          break;
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x130>
          break;
 8000daa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	2bff      	cmp	r3, #255	; 0xff
 8000db0:	d801      	bhi.n	8000db6 <HAL_GPIO_Init+0x13a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	e001      	b.n	8000dba <HAL_GPIO_Init+0x13e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3304      	adds	r3, #4
 8000dba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	2bff      	cmp	r3, #255	; 0xff
 8000dc0:	d802      	bhi.n	8000dc8 <HAL_GPIO_Init+0x14c>
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	3b08      	subs	r3, #8
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	401a      	ands	r2, r3
 8000de0:	6a39      	ldr	r1, [r7, #32]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	431a      	orrs	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 80b1 	beq.w	8000f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dfc:	4b4d      	ldr	r3, [pc, #308]	; (8000f34 <HAL_GPIO_Init+0x2b8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a4c      	ldr	r2, [pc, #304]	; (8000f34 <HAL_GPIO_Init+0x2b8>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b4a      	ldr	r3, [pc, #296]	; (8000f34 <HAL_GPIO_Init+0x2b8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e14:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <HAL_GPIO_Init+0x2bc>)
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a40      	ldr	r2, [pc, #256]	; (8000f3c <HAL_GPIO_Init+0x2c0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d013      	beq.n	8000e68 <HAL_GPIO_Init+0x1ec>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a3f      	ldr	r2, [pc, #252]	; (8000f40 <HAL_GPIO_Init+0x2c4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00d      	beq.n	8000e64 <HAL_GPIO_Init+0x1e8>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a3e      	ldr	r2, [pc, #248]	; (8000f44 <HAL_GPIO_Init+0x2c8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x1e4>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a3d      	ldr	r2, [pc, #244]	; (8000f48 <HAL_GPIO_Init+0x2cc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_GPIO_Init+0x1e0>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e006      	b.n	8000e6a <HAL_GPIO_Init+0x1ee>
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	e004      	b.n	8000e6a <HAL_GPIO_Init+0x1ee>
 8000e60:	2302      	movs	r3, #2
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0x1ee>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <HAL_GPIO_Init+0x1ee>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6c:	f002 0203 	and.w	r2, r2, #3
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	4093      	lsls	r3, r2
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e7a:	492f      	ldr	r1, [pc, #188]	; (8000f38 <HAL_GPIO_Init+0x2bc>)
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	492c      	ldr	r1, [pc, #176]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4928      	ldr	r1, [pc, #160]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	4922      	ldr	r1, [pc, #136]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	604b      	str	r3, [r1, #4]
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	491e      	ldr	r1, [pc, #120]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d006      	beq.n	8000ef2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	4918      	ldr	r1, [pc, #96]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	608b      	str	r3, [r1, #8]
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4914      	ldr	r1, [pc, #80]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d021      	beq.n	8000f50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	490e      	ldr	r1, [pc, #56]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60cb      	str	r3, [r1, #12]
 8000f18:	e021      	b.n	8000f5e <HAL_GPIO_Init+0x2e2>
 8000f1a:	bf00      	nop
 8000f1c:	10320000 	.word	0x10320000
 8000f20:	10310000 	.word	0x10310000
 8000f24:	10220000 	.word	0x10220000
 8000f28:	10210000 	.word	0x10210000
 8000f2c:	10120000 	.word	0x10120000
 8000f30:	10110000 	.word	0x10110000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	40011000 	.word	0x40011000
 8000f48:	40011400 	.word	0x40011400
 8000f4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_GPIO_Init+0x304>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	4909      	ldr	r1, [pc, #36]	; (8000f80 <HAL_GPIO_Init+0x304>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	3301      	adds	r3, #1
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f47f ae8e 	bne.w	8000c90 <HAL_GPIO_Init+0x14>
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	372c      	adds	r7, #44	; 0x2c
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40010400 	.word	0x40010400

08000f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e001      	b.n	8000fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	807b      	strh	r3, [r7, #2]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc2:	787b      	ldrb	r3, [r7, #1]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fce:	e003      	b.n	8000fd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	041a      	lsls	r2, r3, #16
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	611a      	str	r2, [r3, #16]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e272      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8087 	beq.w	8001112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001004:	4b92      	ldr	r3, [pc, #584]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b04      	cmp	r3, #4
 800100e:	d00c      	beq.n	800102a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001010:	4b8f      	ldr	r3, [pc, #572]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b08      	cmp	r3, #8
 800101a:	d112      	bne.n	8001042 <HAL_RCC_OscConfig+0x5e>
 800101c:	4b8c      	ldr	r3, [pc, #560]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d10b      	bne.n	8001042 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102a:	4b89      	ldr	r3, [pc, #548]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06c      	beq.n	8001110 <HAL_RCC_OscConfig+0x12c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d168      	bne.n	8001110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e24c      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104a:	d106      	bne.n	800105a <HAL_RCC_OscConfig+0x76>
 800104c:	4b80      	ldr	r3, [pc, #512]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a7f      	ldr	r2, [pc, #508]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	e02e      	b.n	80010b8 <HAL_RCC_OscConfig+0xd4>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x98>
 8001062:	4b7b      	ldr	r3, [pc, #492]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a7a      	ldr	r2, [pc, #488]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	4b78      	ldr	r3, [pc, #480]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a77      	ldr	r2, [pc, #476]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e01d      	b.n	80010b8 <HAL_RCC_OscConfig+0xd4>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0xbc>
 8001086:	4b72      	ldr	r3, [pc, #456]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a71      	ldr	r2, [pc, #452]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b6f      	ldr	r3, [pc, #444]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6e      	ldr	r2, [pc, #440]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0xd4>
 80010a0:	4b6b      	ldr	r3, [pc, #428]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a6a      	ldr	r2, [pc, #424]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b68      	ldr	r3, [pc, #416]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a67      	ldr	r2, [pc, #412]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fcca 	bl	8000a58 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fcc6 	bl	8000a58 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e200      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b5d      	ldr	r3, [pc, #372]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0xe4>
 80010e6:	e014      	b.n	8001112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fcb6 	bl	8000a58 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fcb2 	bl	8000a58 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1ec      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x10c>
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d063      	beq.n	80011e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800111e:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800112a:	4b49      	ldr	r3, [pc, #292]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b08      	cmp	r3, #8
 8001134:	d11c      	bne.n	8001170 <HAL_RCC_OscConfig+0x18c>
 8001136:	4b46      	ldr	r3, [pc, #280]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d116      	bne.n	8001170 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	4b43      	ldr	r3, [pc, #268]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x176>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d001      	beq.n	800115a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e1c0      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4939      	ldr	r1, [pc, #228]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	e03a      	b.n	80011e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fc6b 	bl	8000a58 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fc67 	bl	8000a58 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1a1      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4927      	ldr	r1, [pc, #156]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e015      	b.n	80011e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fc4a 	bl	8000a58 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc46 	bl	8000a58 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e180      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d03a      	beq.n	8001268 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d019      	beq.n	800122e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_RCC_OscConfig+0x274>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001200:	f7ff fc2a 	bl	8000a58 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fc26 	bl	8000a58 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e160      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f000 faa6 	bl	8001778 <RCC_Delay>
 800122c:	e01c      	b.n	8001268 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_RCC_OscConfig+0x274>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001234:	f7ff fc10 	bl	8000a58 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123a:	e00f      	b.n	800125c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff fc0c 	bl	8000a58 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d908      	bls.n	800125c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e146      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	42420000 	.word	0x42420000
 8001258:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	4b92      	ldr	r3, [pc, #584]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1e9      	bne.n	800123c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80a6 	beq.w	80013c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127a:	4b8b      	ldr	r3, [pc, #556]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10d      	bne.n	80012a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	4b88      	ldr	r3, [pc, #544]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a87      	ldr	r2, [pc, #540]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b85      	ldr	r3, [pc, #532]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129e:	2301      	movs	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	4b82      	ldr	r3, [pc, #520]	; (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d118      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ae:	4b7f      	ldr	r3, [pc, #508]	; (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a7e      	ldr	r2, [pc, #504]	; (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fbcd 	bl	8000a58 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c2:	f7ff fbc9 	bl	8000a58 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b64      	cmp	r3, #100	; 0x64
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e103      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d4:	4b75      	ldr	r3, [pc, #468]	; (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x312>
 80012e8:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4a6e      	ldr	r2, [pc, #440]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	e02d      	b.n	8001352 <HAL_RCC_OscConfig+0x36e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x334>
 80012fe:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a69      	ldr	r2, [pc, #420]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	6213      	str	r3, [r2, #32]
 800130a:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4a66      	ldr	r2, [pc, #408]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	f023 0304 	bic.w	r3, r3, #4
 8001314:	6213      	str	r3, [r2, #32]
 8001316:	e01c      	b.n	8001352 <HAL_RCC_OscConfig+0x36e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b05      	cmp	r3, #5
 800131e:	d10c      	bne.n	800133a <HAL_RCC_OscConfig+0x356>
 8001320:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a60      	ldr	r2, [pc, #384]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6213      	str	r3, [r2, #32]
 800132c:	4b5e      	ldr	r3, [pc, #376]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4a5d      	ldr	r2, [pc, #372]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6213      	str	r3, [r2, #32]
 8001338:	e00b      	b.n	8001352 <HAL_RCC_OscConfig+0x36e>
 800133a:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a5a      	ldr	r2, [pc, #360]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d015      	beq.n	8001386 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb7d 	bl	8000a58 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001360:	e00a      	b.n	8001378 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff fb79 	bl	8000a58 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e0b1      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	4b4b      	ldr	r3, [pc, #300]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0ee      	beq.n	8001362 <HAL_RCC_OscConfig+0x37e>
 8001384:	e014      	b.n	80013b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fb67 	bl	8000a58 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fb63 	bl	8000a58 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	; 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e09b      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a4:	4b40      	ldr	r3, [pc, #256]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ee      	bne.n	800138e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d105      	bne.n	80013c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b6:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a3b      	ldr	r2, [pc, #236]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8087 	beq.w	80014da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013cc:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d061      	beq.n	800149c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d146      	bne.n	800146e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_RCC_OscConfig+0x4cc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fb37 	bl	8000a58 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ee:	f7ff fb33 	bl	8000a58 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e06d      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f0      	bne.n	80013ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d108      	bne.n	8001428 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4921      	ldr	r1, [pc, #132]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a19      	ldr	r1, [r3, #32]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	430b      	orrs	r3, r1
 800143a:	491b      	ldr	r1, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x4cc>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fb07 	bl	8000a58 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fb03 	bl	8000a58 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e03d      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x46a>
 800146c:	e035      	b.n	80014da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_RCC_OscConfig+0x4cc>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff faf0 	bl	8000a58 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff faec 	bl	8000a58 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e026      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x498>
 800149a:	e01e      	b.n	80014da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e019      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40007000 	.word	0x40007000
 80014b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_OscConfig+0x500>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0d0      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d910      	bls.n	800152c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 0207 	bic.w	r2, r3, #7
 8001512:	4965      	ldr	r1, [pc, #404]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0b8      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001544:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800154e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001566:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	494d      	ldr	r1, [pc, #308]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d040      	beq.n	8001608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d115      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07f      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e073      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06b      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f023 0203 	bic.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4936      	ldr	r1, [pc, #216]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d8:	f7ff fa3e 	bl	8000a58 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff fa3a 	bl	8000a58 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e053      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 020c 	and.w	r2, r3, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d1eb      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d210      	bcs.n	8001638 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 0207 	bic.w	r2, r3, #7
 800161e:	4922      	ldr	r1, [pc, #136]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e032      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4916      	ldr	r1, [pc, #88]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	490e      	ldr	r1, [pc, #56]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001676:	f000 f821 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 800167a:	4602      	mov	r2, r0
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	490a      	ldr	r1, [pc, #40]	; (80016b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	5ccb      	ldrb	r3, [r1, r3]
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f99c 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	08001844 	.word	0x08001844
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	b490      	push	{r4, r7}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <HAL_RCC_GetSysClockFreq+0xac>)
 80016c4:	1d3c      	adds	r4, r7, #4
 80016c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016cc:	f240 2301 	movw	r3, #513	; 0x201
 80016d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_GetSysClockFreq+0xb0>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x40>
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x46>
 80016fa:	e02b      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016fe:	623b      	str	r3, [r7, #32]
      break;
 8001700:	e02b      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3328      	adds	r3, #40	; 0x28
 800170c:	443b      	add	r3, r7
 800170e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001712:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d012      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	0c5b      	lsrs	r3, r3, #17
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	3328      	adds	r3, #40	; 0x28
 800172a:	443b      	add	r3, r7
 800172c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001730:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001736:	fb03 f202 	mul.w	r2, r3, r2
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
 8001742:	e004      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	623b      	str	r3, [r7, #32]
      break;
 8001752:	e002      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001756:	623b      	str	r3, [r7, #32]
      break;
 8001758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800175a:	6a3b      	ldr	r3, [r7, #32]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3728      	adds	r7, #40	; 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bc90      	pop	{r4, r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	08001834 	.word	0x08001834
 800176c:	40021000 	.word	0x40021000
 8001770:	007a1200 	.word	0x007a1200
 8001774:	003d0900 	.word	0x003d0900

08001778 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <RCC_Delay+0x34>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <RCC_Delay+0x38>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0a5b      	lsrs	r3, r3, #9
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001794:	bf00      	nop
  }
  while (Delay --);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	60fa      	str	r2, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f9      	bne.n	8001794 <RCC_Delay+0x1c>
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	20000000 	.word	0x20000000
 80017b0:	10624dd3 	.word	0x10624dd3

080017b4 <__libc_init_array>:
 80017b4:	b570      	push	{r4, r5, r6, lr}
 80017b6:	2600      	movs	r6, #0
 80017b8:	4d0c      	ldr	r5, [pc, #48]	; (80017ec <__libc_init_array+0x38>)
 80017ba:	4c0d      	ldr	r4, [pc, #52]	; (80017f0 <__libc_init_array+0x3c>)
 80017bc:	1b64      	subs	r4, r4, r5
 80017be:	10a4      	asrs	r4, r4, #2
 80017c0:	42a6      	cmp	r6, r4
 80017c2:	d109      	bne.n	80017d8 <__libc_init_array+0x24>
 80017c4:	f000 f822 	bl	800180c <_init>
 80017c8:	2600      	movs	r6, #0
 80017ca:	4d0a      	ldr	r5, [pc, #40]	; (80017f4 <__libc_init_array+0x40>)
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <__libc_init_array+0x44>)
 80017ce:	1b64      	subs	r4, r4, r5
 80017d0:	10a4      	asrs	r4, r4, #2
 80017d2:	42a6      	cmp	r6, r4
 80017d4:	d105      	bne.n	80017e2 <__libc_init_array+0x2e>
 80017d6:	bd70      	pop	{r4, r5, r6, pc}
 80017d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017dc:	4798      	blx	r3
 80017de:	3601      	adds	r6, #1
 80017e0:	e7ee      	b.n	80017c0 <__libc_init_array+0xc>
 80017e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80017e6:	4798      	blx	r3
 80017e8:	3601      	adds	r6, #1
 80017ea:	e7f2      	b.n	80017d2 <__libc_init_array+0x1e>
 80017ec:	08001854 	.word	0x08001854
 80017f0:	08001854 	.word	0x08001854
 80017f4:	08001854 	.word	0x08001854
 80017f8:	08001858 	.word	0x08001858

080017fc <memset>:
 80017fc:	4603      	mov	r3, r0
 80017fe:	4402      	add	r2, r0
 8001800:	4293      	cmp	r3, r2
 8001802:	d100      	bne.n	8001806 <memset+0xa>
 8001804:	4770      	bx	lr
 8001806:	f803 1b01 	strb.w	r1, [r3], #1
 800180a:	e7f9      	b.n	8001800 <memset+0x4>

0800180c <_init>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	bf00      	nop
 8001810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001812:	bc08      	pop	{r3}
 8001814:	469e      	mov	lr, r3
 8001816:	4770      	bx	lr

08001818 <_fini>:
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	bf00      	nop
 800181c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181e:	bc08      	pop	{r3}
 8001820:	469e      	mov	lr, r3
 8001822:	4770      	bx	lr
