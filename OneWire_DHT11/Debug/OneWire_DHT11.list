
OneWire_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08007300  08007300  00017300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077dc  080077dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080077dc  080077dc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077dc  080077dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080077e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  200001e0  080079c4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080079c4  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008480  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001813  00000000  00000000  00028689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  00029ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180fa  00000000  00000000  0002b268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a93e  00000000  00000000  00043362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089547  00000000  00000000  0004dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d71e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  000d7238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080072e4 	.word	0x080072e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080072e4 	.word	0x080072e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <lcd_init>:
#include "lcd_text.h"

/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

	HAL_Delay(30);
 8000bdc:	201e      	movs	r0, #30
 8000bde:	f000 fdc7 	bl	8001770 <HAL_Delay>

	PIN_LOW(D4_PORT,D4_PIN);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	481a      	ldr	r0, [pc, #104]	; (8000c50 <lcd_init+0x78>)
 8000be8:	f001 f865 	bl	8001cb6 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	4817      	ldr	r0, [pc, #92]	; (8000c50 <lcd_init+0x78>)
 8000bf2:	f001 f860 	bl	8001cb6 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfc:	4814      	ldr	r0, [pc, #80]	; (8000c50 <lcd_init+0x78>)
 8000bfe:	f001 f85a 	bl	8001cb6 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <lcd_init+0x78>)
 8000c0a:	f001 f854 	bl	8001cb6 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2110      	movs	r1, #16
 8000c12:	480f      	ldr	r0, [pc, #60]	; (8000c50 <lcd_init+0x78>)
 8000c14:	f001 f84f 	bl	8001cb6 <HAL_GPIO_WritePin>

	PIN_HIGH(EN_PORT,EN_PIN);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <lcd_init+0x78>)
 8000c1e:	f001 f84a 	bl	8001cb6 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2120      	movs	r1, #32
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <lcd_init+0x78>)
 8000c28:	f001 f845 	bl	8001cb6 <HAL_GPIO_WritePin>

	lcd_write(0,0x28);
 8000c2c:	2128      	movs	r1, #40	; 0x28
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f810 	bl	8000c54 <lcd_write>
	lcd_write(0,0x0c);
 8000c34:	210c      	movs	r1, #12
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f80c 	bl	8000c54 <lcd_write>
	lcd_write(0,0x06);
 8000c3c:	2106      	movs	r1, #6
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f808 	bl	8000c54 <lcd_write>
	lcd_write(0,0x01);
 8000c44:	2101      	movs	r1, #1
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f804 	bl	8000c54 <lcd_write>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	4613      	mov	r3, r2
 8000c62:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f000 fd83 	bl	8001770 <HAL_Delay>
	if(type)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <lcd_write+0x28>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2110      	movs	r1, #16
 8000c74:	4853      	ldr	r0, [pc, #332]	; (8000dc4 <lcd_write+0x170>)
 8000c76:	f001 f81e 	bl	8001cb6 <HAL_GPIO_WritePin>
 8000c7a:	e004      	b.n	8000c86 <lcd_write+0x32>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4850      	ldr	r0, [pc, #320]	; (8000dc4 <lcd_write+0x170>)
 8000c82:	f001 f818 	bl	8001cb6 <HAL_GPIO_WritePin>
	}

	//Send High Nibble
	if(data&0x80)
 8000c86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	da06      	bge.n	8000c9c <lcd_write+0x48>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c94:	484b      	ldr	r0, [pc, #300]	; (8000dc4 <lcd_write+0x170>)
 8000c96:	f001 f80e 	bl	8001cb6 <HAL_GPIO_WritePin>
 8000c9a:	e005      	b.n	8000ca8 <lcd_write+0x54>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca2:	4848      	ldr	r0, [pc, #288]	; (8000dc4 <lcd_write+0x170>)
 8000ca4:	f001 f807 	bl	8001cb6 <HAL_GPIO_WritePin>
	}

	if(data&0x40)
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <lcd_write+0x6c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb8:	4842      	ldr	r0, [pc, #264]	; (8000dc4 <lcd_write+0x170>)
 8000cba:	f000 fffc 	bl	8001cb6 <HAL_GPIO_WritePin>
 8000cbe:	e005      	b.n	8000ccc <lcd_write+0x78>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc6:	483f      	ldr	r0, [pc, #252]	; (8000dc4 <lcd_write+0x170>)
 8000cc8:	f000 fff5 	bl	8001cb6 <HAL_GPIO_WritePin>
	}

	if(data&0x20)
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d005      	beq.n	8000ce2 <lcd_write+0x8e>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	483a      	ldr	r0, [pc, #232]	; (8000dc4 <lcd_write+0x170>)
 8000cdc:	f000 ffeb 	bl	8001cb6 <HAL_GPIO_WritePin>
 8000ce0:	e004      	b.n	8000cec <lcd_write+0x98>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	4837      	ldr	r0, [pc, #220]	; (8000dc4 <lcd_write+0x170>)
 8000ce8:	f000 ffe5 	bl	8001cb6 <HAL_GPIO_WritePin>
	}

	if(data&0x10)
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <lcd_write+0xae>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	4832      	ldr	r0, [pc, #200]	; (8000dc4 <lcd_write+0x170>)
 8000cfc:	f000 ffdb 	bl	8001cb6 <HAL_GPIO_WritePin>
 8000d00:	e004      	b.n	8000d0c <lcd_write+0xb8>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	482f      	ldr	r0, [pc, #188]	; (8000dc4 <lcd_write+0x170>)
 8000d08:	f000 ffd5 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2120      	movs	r1, #32
 8000d10:	482c      	ldr	r0, [pc, #176]	; (8000dc4 <lcd_write+0x170>)
 8000d12:	f000 ffd0 	bl	8001cb6 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2120      	movs	r1, #32
 8000d1a:	482a      	ldr	r0, [pc, #168]	; (8000dc4 <lcd_write+0x170>)
 8000d1c:	f000 ffcb 	bl	8001cb6 <HAL_GPIO_WritePin>


	//Send Low Nibble
	if(data&0x08)
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d006      	beq.n	8000d38 <lcd_write+0xe4>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d30:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <lcd_write+0x170>)
 8000d32:	f000 ffc0 	bl	8001cb6 <HAL_GPIO_WritePin>
 8000d36:	e005      	b.n	8000d44 <lcd_write+0xf0>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3e:	4821      	ldr	r0, [pc, #132]	; (8000dc4 <lcd_write+0x170>)
 8000d40:	f000 ffb9 	bl	8001cb6 <HAL_GPIO_WritePin>
	}

	if(data&0x04)
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <lcd_write+0x108>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	481b      	ldr	r0, [pc, #108]	; (8000dc4 <lcd_write+0x170>)
 8000d56:	f000 ffae 	bl	8001cb6 <HAL_GPIO_WritePin>
 8000d5a:	e005      	b.n	8000d68 <lcd_write+0x114>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d62:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <lcd_write+0x170>)
 8000d64:	f000 ffa7 	bl	8001cb6 <HAL_GPIO_WritePin>
	}

	if(data&0x02)
 8000d68:	79bb      	ldrb	r3, [r7, #6]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <lcd_write+0x12a>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <lcd_write+0x170>)
 8000d78:	f000 ff9d 	bl	8001cb6 <HAL_GPIO_WritePin>
 8000d7c:	e004      	b.n	8000d88 <lcd_write+0x134>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	4810      	ldr	r0, [pc, #64]	; (8000dc4 <lcd_write+0x170>)
 8000d84:	f000 ff97 	bl	8001cb6 <HAL_GPIO_WritePin>
	}

	if(data&0x01)
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <lcd_write+0x14a>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <lcd_write+0x170>)
 8000d98:	f000 ff8d 	bl	8001cb6 <HAL_GPIO_WritePin>
 8000d9c:	e004      	b.n	8000da8 <lcd_write+0x154>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2140      	movs	r1, #64	; 0x40
 8000da2:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <lcd_write+0x170>)
 8000da4:	f000 ff87 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2120      	movs	r1, #32
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <lcd_write+0x170>)
 8000dae:	f000 ff82 	bl	8001cb6 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2120      	movs	r1, #32
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <lcd_write+0x170>)
 8000db8:	f000 ff7d 	bl	8001cb6 <HAL_GPIO_WritePin>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	603a      	str	r2, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d836      	bhi.n	8000e4c <lcd_puts+0x84>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <lcd_puts+0x1c>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000df5 	.word	0x08000df5
 8000de8:	08000e05 	.word	0x08000e05
 8000dec:	08000e15 	.word	0x08000e15
 8000df0:	08000e25 	.word	0x08000e25
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	3b80      	subs	r3, #128	; 0x80
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff29 	bl	8000c54 <lcd_write>
			break;
 8000e02:	e017      	b.n	8000e34 <lcd_puts+0x6c>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	3b40      	subs	r3, #64	; 0x40
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff ff21 	bl	8000c54 <lcd_write>
			break;
 8000e12:	e00f      	b.n	8000e34 <lcd_puts+0x6c>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	3b70      	subs	r3, #112	; 0x70
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff ff19 	bl	8000c54 <lcd_write>
			break;
 8000e22:	e007      	b.n	8000e34 <lcd_puts+0x6c>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	3b30      	subs	r3, #48	; 0x30
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff11 	bl	8000c54 <lcd_write>
			break;
 8000e32:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif

	while(*string)
 8000e34:	e00a      	b.n	8000e4c <lcd_puts+0x84>
	{
		lcd_write(1,*string);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f993 3000 	ldrsb.w	r3, [r3]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4619      	mov	r1, r3
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff ff07 	bl	8000c54 <lcd_write>
		string++;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
	while(*string)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1ef      	bne.n	8000e36 <lcd_puts+0x6e>
	}
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <delay>:

float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void delay(uint16_t delay) {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <delay+0x2c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < delay)
 8000e72:	bf00      	nop
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <delay+0x2c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d3f9      	bcc.n	8000e74 <delay+0x14>
		;
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	200001fc 	.word	0x200001fc

08000e90 <Set_Pin_Output>:
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <Set_Pin_Output+0x60>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <Set_Pin_Output+0x60>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <Set_Pin_Output+0x60>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 fefb 	bl	8001cb6 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4619      	mov	r1, r3
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fd4d 	bl	8001980 <HAL_GPIO_Init>
}
 8000ee6:	bf00      	nop
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <Set_Pin_Input+0x54>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <Set_Pin_Input+0x54>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <Set_Pin_Input+0x54>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 fd21 	bl	8001980 <HAL_GPIO_Init>
}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <DHT11_Start>:

void DHT11_Start(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000f50:	2102      	movs	r1, #2
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <DHT11_Start+0x3c>)
 8000f54:	f7ff ff9c 	bl	8000e90 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	480a      	ldr	r0, [pc, #40]	; (8000f88 <DHT11_Start+0x3c>)
 8000f5e:	f000 feaa 	bl	8001cb6 <HAL_GPIO_WritePin>
	delay(18000);   // wait for 18ms
 8000f62:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f66:	f7ff ff7b 	bl	8000e60 <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <DHT11_Start+0x3c>)
 8000f70:	f000 fea1 	bl	8001cb6 <HAL_GPIO_WritePin>
	delay(20);   // wait for 20us
 8000f74:	2014      	movs	r0, #20
 8000f76:	f7ff ff73 	bl	8000e60 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DHT11_Start+0x3c>)
 8000f7e:	f7ff ffb9 	bl	8000ef4 <Set_Pin_Input>
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40010800 	.word	0x40010800

08000f8c <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	71fb      	strb	r3, [r7, #7]
	delay(40);
 8000f96:	2028      	movs	r0, #40	; 0x28
 8000f98:	f7ff ff62 	bl	8000e60 <delay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <DHT11_Check_Response+0x58>)
 8000fa0:	f000 fe72 	bl	8001c88 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10e      	bne.n	8000fc8 <DHT11_Check_Response+0x3c>
		delay(80);
 8000faa:	2050      	movs	r0, #80	; 0x50
 8000fac:	f7ff ff58 	bl	8000e60 <delay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <DHT11_Check_Response+0x58>)
 8000fb4:	f000 fe68 	bl	8001c88 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <DHT11_Check_Response+0x38>
			Response = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	e001      	b.n	8000fc8 <DHT11_Check_Response+0x3c>
		} else {
			Response = -1;
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	71fb      	strb	r3, [r7, #7]
		} // 255
	}
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000fc8:	bf00      	nop
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <DHT11_Check_Response+0x58>)
 8000fce:	f000 fe5b 	bl	8001c88 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f8      	bne.n	8000fca <DHT11_Check_Response+0x3e>
		;   // wait for the pin to go low

	return Response;
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010800 	.word	0x40010800

08000fe8 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71bb      	strb	r3, [r7, #6]
 8000ff2:	e037      	b.n	8001064 <DHT11_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000ff4:	bf00      	nop
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	481e      	ldr	r0, [pc, #120]	; (8001074 <DHT11_Read+0x8c>)
 8000ffa:	f000 fe45 	bl	8001c88 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f8      	beq.n	8000ff6 <DHT11_Read+0xe>
			;   // wait for the pin to go high
		delay(40);   // wait for 40 us
 8001004:	2028      	movs	r0, #40	; 0x28
 8001006:	f7ff ff2b 	bl	8000e60 <delay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800100a:	2102      	movs	r1, #2
 800100c:	4819      	ldr	r0, [pc, #100]	; (8001074 <DHT11_Read+0x8c>)
 800100e:	f000 fe3b 	bl	8001c88 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10e      	bne.n	8001036 <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2201      	movs	r2, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	b25b      	sxtb	r3, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	b25a      	sxtb	r2, r3
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	4013      	ands	r3, r2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	e00b      	b.n	800104e <DHT11_Read+0x66>
		} else {
			i |= (1 << (7 - j));
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	f1c3 0307 	rsb	r3, r3, #7
 800103c:	2201      	movs	r2, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	b25a      	sxtb	r2, r3
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4313      	orrs	r3, r2
 800104a:	b25b      	sxtb	r3, r3
 800104c:	71fb      	strb	r3, [r7, #7]
		}  // if the pin is high, write 1
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 800104e:	bf00      	nop
 8001050:	2102      	movs	r1, #2
 8001052:	4808      	ldr	r0, [pc, #32]	; (8001074 <DHT11_Read+0x8c>)
 8001054:	f000 fe18 	bl	8001c88 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f8      	bne.n	8001050 <DHT11_Read+0x68>
	for (j = 0; j < 8; j++) {
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	3301      	adds	r3, #1
 8001062:	71bb      	strb	r3, [r7, #6]
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	2b07      	cmp	r3, #7
 8001068:	d9c4      	bls.n	8000ff4 <DHT11_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40010800 	.word	0x40010800

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f000 fb15 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f8cd 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f000 f95d 	bl	8001344 <MX_GPIO_Init>
  MX_TIM2_Init();
 800108a:	f000 f90f 	bl	80012ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 800108e:	f7ff fda3 	bl	8000bd8 <lcd_init>
	HAL_TIM_Base_Start(&htim2);
 8001092:	4855      	ldr	r0, [pc, #340]	; (80011e8 <main+0x170>)
 8001094:	f001 fa60 	bl	8002558 <HAL_TIM_Base_Start>
	char Humi[16] = { 0 };
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
	char Temp[16] = { 0 };
 80010a8:	2300      	movs	r3, #0
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		DHT11_Start();
 80010b6:	f7ff ff49 	bl	8000f4c <DHT11_Start>
		Presence = DHT11_Check_Response();
 80010ba:	f7ff ff67 	bl	8000f8c <DHT11_Check_Response>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <main+0x174>)
 80010c4:	701a      	strb	r2, [r3, #0]
		Rh_byte1 = DHT11_Read();
 80010c6:	f7ff ff8f 	bl	8000fe8 <DHT11_Read>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <main+0x178>)
 80010d0:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT11_Read();
 80010d2:	f7ff ff89 	bl	8000fe8 <DHT11_Read>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <main+0x17c>)
 80010dc:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT11_Read();
 80010de:	f7ff ff83 	bl	8000fe8 <DHT11_Read>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <main+0x180>)
 80010e8:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT11_Read();
 80010ea:	f7ff ff7d 	bl	8000fe8 <DHT11_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <main+0x184>)
 80010f4:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read();
 80010f6:	f7ff ff77 	bl	8000fe8 <DHT11_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b40      	ldr	r3, [pc, #256]	; (8001200 <main+0x188>)
 8001100:	801a      	strh	r2, [r3, #0]
		TEMP = Temp_byte1;
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <main+0x180>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <main+0x18c>)
 800110a:	801a      	strh	r2, [r3, #0]
		RH = Rh_byte1;
 800110c:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <main+0x178>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <main+0x190>)
 8001114:	801a      	strh	r2, [r3, #0]
		Temperature = (float) (TEMP + (Temp_byte2 / 10.0));
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <main+0x18c>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f972 	bl	8000404 <__aeabi_i2d>
 8001120:	4604      	mov	r4, r0
 8001122:	460d      	mov	r5, r1
 8001124:	4b35      	ldr	r3, [pc, #212]	; (80011fc <main+0x184>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f96b 	bl	8000404 <__aeabi_i2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <main+0x194>)
 8001134:	f7ff fafa 	bl	800072c <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff f814 	bl	800016c <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fcbc 	bl	8000ac8 <__aeabi_d2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <main+0x198>)
 8001154:	6013      	str	r3, [r2, #0]
		Humidity = (float) (RH + (Rh_byte2 / 10.0));
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <main+0x190>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f952 	bl	8000404 <__aeabi_i2d>
 8001160:	4604      	mov	r4, r0
 8001162:	460d      	mov	r5, r1
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <main+0x17c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f94b 	bl	8000404 <__aeabi_i2d>
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <main+0x194>)
 8001174:	f7ff fada 	bl	800072c <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7fe fff4 	bl	800016c <__adddf3>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fc9c 	bl	8000ac8 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
 8001192:	4a20      	ldr	r2, [pc, #128]	; (8001214 <main+0x19c>)
 8001194:	6013      	str	r3, [r2, #0]
		sprintf(Humi, "Humi: %.2f", Humidity);
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <main+0x19c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f944 	bl	8000428 <__aeabi_f2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	f107 0010 	add.w	r0, r7, #16
 80011a8:	491b      	ldr	r1, [pc, #108]	; (8001218 <main+0x1a0>)
 80011aa:	f002 fadd 	bl	8003768 <siprintf>
		sprintf(Temp, "Temp: %.2f", Temperature);
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <main+0x198>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f938 	bl	8000428 <__aeabi_f2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4638      	mov	r0, r7
 80011be:	4917      	ldr	r1, [pc, #92]	; (800121c <main+0x1a4>)
 80011c0:	f002 fad2 	bl	8003768 <siprintf>
		lcd_puts(0, 0, (int8_t*) Humi);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	461a      	mov	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fdfb 	bl	8000dc8 <lcd_puts>
		lcd_puts(1, 0, (int8_t*) Temp);
 80011d2:	463b      	mov	r3, r7
 80011d4:	461a      	mov	r2, r3
 80011d6:	2100      	movs	r1, #0
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff fdf5 	bl	8000dc8 <lcd_puts>
		HAL_Delay(3000);
 80011de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011e2:	f000 fac5 	bl	8001770 <HAL_Delay>
  {
 80011e6:	e766      	b.n	80010b6 <main+0x3e>
 80011e8:	200001fc 	.word	0x200001fc
 80011ec:	20000258 	.word	0x20000258
 80011f0:	20000244 	.word	0x20000244
 80011f4:	20000245 	.word	0x20000245
 80011f8:	20000246 	.word	0x20000246
 80011fc:	20000247 	.word	0x20000247
 8001200:	20000248 	.word	0x20000248
 8001204:	2000024c 	.word	0x2000024c
 8001208:	2000024a 	.word	0x2000024a
 800120c:	40240000 	.word	0x40240000
 8001210:	20000250 	.word	0x20000250
 8001214:	20000254 	.word	0x20000254
 8001218:	08007300 	.word	0x08007300
 800121c:	0800730c 	.word	0x0800730c

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b090      	sub	sp, #64	; 0x40
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	2228      	movs	r2, #40	; 0x28
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fc20 	bl	8002a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001242:	2301      	movs	r3, #1
 8001244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001250:	2301      	movs	r3, #1
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001254:	2302      	movs	r3, #2
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 800125e:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fd3d 	bl	8001ce8 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001274:	f000 f8b2 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2102      	movs	r1, #2
 8001292:	4618      	mov	r0, r3
 8001294:	f000 ffaa 	bl	80021ec <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800129e:	f000 f89d 	bl	80013dc <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3740      	adds	r7, #64	; 0x40
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c0:	463b      	mov	r3, r7
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_TIM2_Init+0x94>)
 80012ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 56-1;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_TIM2_Init+0x94>)
 80012d2:	2237      	movs	r2, #55	; 0x37
 80012d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_TIM2_Init+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_TIM2_Init+0x94>)
 80012de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_TIM2_Init+0x94>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_TIM2_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <MX_TIM2_Init+0x94>)
 80012f2:	f001 f8e1 	bl	80024b8 <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012fc:	f000 f86e 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	4619      	mov	r1, r3
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <MX_TIM2_Init+0x94>)
 800130e:	f001 f96d 	bl	80025ec <HAL_TIM_ConfigClockSource>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001318:	f000 f860 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_TIM2_Init+0x94>)
 800132a:	f001 fb1b 	bl	8002964 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001334:	f000 f852 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001fc 	.word	0x200001fc

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_GPIO_Init+0x90>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <MX_GPIO_Init+0x90>)
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_GPIO_Init+0x90>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_GPIO_Init+0x90>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <MX_GPIO_Init+0x90>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_GPIO_Init+0x90>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_GPIO_Init+0x90>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <MX_GPIO_Init+0x90>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_GPIO_Init+0x90>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_GPIO_Init+0x94>)
 80013a8:	f000 fc85 	bl	8001cb6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80013ac:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80013b0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4619      	mov	r1, r3
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_GPIO_Init+0x94>)
 80013c6:	f000 fadb 	bl	8001980 <HAL_GPIO_Init>

}
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010c00 	.word	0x40010c00

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_MspInit+0x5c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_MspInit+0x5c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6193      	str	r3, [r2, #24]
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_MspInit+0x5c>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_MspInit+0x5c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_MspInit+0x5c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_MspInit+0x5c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_MspInit+0x60>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_MspInit+0x60>)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000

0800144c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145c:	d10b      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_TIM_Base_MspInit+0x34>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_TIM_Base_MspInit+0x34>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_TIM_Base_MspInit+0x34>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ca:	f000 f935 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
	return 1;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <_kill>:

int _kill(int pid, int sig)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ea:	f001 fa99 	bl	8002a20 <__errno>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2216      	movs	r2, #22
 80014f2:	601a      	str	r2, [r3, #0]
	return -1;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_exit>:

void _exit (int status)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ffe7 	bl	80014e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001512:	e7fe      	b.n	8001512 <_exit+0x12>

08001514 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e00a      	b.n	800153c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4601      	mov	r1, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf0      	blt.n	8001526 <_read+0x12>
	}

return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e009      	b.n	8001574 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf1      	blt.n	8001560 <_write+0x12>
	}
	return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_close>:

int _close(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	return -1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ac:	605a      	str	r2, [r3, #4]
	return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <_isatty>:

int _isatty(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	return 1;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
	return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
	...

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f001 fa02 	bl	8002a20 <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20005000 	.word	0x20005000
 8001648:	00000400 	.word	0x00000400
 800164c:	2000025c 	.word	0x2000025c
 8001650:	20000278 	.word	0x20000278

08001654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001662:	490d      	ldr	r1, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001678:	4c0a      	ldr	r4, [pc, #40]	; (80016a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001686:	f7ff ffe5 	bl	8001654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f001 f9cf 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168e:	f7ff fcf3 	bl	8001078 <main>
  bx lr
 8001692:	4770      	bx	lr
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800169c:	080077e4 	.word	0x080077e4
  ldr r2, =_sbss
 80016a0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80016a4:	20000274 	.word	0x20000274

080016a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC1_2_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_Init+0x28>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_Init+0x28>)
 80016b6:	f043 0310 	orr.w	r3, r3, #16
 80016ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f92b 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	200f      	movs	r0, #15
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff fe8e 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f935 	bl	8001966 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f90b 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000000 	.word	0x20000000
 8001730:	20000008 	.word	0x20000008
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <HAL_IncTick+0x20>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000008 	.word	0x20000008
 8001758:	20000260 	.word	0x20000260

0800175c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000260 	.word	0x20000260

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fff0 	bl	800175c <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffe0 	bl	800175c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff90 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff49 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff5e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff90 	bl	8001870 <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5f 	bl	800181c <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffb0 	bl	80018d4 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b08b      	sub	sp, #44	; 0x2c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e169      	b.n	8001c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001994:	2201      	movs	r2, #1
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8158 	bne.w	8001c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a9a      	ldr	r2, [pc, #616]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019bc:	4a98      	ldr	r2, [pc, #608]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d875      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019c2:	4a98      	ldr	r2, [pc, #608]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d058      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019c8:	4a96      	ldr	r2, [pc, #600]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d86f      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019ce:	4a96      	ldr	r2, [pc, #600]	; (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d052      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019d4:	4a94      	ldr	r2, [pc, #592]	; (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d869      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019da:	4a94      	ldr	r2, [pc, #592]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04c      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019e0:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d863      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019e6:	4a92      	ldr	r2, [pc, #584]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d046      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019ec:	4a90      	ldr	r2, [pc, #576]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d85d      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d82a      	bhi.n	8001a4c <HAL_GPIO_Init+0xcc>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d859      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_GPIO_Init+0x80>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a55 	.word	0x08001a55
 8001a08:	08001a67 	.word	0x08001a67
 8001a0c:	08001aa9 	.word	0x08001aa9
 8001a10:	08001aaf 	.word	0x08001aaf
 8001a14:	08001aaf 	.word	0x08001aaf
 8001a18:	08001aaf 	.word	0x08001aaf
 8001a1c:	08001aaf 	.word	0x08001aaf
 8001a20:	08001aaf 	.word	0x08001aaf
 8001a24:	08001aaf 	.word	0x08001aaf
 8001a28:	08001aaf 	.word	0x08001aaf
 8001a2c:	08001aaf 	.word	0x08001aaf
 8001a30:	08001aaf 	.word	0x08001aaf
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001aaf 	.word	0x08001aaf
 8001a3c:	08001aaf 	.word	0x08001aaf
 8001a40:	08001aaf 	.word	0x08001aaf
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	4a79      	ldr	r2, [pc, #484]	; (8001c34 <HAL_GPIO_Init+0x2b4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a52:	e02c      	b.n	8001aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e029      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	3304      	adds	r3, #4
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e024      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e01f      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	330c      	adds	r3, #12
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e01a      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a82:	2304      	movs	r3, #4
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e013      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	611a      	str	r2, [r3, #16]
          break;
 8001a9a:	e009      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	615a      	str	r2, [r3, #20]
          break;
 8001aa6:	e003      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          break;
 8001aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d801      	bhi.n	8001aba <HAL_GPIO_Init+0x13a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_Init+0x13e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d802      	bhi.n	8001acc <HAL_GPIO_Init+0x14c>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x152>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3b08      	subs	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	210f      	movs	r1, #15
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80b1 	beq.w	8001c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a4c      	ldr	r2, [pc, #304]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b18:	4a48      	ldr	r2, [pc, #288]	; (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1ec>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3f      	ldr	r2, [pc, #252]	; (8001c44 <HAL_GPIO_Init+0x2c4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1e8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3e      	ldr	r2, [pc, #248]	; (8001c48 <HAL_GPIO_Init+0x2c8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1e4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3d      	ldr	r2, [pc, #244]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1e0>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e004      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	f002 0203 	and.w	r2, r2, #3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4093      	lsls	r3, r2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b7e:	492f      	ldr	r1, [pc, #188]	; (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	492c      	ldr	r1, [pc, #176]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4928      	ldr	r1, [pc, #160]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4922      	ldr	r1, [pc, #136]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	491e      	ldr	r1, [pc, #120]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4918      	ldr	r1, [pc, #96]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4914      	ldr	r1, [pc, #80]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d021      	beq.n	8001c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
 8001c1c:	e021      	b.n	8001c62 <HAL_GPIO_Init+0x2e2>
 8001c1e:	bf00      	nop
 8001c20:	10320000 	.word	0x10320000
 8001c24:	10310000 	.word	0x10310000
 8001c28:	10220000 	.word	0x10220000
 8001c2c:	10210000 	.word	0x10210000
 8001c30:	10120000 	.word	0x10120000
 8001c34:	10110000 	.word	0x10110000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40010c00 	.word	0x40010c00
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40011400 	.word	0x40011400
 8001c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4909      	ldr	r1, [pc, #36]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f ae8e 	bne.w	8001994 <HAL_GPIO_Init+0x14>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	372c      	adds	r7, #44	; 0x2c
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e001      	b.n	8001caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	807b      	strh	r3, [r7, #2]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc6:	787b      	ldrb	r3, [r7, #1]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd2:	e003      	b.n	8001cdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	041a      	lsls	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	611a      	str	r2, [r3, #16]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e272      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8087 	beq.w	8001e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d08:	4b92      	ldr	r3, [pc, #584]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d00c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d14:	4b8f      	ldr	r3, [pc, #572]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d112      	bne.n	8001d46 <HAL_RCC_OscConfig+0x5e>
 8001d20:	4b8c      	ldr	r3, [pc, #560]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2c:	d10b      	bne.n	8001d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d06c      	beq.n	8001e14 <HAL_RCC_OscConfig+0x12c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d168      	bne.n	8001e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e24c      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x76>
 8001d50:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a7f      	ldr	r2, [pc, #508]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e02e      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x98>
 8001d66:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7a      	ldr	r2, [pc, #488]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a77      	ldr	r2, [pc, #476]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e01d      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0xbc>
 8001d8a:	4b72      	ldr	r3, [pc, #456]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a71      	ldr	r2, [pc, #452]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6e      	ldr	r2, [pc, #440]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a6a      	ldr	r2, [pc, #424]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a67      	ldr	r2, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d013      	beq.n	8001dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fcca 	bl	800175c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff fcc6 	bl	800175c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e200      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0xe4>
 8001dea:	e014      	b.n	8001e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fcb6 	bl	800175c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fcb2 	bl	800175c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e1ec      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x10c>
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d063      	beq.n	8001eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e22:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e2e:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d11c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x18c>
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d116      	bne.n	8001e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_RCC_OscConfig+0x176>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e1c0      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4939      	ldr	r1, [pc, #228]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	e03a      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fc6b 	bl	800175c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fc67 	bl	800175c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1a1      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4927      	ldr	r1, [pc, #156]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fc4a 	bl	800175c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fc46 	bl	800175c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e180      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d03a      	beq.n	8001f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d019      	beq.n	8001f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f04:	f7ff fc2a 	bl	800175c <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fc26 	bl	800175c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e160      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f000 faa6 	bl	800247c <RCC_Delay>
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7ff fc10 	bl	800175c <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3e:	e00f      	b.n	8001f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff fc0c 	bl	800175c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d908      	bls.n	8001f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e146      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	42420000 	.word	0x42420000
 8001f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b92      	ldr	r3, [pc, #584]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e9      	bne.n	8001f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a6 	beq.w	80020c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b8b      	ldr	r3, [pc, #556]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10d      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b88      	ldr	r3, [pc, #544]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a87      	ldr	r2, [pc, #540]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b85      	ldr	r3, [pc, #532]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b82      	ldr	r3, [pc, #520]	; (80021b0 <HAL_RCC_OscConfig+0x4c8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	; (80021b0 <HAL_RCC_OscConfig+0x4c8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7e      	ldr	r2, [pc, #504]	; (80021b0 <HAL_RCC_OscConfig+0x4c8>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fbcd 	bl	800175c <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7ff fbc9 	bl	800175c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e103      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x4c8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x312>
 8001fec:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a6e      	ldr	r2, [pc, #440]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	e02d      	b.n	8002056 <HAL_RCC_OscConfig+0x36e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x334>
 8002002:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a69      	ldr	r2, [pc, #420]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	4b67      	ldr	r3, [pc, #412]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a66      	ldr	r2, [pc, #408]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	e01c      	b.n	8002056 <HAL_RCC_OscConfig+0x36e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d10c      	bne.n	800203e <HAL_RCC_OscConfig+0x356>
 8002024:	4b61      	ldr	r3, [pc, #388]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a60      	ldr	r2, [pc, #384]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	4b5e      	ldr	r3, [pc, #376]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a5d      	ldr	r2, [pc, #372]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	e00b      	b.n	8002056 <HAL_RCC_OscConfig+0x36e>
 800203e:	4b5b      	ldr	r3, [pc, #364]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a5a      	ldr	r2, [pc, #360]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	4b58      	ldr	r3, [pc, #352]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d015      	beq.n	800208a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7ff fb7d 	bl	800175c <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff fb79 	bl	800175c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0b1      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	4b4b      	ldr	r3, [pc, #300]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ee      	beq.n	8002066 <HAL_RCC_OscConfig+0x37e>
 8002088:	e014      	b.n	80020b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff fb67 	bl	800175c <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff fb63 	bl	800175c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e09b      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a8:	4b40      	ldr	r3, [pc, #256]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ee      	bne.n	8002092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a3b      	ldr	r2, [pc, #236]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8087 	beq.w	80021de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d061      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d146      	bne.n	8002172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_RCC_OscConfig+0x4cc>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fb37 	bl	800175c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff fb33 	bl	800175c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e06d      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d108      	bne.n	800212c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4921      	ldr	r1, [pc, #132]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a19      	ldr	r1, [r3, #32]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	430b      	orrs	r3, r1
 800213e:	491b      	ldr	r1, [pc, #108]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff fb07 	bl	800175c <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff fb03 	bl	800175c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e03d      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x46a>
 8002170:	e035      	b.n	80021de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_RCC_OscConfig+0x4cc>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff faf0 	bl	800175c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff faec 	bl	800175c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e026      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_RCC_OscConfig+0x4c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x498>
 800219e:	e01e      	b.n	80021de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e019      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40007000 	.word	0x40007000
 80021b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_OscConfig+0x500>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000

080021ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0d0      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d910      	bls.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	4965      	ldr	r1, [pc, #404]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0b8      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800226a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	494d      	ldr	r1, [pc, #308]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d040      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d115      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e073      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e06b      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4936      	ldr	r1, [pc, #216]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7ff fa3e 	bl	800175c <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7ff fa3a 	bl	800175c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e053      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d210      	bcs.n	800233c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	4922      	ldr	r1, [pc, #136]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e032      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4916      	ldr	r1, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	490e      	ldr	r1, [pc, #56]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800237a:	f000 f821 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800237e:	4602      	mov	r2, r0
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	490a      	ldr	r1, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	5ccb      	ldrb	r3, [r1, r3]
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1d0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f99c 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40022000 	.word	0x40022000
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08007328 	.word	0x08007328
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004

080023c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b490      	push	{r4, r7}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_RCC_GetSysClockFreq+0xac>)
 80023c8:	1d3c      	adds	r4, r7, #4
 80023ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023d0:	f240 2301 	movw	r3, #513	; 0x201
 80023d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x40>
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x46>
 80023fe:	e02b      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002402:	623b      	str	r3, [r7, #32]
      break;
 8002404:	e02b      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	0c9b      	lsrs	r3, r3, #18
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3328      	adds	r3, #40	; 0x28
 8002410:	443b      	add	r3, r7
 8002412:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002416:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d012      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	0c5b      	lsrs	r3, r3, #17
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	3328      	adds	r3, #40	; 0x28
 800242e:	443b      	add	r3, r7
 8002430:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002434:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_RCC_GetSysClockFreq+0xb4>)
 800243a:	fb03 f202 	mul.w	r2, r3, r2
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	e004      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	623b      	str	r3, [r7, #32]
      break;
 8002456:	e002      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_GetSysClockFreq+0xb4>)
 800245a:	623b      	str	r3, [r7, #32]
      break;
 800245c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800245e:	6a3b      	ldr	r3, [r7, #32]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bc90      	pop	{r4, r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	08007318 	.word	0x08007318
 8002470:	40021000 	.word	0x40021000
 8002474:	007a1200 	.word	0x007a1200
 8002478:	003d0900 	.word	0x003d0900

0800247c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <RCC_Delay+0x34>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <RCC_Delay+0x38>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a5b      	lsrs	r3, r3, #9
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002498:	bf00      	nop
  }
  while (Delay --);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	60fa      	str	r2, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f9      	bne.n	8002498 <RCC_Delay+0x1c>
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000000 	.word	0x20000000
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e041      	b.n	800254e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe ffb4 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 f93c 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d001      	beq.n	8002570 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e032      	b.n	80025d6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_TIM_Base_Start+0x88>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00e      	beq.n	80025a0 <HAL_TIM_Base_Start+0x48>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258a:	d009      	beq.n	80025a0 <HAL_TIM_Base_Start+0x48>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <HAL_TIM_Base_Start+0x8c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <HAL_TIM_Base_Start+0x48>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <HAL_TIM_Base_Start+0x90>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d111      	bne.n	80025c4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d010      	beq.n	80025d4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c2:	e007      	b.n	80025d4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40000800 	.word	0x40000800

080025ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_TIM_ConfigClockSource+0x18>
 8002600:	2302      	movs	r3, #2
 8002602:	e0b3      	b.n	800276c <HAL_TIM_ConfigClockSource+0x180>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263c:	d03e      	beq.n	80026bc <HAL_TIM_ConfigClockSource+0xd0>
 800263e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002642:	f200 8087 	bhi.w	8002754 <HAL_TIM_ConfigClockSource+0x168>
 8002646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264a:	f000 8085 	beq.w	8002758 <HAL_TIM_ConfigClockSource+0x16c>
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002652:	d87f      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x168>
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d01a      	beq.n	800268e <HAL_TIM_ConfigClockSource+0xa2>
 8002658:	2b70      	cmp	r3, #112	; 0x70
 800265a:	d87b      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x168>
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d050      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x116>
 8002660:	2b60      	cmp	r3, #96	; 0x60
 8002662:	d877      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x168>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d03c      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0xf6>
 8002668:	2b50      	cmp	r3, #80	; 0x50
 800266a:	d873      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x168>
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d058      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x136>
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d86f      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x168>
 8002674:	2b30      	cmp	r3, #48	; 0x30
 8002676:	d064      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x156>
 8002678:	2b30      	cmp	r3, #48	; 0x30
 800267a:	d86b      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x168>
 800267c:	2b20      	cmp	r3, #32
 800267e:	d060      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x156>
 8002680:	2b20      	cmp	r3, #32
 8002682:	d867      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x168>
 8002684:	2b00      	cmp	r3, #0
 8002686:	d05c      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x156>
 8002688:	2b10      	cmp	r3, #16
 800268a:	d05a      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800268c:	e062      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6899      	ldr	r1, [r3, #8]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f000 f942 	bl	8002926 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	609a      	str	r2, [r3, #8]
      break;
 80026ba:	e04e      	b.n	800275a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6899      	ldr	r1, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f000 f92b 	bl	8002926 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026de:	609a      	str	r2, [r3, #8]
      break;
 80026e0:	e03b      	b.n	800275a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f8a2 	bl	8002838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2150      	movs	r1, #80	; 0x50
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f8f9 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 8002700:	e02b      	b.n	800275a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	461a      	mov	r2, r3
 8002710:	f000 f8c0 	bl	8002894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2160      	movs	r1, #96	; 0x60
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f8e9 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 8002720:	e01b      	b.n	800275a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	461a      	mov	r2, r3
 8002730:	f000 f882 	bl	8002838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2140      	movs	r1, #64	; 0x40
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f8d9 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 8002740:	e00b      	b.n	800275a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f000 f8d0 	bl	80028f2 <TIM_ITRx_SetConfig>
        break;
 8002752:	e002      	b.n	800275a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002758:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a29      	ldr	r2, [pc, #164]	; (800282c <TIM_Base_SetConfig+0xb8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00b      	beq.n	80027a4 <TIM_Base_SetConfig+0x30>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d007      	beq.n	80027a4 <TIM_Base_SetConfig+0x30>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a26      	ldr	r2, [pc, #152]	; (8002830 <TIM_Base_SetConfig+0xbc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0x30>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a25      	ldr	r2, [pc, #148]	; (8002834 <TIM_Base_SetConfig+0xc0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1c      	ldr	r2, [pc, #112]	; (800282c <TIM_Base_SetConfig+0xb8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00b      	beq.n	80027d6 <TIM_Base_SetConfig+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d007      	beq.n	80027d6 <TIM_Base_SetConfig+0x62>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a19      	ldr	r2, [pc, #100]	; (8002830 <TIM_Base_SetConfig+0xbc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <TIM_Base_SetConfig+0x62>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a18      	ldr	r2, [pc, #96]	; (8002834 <TIM_Base_SetConfig+0xc0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d108      	bne.n	80027e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a07      	ldr	r2, [pc, #28]	; (800282c <TIM_Base_SetConfig+0xb8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d103      	bne.n	800281c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	615a      	str	r2, [r3, #20]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800

08002838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0201 	bic.w	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 030a 	bic.w	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f023 0210 	bic.w	r2, r3, #16
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	031b      	lsls	r3, r3, #12
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	621a      	str	r2, [r3, #32]
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	f043 0307 	orr.w	r3, r3, #7
 8002914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002940:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	431a      	orrs	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4313      	orrs	r3, r2
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	609a      	str	r2, [r3, #8]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002978:	2302      	movs	r3, #2
 800297a:	e046      	b.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d009      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a10      	ldr	r2, [pc, #64]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10c      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800

08002a20 <__errno>:
 8002a20:	4b01      	ldr	r3, [pc, #4]	; (8002a28 <__errno+0x8>)
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	2000000c 	.word	0x2000000c

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	2600      	movs	r6, #0
 8002a30:	4d0c      	ldr	r5, [pc, #48]	; (8002a64 <__libc_init_array+0x38>)
 8002a32:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <__libc_init_array+0x3c>)
 8002a34:	1b64      	subs	r4, r4, r5
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	42a6      	cmp	r6, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	f004 fc52 	bl	80072e4 <_init>
 8002a40:	2600      	movs	r6, #0
 8002a42:	4d0a      	ldr	r5, [pc, #40]	; (8002a6c <__libc_init_array+0x40>)
 8002a44:	4c0a      	ldr	r4, [pc, #40]	; (8002a70 <__libc_init_array+0x44>)
 8002a46:	1b64      	subs	r4, r4, r5
 8002a48:	10a4      	asrs	r4, r4, #2
 8002a4a:	42a6      	cmp	r6, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a54:	4798      	blx	r3
 8002a56:	3601      	adds	r6, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5e:	4798      	blx	r3
 8002a60:	3601      	adds	r6, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	080077dc 	.word	0x080077dc
 8002a68:	080077dc 	.word	0x080077dc
 8002a6c:	080077dc 	.word	0x080077dc
 8002a70:	080077e0 	.word	0x080077e0

08002a74 <memset>:
 8002a74:	4603      	mov	r3, r0
 8002a76:	4402      	add	r2, r0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <memset+0xa>
 8002a7c:	4770      	bx	lr
 8002a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a82:	e7f9      	b.n	8002a78 <memset+0x4>

08002a84 <__cvt>:
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a8a:	461f      	mov	r7, r3
 8002a8c:	bfbb      	ittet	lt
 8002a8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002a92:	461f      	movlt	r7, r3
 8002a94:	2300      	movge	r3, #0
 8002a96:	232d      	movlt	r3, #45	; 0x2d
 8002a98:	b088      	sub	sp, #32
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002a9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002aa0:	7013      	strb	r3, [r2, #0]
 8002aa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002aa4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002aa8:	f023 0820 	bic.w	r8, r3, #32
 8002aac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ab0:	d005      	beq.n	8002abe <__cvt+0x3a>
 8002ab2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ab6:	d100      	bne.n	8002aba <__cvt+0x36>
 8002ab8:	3501      	adds	r5, #1
 8002aba:	2302      	movs	r3, #2
 8002abc:	e000      	b.n	8002ac0 <__cvt+0x3c>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	aa07      	add	r2, sp, #28
 8002ac2:	9204      	str	r2, [sp, #16]
 8002ac4:	aa06      	add	r2, sp, #24
 8002ac6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002aca:	e9cd 3500 	strd	r3, r5, [sp]
 8002ace:	4622      	mov	r2, r4
 8002ad0:	463b      	mov	r3, r7
 8002ad2:	f001 fd85 	bl	80045e0 <_dtoa_r>
 8002ad6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ada:	4606      	mov	r6, r0
 8002adc:	d102      	bne.n	8002ae4 <__cvt+0x60>
 8002ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ae0:	07db      	lsls	r3, r3, #31
 8002ae2:	d522      	bpl.n	8002b2a <__cvt+0xa6>
 8002ae4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ae8:	eb06 0905 	add.w	r9, r6, r5
 8002aec:	d110      	bne.n	8002b10 <__cvt+0x8c>
 8002aee:	7833      	ldrb	r3, [r6, #0]
 8002af0:	2b30      	cmp	r3, #48	; 0x30
 8002af2:	d10a      	bne.n	8002b0a <__cvt+0x86>
 8002af4:	2200      	movs	r2, #0
 8002af6:	2300      	movs	r3, #0
 8002af8:	4620      	mov	r0, r4
 8002afa:	4639      	mov	r1, r7
 8002afc:	f7fd ff54 	bl	80009a8 <__aeabi_dcmpeq>
 8002b00:	b918      	cbnz	r0, 8002b0a <__cvt+0x86>
 8002b02:	f1c5 0501 	rsb	r5, r5, #1
 8002b06:	f8ca 5000 	str.w	r5, [sl]
 8002b0a:	f8da 3000 	ldr.w	r3, [sl]
 8002b0e:	4499      	add	r9, r3
 8002b10:	2200      	movs	r2, #0
 8002b12:	2300      	movs	r3, #0
 8002b14:	4620      	mov	r0, r4
 8002b16:	4639      	mov	r1, r7
 8002b18:	f7fd ff46 	bl	80009a8 <__aeabi_dcmpeq>
 8002b1c:	b108      	cbz	r0, 8002b22 <__cvt+0x9e>
 8002b1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002b22:	2230      	movs	r2, #48	; 0x30
 8002b24:	9b07      	ldr	r3, [sp, #28]
 8002b26:	454b      	cmp	r3, r9
 8002b28:	d307      	bcc.n	8002b3a <__cvt+0xb6>
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	9b07      	ldr	r3, [sp, #28]
 8002b2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002b30:	1b9b      	subs	r3, r3, r6
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	b008      	add	sp, #32
 8002b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	9107      	str	r1, [sp, #28]
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e7f0      	b.n	8002b24 <__cvt+0xa0>

08002b42 <__exponent>:
 8002b42:	4603      	mov	r3, r0
 8002b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b46:	2900      	cmp	r1, #0
 8002b48:	f803 2b02 	strb.w	r2, [r3], #2
 8002b4c:	bfb6      	itet	lt
 8002b4e:	222d      	movlt	r2, #45	; 0x2d
 8002b50:	222b      	movge	r2, #43	; 0x2b
 8002b52:	4249      	neglt	r1, r1
 8002b54:	2909      	cmp	r1, #9
 8002b56:	7042      	strb	r2, [r0, #1]
 8002b58:	dd2b      	ble.n	8002bb2 <__exponent+0x70>
 8002b5a:	f10d 0407 	add.w	r4, sp, #7
 8002b5e:	46a4      	mov	ip, r4
 8002b60:	270a      	movs	r7, #10
 8002b62:	fb91 f6f7 	sdiv	r6, r1, r7
 8002b66:	460a      	mov	r2, r1
 8002b68:	46a6      	mov	lr, r4
 8002b6a:	fb07 1516 	mls	r5, r7, r6, r1
 8002b6e:	2a63      	cmp	r2, #99	; 0x63
 8002b70:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002b74:	4631      	mov	r1, r6
 8002b76:	f104 34ff 	add.w	r4, r4, #4294967295
 8002b7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002b7e:	dcf0      	bgt.n	8002b62 <__exponent+0x20>
 8002b80:	3130      	adds	r1, #48	; 0x30
 8002b82:	f1ae 0502 	sub.w	r5, lr, #2
 8002b86:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	1c44      	adds	r4, r0, #1
 8002b8e:	4561      	cmp	r1, ip
 8002b90:	d30a      	bcc.n	8002ba8 <__exponent+0x66>
 8002b92:	f10d 0209 	add.w	r2, sp, #9
 8002b96:	eba2 020e 	sub.w	r2, r2, lr
 8002b9a:	4565      	cmp	r5, ip
 8002b9c:	bf88      	it	hi
 8002b9e:	2200      	movhi	r2, #0
 8002ba0:	4413      	add	r3, r2
 8002ba2:	1a18      	subs	r0, r3, r0
 8002ba4:	b003      	add	sp, #12
 8002ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bac:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002bb0:	e7ed      	b.n	8002b8e <__exponent+0x4c>
 8002bb2:	2330      	movs	r3, #48	; 0x30
 8002bb4:	3130      	adds	r1, #48	; 0x30
 8002bb6:	7083      	strb	r3, [r0, #2]
 8002bb8:	70c1      	strb	r1, [r0, #3]
 8002bba:	1d03      	adds	r3, r0, #4
 8002bbc:	e7f1      	b.n	8002ba2 <__exponent+0x60>
	...

08002bc0 <_printf_float>:
 8002bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc4:	b091      	sub	sp, #68	; 0x44
 8002bc6:	460c      	mov	r4, r1
 8002bc8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002bcc:	4616      	mov	r6, r2
 8002bce:	461f      	mov	r7, r3
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	f002 fe59 	bl	8005888 <_localeconv_r>
 8002bd6:	6803      	ldr	r3, [r0, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	9309      	str	r3, [sp, #36]	; 0x24
 8002bdc:	f7fd fab8 	bl	8000150 <strlen>
 8002be0:	2300      	movs	r3, #0
 8002be2:	930e      	str	r3, [sp, #56]	; 0x38
 8002be4:	f8d8 3000 	ldr.w	r3, [r8]
 8002be8:	900a      	str	r0, [sp, #40]	; 0x28
 8002bea:	3307      	adds	r3, #7
 8002bec:	f023 0307 	bic.w	r3, r3, #7
 8002bf0:	f103 0208 	add.w	r2, r3, #8
 8002bf4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002bf8:	f8d4 b000 	ldr.w	fp, [r4]
 8002bfc:	f8c8 2000 	str.w	r2, [r8]
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c08:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002c0c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c12:	f04f 32ff 	mov.w	r2, #4294967295
 8002c16:	4640      	mov	r0, r8
 8002c18:	4b9c      	ldr	r3, [pc, #624]	; (8002e8c <_printf_float+0x2cc>)
 8002c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c1c:	f7fd fef6 	bl	8000a0c <__aeabi_dcmpun>
 8002c20:	bb70      	cbnz	r0, 8002c80 <_printf_float+0xc0>
 8002c22:	f04f 32ff 	mov.w	r2, #4294967295
 8002c26:	4640      	mov	r0, r8
 8002c28:	4b98      	ldr	r3, [pc, #608]	; (8002e8c <_printf_float+0x2cc>)
 8002c2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c2c:	f7fd fed0 	bl	80009d0 <__aeabi_dcmple>
 8002c30:	bb30      	cbnz	r0, 8002c80 <_printf_float+0xc0>
 8002c32:	2200      	movs	r2, #0
 8002c34:	2300      	movs	r3, #0
 8002c36:	4640      	mov	r0, r8
 8002c38:	4651      	mov	r1, sl
 8002c3a:	f7fd febf 	bl	80009bc <__aeabi_dcmplt>
 8002c3e:	b110      	cbz	r0, 8002c46 <_printf_float+0x86>
 8002c40:	232d      	movs	r3, #45	; 0x2d
 8002c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c46:	4b92      	ldr	r3, [pc, #584]	; (8002e90 <_printf_float+0x2d0>)
 8002c48:	4892      	ldr	r0, [pc, #584]	; (8002e94 <_printf_float+0x2d4>)
 8002c4a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002c4e:	bf94      	ite	ls
 8002c50:	4698      	movls	r8, r3
 8002c52:	4680      	movhi	r8, r0
 8002c54:	2303      	movs	r3, #3
 8002c56:	f04f 0a00 	mov.w	sl, #0
 8002c5a:	6123      	str	r3, [r4, #16]
 8002c5c:	f02b 0304 	bic.w	r3, fp, #4
 8002c60:	6023      	str	r3, [r4, #0]
 8002c62:	4633      	mov	r3, r6
 8002c64:	4621      	mov	r1, r4
 8002c66:	4628      	mov	r0, r5
 8002c68:	9700      	str	r7, [sp, #0]
 8002c6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c6c:	f000 f9d4 	bl	8003018 <_printf_common>
 8002c70:	3001      	adds	r0, #1
 8002c72:	f040 8090 	bne.w	8002d96 <_printf_float+0x1d6>
 8002c76:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7a:	b011      	add	sp, #68	; 0x44
 8002c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c80:	4642      	mov	r2, r8
 8002c82:	4653      	mov	r3, sl
 8002c84:	4640      	mov	r0, r8
 8002c86:	4651      	mov	r1, sl
 8002c88:	f7fd fec0 	bl	8000a0c <__aeabi_dcmpun>
 8002c8c:	b148      	cbz	r0, 8002ca2 <_printf_float+0xe2>
 8002c8e:	f1ba 0f00 	cmp.w	sl, #0
 8002c92:	bfb8      	it	lt
 8002c94:	232d      	movlt	r3, #45	; 0x2d
 8002c96:	4880      	ldr	r0, [pc, #512]	; (8002e98 <_printf_float+0x2d8>)
 8002c98:	bfb8      	it	lt
 8002c9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002c9e:	4b7f      	ldr	r3, [pc, #508]	; (8002e9c <_printf_float+0x2dc>)
 8002ca0:	e7d3      	b.n	8002c4a <_printf_float+0x8a>
 8002ca2:	6863      	ldr	r3, [r4, #4]
 8002ca4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	d142      	bne.n	8002d32 <_printf_float+0x172>
 8002cac:	2306      	movs	r3, #6
 8002cae:	6063      	str	r3, [r4, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	9206      	str	r2, [sp, #24]
 8002cb4:	aa0e      	add	r2, sp, #56	; 0x38
 8002cb6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002cba:	aa0d      	add	r2, sp, #52	; 0x34
 8002cbc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002cc0:	9203      	str	r2, [sp, #12]
 8002cc2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002cc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002cca:	6023      	str	r3, [r4, #0]
 8002ccc:	6863      	ldr	r3, [r4, #4]
 8002cce:	4642      	mov	r2, r8
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	4653      	mov	r3, sl
 8002cd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8002cd8:	f7ff fed4 	bl	8002a84 <__cvt>
 8002cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cde:	4680      	mov	r8, r0
 8002ce0:	2947      	cmp	r1, #71	; 0x47
 8002ce2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002ce4:	d108      	bne.n	8002cf8 <_printf_float+0x138>
 8002ce6:	1cc8      	adds	r0, r1, #3
 8002ce8:	db02      	blt.n	8002cf0 <_printf_float+0x130>
 8002cea:	6863      	ldr	r3, [r4, #4]
 8002cec:	4299      	cmp	r1, r3
 8002cee:	dd40      	ble.n	8002d72 <_printf_float+0x1b2>
 8002cf0:	f1a9 0902 	sub.w	r9, r9, #2
 8002cf4:	fa5f f989 	uxtb.w	r9, r9
 8002cf8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002cfc:	d81f      	bhi.n	8002d3e <_printf_float+0x17e>
 8002cfe:	464a      	mov	r2, r9
 8002d00:	3901      	subs	r1, #1
 8002d02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d06:	910d      	str	r1, [sp, #52]	; 0x34
 8002d08:	f7ff ff1b 	bl	8002b42 <__exponent>
 8002d0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d0e:	4682      	mov	sl, r0
 8002d10:	1813      	adds	r3, r2, r0
 8002d12:	2a01      	cmp	r2, #1
 8002d14:	6123      	str	r3, [r4, #16]
 8002d16:	dc02      	bgt.n	8002d1e <_printf_float+0x15e>
 8002d18:	6822      	ldr	r2, [r4, #0]
 8002d1a:	07d2      	lsls	r2, r2, #31
 8002d1c:	d501      	bpl.n	8002d22 <_printf_float+0x162>
 8002d1e:	3301      	adds	r3, #1
 8002d20:	6123      	str	r3, [r4, #16]
 8002d22:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d09b      	beq.n	8002c62 <_printf_float+0xa2>
 8002d2a:	232d      	movs	r3, #45	; 0x2d
 8002d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d30:	e797      	b.n	8002c62 <_printf_float+0xa2>
 8002d32:	2947      	cmp	r1, #71	; 0x47
 8002d34:	d1bc      	bne.n	8002cb0 <_printf_float+0xf0>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ba      	bne.n	8002cb0 <_printf_float+0xf0>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e7b7      	b.n	8002cae <_printf_float+0xee>
 8002d3e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002d42:	d118      	bne.n	8002d76 <_printf_float+0x1b6>
 8002d44:	2900      	cmp	r1, #0
 8002d46:	6863      	ldr	r3, [r4, #4]
 8002d48:	dd0b      	ble.n	8002d62 <_printf_float+0x1a2>
 8002d4a:	6121      	str	r1, [r4, #16]
 8002d4c:	b913      	cbnz	r3, 8002d54 <_printf_float+0x194>
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	07d0      	lsls	r0, r2, #31
 8002d52:	d502      	bpl.n	8002d5a <_printf_float+0x19a>
 8002d54:	3301      	adds	r3, #1
 8002d56:	440b      	add	r3, r1
 8002d58:	6123      	str	r3, [r4, #16]
 8002d5a:	f04f 0a00 	mov.w	sl, #0
 8002d5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002d60:	e7df      	b.n	8002d22 <_printf_float+0x162>
 8002d62:	b913      	cbnz	r3, 8002d6a <_printf_float+0x1aa>
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	07d2      	lsls	r2, r2, #31
 8002d68:	d501      	bpl.n	8002d6e <_printf_float+0x1ae>
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	e7f4      	b.n	8002d58 <_printf_float+0x198>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e7f2      	b.n	8002d58 <_printf_float+0x198>
 8002d72:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d78:	4299      	cmp	r1, r3
 8002d7a:	db05      	blt.n	8002d88 <_printf_float+0x1c8>
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	6121      	str	r1, [r4, #16]
 8002d80:	07d8      	lsls	r0, r3, #31
 8002d82:	d5ea      	bpl.n	8002d5a <_printf_float+0x19a>
 8002d84:	1c4b      	adds	r3, r1, #1
 8002d86:	e7e7      	b.n	8002d58 <_printf_float+0x198>
 8002d88:	2900      	cmp	r1, #0
 8002d8a:	bfcc      	ite	gt
 8002d8c:	2201      	movgt	r2, #1
 8002d8e:	f1c1 0202 	rsble	r2, r1, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	e7e0      	b.n	8002d58 <_printf_float+0x198>
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	055a      	lsls	r2, r3, #21
 8002d9a:	d407      	bmi.n	8002dac <_printf_float+0x1ec>
 8002d9c:	6923      	ldr	r3, [r4, #16]
 8002d9e:	4642      	mov	r2, r8
 8002da0:	4631      	mov	r1, r6
 8002da2:	4628      	mov	r0, r5
 8002da4:	47b8      	blx	r7
 8002da6:	3001      	adds	r0, #1
 8002da8:	d12b      	bne.n	8002e02 <_printf_float+0x242>
 8002daa:	e764      	b.n	8002c76 <_printf_float+0xb6>
 8002dac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002db0:	f240 80dd 	bls.w	8002f6e <_printf_float+0x3ae>
 8002db4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002db8:	2200      	movs	r2, #0
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f7fd fdf4 	bl	80009a8 <__aeabi_dcmpeq>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d033      	beq.n	8002e2c <_printf_float+0x26c>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	4631      	mov	r1, r6
 8002dc8:	4628      	mov	r0, r5
 8002dca:	4a35      	ldr	r2, [pc, #212]	; (8002ea0 <_printf_float+0x2e0>)
 8002dcc:	47b8      	blx	r7
 8002dce:	3001      	adds	r0, #1
 8002dd0:	f43f af51 	beq.w	8002c76 <_printf_float+0xb6>
 8002dd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	db02      	blt.n	8002de2 <_printf_float+0x222>
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	07d8      	lsls	r0, r3, #31
 8002de0:	d50f      	bpl.n	8002e02 <_printf_float+0x242>
 8002de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002de6:	4631      	mov	r1, r6
 8002de8:	4628      	mov	r0, r5
 8002dea:	47b8      	blx	r7
 8002dec:	3001      	adds	r0, #1
 8002dee:	f43f af42 	beq.w	8002c76 <_printf_float+0xb6>
 8002df2:	f04f 0800 	mov.w	r8, #0
 8002df6:	f104 091a 	add.w	r9, r4, #26
 8002dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	4543      	cmp	r3, r8
 8002e00:	dc09      	bgt.n	8002e16 <_printf_float+0x256>
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	079b      	lsls	r3, r3, #30
 8002e06:	f100 8102 	bmi.w	800300e <_printf_float+0x44e>
 8002e0a:	68e0      	ldr	r0, [r4, #12]
 8002e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e0e:	4298      	cmp	r0, r3
 8002e10:	bfb8      	it	lt
 8002e12:	4618      	movlt	r0, r3
 8002e14:	e731      	b.n	8002c7a <_printf_float+0xba>
 8002e16:	2301      	movs	r3, #1
 8002e18:	464a      	mov	r2, r9
 8002e1a:	4631      	mov	r1, r6
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	47b8      	blx	r7
 8002e20:	3001      	adds	r0, #1
 8002e22:	f43f af28 	beq.w	8002c76 <_printf_float+0xb6>
 8002e26:	f108 0801 	add.w	r8, r8, #1
 8002e2a:	e7e6      	b.n	8002dfa <_printf_float+0x23a>
 8002e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	dc38      	bgt.n	8002ea4 <_printf_float+0x2e4>
 8002e32:	2301      	movs	r3, #1
 8002e34:	4631      	mov	r1, r6
 8002e36:	4628      	mov	r0, r5
 8002e38:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <_printf_float+0x2e0>)
 8002e3a:	47b8      	blx	r7
 8002e3c:	3001      	adds	r0, #1
 8002e3e:	f43f af1a 	beq.w	8002c76 <_printf_float+0xb6>
 8002e42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e46:	4313      	orrs	r3, r2
 8002e48:	d102      	bne.n	8002e50 <_printf_float+0x290>
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	07d9      	lsls	r1, r3, #31
 8002e4e:	d5d8      	bpl.n	8002e02 <_printf_float+0x242>
 8002e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e54:	4631      	mov	r1, r6
 8002e56:	4628      	mov	r0, r5
 8002e58:	47b8      	blx	r7
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	f43f af0b 	beq.w	8002c76 <_printf_float+0xb6>
 8002e60:	f04f 0900 	mov.w	r9, #0
 8002e64:	f104 0a1a 	add.w	sl, r4, #26
 8002e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e6a:	425b      	negs	r3, r3
 8002e6c:	454b      	cmp	r3, r9
 8002e6e:	dc01      	bgt.n	8002e74 <_printf_float+0x2b4>
 8002e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e72:	e794      	b.n	8002d9e <_printf_float+0x1de>
 8002e74:	2301      	movs	r3, #1
 8002e76:	4652      	mov	r2, sl
 8002e78:	4631      	mov	r1, r6
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	47b8      	blx	r7
 8002e7e:	3001      	adds	r0, #1
 8002e80:	f43f aef9 	beq.w	8002c76 <_printf_float+0xb6>
 8002e84:	f109 0901 	add.w	r9, r9, #1
 8002e88:	e7ee      	b.n	8002e68 <_printf_float+0x2a8>
 8002e8a:	bf00      	nop
 8002e8c:	7fefffff 	.word	0x7fefffff
 8002e90:	0800733c 	.word	0x0800733c
 8002e94:	08007340 	.word	0x08007340
 8002e98:	08007348 	.word	0x08007348
 8002e9c:	08007344 	.word	0x08007344
 8002ea0:	0800734c 	.word	0x0800734c
 8002ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	bfa8      	it	ge
 8002eac:	461a      	movge	r2, r3
 8002eae:	2a00      	cmp	r2, #0
 8002eb0:	4691      	mov	r9, r2
 8002eb2:	dc37      	bgt.n	8002f24 <_printf_float+0x364>
 8002eb4:	f04f 0b00 	mov.w	fp, #0
 8002eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ebc:	f104 021a 	add.w	r2, r4, #26
 8002ec0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002ec4:	ebaa 0309 	sub.w	r3, sl, r9
 8002ec8:	455b      	cmp	r3, fp
 8002eca:	dc33      	bgt.n	8002f34 <_printf_float+0x374>
 8002ecc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	db3b      	blt.n	8002f4c <_printf_float+0x38c>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	07da      	lsls	r2, r3, #31
 8002ed8:	d438      	bmi.n	8002f4c <_printf_float+0x38c>
 8002eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002edc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002ede:	eba3 020a 	sub.w	r2, r3, sl
 8002ee2:	eba3 0901 	sub.w	r9, r3, r1
 8002ee6:	4591      	cmp	r9, r2
 8002ee8:	bfa8      	it	ge
 8002eea:	4691      	movge	r9, r2
 8002eec:	f1b9 0f00 	cmp.w	r9, #0
 8002ef0:	dc34      	bgt.n	8002f5c <_printf_float+0x39c>
 8002ef2:	f04f 0800 	mov.w	r8, #0
 8002ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002efa:	f104 0a1a 	add.w	sl, r4, #26
 8002efe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	eba3 0309 	sub.w	r3, r3, r9
 8002f08:	4543      	cmp	r3, r8
 8002f0a:	f77f af7a 	ble.w	8002e02 <_printf_float+0x242>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	4652      	mov	r2, sl
 8002f12:	4631      	mov	r1, r6
 8002f14:	4628      	mov	r0, r5
 8002f16:	47b8      	blx	r7
 8002f18:	3001      	adds	r0, #1
 8002f1a:	f43f aeac 	beq.w	8002c76 <_printf_float+0xb6>
 8002f1e:	f108 0801 	add.w	r8, r8, #1
 8002f22:	e7ec      	b.n	8002efe <_printf_float+0x33e>
 8002f24:	4613      	mov	r3, r2
 8002f26:	4631      	mov	r1, r6
 8002f28:	4642      	mov	r2, r8
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	47b8      	blx	r7
 8002f2e:	3001      	adds	r0, #1
 8002f30:	d1c0      	bne.n	8002eb4 <_printf_float+0x2f4>
 8002f32:	e6a0      	b.n	8002c76 <_printf_float+0xb6>
 8002f34:	2301      	movs	r3, #1
 8002f36:	4631      	mov	r1, r6
 8002f38:	4628      	mov	r0, r5
 8002f3a:	920b      	str	r2, [sp, #44]	; 0x2c
 8002f3c:	47b8      	blx	r7
 8002f3e:	3001      	adds	r0, #1
 8002f40:	f43f ae99 	beq.w	8002c76 <_printf_float+0xb6>
 8002f44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f46:	f10b 0b01 	add.w	fp, fp, #1
 8002f4a:	e7b9      	b.n	8002ec0 <_printf_float+0x300>
 8002f4c:	4631      	mov	r1, r6
 8002f4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f52:	4628      	mov	r0, r5
 8002f54:	47b8      	blx	r7
 8002f56:	3001      	adds	r0, #1
 8002f58:	d1bf      	bne.n	8002eda <_printf_float+0x31a>
 8002f5a:	e68c      	b.n	8002c76 <_printf_float+0xb6>
 8002f5c:	464b      	mov	r3, r9
 8002f5e:	4631      	mov	r1, r6
 8002f60:	4628      	mov	r0, r5
 8002f62:	eb08 020a 	add.w	r2, r8, sl
 8002f66:	47b8      	blx	r7
 8002f68:	3001      	adds	r0, #1
 8002f6a:	d1c2      	bne.n	8002ef2 <_printf_float+0x332>
 8002f6c:	e683      	b.n	8002c76 <_printf_float+0xb6>
 8002f6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f70:	2a01      	cmp	r2, #1
 8002f72:	dc01      	bgt.n	8002f78 <_printf_float+0x3b8>
 8002f74:	07db      	lsls	r3, r3, #31
 8002f76:	d537      	bpl.n	8002fe8 <_printf_float+0x428>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4642      	mov	r2, r8
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	4628      	mov	r0, r5
 8002f80:	47b8      	blx	r7
 8002f82:	3001      	adds	r0, #1
 8002f84:	f43f ae77 	beq.w	8002c76 <_printf_float+0xb6>
 8002f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f8c:	4631      	mov	r1, r6
 8002f8e:	4628      	mov	r0, r5
 8002f90:	47b8      	blx	r7
 8002f92:	3001      	adds	r0, #1
 8002f94:	f43f ae6f 	beq.w	8002c76 <_printf_float+0xb6>
 8002f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f7fd fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8002fa4:	b9d8      	cbnz	r0, 8002fde <_printf_float+0x41e>
 8002fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fa8:	f108 0201 	add.w	r2, r8, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	4631      	mov	r1, r6
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	47b8      	blx	r7
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d10e      	bne.n	8002fd6 <_printf_float+0x416>
 8002fb8:	e65d      	b.n	8002c76 <_printf_float+0xb6>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	464a      	mov	r2, r9
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	47b8      	blx	r7
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	f43f ae56 	beq.w	8002c76 <_printf_float+0xb6>
 8002fca:	f108 0801 	add.w	r8, r8, #1
 8002fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	4543      	cmp	r3, r8
 8002fd4:	dcf1      	bgt.n	8002fba <_printf_float+0x3fa>
 8002fd6:	4653      	mov	r3, sl
 8002fd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002fdc:	e6e0      	b.n	8002da0 <_printf_float+0x1e0>
 8002fde:	f04f 0800 	mov.w	r8, #0
 8002fe2:	f104 091a 	add.w	r9, r4, #26
 8002fe6:	e7f2      	b.n	8002fce <_printf_float+0x40e>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4642      	mov	r2, r8
 8002fec:	e7df      	b.n	8002fae <_printf_float+0x3ee>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	464a      	mov	r2, r9
 8002ff2:	4631      	mov	r1, r6
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	47b8      	blx	r7
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	f43f ae3c 	beq.w	8002c76 <_printf_float+0xb6>
 8002ffe:	f108 0801 	add.w	r8, r8, #1
 8003002:	68e3      	ldr	r3, [r4, #12]
 8003004:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003006:	1a5b      	subs	r3, r3, r1
 8003008:	4543      	cmp	r3, r8
 800300a:	dcf0      	bgt.n	8002fee <_printf_float+0x42e>
 800300c:	e6fd      	b.n	8002e0a <_printf_float+0x24a>
 800300e:	f04f 0800 	mov.w	r8, #0
 8003012:	f104 0919 	add.w	r9, r4, #25
 8003016:	e7f4      	b.n	8003002 <_printf_float+0x442>

08003018 <_printf_common>:
 8003018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800301c:	4616      	mov	r6, r2
 800301e:	4699      	mov	r9, r3
 8003020:	688a      	ldr	r2, [r1, #8]
 8003022:	690b      	ldr	r3, [r1, #16]
 8003024:	4607      	mov	r7, r0
 8003026:	4293      	cmp	r3, r2
 8003028:	bfb8      	it	lt
 800302a:	4613      	movlt	r3, r2
 800302c:	6033      	str	r3, [r6, #0]
 800302e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003032:	460c      	mov	r4, r1
 8003034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003038:	b10a      	cbz	r2, 800303e <_printf_common+0x26>
 800303a:	3301      	adds	r3, #1
 800303c:	6033      	str	r3, [r6, #0]
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	0699      	lsls	r1, r3, #26
 8003042:	bf42      	ittt	mi
 8003044:	6833      	ldrmi	r3, [r6, #0]
 8003046:	3302      	addmi	r3, #2
 8003048:	6033      	strmi	r3, [r6, #0]
 800304a:	6825      	ldr	r5, [r4, #0]
 800304c:	f015 0506 	ands.w	r5, r5, #6
 8003050:	d106      	bne.n	8003060 <_printf_common+0x48>
 8003052:	f104 0a19 	add.w	sl, r4, #25
 8003056:	68e3      	ldr	r3, [r4, #12]
 8003058:	6832      	ldr	r2, [r6, #0]
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	42ab      	cmp	r3, r5
 800305e:	dc28      	bgt.n	80030b2 <_printf_common+0x9a>
 8003060:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003064:	1e13      	subs	r3, r2, #0
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	bf18      	it	ne
 800306a:	2301      	movne	r3, #1
 800306c:	0692      	lsls	r2, r2, #26
 800306e:	d42d      	bmi.n	80030cc <_printf_common+0xb4>
 8003070:	4649      	mov	r1, r9
 8003072:	4638      	mov	r0, r7
 8003074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003078:	47c0      	blx	r8
 800307a:	3001      	adds	r0, #1
 800307c:	d020      	beq.n	80030c0 <_printf_common+0xa8>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	68e5      	ldr	r5, [r4, #12]
 8003082:	f003 0306 	and.w	r3, r3, #6
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf18      	it	ne
 800308a:	2500      	movne	r5, #0
 800308c:	6832      	ldr	r2, [r6, #0]
 800308e:	f04f 0600 	mov.w	r6, #0
 8003092:	68a3      	ldr	r3, [r4, #8]
 8003094:	bf08      	it	eq
 8003096:	1aad      	subeq	r5, r5, r2
 8003098:	6922      	ldr	r2, [r4, #16]
 800309a:	bf08      	it	eq
 800309c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030a0:	4293      	cmp	r3, r2
 80030a2:	bfc4      	itt	gt
 80030a4:	1a9b      	subgt	r3, r3, r2
 80030a6:	18ed      	addgt	r5, r5, r3
 80030a8:	341a      	adds	r4, #26
 80030aa:	42b5      	cmp	r5, r6
 80030ac:	d11a      	bne.n	80030e4 <_printf_common+0xcc>
 80030ae:	2000      	movs	r0, #0
 80030b0:	e008      	b.n	80030c4 <_printf_common+0xac>
 80030b2:	2301      	movs	r3, #1
 80030b4:	4652      	mov	r2, sl
 80030b6:	4649      	mov	r1, r9
 80030b8:	4638      	mov	r0, r7
 80030ba:	47c0      	blx	r8
 80030bc:	3001      	adds	r0, #1
 80030be:	d103      	bne.n	80030c8 <_printf_common+0xb0>
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c8:	3501      	adds	r5, #1
 80030ca:	e7c4      	b.n	8003056 <_printf_common+0x3e>
 80030cc:	2030      	movs	r0, #48	; 0x30
 80030ce:	18e1      	adds	r1, r4, r3
 80030d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030da:	4422      	add	r2, r4
 80030dc:	3302      	adds	r3, #2
 80030de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030e2:	e7c5      	b.n	8003070 <_printf_common+0x58>
 80030e4:	2301      	movs	r3, #1
 80030e6:	4622      	mov	r2, r4
 80030e8:	4649      	mov	r1, r9
 80030ea:	4638      	mov	r0, r7
 80030ec:	47c0      	blx	r8
 80030ee:	3001      	adds	r0, #1
 80030f0:	d0e6      	beq.n	80030c0 <_printf_common+0xa8>
 80030f2:	3601      	adds	r6, #1
 80030f4:	e7d9      	b.n	80030aa <_printf_common+0x92>
	...

080030f8 <_printf_i>:
 80030f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030fc:	7e0f      	ldrb	r7, [r1, #24]
 80030fe:	4691      	mov	r9, r2
 8003100:	2f78      	cmp	r7, #120	; 0x78
 8003102:	4680      	mov	r8, r0
 8003104:	460c      	mov	r4, r1
 8003106:	469a      	mov	sl, r3
 8003108:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800310a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800310e:	d807      	bhi.n	8003120 <_printf_i+0x28>
 8003110:	2f62      	cmp	r7, #98	; 0x62
 8003112:	d80a      	bhi.n	800312a <_printf_i+0x32>
 8003114:	2f00      	cmp	r7, #0
 8003116:	f000 80d9 	beq.w	80032cc <_printf_i+0x1d4>
 800311a:	2f58      	cmp	r7, #88	; 0x58
 800311c:	f000 80a4 	beq.w	8003268 <_printf_i+0x170>
 8003120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003128:	e03a      	b.n	80031a0 <_printf_i+0xa8>
 800312a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800312e:	2b15      	cmp	r3, #21
 8003130:	d8f6      	bhi.n	8003120 <_printf_i+0x28>
 8003132:	a101      	add	r1, pc, #4	; (adr r1, 8003138 <_printf_i+0x40>)
 8003134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003138:	08003191 	.word	0x08003191
 800313c:	080031a5 	.word	0x080031a5
 8003140:	08003121 	.word	0x08003121
 8003144:	08003121 	.word	0x08003121
 8003148:	08003121 	.word	0x08003121
 800314c:	08003121 	.word	0x08003121
 8003150:	080031a5 	.word	0x080031a5
 8003154:	08003121 	.word	0x08003121
 8003158:	08003121 	.word	0x08003121
 800315c:	08003121 	.word	0x08003121
 8003160:	08003121 	.word	0x08003121
 8003164:	080032b3 	.word	0x080032b3
 8003168:	080031d5 	.word	0x080031d5
 800316c:	08003295 	.word	0x08003295
 8003170:	08003121 	.word	0x08003121
 8003174:	08003121 	.word	0x08003121
 8003178:	080032d5 	.word	0x080032d5
 800317c:	08003121 	.word	0x08003121
 8003180:	080031d5 	.word	0x080031d5
 8003184:	08003121 	.word	0x08003121
 8003188:	08003121 	.word	0x08003121
 800318c:	0800329d 	.word	0x0800329d
 8003190:	682b      	ldr	r3, [r5, #0]
 8003192:	1d1a      	adds	r2, r3, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	602a      	str	r2, [r5, #0]
 8003198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800319c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0a4      	b.n	80032ee <_printf_i+0x1f6>
 80031a4:	6820      	ldr	r0, [r4, #0]
 80031a6:	6829      	ldr	r1, [r5, #0]
 80031a8:	0606      	lsls	r6, r0, #24
 80031aa:	f101 0304 	add.w	r3, r1, #4
 80031ae:	d50a      	bpl.n	80031c6 <_printf_i+0xce>
 80031b0:	680e      	ldr	r6, [r1, #0]
 80031b2:	602b      	str	r3, [r5, #0]
 80031b4:	2e00      	cmp	r6, #0
 80031b6:	da03      	bge.n	80031c0 <_printf_i+0xc8>
 80031b8:	232d      	movs	r3, #45	; 0x2d
 80031ba:	4276      	negs	r6, r6
 80031bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031c0:	230a      	movs	r3, #10
 80031c2:	485e      	ldr	r0, [pc, #376]	; (800333c <_printf_i+0x244>)
 80031c4:	e019      	b.n	80031fa <_printf_i+0x102>
 80031c6:	680e      	ldr	r6, [r1, #0]
 80031c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031cc:	602b      	str	r3, [r5, #0]
 80031ce:	bf18      	it	ne
 80031d0:	b236      	sxthne	r6, r6
 80031d2:	e7ef      	b.n	80031b4 <_printf_i+0xbc>
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	6820      	ldr	r0, [r4, #0]
 80031d8:	1d19      	adds	r1, r3, #4
 80031da:	6029      	str	r1, [r5, #0]
 80031dc:	0601      	lsls	r1, r0, #24
 80031de:	d501      	bpl.n	80031e4 <_printf_i+0xec>
 80031e0:	681e      	ldr	r6, [r3, #0]
 80031e2:	e002      	b.n	80031ea <_printf_i+0xf2>
 80031e4:	0646      	lsls	r6, r0, #25
 80031e6:	d5fb      	bpl.n	80031e0 <_printf_i+0xe8>
 80031e8:	881e      	ldrh	r6, [r3, #0]
 80031ea:	2f6f      	cmp	r7, #111	; 0x6f
 80031ec:	bf0c      	ite	eq
 80031ee:	2308      	moveq	r3, #8
 80031f0:	230a      	movne	r3, #10
 80031f2:	4852      	ldr	r0, [pc, #328]	; (800333c <_printf_i+0x244>)
 80031f4:	2100      	movs	r1, #0
 80031f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031fa:	6865      	ldr	r5, [r4, #4]
 80031fc:	2d00      	cmp	r5, #0
 80031fe:	bfa8      	it	ge
 8003200:	6821      	ldrge	r1, [r4, #0]
 8003202:	60a5      	str	r5, [r4, #8]
 8003204:	bfa4      	itt	ge
 8003206:	f021 0104 	bicge.w	r1, r1, #4
 800320a:	6021      	strge	r1, [r4, #0]
 800320c:	b90e      	cbnz	r6, 8003212 <_printf_i+0x11a>
 800320e:	2d00      	cmp	r5, #0
 8003210:	d04d      	beq.n	80032ae <_printf_i+0x1b6>
 8003212:	4615      	mov	r5, r2
 8003214:	fbb6 f1f3 	udiv	r1, r6, r3
 8003218:	fb03 6711 	mls	r7, r3, r1, r6
 800321c:	5dc7      	ldrb	r7, [r0, r7]
 800321e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003222:	4637      	mov	r7, r6
 8003224:	42bb      	cmp	r3, r7
 8003226:	460e      	mov	r6, r1
 8003228:	d9f4      	bls.n	8003214 <_printf_i+0x11c>
 800322a:	2b08      	cmp	r3, #8
 800322c:	d10b      	bne.n	8003246 <_printf_i+0x14e>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	07de      	lsls	r6, r3, #31
 8003232:	d508      	bpl.n	8003246 <_printf_i+0x14e>
 8003234:	6923      	ldr	r3, [r4, #16]
 8003236:	6861      	ldr	r1, [r4, #4]
 8003238:	4299      	cmp	r1, r3
 800323a:	bfde      	ittt	le
 800323c:	2330      	movle	r3, #48	; 0x30
 800323e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003242:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003246:	1b52      	subs	r2, r2, r5
 8003248:	6122      	str	r2, [r4, #16]
 800324a:	464b      	mov	r3, r9
 800324c:	4621      	mov	r1, r4
 800324e:	4640      	mov	r0, r8
 8003250:	f8cd a000 	str.w	sl, [sp]
 8003254:	aa03      	add	r2, sp, #12
 8003256:	f7ff fedf 	bl	8003018 <_printf_common>
 800325a:	3001      	adds	r0, #1
 800325c:	d14c      	bne.n	80032f8 <_printf_i+0x200>
 800325e:	f04f 30ff 	mov.w	r0, #4294967295
 8003262:	b004      	add	sp, #16
 8003264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003268:	4834      	ldr	r0, [pc, #208]	; (800333c <_printf_i+0x244>)
 800326a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800326e:	6829      	ldr	r1, [r5, #0]
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	f851 6b04 	ldr.w	r6, [r1], #4
 8003276:	6029      	str	r1, [r5, #0]
 8003278:	061d      	lsls	r5, r3, #24
 800327a:	d514      	bpl.n	80032a6 <_printf_i+0x1ae>
 800327c:	07df      	lsls	r7, r3, #31
 800327e:	bf44      	itt	mi
 8003280:	f043 0320 	orrmi.w	r3, r3, #32
 8003284:	6023      	strmi	r3, [r4, #0]
 8003286:	b91e      	cbnz	r6, 8003290 <_printf_i+0x198>
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	f023 0320 	bic.w	r3, r3, #32
 800328e:	6023      	str	r3, [r4, #0]
 8003290:	2310      	movs	r3, #16
 8003292:	e7af      	b.n	80031f4 <_printf_i+0xfc>
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	f043 0320 	orr.w	r3, r3, #32
 800329a:	6023      	str	r3, [r4, #0]
 800329c:	2378      	movs	r3, #120	; 0x78
 800329e:	4828      	ldr	r0, [pc, #160]	; (8003340 <_printf_i+0x248>)
 80032a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032a4:	e7e3      	b.n	800326e <_printf_i+0x176>
 80032a6:	0659      	lsls	r1, r3, #25
 80032a8:	bf48      	it	mi
 80032aa:	b2b6      	uxthmi	r6, r6
 80032ac:	e7e6      	b.n	800327c <_printf_i+0x184>
 80032ae:	4615      	mov	r5, r2
 80032b0:	e7bb      	b.n	800322a <_printf_i+0x132>
 80032b2:	682b      	ldr	r3, [r5, #0]
 80032b4:	6826      	ldr	r6, [r4, #0]
 80032b6:	1d18      	adds	r0, r3, #4
 80032b8:	6961      	ldr	r1, [r4, #20]
 80032ba:	6028      	str	r0, [r5, #0]
 80032bc:	0635      	lsls	r5, r6, #24
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	d501      	bpl.n	80032c6 <_printf_i+0x1ce>
 80032c2:	6019      	str	r1, [r3, #0]
 80032c4:	e002      	b.n	80032cc <_printf_i+0x1d4>
 80032c6:	0670      	lsls	r0, r6, #25
 80032c8:	d5fb      	bpl.n	80032c2 <_printf_i+0x1ca>
 80032ca:	8019      	strh	r1, [r3, #0]
 80032cc:	2300      	movs	r3, #0
 80032ce:	4615      	mov	r5, r2
 80032d0:	6123      	str	r3, [r4, #16]
 80032d2:	e7ba      	b.n	800324a <_printf_i+0x152>
 80032d4:	682b      	ldr	r3, [r5, #0]
 80032d6:	2100      	movs	r1, #0
 80032d8:	1d1a      	adds	r2, r3, #4
 80032da:	602a      	str	r2, [r5, #0]
 80032dc:	681d      	ldr	r5, [r3, #0]
 80032de:	6862      	ldr	r2, [r4, #4]
 80032e0:	4628      	mov	r0, r5
 80032e2:	f002 faef 	bl	80058c4 <memchr>
 80032e6:	b108      	cbz	r0, 80032ec <_printf_i+0x1f4>
 80032e8:	1b40      	subs	r0, r0, r5
 80032ea:	6060      	str	r0, [r4, #4]
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	6123      	str	r3, [r4, #16]
 80032f0:	2300      	movs	r3, #0
 80032f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032f6:	e7a8      	b.n	800324a <_printf_i+0x152>
 80032f8:	462a      	mov	r2, r5
 80032fa:	4649      	mov	r1, r9
 80032fc:	4640      	mov	r0, r8
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	47d0      	blx	sl
 8003302:	3001      	adds	r0, #1
 8003304:	d0ab      	beq.n	800325e <_printf_i+0x166>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	079b      	lsls	r3, r3, #30
 800330a:	d413      	bmi.n	8003334 <_printf_i+0x23c>
 800330c:	68e0      	ldr	r0, [r4, #12]
 800330e:	9b03      	ldr	r3, [sp, #12]
 8003310:	4298      	cmp	r0, r3
 8003312:	bfb8      	it	lt
 8003314:	4618      	movlt	r0, r3
 8003316:	e7a4      	b.n	8003262 <_printf_i+0x16a>
 8003318:	2301      	movs	r3, #1
 800331a:	4632      	mov	r2, r6
 800331c:	4649      	mov	r1, r9
 800331e:	4640      	mov	r0, r8
 8003320:	47d0      	blx	sl
 8003322:	3001      	adds	r0, #1
 8003324:	d09b      	beq.n	800325e <_printf_i+0x166>
 8003326:	3501      	adds	r5, #1
 8003328:	68e3      	ldr	r3, [r4, #12]
 800332a:	9903      	ldr	r1, [sp, #12]
 800332c:	1a5b      	subs	r3, r3, r1
 800332e:	42ab      	cmp	r3, r5
 8003330:	dcf2      	bgt.n	8003318 <_printf_i+0x220>
 8003332:	e7eb      	b.n	800330c <_printf_i+0x214>
 8003334:	2500      	movs	r5, #0
 8003336:	f104 0619 	add.w	r6, r4, #25
 800333a:	e7f5      	b.n	8003328 <_printf_i+0x230>
 800333c:	0800734e 	.word	0x0800734e
 8003340:	0800735f 	.word	0x0800735f

08003344 <_scanf_float>:
 8003344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003348:	b087      	sub	sp, #28
 800334a:	9303      	str	r3, [sp, #12]
 800334c:	688b      	ldr	r3, [r1, #8]
 800334e:	4617      	mov	r7, r2
 8003350:	1e5a      	subs	r2, r3, #1
 8003352:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003356:	bf85      	ittet	hi
 8003358:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800335c:	195b      	addhi	r3, r3, r5
 800335e:	2300      	movls	r3, #0
 8003360:	9302      	strhi	r3, [sp, #8]
 8003362:	bf88      	it	hi
 8003364:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003368:	468b      	mov	fp, r1
 800336a:	f04f 0500 	mov.w	r5, #0
 800336e:	bf8c      	ite	hi
 8003370:	608b      	strhi	r3, [r1, #8]
 8003372:	9302      	strls	r3, [sp, #8]
 8003374:	680b      	ldr	r3, [r1, #0]
 8003376:	4680      	mov	r8, r0
 8003378:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800337c:	f84b 3b1c 	str.w	r3, [fp], #28
 8003380:	460c      	mov	r4, r1
 8003382:	465e      	mov	r6, fp
 8003384:	46aa      	mov	sl, r5
 8003386:	46a9      	mov	r9, r5
 8003388:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800338c:	9501      	str	r5, [sp, #4]
 800338e:	68a2      	ldr	r2, [r4, #8]
 8003390:	b152      	cbz	r2, 80033a8 <_scanf_float+0x64>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b4e      	cmp	r3, #78	; 0x4e
 8003398:	d864      	bhi.n	8003464 <_scanf_float+0x120>
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d83c      	bhi.n	8003418 <_scanf_float+0xd4>
 800339e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80033a2:	b2c8      	uxtb	r0, r1
 80033a4:	280e      	cmp	r0, #14
 80033a6:	d93a      	bls.n	800341e <_scanf_float+0xda>
 80033a8:	f1b9 0f00 	cmp.w	r9, #0
 80033ac:	d003      	beq.n	80033b6 <_scanf_float+0x72>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	6023      	str	r3, [r4, #0]
 80033b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033ba:	f1ba 0f01 	cmp.w	sl, #1
 80033be:	f200 8113 	bhi.w	80035e8 <_scanf_float+0x2a4>
 80033c2:	455e      	cmp	r6, fp
 80033c4:	f200 8105 	bhi.w	80035d2 <_scanf_float+0x28e>
 80033c8:	2501      	movs	r5, #1
 80033ca:	4628      	mov	r0, r5
 80033cc:	b007      	add	sp, #28
 80033ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80033d6:	2a0d      	cmp	r2, #13
 80033d8:	d8e6      	bhi.n	80033a8 <_scanf_float+0x64>
 80033da:	a101      	add	r1, pc, #4	; (adr r1, 80033e0 <_scanf_float+0x9c>)
 80033dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80033e0:	0800351f 	.word	0x0800351f
 80033e4:	080033a9 	.word	0x080033a9
 80033e8:	080033a9 	.word	0x080033a9
 80033ec:	080033a9 	.word	0x080033a9
 80033f0:	0800357f 	.word	0x0800357f
 80033f4:	08003557 	.word	0x08003557
 80033f8:	080033a9 	.word	0x080033a9
 80033fc:	080033a9 	.word	0x080033a9
 8003400:	0800352d 	.word	0x0800352d
 8003404:	080033a9 	.word	0x080033a9
 8003408:	080033a9 	.word	0x080033a9
 800340c:	080033a9 	.word	0x080033a9
 8003410:	080033a9 	.word	0x080033a9
 8003414:	080034e5 	.word	0x080034e5
 8003418:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800341c:	e7db      	b.n	80033d6 <_scanf_float+0x92>
 800341e:	290e      	cmp	r1, #14
 8003420:	d8c2      	bhi.n	80033a8 <_scanf_float+0x64>
 8003422:	a001      	add	r0, pc, #4	; (adr r0, 8003428 <_scanf_float+0xe4>)
 8003424:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003428:	080034d7 	.word	0x080034d7
 800342c:	080033a9 	.word	0x080033a9
 8003430:	080034d7 	.word	0x080034d7
 8003434:	0800356b 	.word	0x0800356b
 8003438:	080033a9 	.word	0x080033a9
 800343c:	08003485 	.word	0x08003485
 8003440:	080034c1 	.word	0x080034c1
 8003444:	080034c1 	.word	0x080034c1
 8003448:	080034c1 	.word	0x080034c1
 800344c:	080034c1 	.word	0x080034c1
 8003450:	080034c1 	.word	0x080034c1
 8003454:	080034c1 	.word	0x080034c1
 8003458:	080034c1 	.word	0x080034c1
 800345c:	080034c1 	.word	0x080034c1
 8003460:	080034c1 	.word	0x080034c1
 8003464:	2b6e      	cmp	r3, #110	; 0x6e
 8003466:	d809      	bhi.n	800347c <_scanf_float+0x138>
 8003468:	2b60      	cmp	r3, #96	; 0x60
 800346a:	d8b2      	bhi.n	80033d2 <_scanf_float+0x8e>
 800346c:	2b54      	cmp	r3, #84	; 0x54
 800346e:	d077      	beq.n	8003560 <_scanf_float+0x21c>
 8003470:	2b59      	cmp	r3, #89	; 0x59
 8003472:	d199      	bne.n	80033a8 <_scanf_float+0x64>
 8003474:	2d07      	cmp	r5, #7
 8003476:	d197      	bne.n	80033a8 <_scanf_float+0x64>
 8003478:	2508      	movs	r5, #8
 800347a:	e029      	b.n	80034d0 <_scanf_float+0x18c>
 800347c:	2b74      	cmp	r3, #116	; 0x74
 800347e:	d06f      	beq.n	8003560 <_scanf_float+0x21c>
 8003480:	2b79      	cmp	r3, #121	; 0x79
 8003482:	e7f6      	b.n	8003472 <_scanf_float+0x12e>
 8003484:	6821      	ldr	r1, [r4, #0]
 8003486:	05c8      	lsls	r0, r1, #23
 8003488:	d51a      	bpl.n	80034c0 <_scanf_float+0x17c>
 800348a:	9b02      	ldr	r3, [sp, #8]
 800348c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003490:	6021      	str	r1, [r4, #0]
 8003492:	f109 0901 	add.w	r9, r9, #1
 8003496:	b11b      	cbz	r3, 80034a0 <_scanf_float+0x15c>
 8003498:	3b01      	subs	r3, #1
 800349a:	3201      	adds	r2, #1
 800349c:	9302      	str	r3, [sp, #8]
 800349e:	60a2      	str	r2, [r4, #8]
 80034a0:	68a3      	ldr	r3, [r4, #8]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	60a3      	str	r3, [r4, #8]
 80034a6:	6923      	ldr	r3, [r4, #16]
 80034a8:	3301      	adds	r3, #1
 80034aa:	6123      	str	r3, [r4, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	f340 8084 	ble.w	80035c0 <_scanf_float+0x27c>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	603b      	str	r3, [r7, #0]
 80034be:	e766      	b.n	800338e <_scanf_float+0x4a>
 80034c0:	eb1a 0f05 	cmn.w	sl, r5
 80034c4:	f47f af70 	bne.w	80033a8 <_scanf_float+0x64>
 80034c8:	6822      	ldr	r2, [r4, #0]
 80034ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80034ce:	6022      	str	r2, [r4, #0]
 80034d0:	f806 3b01 	strb.w	r3, [r6], #1
 80034d4:	e7e4      	b.n	80034a0 <_scanf_float+0x15c>
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	0610      	lsls	r0, r2, #24
 80034da:	f57f af65 	bpl.w	80033a8 <_scanf_float+0x64>
 80034de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e2:	e7f4      	b.n	80034ce <_scanf_float+0x18a>
 80034e4:	f1ba 0f00 	cmp.w	sl, #0
 80034e8:	d10e      	bne.n	8003508 <_scanf_float+0x1c4>
 80034ea:	f1b9 0f00 	cmp.w	r9, #0
 80034ee:	d10e      	bne.n	800350e <_scanf_float+0x1ca>
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80034f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80034fa:	d108      	bne.n	800350e <_scanf_float+0x1ca>
 80034fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003500:	f04f 0a01 	mov.w	sl, #1
 8003504:	6022      	str	r2, [r4, #0]
 8003506:	e7e3      	b.n	80034d0 <_scanf_float+0x18c>
 8003508:	f1ba 0f02 	cmp.w	sl, #2
 800350c:	d055      	beq.n	80035ba <_scanf_float+0x276>
 800350e:	2d01      	cmp	r5, #1
 8003510:	d002      	beq.n	8003518 <_scanf_float+0x1d4>
 8003512:	2d04      	cmp	r5, #4
 8003514:	f47f af48 	bne.w	80033a8 <_scanf_float+0x64>
 8003518:	3501      	adds	r5, #1
 800351a:	b2ed      	uxtb	r5, r5
 800351c:	e7d8      	b.n	80034d0 <_scanf_float+0x18c>
 800351e:	f1ba 0f01 	cmp.w	sl, #1
 8003522:	f47f af41 	bne.w	80033a8 <_scanf_float+0x64>
 8003526:	f04f 0a02 	mov.w	sl, #2
 800352a:	e7d1      	b.n	80034d0 <_scanf_float+0x18c>
 800352c:	b97d      	cbnz	r5, 800354e <_scanf_float+0x20a>
 800352e:	f1b9 0f00 	cmp.w	r9, #0
 8003532:	f47f af3c 	bne.w	80033ae <_scanf_float+0x6a>
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800353c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003540:	f47f af39 	bne.w	80033b6 <_scanf_float+0x72>
 8003544:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003548:	2501      	movs	r5, #1
 800354a:	6022      	str	r2, [r4, #0]
 800354c:	e7c0      	b.n	80034d0 <_scanf_float+0x18c>
 800354e:	2d03      	cmp	r5, #3
 8003550:	d0e2      	beq.n	8003518 <_scanf_float+0x1d4>
 8003552:	2d05      	cmp	r5, #5
 8003554:	e7de      	b.n	8003514 <_scanf_float+0x1d0>
 8003556:	2d02      	cmp	r5, #2
 8003558:	f47f af26 	bne.w	80033a8 <_scanf_float+0x64>
 800355c:	2503      	movs	r5, #3
 800355e:	e7b7      	b.n	80034d0 <_scanf_float+0x18c>
 8003560:	2d06      	cmp	r5, #6
 8003562:	f47f af21 	bne.w	80033a8 <_scanf_float+0x64>
 8003566:	2507      	movs	r5, #7
 8003568:	e7b2      	b.n	80034d0 <_scanf_float+0x18c>
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	0591      	lsls	r1, r2, #22
 800356e:	f57f af1b 	bpl.w	80033a8 <_scanf_float+0x64>
 8003572:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003576:	6022      	str	r2, [r4, #0]
 8003578:	f8cd 9004 	str.w	r9, [sp, #4]
 800357c:	e7a8      	b.n	80034d0 <_scanf_float+0x18c>
 800357e:	6822      	ldr	r2, [r4, #0]
 8003580:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003584:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003588:	d006      	beq.n	8003598 <_scanf_float+0x254>
 800358a:	0550      	lsls	r0, r2, #21
 800358c:	f57f af0c 	bpl.w	80033a8 <_scanf_float+0x64>
 8003590:	f1b9 0f00 	cmp.w	r9, #0
 8003594:	f43f af0f 	beq.w	80033b6 <_scanf_float+0x72>
 8003598:	0591      	lsls	r1, r2, #22
 800359a:	bf58      	it	pl
 800359c:	9901      	ldrpl	r1, [sp, #4]
 800359e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80035a2:	bf58      	it	pl
 80035a4:	eba9 0101 	subpl.w	r1, r9, r1
 80035a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80035ac:	f04f 0900 	mov.w	r9, #0
 80035b0:	bf58      	it	pl
 80035b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80035b6:	6022      	str	r2, [r4, #0]
 80035b8:	e78a      	b.n	80034d0 <_scanf_float+0x18c>
 80035ba:	f04f 0a03 	mov.w	sl, #3
 80035be:	e787      	b.n	80034d0 <_scanf_float+0x18c>
 80035c0:	4639      	mov	r1, r7
 80035c2:	4640      	mov	r0, r8
 80035c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80035c8:	4798      	blx	r3
 80035ca:	2800      	cmp	r0, #0
 80035cc:	f43f aedf 	beq.w	800338e <_scanf_float+0x4a>
 80035d0:	e6ea      	b.n	80033a8 <_scanf_float+0x64>
 80035d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035d6:	463a      	mov	r2, r7
 80035d8:	4640      	mov	r0, r8
 80035da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80035de:	4798      	blx	r3
 80035e0:	6923      	ldr	r3, [r4, #16]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	6123      	str	r3, [r4, #16]
 80035e6:	e6ec      	b.n	80033c2 <_scanf_float+0x7e>
 80035e8:	1e6b      	subs	r3, r5, #1
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d825      	bhi.n	800363a <_scanf_float+0x2f6>
 80035ee:	2d02      	cmp	r5, #2
 80035f0:	d836      	bhi.n	8003660 <_scanf_float+0x31c>
 80035f2:	455e      	cmp	r6, fp
 80035f4:	f67f aee8 	bls.w	80033c8 <_scanf_float+0x84>
 80035f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035fc:	463a      	mov	r2, r7
 80035fe:	4640      	mov	r0, r8
 8003600:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003604:	4798      	blx	r3
 8003606:	6923      	ldr	r3, [r4, #16]
 8003608:	3b01      	subs	r3, #1
 800360a:	6123      	str	r3, [r4, #16]
 800360c:	e7f1      	b.n	80035f2 <_scanf_float+0x2ae>
 800360e:	9802      	ldr	r0, [sp, #8]
 8003610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003614:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003618:	463a      	mov	r2, r7
 800361a:	9002      	str	r0, [sp, #8]
 800361c:	4640      	mov	r0, r8
 800361e:	4798      	blx	r3
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	3b01      	subs	r3, #1
 8003624:	6123      	str	r3, [r4, #16]
 8003626:	f10a 3aff 	add.w	sl, sl, #4294967295
 800362a:	fa5f fa8a 	uxtb.w	sl, sl
 800362e:	f1ba 0f02 	cmp.w	sl, #2
 8003632:	d1ec      	bne.n	800360e <_scanf_float+0x2ca>
 8003634:	3d03      	subs	r5, #3
 8003636:	b2ed      	uxtb	r5, r5
 8003638:	1b76      	subs	r6, r6, r5
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	05da      	lsls	r2, r3, #23
 800363e:	d52f      	bpl.n	80036a0 <_scanf_float+0x35c>
 8003640:	055b      	lsls	r3, r3, #21
 8003642:	d510      	bpl.n	8003666 <_scanf_float+0x322>
 8003644:	455e      	cmp	r6, fp
 8003646:	f67f aebf 	bls.w	80033c8 <_scanf_float+0x84>
 800364a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800364e:	463a      	mov	r2, r7
 8003650:	4640      	mov	r0, r8
 8003652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003656:	4798      	blx	r3
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	3b01      	subs	r3, #1
 800365c:	6123      	str	r3, [r4, #16]
 800365e:	e7f1      	b.n	8003644 <_scanf_float+0x300>
 8003660:	46aa      	mov	sl, r5
 8003662:	9602      	str	r6, [sp, #8]
 8003664:	e7df      	b.n	8003626 <_scanf_float+0x2e2>
 8003666:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800366a:	6923      	ldr	r3, [r4, #16]
 800366c:	2965      	cmp	r1, #101	; 0x65
 800366e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003672:	f106 35ff 	add.w	r5, r6, #4294967295
 8003676:	6123      	str	r3, [r4, #16]
 8003678:	d00c      	beq.n	8003694 <_scanf_float+0x350>
 800367a:	2945      	cmp	r1, #69	; 0x45
 800367c:	d00a      	beq.n	8003694 <_scanf_float+0x350>
 800367e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003682:	463a      	mov	r2, r7
 8003684:	4640      	mov	r0, r8
 8003686:	4798      	blx	r3
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800368e:	3b01      	subs	r3, #1
 8003690:	1eb5      	subs	r5, r6, #2
 8003692:	6123      	str	r3, [r4, #16]
 8003694:	463a      	mov	r2, r7
 8003696:	4640      	mov	r0, r8
 8003698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800369c:	4798      	blx	r3
 800369e:	462e      	mov	r6, r5
 80036a0:	6825      	ldr	r5, [r4, #0]
 80036a2:	f015 0510 	ands.w	r5, r5, #16
 80036a6:	d155      	bne.n	8003754 <_scanf_float+0x410>
 80036a8:	7035      	strb	r5, [r6, #0]
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b4:	d11b      	bne.n	80036ee <_scanf_float+0x3aa>
 80036b6:	9b01      	ldr	r3, [sp, #4]
 80036b8:	454b      	cmp	r3, r9
 80036ba:	eba3 0209 	sub.w	r2, r3, r9
 80036be:	d123      	bne.n	8003708 <_scanf_float+0x3c4>
 80036c0:	2200      	movs	r2, #0
 80036c2:	4659      	mov	r1, fp
 80036c4:	4640      	mov	r0, r8
 80036c6:	f000 fe7b 	bl	80043c0 <_strtod_r>
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	9b03      	ldr	r3, [sp, #12]
 80036ce:	f012 0f02 	tst.w	r2, #2
 80036d2:	4606      	mov	r6, r0
 80036d4:	460f      	mov	r7, r1
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	d021      	beq.n	800371e <_scanf_float+0x3da>
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	9903      	ldr	r1, [sp, #12]
 80036de:	600a      	str	r2, [r1, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	e9c3 6700 	strd	r6, r7, [r3]
 80036e6:	68e3      	ldr	r3, [r4, #12]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60e3      	str	r3, [r4, #12]
 80036ec:	e66d      	b.n	80033ca <_scanf_float+0x86>
 80036ee:	9b04      	ldr	r3, [sp, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0e5      	beq.n	80036c0 <_scanf_float+0x37c>
 80036f4:	9905      	ldr	r1, [sp, #20]
 80036f6:	230a      	movs	r3, #10
 80036f8:	462a      	mov	r2, r5
 80036fa:	4640      	mov	r0, r8
 80036fc:	3101      	adds	r1, #1
 80036fe:	f000 fee1 	bl	80044c4 <_strtol_r>
 8003702:	9b04      	ldr	r3, [sp, #16]
 8003704:	9e05      	ldr	r6, [sp, #20]
 8003706:	1ac2      	subs	r2, r0, r3
 8003708:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800370c:	429e      	cmp	r6, r3
 800370e:	bf28      	it	cs
 8003710:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003714:	4630      	mov	r0, r6
 8003716:	4910      	ldr	r1, [pc, #64]	; (8003758 <_scanf_float+0x414>)
 8003718:	f000 f826 	bl	8003768 <siprintf>
 800371c:	e7d0      	b.n	80036c0 <_scanf_float+0x37c>
 800371e:	f012 0f04 	tst.w	r2, #4
 8003722:	f103 0204 	add.w	r2, r3, #4
 8003726:	d1d9      	bne.n	80036dc <_scanf_float+0x398>
 8003728:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800372c:	f8cc 2000 	str.w	r2, [ip]
 8003730:	f8d3 8000 	ldr.w	r8, [r3]
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	f7fd f968 	bl	8000a0c <__aeabi_dcmpun>
 800373c:	b128      	cbz	r0, 800374a <_scanf_float+0x406>
 800373e:	4807      	ldr	r0, [pc, #28]	; (800375c <_scanf_float+0x418>)
 8003740:	f000 f80e 	bl	8003760 <nanf>
 8003744:	f8c8 0000 	str.w	r0, [r8]
 8003748:	e7cd      	b.n	80036e6 <_scanf_float+0x3a2>
 800374a:	4630      	mov	r0, r6
 800374c:	4639      	mov	r1, r7
 800374e:	f7fd f9bb 	bl	8000ac8 <__aeabi_d2f>
 8003752:	e7f7      	b.n	8003744 <_scanf_float+0x400>
 8003754:	2500      	movs	r5, #0
 8003756:	e638      	b.n	80033ca <_scanf_float+0x86>
 8003758:	08007370 	.word	0x08007370
 800375c:	08007778 	.word	0x08007778

08003760 <nanf>:
 8003760:	4800      	ldr	r0, [pc, #0]	; (8003764 <nanf+0x4>)
 8003762:	4770      	bx	lr
 8003764:	7fc00000 	.word	0x7fc00000

08003768 <siprintf>:
 8003768:	b40e      	push	{r1, r2, r3}
 800376a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800376e:	b500      	push	{lr}
 8003770:	b09c      	sub	sp, #112	; 0x70
 8003772:	ab1d      	add	r3, sp, #116	; 0x74
 8003774:	9002      	str	r0, [sp, #8]
 8003776:	9006      	str	r0, [sp, #24]
 8003778:	9107      	str	r1, [sp, #28]
 800377a:	9104      	str	r1, [sp, #16]
 800377c:	4808      	ldr	r0, [pc, #32]	; (80037a0 <siprintf+0x38>)
 800377e:	4909      	ldr	r1, [pc, #36]	; (80037a4 <siprintf+0x3c>)
 8003780:	f853 2b04 	ldr.w	r2, [r3], #4
 8003784:	9105      	str	r1, [sp, #20]
 8003786:	6800      	ldr	r0, [r0, #0]
 8003788:	a902      	add	r1, sp, #8
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	f002 feba 	bl	8006504 <_svfiprintf_r>
 8003790:	2200      	movs	r2, #0
 8003792:	9b02      	ldr	r3, [sp, #8]
 8003794:	701a      	strb	r2, [r3, #0]
 8003796:	b01c      	add	sp, #112	; 0x70
 8003798:	f85d eb04 	ldr.w	lr, [sp], #4
 800379c:	b003      	add	sp, #12
 800379e:	4770      	bx	lr
 80037a0:	2000000c 	.word	0x2000000c
 80037a4:	ffff0208 	.word	0xffff0208

080037a8 <sulp>:
 80037a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ac:	460f      	mov	r7, r1
 80037ae:	4690      	mov	r8, r2
 80037b0:	f002 fc14 	bl	8005fdc <__ulp>
 80037b4:	4604      	mov	r4, r0
 80037b6:	460d      	mov	r5, r1
 80037b8:	f1b8 0f00 	cmp.w	r8, #0
 80037bc:	d011      	beq.n	80037e2 <sulp+0x3a>
 80037be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80037c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	dd0b      	ble.n	80037e2 <sulp+0x3a>
 80037ca:	2400      	movs	r4, #0
 80037cc:	051b      	lsls	r3, r3, #20
 80037ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80037d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80037d6:	4622      	mov	r2, r4
 80037d8:	462b      	mov	r3, r5
 80037da:	f7fc fe7d 	bl	80004d8 <__aeabi_dmul>
 80037de:	4604      	mov	r4, r0
 80037e0:	460d      	mov	r5, r1
 80037e2:	4620      	mov	r0, r4
 80037e4:	4629      	mov	r1, r5
 80037e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ea:	0000      	movs	r0, r0
 80037ec:	0000      	movs	r0, r0
	...

080037f0 <_strtod_l>:
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	469b      	mov	fp, r3
 80037f6:	2300      	movs	r3, #0
 80037f8:	b09f      	sub	sp, #124	; 0x7c
 80037fa:	931a      	str	r3, [sp, #104]	; 0x68
 80037fc:	4b9e      	ldr	r3, [pc, #632]	; (8003a78 <_strtod_l+0x288>)
 80037fe:	4682      	mov	sl, r0
 8003800:	681f      	ldr	r7, [r3, #0]
 8003802:	460e      	mov	r6, r1
 8003804:	4638      	mov	r0, r7
 8003806:	9215      	str	r2, [sp, #84]	; 0x54
 8003808:	f7fc fca2 	bl	8000150 <strlen>
 800380c:	f04f 0800 	mov.w	r8, #0
 8003810:	4604      	mov	r4, r0
 8003812:	f04f 0900 	mov.w	r9, #0
 8003816:	9619      	str	r6, [sp, #100]	; 0x64
 8003818:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	2a2b      	cmp	r2, #43	; 0x2b
 800381e:	d04c      	beq.n	80038ba <_strtod_l+0xca>
 8003820:	d83a      	bhi.n	8003898 <_strtod_l+0xa8>
 8003822:	2a0d      	cmp	r2, #13
 8003824:	d833      	bhi.n	800388e <_strtod_l+0x9e>
 8003826:	2a08      	cmp	r2, #8
 8003828:	d833      	bhi.n	8003892 <_strtod_l+0xa2>
 800382a:	2a00      	cmp	r2, #0
 800382c:	d03d      	beq.n	80038aa <_strtod_l+0xba>
 800382e:	2300      	movs	r3, #0
 8003830:	930a      	str	r3, [sp, #40]	; 0x28
 8003832:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003834:	782b      	ldrb	r3, [r5, #0]
 8003836:	2b30      	cmp	r3, #48	; 0x30
 8003838:	f040 80aa 	bne.w	8003990 <_strtod_l+0x1a0>
 800383c:	786b      	ldrb	r3, [r5, #1]
 800383e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003842:	2b58      	cmp	r3, #88	; 0x58
 8003844:	d166      	bne.n	8003914 <_strtod_l+0x124>
 8003846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003848:	4650      	mov	r0, sl
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	ab1a      	add	r3, sp, #104	; 0x68
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4a8a      	ldr	r2, [pc, #552]	; (8003a7c <_strtod_l+0x28c>)
 8003852:	f8cd b008 	str.w	fp, [sp, #8]
 8003856:	ab1b      	add	r3, sp, #108	; 0x6c
 8003858:	a919      	add	r1, sp, #100	; 0x64
 800385a:	f001 fd17 	bl	800528c <__gethex>
 800385e:	f010 0607 	ands.w	r6, r0, #7
 8003862:	4604      	mov	r4, r0
 8003864:	d005      	beq.n	8003872 <_strtod_l+0x82>
 8003866:	2e06      	cmp	r6, #6
 8003868:	d129      	bne.n	80038be <_strtod_l+0xce>
 800386a:	2300      	movs	r3, #0
 800386c:	3501      	adds	r5, #1
 800386e:	9519      	str	r5, [sp, #100]	; 0x64
 8003870:	930a      	str	r3, [sp, #40]	; 0x28
 8003872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 858a 	bne.w	800438e <_strtod_l+0xb9e>
 800387a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800387c:	b1d3      	cbz	r3, 80038b4 <_strtod_l+0xc4>
 800387e:	4642      	mov	r2, r8
 8003880:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	b01f      	add	sp, #124	; 0x7c
 800388a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800388e:	2a20      	cmp	r2, #32
 8003890:	d1cd      	bne.n	800382e <_strtod_l+0x3e>
 8003892:	3301      	adds	r3, #1
 8003894:	9319      	str	r3, [sp, #100]	; 0x64
 8003896:	e7bf      	b.n	8003818 <_strtod_l+0x28>
 8003898:	2a2d      	cmp	r2, #45	; 0x2d
 800389a:	d1c8      	bne.n	800382e <_strtod_l+0x3e>
 800389c:	2201      	movs	r2, #1
 800389e:	920a      	str	r2, [sp, #40]	; 0x28
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	9219      	str	r2, [sp, #100]	; 0x64
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1c3      	bne.n	8003832 <_strtod_l+0x42>
 80038aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80038ac:	9619      	str	r6, [sp, #100]	; 0x64
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 856b 	bne.w	800438a <_strtod_l+0xb9a>
 80038b4:	4642      	mov	r2, r8
 80038b6:	464b      	mov	r3, r9
 80038b8:	e7e4      	b.n	8003884 <_strtod_l+0x94>
 80038ba:	2200      	movs	r2, #0
 80038bc:	e7ef      	b.n	800389e <_strtod_l+0xae>
 80038be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80038c0:	b13a      	cbz	r2, 80038d2 <_strtod_l+0xe2>
 80038c2:	2135      	movs	r1, #53	; 0x35
 80038c4:	a81c      	add	r0, sp, #112	; 0x70
 80038c6:	f002 fc8d 	bl	80061e4 <__copybits>
 80038ca:	4650      	mov	r0, sl
 80038cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80038ce:	f002 f855 	bl	800597c <_Bfree>
 80038d2:	3e01      	subs	r6, #1
 80038d4:	2e04      	cmp	r6, #4
 80038d6:	d806      	bhi.n	80038e6 <_strtod_l+0xf6>
 80038d8:	e8df f006 	tbb	[pc, r6]
 80038dc:	1714030a 	.word	0x1714030a
 80038e0:	0a          	.byte	0x0a
 80038e1:	00          	.byte	0x00
 80038e2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80038e6:	0721      	lsls	r1, r4, #28
 80038e8:	d5c3      	bpl.n	8003872 <_strtod_l+0x82>
 80038ea:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80038ee:	e7c0      	b.n	8003872 <_strtod_l+0x82>
 80038f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80038f2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80038f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80038fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038fe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003902:	e7f0      	b.n	80038e6 <_strtod_l+0xf6>
 8003904:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003a80 <_strtod_l+0x290>
 8003908:	e7ed      	b.n	80038e6 <_strtod_l+0xf6>
 800390a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800390e:	f04f 38ff 	mov.w	r8, #4294967295
 8003912:	e7e8      	b.n	80038e6 <_strtod_l+0xf6>
 8003914:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	9219      	str	r2, [sp, #100]	; 0x64
 800391a:	785b      	ldrb	r3, [r3, #1]
 800391c:	2b30      	cmp	r3, #48	; 0x30
 800391e:	d0f9      	beq.n	8003914 <_strtod_l+0x124>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0a6      	beq.n	8003872 <_strtod_l+0x82>
 8003924:	2301      	movs	r3, #1
 8003926:	9307      	str	r3, [sp, #28]
 8003928:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800392a:	220a      	movs	r2, #10
 800392c:	9308      	str	r3, [sp, #32]
 800392e:	2300      	movs	r3, #0
 8003930:	469b      	mov	fp, r3
 8003932:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003936:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003938:	7805      	ldrb	r5, [r0, #0]
 800393a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800393e:	b2d9      	uxtb	r1, r3
 8003940:	2909      	cmp	r1, #9
 8003942:	d927      	bls.n	8003994 <_strtod_l+0x1a4>
 8003944:	4622      	mov	r2, r4
 8003946:	4639      	mov	r1, r7
 8003948:	f002 fef2 	bl	8006730 <strncmp>
 800394c:	2800      	cmp	r0, #0
 800394e:	d033      	beq.n	80039b8 <_strtod_l+0x1c8>
 8003950:	2000      	movs	r0, #0
 8003952:	462a      	mov	r2, r5
 8003954:	465c      	mov	r4, fp
 8003956:	4603      	mov	r3, r0
 8003958:	9004      	str	r0, [sp, #16]
 800395a:	2a65      	cmp	r2, #101	; 0x65
 800395c:	d001      	beq.n	8003962 <_strtod_l+0x172>
 800395e:	2a45      	cmp	r2, #69	; 0x45
 8003960:	d114      	bne.n	800398c <_strtod_l+0x19c>
 8003962:	b91c      	cbnz	r4, 800396c <_strtod_l+0x17c>
 8003964:	9a07      	ldr	r2, [sp, #28]
 8003966:	4302      	orrs	r2, r0
 8003968:	d09f      	beq.n	80038aa <_strtod_l+0xba>
 800396a:	2400      	movs	r4, #0
 800396c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800396e:	1c72      	adds	r2, r6, #1
 8003970:	9219      	str	r2, [sp, #100]	; 0x64
 8003972:	7872      	ldrb	r2, [r6, #1]
 8003974:	2a2b      	cmp	r2, #43	; 0x2b
 8003976:	d079      	beq.n	8003a6c <_strtod_l+0x27c>
 8003978:	2a2d      	cmp	r2, #45	; 0x2d
 800397a:	f000 8083 	beq.w	8003a84 <_strtod_l+0x294>
 800397e:	2700      	movs	r7, #0
 8003980:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003984:	2909      	cmp	r1, #9
 8003986:	f240 8083 	bls.w	8003a90 <_strtod_l+0x2a0>
 800398a:	9619      	str	r6, [sp, #100]	; 0x64
 800398c:	2500      	movs	r5, #0
 800398e:	e09f      	b.n	8003ad0 <_strtod_l+0x2e0>
 8003990:	2300      	movs	r3, #0
 8003992:	e7c8      	b.n	8003926 <_strtod_l+0x136>
 8003994:	f1bb 0f08 	cmp.w	fp, #8
 8003998:	bfd5      	itete	le
 800399a:	9906      	ldrle	r1, [sp, #24]
 800399c:	9905      	ldrgt	r1, [sp, #20]
 800399e:	fb02 3301 	mlale	r3, r2, r1, r3
 80039a2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80039a6:	f100 0001 	add.w	r0, r0, #1
 80039aa:	bfd4      	ite	le
 80039ac:	9306      	strle	r3, [sp, #24]
 80039ae:	9305      	strgt	r3, [sp, #20]
 80039b0:	f10b 0b01 	add.w	fp, fp, #1
 80039b4:	9019      	str	r0, [sp, #100]	; 0x64
 80039b6:	e7be      	b.n	8003936 <_strtod_l+0x146>
 80039b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039ba:	191a      	adds	r2, r3, r4
 80039bc:	9219      	str	r2, [sp, #100]	; 0x64
 80039be:	5d1a      	ldrb	r2, [r3, r4]
 80039c0:	f1bb 0f00 	cmp.w	fp, #0
 80039c4:	d036      	beq.n	8003a34 <_strtod_l+0x244>
 80039c6:	465c      	mov	r4, fp
 80039c8:	9004      	str	r0, [sp, #16]
 80039ca:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80039ce:	2b09      	cmp	r3, #9
 80039d0:	d912      	bls.n	80039f8 <_strtod_l+0x208>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e7c1      	b.n	800395a <_strtod_l+0x16a>
 80039d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039d8:	3001      	adds	r0, #1
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	9219      	str	r2, [sp, #100]	; 0x64
 80039de:	785a      	ldrb	r2, [r3, #1]
 80039e0:	2a30      	cmp	r2, #48	; 0x30
 80039e2:	d0f8      	beq.n	80039d6 <_strtod_l+0x1e6>
 80039e4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	f200 84d5 	bhi.w	8004398 <_strtod_l+0xba8>
 80039ee:	9004      	str	r0, [sp, #16]
 80039f0:	2000      	movs	r0, #0
 80039f2:	4604      	mov	r4, r0
 80039f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039f6:	9308      	str	r3, [sp, #32]
 80039f8:	3a30      	subs	r2, #48	; 0x30
 80039fa:	f100 0301 	add.w	r3, r0, #1
 80039fe:	d013      	beq.n	8003a28 <_strtod_l+0x238>
 8003a00:	9904      	ldr	r1, [sp, #16]
 8003a02:	1905      	adds	r5, r0, r4
 8003a04:	4419      	add	r1, r3
 8003a06:	9104      	str	r1, [sp, #16]
 8003a08:	4623      	mov	r3, r4
 8003a0a:	210a      	movs	r1, #10
 8003a0c:	42ab      	cmp	r3, r5
 8003a0e:	d113      	bne.n	8003a38 <_strtod_l+0x248>
 8003a10:	1823      	adds	r3, r4, r0
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	f104 0401 	add.w	r4, r4, #1
 8003a18:	4404      	add	r4, r0
 8003a1a:	dc1b      	bgt.n	8003a54 <_strtod_l+0x264>
 8003a1c:	230a      	movs	r3, #10
 8003a1e:	9906      	ldr	r1, [sp, #24]
 8003a20:	fb03 2301 	mla	r3, r3, r1, r2
 8003a24:	9306      	str	r3, [sp, #24]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	1c51      	adds	r1, r2, #1
 8003a2e:	9119      	str	r1, [sp, #100]	; 0x64
 8003a30:	7852      	ldrb	r2, [r2, #1]
 8003a32:	e7ca      	b.n	80039ca <_strtod_l+0x1da>
 8003a34:	4658      	mov	r0, fp
 8003a36:	e7d3      	b.n	80039e0 <_strtod_l+0x1f0>
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	dc04      	bgt.n	8003a46 <_strtod_l+0x256>
 8003a3c:	9f06      	ldr	r7, [sp, #24]
 8003a3e:	434f      	muls	r7, r1
 8003a40:	9706      	str	r7, [sp, #24]
 8003a42:	3301      	adds	r3, #1
 8003a44:	e7e2      	b.n	8003a0c <_strtod_l+0x21c>
 8003a46:	1c5f      	adds	r7, r3, #1
 8003a48:	2f10      	cmp	r7, #16
 8003a4a:	bfde      	ittt	le
 8003a4c:	9f05      	ldrle	r7, [sp, #20]
 8003a4e:	434f      	mulle	r7, r1
 8003a50:	9705      	strle	r7, [sp, #20]
 8003a52:	e7f6      	b.n	8003a42 <_strtod_l+0x252>
 8003a54:	2c10      	cmp	r4, #16
 8003a56:	bfdf      	itttt	le
 8003a58:	230a      	movle	r3, #10
 8003a5a:	9905      	ldrle	r1, [sp, #20]
 8003a5c:	fb03 2301 	mlale	r3, r3, r1, r2
 8003a60:	9305      	strle	r3, [sp, #20]
 8003a62:	e7e0      	b.n	8003a26 <_strtod_l+0x236>
 8003a64:	2300      	movs	r3, #0
 8003a66:	9304      	str	r3, [sp, #16]
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e77b      	b.n	8003964 <_strtod_l+0x174>
 8003a6c:	2700      	movs	r7, #0
 8003a6e:	1cb2      	adds	r2, r6, #2
 8003a70:	9219      	str	r2, [sp, #100]	; 0x64
 8003a72:	78b2      	ldrb	r2, [r6, #2]
 8003a74:	e784      	b.n	8003980 <_strtod_l+0x190>
 8003a76:	bf00      	nop
 8003a78:	080075c0 	.word	0x080075c0
 8003a7c:	08007378 	.word	0x08007378
 8003a80:	7ff00000 	.word	0x7ff00000
 8003a84:	2701      	movs	r7, #1
 8003a86:	e7f2      	b.n	8003a6e <_strtod_l+0x27e>
 8003a88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003a8a:	1c51      	adds	r1, r2, #1
 8003a8c:	9119      	str	r1, [sp, #100]	; 0x64
 8003a8e:	7852      	ldrb	r2, [r2, #1]
 8003a90:	2a30      	cmp	r2, #48	; 0x30
 8003a92:	d0f9      	beq.n	8003a88 <_strtod_l+0x298>
 8003a94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003a98:	2908      	cmp	r1, #8
 8003a9a:	f63f af77 	bhi.w	800398c <_strtod_l+0x19c>
 8003a9e:	f04f 0e0a 	mov.w	lr, #10
 8003aa2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003aa6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003aa8:	9209      	str	r2, [sp, #36]	; 0x24
 8003aaa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003aac:	1c51      	adds	r1, r2, #1
 8003aae:	9119      	str	r1, [sp, #100]	; 0x64
 8003ab0:	7852      	ldrb	r2, [r2, #1]
 8003ab2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003ab6:	2d09      	cmp	r5, #9
 8003ab8:	d935      	bls.n	8003b26 <_strtod_l+0x336>
 8003aba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003abc:	1b49      	subs	r1, r1, r5
 8003abe:	2908      	cmp	r1, #8
 8003ac0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003ac4:	dc02      	bgt.n	8003acc <_strtod_l+0x2dc>
 8003ac6:	4565      	cmp	r5, ip
 8003ac8:	bfa8      	it	ge
 8003aca:	4665      	movge	r5, ip
 8003acc:	b107      	cbz	r7, 8003ad0 <_strtod_l+0x2e0>
 8003ace:	426d      	negs	r5, r5
 8003ad0:	2c00      	cmp	r4, #0
 8003ad2:	d14c      	bne.n	8003b6e <_strtod_l+0x37e>
 8003ad4:	9907      	ldr	r1, [sp, #28]
 8003ad6:	4301      	orrs	r1, r0
 8003ad8:	f47f aecb 	bne.w	8003872 <_strtod_l+0x82>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f aee4 	bne.w	80038aa <_strtod_l+0xba>
 8003ae2:	2a69      	cmp	r2, #105	; 0x69
 8003ae4:	d026      	beq.n	8003b34 <_strtod_l+0x344>
 8003ae6:	dc23      	bgt.n	8003b30 <_strtod_l+0x340>
 8003ae8:	2a49      	cmp	r2, #73	; 0x49
 8003aea:	d023      	beq.n	8003b34 <_strtod_l+0x344>
 8003aec:	2a4e      	cmp	r2, #78	; 0x4e
 8003aee:	f47f aedc 	bne.w	80038aa <_strtod_l+0xba>
 8003af2:	499d      	ldr	r1, [pc, #628]	; (8003d68 <_strtod_l+0x578>)
 8003af4:	a819      	add	r0, sp, #100	; 0x64
 8003af6:	f001 fe17 	bl	8005728 <__match>
 8003afa:	2800      	cmp	r0, #0
 8003afc:	f43f aed5 	beq.w	80038aa <_strtod_l+0xba>
 8003b00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b28      	cmp	r3, #40	; 0x28
 8003b06:	d12c      	bne.n	8003b62 <_strtod_l+0x372>
 8003b08:	4998      	ldr	r1, [pc, #608]	; (8003d6c <_strtod_l+0x57c>)
 8003b0a:	aa1c      	add	r2, sp, #112	; 0x70
 8003b0c:	a819      	add	r0, sp, #100	; 0x64
 8003b0e:	f001 fe1f 	bl	8005750 <__hexnan>
 8003b12:	2805      	cmp	r0, #5
 8003b14:	d125      	bne.n	8003b62 <_strtod_l+0x372>
 8003b16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b18:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003b1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003b20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003b24:	e6a5      	b.n	8003872 <_strtod_l+0x82>
 8003b26:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8003b2a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003b2e:	e7bc      	b.n	8003aaa <_strtod_l+0x2ba>
 8003b30:	2a6e      	cmp	r2, #110	; 0x6e
 8003b32:	e7dc      	b.n	8003aee <_strtod_l+0x2fe>
 8003b34:	498e      	ldr	r1, [pc, #568]	; (8003d70 <_strtod_l+0x580>)
 8003b36:	a819      	add	r0, sp, #100	; 0x64
 8003b38:	f001 fdf6 	bl	8005728 <__match>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	f43f aeb4 	beq.w	80038aa <_strtod_l+0xba>
 8003b42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b44:	498b      	ldr	r1, [pc, #556]	; (8003d74 <_strtod_l+0x584>)
 8003b46:	3b01      	subs	r3, #1
 8003b48:	a819      	add	r0, sp, #100	; 0x64
 8003b4a:	9319      	str	r3, [sp, #100]	; 0x64
 8003b4c:	f001 fdec 	bl	8005728 <__match>
 8003b50:	b910      	cbnz	r0, 8003b58 <_strtod_l+0x368>
 8003b52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b54:	3301      	adds	r3, #1
 8003b56:	9319      	str	r3, [sp, #100]	; 0x64
 8003b58:	f04f 0800 	mov.w	r8, #0
 8003b5c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8003d78 <_strtod_l+0x588>
 8003b60:	e687      	b.n	8003872 <_strtod_l+0x82>
 8003b62:	4886      	ldr	r0, [pc, #536]	; (8003d7c <_strtod_l+0x58c>)
 8003b64:	f002 fdce 	bl	8006704 <nan>
 8003b68:	4680      	mov	r8, r0
 8003b6a:	4689      	mov	r9, r1
 8003b6c:	e681      	b.n	8003872 <_strtod_l+0x82>
 8003b6e:	9b04      	ldr	r3, [sp, #16]
 8003b70:	f1bb 0f00 	cmp.w	fp, #0
 8003b74:	bf08      	it	eq
 8003b76:	46a3      	moveq	fp, r4
 8003b78:	1aeb      	subs	r3, r5, r3
 8003b7a:	2c10      	cmp	r4, #16
 8003b7c:	9806      	ldr	r0, [sp, #24]
 8003b7e:	4626      	mov	r6, r4
 8003b80:	9307      	str	r3, [sp, #28]
 8003b82:	bfa8      	it	ge
 8003b84:	2610      	movge	r6, #16
 8003b86:	f7fc fc2d 	bl	80003e4 <__aeabi_ui2d>
 8003b8a:	2c09      	cmp	r4, #9
 8003b8c:	4680      	mov	r8, r0
 8003b8e:	4689      	mov	r9, r1
 8003b90:	dd13      	ble.n	8003bba <_strtod_l+0x3ca>
 8003b92:	4b7b      	ldr	r3, [pc, #492]	; (8003d80 <_strtod_l+0x590>)
 8003b94:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003b98:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003b9c:	f7fc fc9c 	bl	80004d8 <__aeabi_dmul>
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	9805      	ldr	r0, [sp, #20]
 8003ba4:	4689      	mov	r9, r1
 8003ba6:	f7fc fc1d 	bl	80003e4 <__aeabi_ui2d>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4640      	mov	r0, r8
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	f7fc fadb 	bl	800016c <__adddf3>
 8003bb6:	4680      	mov	r8, r0
 8003bb8:	4689      	mov	r9, r1
 8003bba:	2c0f      	cmp	r4, #15
 8003bbc:	dc36      	bgt.n	8003c2c <_strtod_l+0x43c>
 8003bbe:	9b07      	ldr	r3, [sp, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f43f ae56 	beq.w	8003872 <_strtod_l+0x82>
 8003bc6:	dd22      	ble.n	8003c0e <_strtod_l+0x41e>
 8003bc8:	2b16      	cmp	r3, #22
 8003bca:	dc09      	bgt.n	8003be0 <_strtod_l+0x3f0>
 8003bcc:	496c      	ldr	r1, [pc, #432]	; (8003d80 <_strtod_l+0x590>)
 8003bce:	4642      	mov	r2, r8
 8003bd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bda:	f7fc fc7d 	bl	80004d8 <__aeabi_dmul>
 8003bde:	e7c3      	b.n	8003b68 <_strtod_l+0x378>
 8003be0:	9a07      	ldr	r2, [sp, #28]
 8003be2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003be6:	4293      	cmp	r3, r2
 8003be8:	db20      	blt.n	8003c2c <_strtod_l+0x43c>
 8003bea:	4d65      	ldr	r5, [pc, #404]	; (8003d80 <_strtod_l+0x590>)
 8003bec:	f1c4 040f 	rsb	r4, r4, #15
 8003bf0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bfa:	464b      	mov	r3, r9
 8003bfc:	f7fc fc6c 	bl	80004d8 <__aeabi_dmul>
 8003c00:	9b07      	ldr	r3, [sp, #28]
 8003c02:	1b1c      	subs	r4, r3, r4
 8003c04:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003c08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c0c:	e7e5      	b.n	8003bda <_strtod_l+0x3ea>
 8003c0e:	9b07      	ldr	r3, [sp, #28]
 8003c10:	3316      	adds	r3, #22
 8003c12:	db0b      	blt.n	8003c2c <_strtod_l+0x43c>
 8003c14:	9b04      	ldr	r3, [sp, #16]
 8003c16:	4640      	mov	r0, r8
 8003c18:	1b5d      	subs	r5, r3, r5
 8003c1a:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <_strtod_l+0x590>)
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003c22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c26:	f7fc fd81 	bl	800072c <__aeabi_ddiv>
 8003c2a:	e79d      	b.n	8003b68 <_strtod_l+0x378>
 8003c2c:	9b07      	ldr	r3, [sp, #28]
 8003c2e:	1ba6      	subs	r6, r4, r6
 8003c30:	441e      	add	r6, r3
 8003c32:	2e00      	cmp	r6, #0
 8003c34:	dd74      	ble.n	8003d20 <_strtod_l+0x530>
 8003c36:	f016 030f 	ands.w	r3, r6, #15
 8003c3a:	d00a      	beq.n	8003c52 <_strtod_l+0x462>
 8003c3c:	4950      	ldr	r1, [pc, #320]	; (8003d80 <_strtod_l+0x590>)
 8003c3e:	4642      	mov	r2, r8
 8003c40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c48:	464b      	mov	r3, r9
 8003c4a:	f7fc fc45 	bl	80004d8 <__aeabi_dmul>
 8003c4e:	4680      	mov	r8, r0
 8003c50:	4689      	mov	r9, r1
 8003c52:	f036 060f 	bics.w	r6, r6, #15
 8003c56:	d052      	beq.n	8003cfe <_strtod_l+0x50e>
 8003c58:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003c5c:	dd27      	ble.n	8003cae <_strtod_l+0x4be>
 8003c5e:	f04f 0b00 	mov.w	fp, #0
 8003c62:	f8cd b010 	str.w	fp, [sp, #16]
 8003c66:	f8cd b020 	str.w	fp, [sp, #32]
 8003c6a:	f8cd b018 	str.w	fp, [sp, #24]
 8003c6e:	2322      	movs	r3, #34	; 0x22
 8003c70:	f04f 0800 	mov.w	r8, #0
 8003c74:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8003d78 <_strtod_l+0x588>
 8003c78:	f8ca 3000 	str.w	r3, [sl]
 8003c7c:	9b08      	ldr	r3, [sp, #32]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f43f adf7 	beq.w	8003872 <_strtod_l+0x82>
 8003c84:	4650      	mov	r0, sl
 8003c86:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003c88:	f001 fe78 	bl	800597c <_Bfree>
 8003c8c:	4650      	mov	r0, sl
 8003c8e:	9906      	ldr	r1, [sp, #24]
 8003c90:	f001 fe74 	bl	800597c <_Bfree>
 8003c94:	4650      	mov	r0, sl
 8003c96:	9904      	ldr	r1, [sp, #16]
 8003c98:	f001 fe70 	bl	800597c <_Bfree>
 8003c9c:	4650      	mov	r0, sl
 8003c9e:	9908      	ldr	r1, [sp, #32]
 8003ca0:	f001 fe6c 	bl	800597c <_Bfree>
 8003ca4:	4659      	mov	r1, fp
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	f001 fe68 	bl	800597c <_Bfree>
 8003cac:	e5e1      	b.n	8003872 <_strtod_l+0x82>
 8003cae:	4b35      	ldr	r3, [pc, #212]	; (8003d84 <_strtod_l+0x594>)
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	9305      	str	r3, [sp, #20]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	461f      	mov	r7, r3
 8003cba:	1136      	asrs	r6, r6, #4
 8003cbc:	2e01      	cmp	r6, #1
 8003cbe:	dc21      	bgt.n	8003d04 <_strtod_l+0x514>
 8003cc0:	b10b      	cbz	r3, 8003cc6 <_strtod_l+0x4d6>
 8003cc2:	4680      	mov	r8, r0
 8003cc4:	4689      	mov	r9, r1
 8003cc6:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <_strtod_l+0x594>)
 8003cc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003ccc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	f7fc fbfe 	bl	80004d8 <__aeabi_dmul>
 8003cdc:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <_strtod_l+0x588>)
 8003cde:	460a      	mov	r2, r1
 8003ce0:	400b      	ands	r3, r1
 8003ce2:	4929      	ldr	r1, [pc, #164]	; (8003d88 <_strtod_l+0x598>)
 8003ce4:	4680      	mov	r8, r0
 8003ce6:	428b      	cmp	r3, r1
 8003ce8:	d8b9      	bhi.n	8003c5e <_strtod_l+0x46e>
 8003cea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003cee:	428b      	cmp	r3, r1
 8003cf0:	bf86      	itte	hi
 8003cf2:	f04f 38ff 	movhi.w	r8, #4294967295
 8003cf6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8003d8c <_strtod_l+0x59c>
 8003cfa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9305      	str	r3, [sp, #20]
 8003d02:	e07f      	b.n	8003e04 <_strtod_l+0x614>
 8003d04:	07f2      	lsls	r2, r6, #31
 8003d06:	d505      	bpl.n	8003d14 <_strtod_l+0x524>
 8003d08:	9b05      	ldr	r3, [sp, #20]
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f7fc fbe3 	bl	80004d8 <__aeabi_dmul>
 8003d12:	2301      	movs	r3, #1
 8003d14:	9a05      	ldr	r2, [sp, #20]
 8003d16:	3701      	adds	r7, #1
 8003d18:	3208      	adds	r2, #8
 8003d1a:	1076      	asrs	r6, r6, #1
 8003d1c:	9205      	str	r2, [sp, #20]
 8003d1e:	e7cd      	b.n	8003cbc <_strtod_l+0x4cc>
 8003d20:	d0ed      	beq.n	8003cfe <_strtod_l+0x50e>
 8003d22:	4276      	negs	r6, r6
 8003d24:	f016 020f 	ands.w	r2, r6, #15
 8003d28:	d00a      	beq.n	8003d40 <_strtod_l+0x550>
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <_strtod_l+0x590>)
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d32:	4649      	mov	r1, r9
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f7fc fcf8 	bl	800072c <__aeabi_ddiv>
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	4689      	mov	r9, r1
 8003d40:	1136      	asrs	r6, r6, #4
 8003d42:	d0dc      	beq.n	8003cfe <_strtod_l+0x50e>
 8003d44:	2e1f      	cmp	r6, #31
 8003d46:	dd23      	ble.n	8003d90 <_strtod_l+0x5a0>
 8003d48:	f04f 0b00 	mov.w	fp, #0
 8003d4c:	f8cd b010 	str.w	fp, [sp, #16]
 8003d50:	f8cd b020 	str.w	fp, [sp, #32]
 8003d54:	f8cd b018 	str.w	fp, [sp, #24]
 8003d58:	2322      	movs	r3, #34	; 0x22
 8003d5a:	f04f 0800 	mov.w	r8, #0
 8003d5e:	f04f 0900 	mov.w	r9, #0
 8003d62:	f8ca 3000 	str.w	r3, [sl]
 8003d66:	e789      	b.n	8003c7c <_strtod_l+0x48c>
 8003d68:	08007349 	.word	0x08007349
 8003d6c:	0800738c 	.word	0x0800738c
 8003d70:	08007341 	.word	0x08007341
 8003d74:	080074cc 	.word	0x080074cc
 8003d78:	7ff00000 	.word	0x7ff00000
 8003d7c:	08007778 	.word	0x08007778
 8003d80:	08007658 	.word	0x08007658
 8003d84:	08007630 	.word	0x08007630
 8003d88:	7ca00000 	.word	0x7ca00000
 8003d8c:	7fefffff 	.word	0x7fefffff
 8003d90:	f016 0310 	ands.w	r3, r6, #16
 8003d94:	bf18      	it	ne
 8003d96:	236a      	movne	r3, #106	; 0x6a
 8003d98:	4640      	mov	r0, r8
 8003d9a:	9305      	str	r3, [sp, #20]
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	2300      	movs	r3, #0
 8003da0:	4fb0      	ldr	r7, [pc, #704]	; (8004064 <_strtod_l+0x874>)
 8003da2:	07f2      	lsls	r2, r6, #31
 8003da4:	d504      	bpl.n	8003db0 <_strtod_l+0x5c0>
 8003da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003daa:	f7fc fb95 	bl	80004d8 <__aeabi_dmul>
 8003dae:	2301      	movs	r3, #1
 8003db0:	1076      	asrs	r6, r6, #1
 8003db2:	f107 0708 	add.w	r7, r7, #8
 8003db6:	d1f4      	bne.n	8003da2 <_strtod_l+0x5b2>
 8003db8:	b10b      	cbz	r3, 8003dbe <_strtod_l+0x5ce>
 8003dba:	4680      	mov	r8, r0
 8003dbc:	4689      	mov	r9, r1
 8003dbe:	9b05      	ldr	r3, [sp, #20]
 8003dc0:	b1c3      	cbz	r3, 8003df4 <_strtod_l+0x604>
 8003dc2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8003dc6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	4649      	mov	r1, r9
 8003dce:	dd11      	ble.n	8003df4 <_strtod_l+0x604>
 8003dd0:	2b1f      	cmp	r3, #31
 8003dd2:	f340 8127 	ble.w	8004024 <_strtod_l+0x834>
 8003dd6:	2b34      	cmp	r3, #52	; 0x34
 8003dd8:	bfd8      	it	le
 8003dda:	f04f 33ff 	movle.w	r3, #4294967295
 8003dde:	f04f 0800 	mov.w	r8, #0
 8003de2:	bfcf      	iteee	gt
 8003de4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003de8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003dec:	fa03 f202 	lslle.w	r2, r3, r2
 8003df0:	ea02 0901 	andle.w	r9, r2, r1
 8003df4:	2200      	movs	r2, #0
 8003df6:	2300      	movs	r3, #0
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	f7fc fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d1a1      	bne.n	8003d48 <_strtod_l+0x558>
 8003e04:	9b06      	ldr	r3, [sp, #24]
 8003e06:	465a      	mov	r2, fp
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	4650      	mov	r0, sl
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	9908      	ldr	r1, [sp, #32]
 8003e10:	f001 fe1c 	bl	8005a4c <__s2b>
 8003e14:	9008      	str	r0, [sp, #32]
 8003e16:	2800      	cmp	r0, #0
 8003e18:	f43f af21 	beq.w	8003c5e <_strtod_l+0x46e>
 8003e1c:	9b04      	ldr	r3, [sp, #16]
 8003e1e:	f04f 0b00 	mov.w	fp, #0
 8003e22:	1b5d      	subs	r5, r3, r5
 8003e24:	9b07      	ldr	r3, [sp, #28]
 8003e26:	f8cd b010 	str.w	fp, [sp, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bfb4      	ite	lt
 8003e2e:	462b      	movlt	r3, r5
 8003e30:	2300      	movge	r3, #0
 8003e32:	930e      	str	r3, [sp, #56]	; 0x38
 8003e34:	9b07      	ldr	r3, [sp, #28]
 8003e36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003e3a:	9314      	str	r3, [sp, #80]	; 0x50
 8003e3c:	9b08      	ldr	r3, [sp, #32]
 8003e3e:	4650      	mov	r0, sl
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	f001 fd5b 	bl	80058fc <_Balloc>
 8003e46:	9006      	str	r0, [sp, #24]
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	f43f af10 	beq.w	8003c6e <_strtod_l+0x47e>
 8003e4e:	9b08      	ldr	r3, [sp, #32]
 8003e50:	300c      	adds	r0, #12
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	f103 010c 	add.w	r1, r3, #12
 8003e58:	3202      	adds	r2, #2
 8003e5a:	0092      	lsls	r2, r2, #2
 8003e5c:	f001 fd40 	bl	80058e0 <memcpy>
 8003e60:	ab1c      	add	r3, sp, #112	; 0x70
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	ab1b      	add	r3, sp, #108	; 0x6c
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	4650      	mov	r0, sl
 8003e6e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003e72:	f002 f92d 	bl	80060d0 <__d2b>
 8003e76:	901a      	str	r0, [sp, #104]	; 0x68
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	f43f aef8 	beq.w	8003c6e <_strtod_l+0x47e>
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4650      	mov	r0, sl
 8003e82:	f001 fe7b 	bl	8005b7c <__i2b>
 8003e86:	4603      	mov	r3, r0
 8003e88:	9004      	str	r0, [sp, #16]
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	f43f aeef 	beq.w	8003c6e <_strtod_l+0x47e>
 8003e90:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003e92:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003e94:	2d00      	cmp	r5, #0
 8003e96:	bfab      	itete	ge
 8003e98:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003e9a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8003e9c:	18ee      	addge	r6, r5, r3
 8003e9e:	1b5c      	sublt	r4, r3, r5
 8003ea0:	9b05      	ldr	r3, [sp, #20]
 8003ea2:	bfa8      	it	ge
 8003ea4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8003ea6:	eba5 0503 	sub.w	r5, r5, r3
 8003eaa:	4415      	add	r5, r2
 8003eac:	4b6e      	ldr	r3, [pc, #440]	; (8004068 <_strtod_l+0x878>)
 8003eae:	f105 35ff 	add.w	r5, r5, #4294967295
 8003eb2:	bfb8      	it	lt
 8003eb4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003eb6:	429d      	cmp	r5, r3
 8003eb8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003ebc:	f280 80c4 	bge.w	8004048 <_strtod_l+0x858>
 8003ec0:	1b5b      	subs	r3, r3, r5
 8003ec2:	2b1f      	cmp	r3, #31
 8003ec4:	f04f 0701 	mov.w	r7, #1
 8003ec8:	eba2 0203 	sub.w	r2, r2, r3
 8003ecc:	f300 80b1 	bgt.w	8004032 <_strtod_l+0x842>
 8003ed0:	2500      	movs	r5, #0
 8003ed2:	fa07 f303 	lsl.w	r3, r7, r3
 8003ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ed8:	18b7      	adds	r7, r6, r2
 8003eda:	9b05      	ldr	r3, [sp, #20]
 8003edc:	42be      	cmp	r6, r7
 8003ede:	4414      	add	r4, r2
 8003ee0:	441c      	add	r4, r3
 8003ee2:	4633      	mov	r3, r6
 8003ee4:	bfa8      	it	ge
 8003ee6:	463b      	movge	r3, r7
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	bfa8      	it	ge
 8003eec:	4623      	movge	r3, r4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfc2      	ittt	gt
 8003ef2:	1aff      	subgt	r7, r7, r3
 8003ef4:	1ae4      	subgt	r4, r4, r3
 8003ef6:	1af6      	subgt	r6, r6, r3
 8003ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	dd17      	ble.n	8003f2e <_strtod_l+0x73e>
 8003efe:	461a      	mov	r2, r3
 8003f00:	4650      	mov	r0, sl
 8003f02:	9904      	ldr	r1, [sp, #16]
 8003f04:	f001 fef8 	bl	8005cf8 <__pow5mult>
 8003f08:	9004      	str	r0, [sp, #16]
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	f43f aeaf 	beq.w	8003c6e <_strtod_l+0x47e>
 8003f10:	4601      	mov	r1, r0
 8003f12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003f14:	4650      	mov	r0, sl
 8003f16:	f001 fe47 	bl	8005ba8 <__multiply>
 8003f1a:	9009      	str	r0, [sp, #36]	; 0x24
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	f43f aea6 	beq.w	8003c6e <_strtod_l+0x47e>
 8003f22:	4650      	mov	r0, sl
 8003f24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f26:	f001 fd29 	bl	800597c <_Bfree>
 8003f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8003f2e:	2f00      	cmp	r7, #0
 8003f30:	f300 808e 	bgt.w	8004050 <_strtod_l+0x860>
 8003f34:	9b07      	ldr	r3, [sp, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	dd08      	ble.n	8003f4c <_strtod_l+0x75c>
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003f3e:	9906      	ldr	r1, [sp, #24]
 8003f40:	f001 feda 	bl	8005cf8 <__pow5mult>
 8003f44:	9006      	str	r0, [sp, #24]
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f43f ae91 	beq.w	8003c6e <_strtod_l+0x47e>
 8003f4c:	2c00      	cmp	r4, #0
 8003f4e:	dd08      	ble.n	8003f62 <_strtod_l+0x772>
 8003f50:	4622      	mov	r2, r4
 8003f52:	4650      	mov	r0, sl
 8003f54:	9906      	ldr	r1, [sp, #24]
 8003f56:	f001 ff29 	bl	8005dac <__lshift>
 8003f5a:	9006      	str	r0, [sp, #24]
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	f43f ae86 	beq.w	8003c6e <_strtod_l+0x47e>
 8003f62:	2e00      	cmp	r6, #0
 8003f64:	dd08      	ble.n	8003f78 <_strtod_l+0x788>
 8003f66:	4632      	mov	r2, r6
 8003f68:	4650      	mov	r0, sl
 8003f6a:	9904      	ldr	r1, [sp, #16]
 8003f6c:	f001 ff1e 	bl	8005dac <__lshift>
 8003f70:	9004      	str	r0, [sp, #16]
 8003f72:	2800      	cmp	r0, #0
 8003f74:	f43f ae7b 	beq.w	8003c6e <_strtod_l+0x47e>
 8003f78:	4650      	mov	r0, sl
 8003f7a:	9a06      	ldr	r2, [sp, #24]
 8003f7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f7e:	f001 ffa1 	bl	8005ec4 <__mdiff>
 8003f82:	4683      	mov	fp, r0
 8003f84:	2800      	cmp	r0, #0
 8003f86:	f43f ae72 	beq.w	8003c6e <_strtod_l+0x47e>
 8003f8a:	2400      	movs	r4, #0
 8003f8c:	68c3      	ldr	r3, [r0, #12]
 8003f8e:	9904      	ldr	r1, [sp, #16]
 8003f90:	60c4      	str	r4, [r0, #12]
 8003f92:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f94:	f001 ff7a 	bl	8005e8c <__mcmp>
 8003f98:	42a0      	cmp	r0, r4
 8003f9a:	da6b      	bge.n	8004074 <_strtod_l+0x884>
 8003f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f9e:	ea53 0308 	orrs.w	r3, r3, r8
 8003fa2:	f040 8091 	bne.w	80040c8 <_strtod_l+0x8d8>
 8003fa6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 808c 	bne.w	80040c8 <_strtod_l+0x8d8>
 8003fb0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003fb4:	0d1b      	lsrs	r3, r3, #20
 8003fb6:	051b      	lsls	r3, r3, #20
 8003fb8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003fbc:	f240 8084 	bls.w	80040c8 <_strtod_l+0x8d8>
 8003fc0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8003fc4:	b91b      	cbnz	r3, 8003fce <_strtod_l+0x7de>
 8003fc6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	dd7c      	ble.n	80040c8 <_strtod_l+0x8d8>
 8003fce:	4659      	mov	r1, fp
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4650      	mov	r0, sl
 8003fd4:	f001 feea 	bl	8005dac <__lshift>
 8003fd8:	9904      	ldr	r1, [sp, #16]
 8003fda:	4683      	mov	fp, r0
 8003fdc:	f001 ff56 	bl	8005e8c <__mcmp>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	dd71      	ble.n	80040c8 <_strtod_l+0x8d8>
 8003fe4:	9905      	ldr	r1, [sp, #20]
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	4a20      	ldr	r2, [pc, #128]	; (800406c <_strtod_l+0x87c>)
 8003fea:	2900      	cmp	r1, #0
 8003fec:	f000 808c 	beq.w	8004108 <_strtod_l+0x918>
 8003ff0:	ea02 0109 	and.w	r1, r2, r9
 8003ff4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003ff8:	f300 8086 	bgt.w	8004108 <_strtod_l+0x918>
 8003ffc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004000:	f77f aeaa 	ble.w	8003d58 <_strtod_l+0x568>
 8004004:	4640      	mov	r0, r8
 8004006:	4649      	mov	r1, r9
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <_strtod_l+0x880>)
 800400a:	2200      	movs	r2, #0
 800400c:	f7fc fa64 	bl	80004d8 <__aeabi_dmul>
 8004010:	460b      	mov	r3, r1
 8004012:	4303      	orrs	r3, r0
 8004014:	bf08      	it	eq
 8004016:	2322      	moveq	r3, #34	; 0x22
 8004018:	4680      	mov	r8, r0
 800401a:	4689      	mov	r9, r1
 800401c:	bf08      	it	eq
 800401e:	f8ca 3000 	streq.w	r3, [sl]
 8004022:	e62f      	b.n	8003c84 <_strtod_l+0x494>
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	ea03 0808 	and.w	r8, r3, r8
 8004030:	e6e0      	b.n	8003df4 <_strtod_l+0x604>
 8004032:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004036:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800403a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800403e:	35e2      	adds	r5, #226	; 0xe2
 8004040:	fa07 f505 	lsl.w	r5, r7, r5
 8004044:	970f      	str	r7, [sp, #60]	; 0x3c
 8004046:	e747      	b.n	8003ed8 <_strtod_l+0x6e8>
 8004048:	2301      	movs	r3, #1
 800404a:	2500      	movs	r5, #0
 800404c:	930f      	str	r3, [sp, #60]	; 0x3c
 800404e:	e743      	b.n	8003ed8 <_strtod_l+0x6e8>
 8004050:	463a      	mov	r2, r7
 8004052:	4650      	mov	r0, sl
 8004054:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004056:	f001 fea9 	bl	8005dac <__lshift>
 800405a:	901a      	str	r0, [sp, #104]	; 0x68
 800405c:	2800      	cmp	r0, #0
 800405e:	f47f af69 	bne.w	8003f34 <_strtod_l+0x744>
 8004062:	e604      	b.n	8003c6e <_strtod_l+0x47e>
 8004064:	080073a0 	.word	0x080073a0
 8004068:	fffffc02 	.word	0xfffffc02
 800406c:	7ff00000 	.word	0x7ff00000
 8004070:	39500000 	.word	0x39500000
 8004074:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004078:	d165      	bne.n	8004146 <_strtod_l+0x956>
 800407a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800407c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004080:	b35a      	cbz	r2, 80040da <_strtod_l+0x8ea>
 8004082:	4a99      	ldr	r2, [pc, #612]	; (80042e8 <_strtod_l+0xaf8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d12b      	bne.n	80040e0 <_strtod_l+0x8f0>
 8004088:	9b05      	ldr	r3, [sp, #20]
 800408a:	4641      	mov	r1, r8
 800408c:	b303      	cbz	r3, 80040d0 <_strtod_l+0x8e0>
 800408e:	464a      	mov	r2, r9
 8004090:	4b96      	ldr	r3, [pc, #600]	; (80042ec <_strtod_l+0xafc>)
 8004092:	4013      	ands	r3, r2
 8004094:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004098:	f04f 32ff 	mov.w	r2, #4294967295
 800409c:	d81b      	bhi.n	80040d6 <_strtod_l+0x8e6>
 800409e:	0d1b      	lsrs	r3, r3, #20
 80040a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	4299      	cmp	r1, r3
 80040aa:	d119      	bne.n	80040e0 <_strtod_l+0x8f0>
 80040ac:	4b90      	ldr	r3, [pc, #576]	; (80042f0 <_strtod_l+0xb00>)
 80040ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d102      	bne.n	80040ba <_strtod_l+0x8ca>
 80040b4:	3101      	adds	r1, #1
 80040b6:	f43f adda 	beq.w	8003c6e <_strtod_l+0x47e>
 80040ba:	f04f 0800 	mov.w	r8, #0
 80040be:	4b8b      	ldr	r3, [pc, #556]	; (80042ec <_strtod_l+0xafc>)
 80040c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040c2:	401a      	ands	r2, r3
 80040c4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80040c8:	9b05      	ldr	r3, [sp, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d19a      	bne.n	8004004 <_strtod_l+0x814>
 80040ce:	e5d9      	b.n	8003c84 <_strtod_l+0x494>
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	e7e8      	b.n	80040a8 <_strtod_l+0x8b8>
 80040d6:	4613      	mov	r3, r2
 80040d8:	e7e6      	b.n	80040a8 <_strtod_l+0x8b8>
 80040da:	ea53 0308 	orrs.w	r3, r3, r8
 80040de:	d081      	beq.n	8003fe4 <_strtod_l+0x7f4>
 80040e0:	b1e5      	cbz	r5, 800411c <_strtod_l+0x92c>
 80040e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e4:	421d      	tst	r5, r3
 80040e6:	d0ef      	beq.n	80040c8 <_strtod_l+0x8d8>
 80040e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040ea:	4640      	mov	r0, r8
 80040ec:	4649      	mov	r1, r9
 80040ee:	9a05      	ldr	r2, [sp, #20]
 80040f0:	b1c3      	cbz	r3, 8004124 <_strtod_l+0x934>
 80040f2:	f7ff fb59 	bl	80037a8 <sulp>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040fe:	f7fc f835 	bl	800016c <__adddf3>
 8004102:	4680      	mov	r8, r0
 8004104:	4689      	mov	r9, r1
 8004106:	e7df      	b.n	80040c8 <_strtod_l+0x8d8>
 8004108:	4013      	ands	r3, r2
 800410a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800410e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004112:	f04f 38ff 	mov.w	r8, #4294967295
 8004116:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800411a:	e7d5      	b.n	80040c8 <_strtod_l+0x8d8>
 800411c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800411e:	ea13 0f08 	tst.w	r3, r8
 8004122:	e7e0      	b.n	80040e6 <_strtod_l+0x8f6>
 8004124:	f7ff fb40 	bl	80037a8 <sulp>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004130:	f7fc f81a 	bl	8000168 <__aeabi_dsub>
 8004134:	2200      	movs	r2, #0
 8004136:	2300      	movs	r3, #0
 8004138:	4680      	mov	r8, r0
 800413a:	4689      	mov	r9, r1
 800413c:	f7fc fc34 	bl	80009a8 <__aeabi_dcmpeq>
 8004140:	2800      	cmp	r0, #0
 8004142:	d0c1      	beq.n	80040c8 <_strtod_l+0x8d8>
 8004144:	e608      	b.n	8003d58 <_strtod_l+0x568>
 8004146:	4658      	mov	r0, fp
 8004148:	9904      	ldr	r1, [sp, #16]
 800414a:	f002 f81d 	bl	8006188 <__ratio>
 800414e:	2200      	movs	r2, #0
 8004150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004154:	4606      	mov	r6, r0
 8004156:	460f      	mov	r7, r1
 8004158:	f7fc fc3a 	bl	80009d0 <__aeabi_dcmple>
 800415c:	2800      	cmp	r0, #0
 800415e:	d070      	beq.n	8004242 <_strtod_l+0xa52>
 8004160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d042      	beq.n	80041ec <_strtod_l+0x9fc>
 8004166:	2600      	movs	r6, #0
 8004168:	4f62      	ldr	r7, [pc, #392]	; (80042f4 <_strtod_l+0xb04>)
 800416a:	4d62      	ldr	r5, [pc, #392]	; (80042f4 <_strtod_l+0xb04>)
 800416c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004172:	0d1b      	lsrs	r3, r3, #20
 8004174:	051b      	lsls	r3, r3, #20
 8004176:	930f      	str	r3, [sp, #60]	; 0x3c
 8004178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800417a:	4b5f      	ldr	r3, [pc, #380]	; (80042f8 <_strtod_l+0xb08>)
 800417c:	429a      	cmp	r2, r3
 800417e:	f040 80c3 	bne.w	8004308 <_strtod_l+0xb18>
 8004182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004184:	4640      	mov	r0, r8
 8004186:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800418a:	4649      	mov	r1, r9
 800418c:	f001 ff26 	bl	8005fdc <__ulp>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4630      	mov	r0, r6
 8004196:	4639      	mov	r1, r7
 8004198:	f7fc f99e 	bl	80004d8 <__aeabi_dmul>
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	f7fb ffe4 	bl	800016c <__adddf3>
 80041a4:	460b      	mov	r3, r1
 80041a6:	4951      	ldr	r1, [pc, #324]	; (80042ec <_strtod_l+0xafc>)
 80041a8:	4a54      	ldr	r2, [pc, #336]	; (80042fc <_strtod_l+0xb0c>)
 80041aa:	4019      	ands	r1, r3
 80041ac:	4291      	cmp	r1, r2
 80041ae:	4680      	mov	r8, r0
 80041b0:	d95d      	bls.n	800426e <_strtod_l+0xa7e>
 80041b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041b4:	4b4e      	ldr	r3, [pc, #312]	; (80042f0 <_strtod_l+0xb00>)
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d103      	bne.n	80041c2 <_strtod_l+0x9d2>
 80041ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041bc:	3301      	adds	r3, #1
 80041be:	f43f ad56 	beq.w	8003c6e <_strtod_l+0x47e>
 80041c2:	f04f 38ff 	mov.w	r8, #4294967295
 80041c6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80042f0 <_strtod_l+0xb00>
 80041ca:	4650      	mov	r0, sl
 80041cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80041ce:	f001 fbd5 	bl	800597c <_Bfree>
 80041d2:	4650      	mov	r0, sl
 80041d4:	9906      	ldr	r1, [sp, #24]
 80041d6:	f001 fbd1 	bl	800597c <_Bfree>
 80041da:	4650      	mov	r0, sl
 80041dc:	9904      	ldr	r1, [sp, #16]
 80041de:	f001 fbcd 	bl	800597c <_Bfree>
 80041e2:	4659      	mov	r1, fp
 80041e4:	4650      	mov	r0, sl
 80041e6:	f001 fbc9 	bl	800597c <_Bfree>
 80041ea:	e627      	b.n	8003e3c <_strtod_l+0x64c>
 80041ec:	f1b8 0f00 	cmp.w	r8, #0
 80041f0:	d119      	bne.n	8004226 <_strtod_l+0xa36>
 80041f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041f8:	b9e3      	cbnz	r3, 8004234 <_strtod_l+0xa44>
 80041fa:	2200      	movs	r2, #0
 80041fc:	4630      	mov	r0, r6
 80041fe:	4639      	mov	r1, r7
 8004200:	4b3c      	ldr	r3, [pc, #240]	; (80042f4 <_strtod_l+0xb04>)
 8004202:	f7fc fbdb 	bl	80009bc <__aeabi_dcmplt>
 8004206:	b9c8      	cbnz	r0, 800423c <_strtod_l+0xa4c>
 8004208:	2200      	movs	r2, #0
 800420a:	4630      	mov	r0, r6
 800420c:	4639      	mov	r1, r7
 800420e:	4b3c      	ldr	r3, [pc, #240]	; (8004300 <_strtod_l+0xb10>)
 8004210:	f7fc f962 	bl	80004d8 <__aeabi_dmul>
 8004214:	4604      	mov	r4, r0
 8004216:	460d      	mov	r5, r1
 8004218:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800421c:	9416      	str	r4, [sp, #88]	; 0x58
 800421e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004220:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004224:	e7a2      	b.n	800416c <_strtod_l+0x97c>
 8004226:	f1b8 0f01 	cmp.w	r8, #1
 800422a:	d103      	bne.n	8004234 <_strtod_l+0xa44>
 800422c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422e:	2b00      	cmp	r3, #0
 8004230:	f43f ad92 	beq.w	8003d58 <_strtod_l+0x568>
 8004234:	2600      	movs	r6, #0
 8004236:	2400      	movs	r4, #0
 8004238:	4f32      	ldr	r7, [pc, #200]	; (8004304 <_strtod_l+0xb14>)
 800423a:	e796      	b.n	800416a <_strtod_l+0x97a>
 800423c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800423e:	4d30      	ldr	r5, [pc, #192]	; (8004300 <_strtod_l+0xb10>)
 8004240:	e7ea      	b.n	8004218 <_strtod_l+0xa28>
 8004242:	4b2f      	ldr	r3, [pc, #188]	; (8004300 <_strtod_l+0xb10>)
 8004244:	2200      	movs	r2, #0
 8004246:	4630      	mov	r0, r6
 8004248:	4639      	mov	r1, r7
 800424a:	f7fc f945 	bl	80004d8 <__aeabi_dmul>
 800424e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004250:	4604      	mov	r4, r0
 8004252:	460d      	mov	r5, r1
 8004254:	b933      	cbnz	r3, 8004264 <_strtod_l+0xa74>
 8004256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800425a:	9010      	str	r0, [sp, #64]	; 0x40
 800425c:	9311      	str	r3, [sp, #68]	; 0x44
 800425e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004262:	e783      	b.n	800416c <_strtod_l+0x97c>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800426c:	e7f7      	b.n	800425e <_strtod_l+0xa6e>
 800426e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004272:	9b05      	ldr	r3, [sp, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1a8      	bne.n	80041ca <_strtod_l+0x9da>
 8004278:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800427c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800427e:	0d1b      	lsrs	r3, r3, #20
 8004280:	051b      	lsls	r3, r3, #20
 8004282:	429a      	cmp	r2, r3
 8004284:	d1a1      	bne.n	80041ca <_strtod_l+0x9da>
 8004286:	4620      	mov	r0, r4
 8004288:	4629      	mov	r1, r5
 800428a:	f7fc fc6d 	bl	8000b68 <__aeabi_d2lz>
 800428e:	f7fc f8f5 	bl	800047c <__aeabi_l2d>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	f7fb ff65 	bl	8000168 <__aeabi_dsub>
 800429e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80042a4:	ea43 0308 	orr.w	r3, r3, r8
 80042a8:	4313      	orrs	r3, r2
 80042aa:	4604      	mov	r4, r0
 80042ac:	460d      	mov	r5, r1
 80042ae:	d066      	beq.n	800437e <_strtod_l+0xb8e>
 80042b0:	a309      	add	r3, pc, #36	; (adr r3, 80042d8 <_strtod_l+0xae8>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fc fb81 	bl	80009bc <__aeabi_dcmplt>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	f47f ace2 	bne.w	8003c84 <_strtod_l+0x494>
 80042c0:	a307      	add	r3, pc, #28	; (adr r3, 80042e0 <_strtod_l+0xaf0>)
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	4620      	mov	r0, r4
 80042c8:	4629      	mov	r1, r5
 80042ca:	f7fc fb95 	bl	80009f8 <__aeabi_dcmpgt>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f43f af7b 	beq.w	80041ca <_strtod_l+0x9da>
 80042d4:	e4d6      	b.n	8003c84 <_strtod_l+0x494>
 80042d6:	bf00      	nop
 80042d8:	94a03595 	.word	0x94a03595
 80042dc:	3fdfffff 	.word	0x3fdfffff
 80042e0:	35afe535 	.word	0x35afe535
 80042e4:	3fe00000 	.word	0x3fe00000
 80042e8:	000fffff 	.word	0x000fffff
 80042ec:	7ff00000 	.word	0x7ff00000
 80042f0:	7fefffff 	.word	0x7fefffff
 80042f4:	3ff00000 	.word	0x3ff00000
 80042f8:	7fe00000 	.word	0x7fe00000
 80042fc:	7c9fffff 	.word	0x7c9fffff
 8004300:	3fe00000 	.word	0x3fe00000
 8004304:	bff00000 	.word	0xbff00000
 8004308:	9b05      	ldr	r3, [sp, #20]
 800430a:	b313      	cbz	r3, 8004352 <_strtod_l+0xb62>
 800430c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800430e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004312:	d81e      	bhi.n	8004352 <_strtod_l+0xb62>
 8004314:	a326      	add	r3, pc, #152	; (adr r3, 80043b0 <_strtod_l+0xbc0>)
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	4620      	mov	r0, r4
 800431c:	4629      	mov	r1, r5
 800431e:	f7fc fb57 	bl	80009d0 <__aeabi_dcmple>
 8004322:	b190      	cbz	r0, 800434a <_strtod_l+0xb5a>
 8004324:	4629      	mov	r1, r5
 8004326:	4620      	mov	r0, r4
 8004328:	f7fc fbae 	bl	8000a88 <__aeabi_d2uiz>
 800432c:	2801      	cmp	r0, #1
 800432e:	bf38      	it	cc
 8004330:	2001      	movcc	r0, #1
 8004332:	f7fc f857 	bl	80003e4 <__aeabi_ui2d>
 8004336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004338:	4604      	mov	r4, r0
 800433a:	460d      	mov	r5, r1
 800433c:	b9d3      	cbnz	r3, 8004374 <_strtod_l+0xb84>
 800433e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004342:	9012      	str	r0, [sp, #72]	; 0x48
 8004344:	9313      	str	r3, [sp, #76]	; 0x4c
 8004346:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800434a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800434c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004350:	1a9f      	subs	r7, r3, r2
 8004352:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004356:	f001 fe41 	bl	8005fdc <__ulp>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4630      	mov	r0, r6
 8004360:	4639      	mov	r1, r7
 8004362:	f7fc f8b9 	bl	80004d8 <__aeabi_dmul>
 8004366:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800436a:	f7fb feff 	bl	800016c <__adddf3>
 800436e:	4680      	mov	r8, r0
 8004370:	4689      	mov	r9, r1
 8004372:	e77e      	b.n	8004272 <_strtod_l+0xa82>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800437c:	e7e3      	b.n	8004346 <_strtod_l+0xb56>
 800437e:	a30e      	add	r3, pc, #56	; (adr r3, 80043b8 <_strtod_l+0xbc8>)
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f7fc fb1a 	bl	80009bc <__aeabi_dcmplt>
 8004388:	e7a1      	b.n	80042ce <_strtod_l+0xade>
 800438a:	2300      	movs	r3, #0
 800438c:	930a      	str	r3, [sp, #40]	; 0x28
 800438e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004390:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	f7ff ba71 	b.w	800387a <_strtod_l+0x8a>
 8004398:	2a65      	cmp	r2, #101	; 0x65
 800439a:	f43f ab63 	beq.w	8003a64 <_strtod_l+0x274>
 800439e:	2a45      	cmp	r2, #69	; 0x45
 80043a0:	f43f ab60 	beq.w	8003a64 <_strtod_l+0x274>
 80043a4:	2301      	movs	r3, #1
 80043a6:	f7ff bb95 	b.w	8003ad4 <_strtod_l+0x2e4>
 80043aa:	bf00      	nop
 80043ac:	f3af 8000 	nop.w
 80043b0:	ffc00000 	.word	0xffc00000
 80043b4:	41dfffff 	.word	0x41dfffff
 80043b8:	94a03595 	.word	0x94a03595
 80043bc:	3fcfffff 	.word	0x3fcfffff

080043c0 <_strtod_r>:
 80043c0:	4b01      	ldr	r3, [pc, #4]	; (80043c8 <_strtod_r+0x8>)
 80043c2:	f7ff ba15 	b.w	80037f0 <_strtod_l>
 80043c6:	bf00      	nop
 80043c8:	20000074 	.word	0x20000074

080043cc <_strtol_l.constprop.0>:
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d2:	4680      	mov	r8, r0
 80043d4:	d001      	beq.n	80043da <_strtol_l.constprop.0+0xe>
 80043d6:	2b24      	cmp	r3, #36	; 0x24
 80043d8:	d906      	bls.n	80043e8 <_strtol_l.constprop.0+0x1c>
 80043da:	f7fe fb21 	bl	8002a20 <__errno>
 80043de:	2316      	movs	r3, #22
 80043e0:	6003      	str	r3, [r0, #0]
 80043e2:	2000      	movs	r0, #0
 80043e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e8:	460d      	mov	r5, r1
 80043ea:	4f35      	ldr	r7, [pc, #212]	; (80044c0 <_strtol_l.constprop.0+0xf4>)
 80043ec:	4628      	mov	r0, r5
 80043ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043f2:	5de6      	ldrb	r6, [r4, r7]
 80043f4:	f016 0608 	ands.w	r6, r6, #8
 80043f8:	d1f8      	bne.n	80043ec <_strtol_l.constprop.0+0x20>
 80043fa:	2c2d      	cmp	r4, #45	; 0x2d
 80043fc:	d12f      	bne.n	800445e <_strtol_l.constprop.0+0x92>
 80043fe:	2601      	movs	r6, #1
 8004400:	782c      	ldrb	r4, [r5, #0]
 8004402:	1c85      	adds	r5, r0, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d057      	beq.n	80044b8 <_strtol_l.constprop.0+0xec>
 8004408:	2b10      	cmp	r3, #16
 800440a:	d109      	bne.n	8004420 <_strtol_l.constprop.0+0x54>
 800440c:	2c30      	cmp	r4, #48	; 0x30
 800440e:	d107      	bne.n	8004420 <_strtol_l.constprop.0+0x54>
 8004410:	7828      	ldrb	r0, [r5, #0]
 8004412:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004416:	2858      	cmp	r0, #88	; 0x58
 8004418:	d149      	bne.n	80044ae <_strtol_l.constprop.0+0xe2>
 800441a:	2310      	movs	r3, #16
 800441c:	786c      	ldrb	r4, [r5, #1]
 800441e:	3502      	adds	r5, #2
 8004420:	2700      	movs	r7, #0
 8004422:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004426:	f10e 3eff 	add.w	lr, lr, #4294967295
 800442a:	fbbe f9f3 	udiv	r9, lr, r3
 800442e:	4638      	mov	r0, r7
 8004430:	fb03 ea19 	mls	sl, r3, r9, lr
 8004434:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004438:	f1bc 0f09 	cmp.w	ip, #9
 800443c:	d814      	bhi.n	8004468 <_strtol_l.constprop.0+0x9c>
 800443e:	4664      	mov	r4, ip
 8004440:	42a3      	cmp	r3, r4
 8004442:	dd22      	ble.n	800448a <_strtol_l.constprop.0+0xbe>
 8004444:	2f00      	cmp	r7, #0
 8004446:	db1d      	blt.n	8004484 <_strtol_l.constprop.0+0xb8>
 8004448:	4581      	cmp	r9, r0
 800444a:	d31b      	bcc.n	8004484 <_strtol_l.constprop.0+0xb8>
 800444c:	d101      	bne.n	8004452 <_strtol_l.constprop.0+0x86>
 800444e:	45a2      	cmp	sl, r4
 8004450:	db18      	blt.n	8004484 <_strtol_l.constprop.0+0xb8>
 8004452:	2701      	movs	r7, #1
 8004454:	fb00 4003 	mla	r0, r0, r3, r4
 8004458:	f815 4b01 	ldrb.w	r4, [r5], #1
 800445c:	e7ea      	b.n	8004434 <_strtol_l.constprop.0+0x68>
 800445e:	2c2b      	cmp	r4, #43	; 0x2b
 8004460:	bf04      	itt	eq
 8004462:	782c      	ldrbeq	r4, [r5, #0]
 8004464:	1c85      	addeq	r5, r0, #2
 8004466:	e7cd      	b.n	8004404 <_strtol_l.constprop.0+0x38>
 8004468:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800446c:	f1bc 0f19 	cmp.w	ip, #25
 8004470:	d801      	bhi.n	8004476 <_strtol_l.constprop.0+0xaa>
 8004472:	3c37      	subs	r4, #55	; 0x37
 8004474:	e7e4      	b.n	8004440 <_strtol_l.constprop.0+0x74>
 8004476:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800447a:	f1bc 0f19 	cmp.w	ip, #25
 800447e:	d804      	bhi.n	800448a <_strtol_l.constprop.0+0xbe>
 8004480:	3c57      	subs	r4, #87	; 0x57
 8004482:	e7dd      	b.n	8004440 <_strtol_l.constprop.0+0x74>
 8004484:	f04f 37ff 	mov.w	r7, #4294967295
 8004488:	e7e6      	b.n	8004458 <_strtol_l.constprop.0+0x8c>
 800448a:	2f00      	cmp	r7, #0
 800448c:	da07      	bge.n	800449e <_strtol_l.constprop.0+0xd2>
 800448e:	2322      	movs	r3, #34	; 0x22
 8004490:	4670      	mov	r0, lr
 8004492:	f8c8 3000 	str.w	r3, [r8]
 8004496:	2a00      	cmp	r2, #0
 8004498:	d0a4      	beq.n	80043e4 <_strtol_l.constprop.0+0x18>
 800449a:	1e69      	subs	r1, r5, #1
 800449c:	e005      	b.n	80044aa <_strtol_l.constprop.0+0xde>
 800449e:	b106      	cbz	r6, 80044a2 <_strtol_l.constprop.0+0xd6>
 80044a0:	4240      	negs	r0, r0
 80044a2:	2a00      	cmp	r2, #0
 80044a4:	d09e      	beq.n	80043e4 <_strtol_l.constprop.0+0x18>
 80044a6:	2f00      	cmp	r7, #0
 80044a8:	d1f7      	bne.n	800449a <_strtol_l.constprop.0+0xce>
 80044aa:	6011      	str	r1, [r2, #0]
 80044ac:	e79a      	b.n	80043e4 <_strtol_l.constprop.0+0x18>
 80044ae:	2430      	movs	r4, #48	; 0x30
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1b5      	bne.n	8004420 <_strtol_l.constprop.0+0x54>
 80044b4:	2308      	movs	r3, #8
 80044b6:	e7b3      	b.n	8004420 <_strtol_l.constprop.0+0x54>
 80044b8:	2c30      	cmp	r4, #48	; 0x30
 80044ba:	d0a9      	beq.n	8004410 <_strtol_l.constprop.0+0x44>
 80044bc:	230a      	movs	r3, #10
 80044be:	e7af      	b.n	8004420 <_strtol_l.constprop.0+0x54>
 80044c0:	080073c9 	.word	0x080073c9

080044c4 <_strtol_r>:
 80044c4:	f7ff bf82 	b.w	80043cc <_strtol_l.constprop.0>

080044c8 <quorem>:
 80044c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	6903      	ldr	r3, [r0, #16]
 80044ce:	690c      	ldr	r4, [r1, #16]
 80044d0:	4607      	mov	r7, r0
 80044d2:	42a3      	cmp	r3, r4
 80044d4:	f2c0 8082 	blt.w	80045dc <quorem+0x114>
 80044d8:	3c01      	subs	r4, #1
 80044da:	f100 0514 	add.w	r5, r0, #20
 80044de:	f101 0814 	add.w	r8, r1, #20
 80044e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80044ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044f0:	3301      	adds	r3, #1
 80044f2:	429a      	cmp	r2, r3
 80044f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80044f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80044fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004500:	d331      	bcc.n	8004566 <quorem+0x9e>
 8004502:	f04f 0e00 	mov.w	lr, #0
 8004506:	4640      	mov	r0, r8
 8004508:	46ac      	mov	ip, r5
 800450a:	46f2      	mov	sl, lr
 800450c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004510:	b293      	uxth	r3, r2
 8004512:	fb06 e303 	mla	r3, r6, r3, lr
 8004516:	0c12      	lsrs	r2, r2, #16
 8004518:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800451c:	b29b      	uxth	r3, r3
 800451e:	fb06 e202 	mla	r2, r6, r2, lr
 8004522:	ebaa 0303 	sub.w	r3, sl, r3
 8004526:	f8dc a000 	ldr.w	sl, [ip]
 800452a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800452e:	fa1f fa8a 	uxth.w	sl, sl
 8004532:	4453      	add	r3, sl
 8004534:	f8dc a000 	ldr.w	sl, [ip]
 8004538:	b292      	uxth	r2, r2
 800453a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800453e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004542:	b29b      	uxth	r3, r3
 8004544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004548:	4581      	cmp	r9, r0
 800454a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800454e:	f84c 3b04 	str.w	r3, [ip], #4
 8004552:	d2db      	bcs.n	800450c <quorem+0x44>
 8004554:	f855 300b 	ldr.w	r3, [r5, fp]
 8004558:	b92b      	cbnz	r3, 8004566 <quorem+0x9e>
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	3b04      	subs	r3, #4
 800455e:	429d      	cmp	r5, r3
 8004560:	461a      	mov	r2, r3
 8004562:	d32f      	bcc.n	80045c4 <quorem+0xfc>
 8004564:	613c      	str	r4, [r7, #16]
 8004566:	4638      	mov	r0, r7
 8004568:	f001 fc90 	bl	8005e8c <__mcmp>
 800456c:	2800      	cmp	r0, #0
 800456e:	db25      	blt.n	80045bc <quorem+0xf4>
 8004570:	4628      	mov	r0, r5
 8004572:	f04f 0c00 	mov.w	ip, #0
 8004576:	3601      	adds	r6, #1
 8004578:	f858 1b04 	ldr.w	r1, [r8], #4
 800457c:	f8d0 e000 	ldr.w	lr, [r0]
 8004580:	b28b      	uxth	r3, r1
 8004582:	ebac 0303 	sub.w	r3, ip, r3
 8004586:	fa1f f28e 	uxth.w	r2, lr
 800458a:	4413      	add	r3, r2
 800458c:	0c0a      	lsrs	r2, r1, #16
 800458e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004592:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004596:	b29b      	uxth	r3, r3
 8004598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800459c:	45c1      	cmp	r9, r8
 800459e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80045a2:	f840 3b04 	str.w	r3, [r0], #4
 80045a6:	d2e7      	bcs.n	8004578 <quorem+0xb0>
 80045a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045b0:	b922      	cbnz	r2, 80045bc <quorem+0xf4>
 80045b2:	3b04      	subs	r3, #4
 80045b4:	429d      	cmp	r5, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	d30a      	bcc.n	80045d0 <quorem+0x108>
 80045ba:	613c      	str	r4, [r7, #16]
 80045bc:	4630      	mov	r0, r6
 80045be:	b003      	add	sp, #12
 80045c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	3b04      	subs	r3, #4
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	d1cb      	bne.n	8004564 <quorem+0x9c>
 80045cc:	3c01      	subs	r4, #1
 80045ce:	e7c6      	b.n	800455e <quorem+0x96>
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	3b04      	subs	r3, #4
 80045d4:	2a00      	cmp	r2, #0
 80045d6:	d1f0      	bne.n	80045ba <quorem+0xf2>
 80045d8:	3c01      	subs	r4, #1
 80045da:	e7eb      	b.n	80045b4 <quorem+0xec>
 80045dc:	2000      	movs	r0, #0
 80045de:	e7ee      	b.n	80045be <quorem+0xf6>

080045e0 <_dtoa_r>:
 80045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	4616      	mov	r6, r2
 80045e6:	461f      	mov	r7, r3
 80045e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80045ea:	b099      	sub	sp, #100	; 0x64
 80045ec:	4605      	mov	r5, r0
 80045ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80045f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80045f6:	b974      	cbnz	r4, 8004616 <_dtoa_r+0x36>
 80045f8:	2010      	movs	r0, #16
 80045fa:	f001 f949 	bl	8005890 <malloc>
 80045fe:	4602      	mov	r2, r0
 8004600:	6268      	str	r0, [r5, #36]	; 0x24
 8004602:	b920      	cbnz	r0, 800460e <_dtoa_r+0x2e>
 8004604:	21ea      	movs	r1, #234	; 0xea
 8004606:	4ba8      	ldr	r3, [pc, #672]	; (80048a8 <_dtoa_r+0x2c8>)
 8004608:	48a8      	ldr	r0, [pc, #672]	; (80048ac <_dtoa_r+0x2cc>)
 800460a:	f002 f8b3 	bl	8006774 <__assert_func>
 800460e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004612:	6004      	str	r4, [r0, #0]
 8004614:	60c4      	str	r4, [r0, #12]
 8004616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	b151      	cbz	r1, 8004632 <_dtoa_r+0x52>
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	2301      	movs	r3, #1
 8004620:	4093      	lsls	r3, r2
 8004622:	604a      	str	r2, [r1, #4]
 8004624:	608b      	str	r3, [r1, #8]
 8004626:	4628      	mov	r0, r5
 8004628:	f001 f9a8 	bl	800597c <_Bfree>
 800462c:	2200      	movs	r2, #0
 800462e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	1e3b      	subs	r3, r7, #0
 8004634:	bfaf      	iteee	ge
 8004636:	2300      	movge	r3, #0
 8004638:	2201      	movlt	r2, #1
 800463a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800463e:	9305      	strlt	r3, [sp, #20]
 8004640:	bfa8      	it	ge
 8004642:	f8c8 3000 	strge.w	r3, [r8]
 8004646:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800464a:	4b99      	ldr	r3, [pc, #612]	; (80048b0 <_dtoa_r+0x2d0>)
 800464c:	bfb8      	it	lt
 800464e:	f8c8 2000 	strlt.w	r2, [r8]
 8004652:	ea33 0309 	bics.w	r3, r3, r9
 8004656:	d119      	bne.n	800468c <_dtoa_r+0xac>
 8004658:	f242 730f 	movw	r3, #9999	; 0x270f
 800465c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004664:	4333      	orrs	r3, r6
 8004666:	f000 857f 	beq.w	8005168 <_dtoa_r+0xb88>
 800466a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800466c:	b953      	cbnz	r3, 8004684 <_dtoa_r+0xa4>
 800466e:	4b91      	ldr	r3, [pc, #580]	; (80048b4 <_dtoa_r+0x2d4>)
 8004670:	e022      	b.n	80046b8 <_dtoa_r+0xd8>
 8004672:	4b91      	ldr	r3, [pc, #580]	; (80048b8 <_dtoa_r+0x2d8>)
 8004674:	9303      	str	r3, [sp, #12]
 8004676:	3308      	adds	r3, #8
 8004678:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	9803      	ldr	r0, [sp, #12]
 800467e:	b019      	add	sp, #100	; 0x64
 8004680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004684:	4b8b      	ldr	r3, [pc, #556]	; (80048b4 <_dtoa_r+0x2d4>)
 8004686:	9303      	str	r3, [sp, #12]
 8004688:	3303      	adds	r3, #3
 800468a:	e7f5      	b.n	8004678 <_dtoa_r+0x98>
 800468c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004690:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004698:	2200      	movs	r2, #0
 800469a:	2300      	movs	r3, #0
 800469c:	f7fc f984 	bl	80009a8 <__aeabi_dcmpeq>
 80046a0:	4680      	mov	r8, r0
 80046a2:	b158      	cbz	r0, 80046bc <_dtoa_r+0xdc>
 80046a4:	2301      	movs	r3, #1
 80046a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8558 	beq.w	8005162 <_dtoa_r+0xb82>
 80046b2:	4882      	ldr	r0, [pc, #520]	; (80048bc <_dtoa_r+0x2dc>)
 80046b4:	6018      	str	r0, [r3, #0]
 80046b6:	1e43      	subs	r3, r0, #1
 80046b8:	9303      	str	r3, [sp, #12]
 80046ba:	e7df      	b.n	800467c <_dtoa_r+0x9c>
 80046bc:	ab16      	add	r3, sp, #88	; 0x58
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	ab17      	add	r3, sp, #92	; 0x5c
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4628      	mov	r0, r5
 80046c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80046ca:	f001 fd01 	bl	80060d0 <__d2b>
 80046ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80046d2:	4683      	mov	fp, r0
 80046d4:	2c00      	cmp	r4, #0
 80046d6:	d07f      	beq.n	80047d8 <_dtoa_r+0x1f8>
 80046d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80046e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80046ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80046ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80046f2:	2200      	movs	r2, #0
 80046f4:	4b72      	ldr	r3, [pc, #456]	; (80048c0 <_dtoa_r+0x2e0>)
 80046f6:	f7fb fd37 	bl	8000168 <__aeabi_dsub>
 80046fa:	a365      	add	r3, pc, #404	; (adr r3, 8004890 <_dtoa_r+0x2b0>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fb feea 	bl	80004d8 <__aeabi_dmul>
 8004704:	a364      	add	r3, pc, #400	; (adr r3, 8004898 <_dtoa_r+0x2b8>)
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f7fb fd2f 	bl	800016c <__adddf3>
 800470e:	4606      	mov	r6, r0
 8004710:	4620      	mov	r0, r4
 8004712:	460f      	mov	r7, r1
 8004714:	f7fb fe76 	bl	8000404 <__aeabi_i2d>
 8004718:	a361      	add	r3, pc, #388	; (adr r3, 80048a0 <_dtoa_r+0x2c0>)
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f7fb fedb 	bl	80004d8 <__aeabi_dmul>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4630      	mov	r0, r6
 8004728:	4639      	mov	r1, r7
 800472a:	f7fb fd1f 	bl	800016c <__adddf3>
 800472e:	4606      	mov	r6, r0
 8004730:	460f      	mov	r7, r1
 8004732:	f7fc f981 	bl	8000a38 <__aeabi_d2iz>
 8004736:	2200      	movs	r2, #0
 8004738:	4682      	mov	sl, r0
 800473a:	2300      	movs	r3, #0
 800473c:	4630      	mov	r0, r6
 800473e:	4639      	mov	r1, r7
 8004740:	f7fc f93c 	bl	80009bc <__aeabi_dcmplt>
 8004744:	b148      	cbz	r0, 800475a <_dtoa_r+0x17a>
 8004746:	4650      	mov	r0, sl
 8004748:	f7fb fe5c 	bl	8000404 <__aeabi_i2d>
 800474c:	4632      	mov	r2, r6
 800474e:	463b      	mov	r3, r7
 8004750:	f7fc f92a 	bl	80009a8 <__aeabi_dcmpeq>
 8004754:	b908      	cbnz	r0, 800475a <_dtoa_r+0x17a>
 8004756:	f10a 3aff 	add.w	sl, sl, #4294967295
 800475a:	f1ba 0f16 	cmp.w	sl, #22
 800475e:	d858      	bhi.n	8004812 <_dtoa_r+0x232>
 8004760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004764:	4b57      	ldr	r3, [pc, #348]	; (80048c4 <_dtoa_r+0x2e4>)
 8004766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f7fc f925 	bl	80009bc <__aeabi_dcmplt>
 8004772:	2800      	cmp	r0, #0
 8004774:	d04f      	beq.n	8004816 <_dtoa_r+0x236>
 8004776:	2300      	movs	r3, #0
 8004778:	f10a 3aff 	add.w	sl, sl, #4294967295
 800477c:	930f      	str	r3, [sp, #60]	; 0x3c
 800477e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004780:	1b1c      	subs	r4, r3, r4
 8004782:	1e63      	subs	r3, r4, #1
 8004784:	9309      	str	r3, [sp, #36]	; 0x24
 8004786:	bf49      	itett	mi
 8004788:	f1c4 0301 	rsbmi	r3, r4, #1
 800478c:	2300      	movpl	r3, #0
 800478e:	9306      	strmi	r3, [sp, #24]
 8004790:	2300      	movmi	r3, #0
 8004792:	bf54      	ite	pl
 8004794:	9306      	strpl	r3, [sp, #24]
 8004796:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004798:	f1ba 0f00 	cmp.w	sl, #0
 800479c:	db3d      	blt.n	800481a <_dtoa_r+0x23a>
 800479e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80047a4:	4453      	add	r3, sl
 80047a6:	9309      	str	r3, [sp, #36]	; 0x24
 80047a8:	2300      	movs	r3, #0
 80047aa:	930a      	str	r3, [sp, #40]	; 0x28
 80047ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047ae:	2b09      	cmp	r3, #9
 80047b0:	f200 808c 	bhi.w	80048cc <_dtoa_r+0x2ec>
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	bfc4      	itt	gt
 80047b8:	3b04      	subgt	r3, #4
 80047ba:	9322      	strgt	r3, [sp, #136]	; 0x88
 80047bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047be:	bfc8      	it	gt
 80047c0:	2400      	movgt	r4, #0
 80047c2:	f1a3 0302 	sub.w	r3, r3, #2
 80047c6:	bfd8      	it	le
 80047c8:	2401      	movle	r4, #1
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	f200 808a 	bhi.w	80048e4 <_dtoa_r+0x304>
 80047d0:	e8df f003 	tbb	[pc, r3]
 80047d4:	5b4d4f2d 	.word	0x5b4d4f2d
 80047d8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80047dc:	441c      	add	r4, r3
 80047de:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	bfc3      	ittte	gt
 80047e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80047ea:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80047ee:	fa09 f303 	lslgt.w	r3, r9, r3
 80047f2:	f1c3 0320 	rsble	r3, r3, #32
 80047f6:	bfc6      	itte	gt
 80047f8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80047fc:	4318      	orrgt	r0, r3
 80047fe:	fa06 f003 	lslle.w	r0, r6, r3
 8004802:	f7fb fdef 	bl	80003e4 <__aeabi_ui2d>
 8004806:	2301      	movs	r3, #1
 8004808:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800480c:	3c01      	subs	r4, #1
 800480e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004810:	e76f      	b.n	80046f2 <_dtoa_r+0x112>
 8004812:	2301      	movs	r3, #1
 8004814:	e7b2      	b.n	800477c <_dtoa_r+0x19c>
 8004816:	900f      	str	r0, [sp, #60]	; 0x3c
 8004818:	e7b1      	b.n	800477e <_dtoa_r+0x19e>
 800481a:	9b06      	ldr	r3, [sp, #24]
 800481c:	eba3 030a 	sub.w	r3, r3, sl
 8004820:	9306      	str	r3, [sp, #24]
 8004822:	f1ca 0300 	rsb	r3, sl, #0
 8004826:	930a      	str	r3, [sp, #40]	; 0x28
 8004828:	2300      	movs	r3, #0
 800482a:	930e      	str	r3, [sp, #56]	; 0x38
 800482c:	e7be      	b.n	80047ac <_dtoa_r+0x1cc>
 800482e:	2300      	movs	r3, #0
 8004830:	930b      	str	r3, [sp, #44]	; 0x2c
 8004832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004834:	2b00      	cmp	r3, #0
 8004836:	dc58      	bgt.n	80048ea <_dtoa_r+0x30a>
 8004838:	f04f 0901 	mov.w	r9, #1
 800483c:	464b      	mov	r3, r9
 800483e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004842:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004846:	2200      	movs	r2, #0
 8004848:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800484a:	6042      	str	r2, [r0, #4]
 800484c:	2204      	movs	r2, #4
 800484e:	f102 0614 	add.w	r6, r2, #20
 8004852:	429e      	cmp	r6, r3
 8004854:	6841      	ldr	r1, [r0, #4]
 8004856:	d94e      	bls.n	80048f6 <_dtoa_r+0x316>
 8004858:	4628      	mov	r0, r5
 800485a:	f001 f84f 	bl	80058fc <_Balloc>
 800485e:	9003      	str	r0, [sp, #12]
 8004860:	2800      	cmp	r0, #0
 8004862:	d14c      	bne.n	80048fe <_dtoa_r+0x31e>
 8004864:	4602      	mov	r2, r0
 8004866:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800486a:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <_dtoa_r+0x2e8>)
 800486c:	e6cc      	b.n	8004608 <_dtoa_r+0x28>
 800486e:	2301      	movs	r3, #1
 8004870:	e7de      	b.n	8004830 <_dtoa_r+0x250>
 8004872:	2300      	movs	r3, #0
 8004874:	930b      	str	r3, [sp, #44]	; 0x2c
 8004876:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004878:	eb0a 0903 	add.w	r9, sl, r3
 800487c:	f109 0301 	add.w	r3, r9, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	9308      	str	r3, [sp, #32]
 8004884:	bfb8      	it	lt
 8004886:	2301      	movlt	r3, #1
 8004888:	e7dd      	b.n	8004846 <_dtoa_r+0x266>
 800488a:	2301      	movs	r3, #1
 800488c:	e7f2      	b.n	8004874 <_dtoa_r+0x294>
 800488e:	bf00      	nop
 8004890:	636f4361 	.word	0x636f4361
 8004894:	3fd287a7 	.word	0x3fd287a7
 8004898:	8b60c8b3 	.word	0x8b60c8b3
 800489c:	3fc68a28 	.word	0x3fc68a28
 80048a0:	509f79fb 	.word	0x509f79fb
 80048a4:	3fd34413 	.word	0x3fd34413
 80048a8:	080074d6 	.word	0x080074d6
 80048ac:	080074ed 	.word	0x080074ed
 80048b0:	7ff00000 	.word	0x7ff00000
 80048b4:	080074d2 	.word	0x080074d2
 80048b8:	080074c9 	.word	0x080074c9
 80048bc:	0800734d 	.word	0x0800734d
 80048c0:	3ff80000 	.word	0x3ff80000
 80048c4:	08007658 	.word	0x08007658
 80048c8:	08007548 	.word	0x08007548
 80048cc:	2401      	movs	r4, #1
 80048ce:	2300      	movs	r3, #0
 80048d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80048d2:	9322      	str	r3, [sp, #136]	; 0x88
 80048d4:	f04f 39ff 	mov.w	r9, #4294967295
 80048d8:	2200      	movs	r2, #0
 80048da:	2312      	movs	r3, #18
 80048dc:	f8cd 9020 	str.w	r9, [sp, #32]
 80048e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80048e2:	e7b0      	b.n	8004846 <_dtoa_r+0x266>
 80048e4:	2301      	movs	r3, #1
 80048e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048e8:	e7f4      	b.n	80048d4 <_dtoa_r+0x2f4>
 80048ea:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80048ee:	464b      	mov	r3, r9
 80048f0:	f8cd 9020 	str.w	r9, [sp, #32]
 80048f4:	e7a7      	b.n	8004846 <_dtoa_r+0x266>
 80048f6:	3101      	adds	r1, #1
 80048f8:	6041      	str	r1, [r0, #4]
 80048fa:	0052      	lsls	r2, r2, #1
 80048fc:	e7a7      	b.n	800484e <_dtoa_r+0x26e>
 80048fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004900:	9a03      	ldr	r2, [sp, #12]
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	9b08      	ldr	r3, [sp, #32]
 8004906:	2b0e      	cmp	r3, #14
 8004908:	f200 80a8 	bhi.w	8004a5c <_dtoa_r+0x47c>
 800490c:	2c00      	cmp	r4, #0
 800490e:	f000 80a5 	beq.w	8004a5c <_dtoa_r+0x47c>
 8004912:	f1ba 0f00 	cmp.w	sl, #0
 8004916:	dd34      	ble.n	8004982 <_dtoa_r+0x3a2>
 8004918:	4a9a      	ldr	r2, [pc, #616]	; (8004b84 <_dtoa_r+0x5a4>)
 800491a:	f00a 030f 	and.w	r3, sl, #15
 800491e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004922:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004926:	e9d3 3400 	ldrd	r3, r4, [r3]
 800492a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800492e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004932:	d016      	beq.n	8004962 <_dtoa_r+0x382>
 8004934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004938:	4b93      	ldr	r3, [pc, #588]	; (8004b88 <_dtoa_r+0x5a8>)
 800493a:	2703      	movs	r7, #3
 800493c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004940:	f7fb fef4 	bl	800072c <__aeabi_ddiv>
 8004944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004948:	f004 040f 	and.w	r4, r4, #15
 800494c:	4e8e      	ldr	r6, [pc, #568]	; (8004b88 <_dtoa_r+0x5a8>)
 800494e:	b954      	cbnz	r4, 8004966 <_dtoa_r+0x386>
 8004950:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004954:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004958:	f7fb fee8 	bl	800072c <__aeabi_ddiv>
 800495c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004960:	e029      	b.n	80049b6 <_dtoa_r+0x3d6>
 8004962:	2702      	movs	r7, #2
 8004964:	e7f2      	b.n	800494c <_dtoa_r+0x36c>
 8004966:	07e1      	lsls	r1, r4, #31
 8004968:	d508      	bpl.n	800497c <_dtoa_r+0x39c>
 800496a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800496e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004972:	f7fb fdb1 	bl	80004d8 <__aeabi_dmul>
 8004976:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800497a:	3701      	adds	r7, #1
 800497c:	1064      	asrs	r4, r4, #1
 800497e:	3608      	adds	r6, #8
 8004980:	e7e5      	b.n	800494e <_dtoa_r+0x36e>
 8004982:	f000 80a5 	beq.w	8004ad0 <_dtoa_r+0x4f0>
 8004986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800498a:	f1ca 0400 	rsb	r4, sl, #0
 800498e:	4b7d      	ldr	r3, [pc, #500]	; (8004b84 <_dtoa_r+0x5a4>)
 8004990:	f004 020f 	and.w	r2, r4, #15
 8004994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f7fb fd9c 	bl	80004d8 <__aeabi_dmul>
 80049a0:	2702      	movs	r7, #2
 80049a2:	2300      	movs	r3, #0
 80049a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049a8:	4e77      	ldr	r6, [pc, #476]	; (8004b88 <_dtoa_r+0x5a8>)
 80049aa:	1124      	asrs	r4, r4, #4
 80049ac:	2c00      	cmp	r4, #0
 80049ae:	f040 8084 	bne.w	8004aba <_dtoa_r+0x4da>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1d2      	bne.n	800495c <_dtoa_r+0x37c>
 80049b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 808b 	beq.w	8004ad4 <_dtoa_r+0x4f4>
 80049be:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80049c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80049c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80049ca:	2200      	movs	r2, #0
 80049cc:	4b6f      	ldr	r3, [pc, #444]	; (8004b8c <_dtoa_r+0x5ac>)
 80049ce:	f7fb fff5 	bl	80009bc <__aeabi_dcmplt>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d07e      	beq.n	8004ad4 <_dtoa_r+0x4f4>
 80049d6:	9b08      	ldr	r3, [sp, #32]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d07b      	beq.n	8004ad4 <_dtoa_r+0x4f4>
 80049dc:	f1b9 0f00 	cmp.w	r9, #0
 80049e0:	dd38      	ble.n	8004a54 <_dtoa_r+0x474>
 80049e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80049e6:	2200      	movs	r2, #0
 80049e8:	4b69      	ldr	r3, [pc, #420]	; (8004b90 <_dtoa_r+0x5b0>)
 80049ea:	f7fb fd75 	bl	80004d8 <__aeabi_dmul>
 80049ee:	464c      	mov	r4, r9
 80049f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049f4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80049f8:	3701      	adds	r7, #1
 80049fa:	4638      	mov	r0, r7
 80049fc:	f7fb fd02 	bl	8000404 <__aeabi_i2d>
 8004a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a04:	f7fb fd68 	bl	80004d8 <__aeabi_dmul>
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <_dtoa_r+0x5b4>)
 8004a0c:	f7fb fbae 	bl	800016c <__adddf3>
 8004a10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004a14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a18:	9611      	str	r6, [sp, #68]	; 0x44
 8004a1a:	2c00      	cmp	r4, #0
 8004a1c:	d15d      	bne.n	8004ada <_dtoa_r+0x4fa>
 8004a1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a22:	2200      	movs	r2, #0
 8004a24:	4b5c      	ldr	r3, [pc, #368]	; (8004b98 <_dtoa_r+0x5b8>)
 8004a26:	f7fb fb9f 	bl	8000168 <__aeabi_dsub>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a32:	4633      	mov	r3, r6
 8004a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a36:	f7fb ffdf 	bl	80009f8 <__aeabi_dcmpgt>
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	f040 829c 	bne.w	8004f78 <_dtoa_r+0x998>
 8004a40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a46:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004a4a:	f7fb ffb7 	bl	80009bc <__aeabi_dcmplt>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	f040 8290 	bne.w	8004f74 <_dtoa_r+0x994>
 8004a54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004a58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f2c0 8152 	blt.w	8004d08 <_dtoa_r+0x728>
 8004a64:	f1ba 0f0e 	cmp.w	sl, #14
 8004a68:	f300 814e 	bgt.w	8004d08 <_dtoa_r+0x728>
 8004a6c:	4b45      	ldr	r3, [pc, #276]	; (8004b84 <_dtoa_r+0x5a4>)
 8004a6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004a72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a76:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004a7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f280 80db 	bge.w	8004c38 <_dtoa_r+0x658>
 8004a82:	9b08      	ldr	r3, [sp, #32]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f300 80d7 	bgt.w	8004c38 <_dtoa_r+0x658>
 8004a8a:	f040 8272 	bne.w	8004f72 <_dtoa_r+0x992>
 8004a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a92:	2200      	movs	r2, #0
 8004a94:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <_dtoa_r+0x5b8>)
 8004a96:	f7fb fd1f 	bl	80004d8 <__aeabi_dmul>
 8004a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a9e:	f7fb ffa1 	bl	80009e4 <__aeabi_dcmpge>
 8004aa2:	9c08      	ldr	r4, [sp, #32]
 8004aa4:	4626      	mov	r6, r4
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	f040 8248 	bne.w	8004f3c <_dtoa_r+0x95c>
 8004aac:	2331      	movs	r3, #49	; 0x31
 8004aae:	9f03      	ldr	r7, [sp, #12]
 8004ab0:	f10a 0a01 	add.w	sl, sl, #1
 8004ab4:	f807 3b01 	strb.w	r3, [r7], #1
 8004ab8:	e244      	b.n	8004f44 <_dtoa_r+0x964>
 8004aba:	07e2      	lsls	r2, r4, #31
 8004abc:	d505      	bpl.n	8004aca <_dtoa_r+0x4ea>
 8004abe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ac2:	f7fb fd09 	bl	80004d8 <__aeabi_dmul>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	3701      	adds	r7, #1
 8004aca:	1064      	asrs	r4, r4, #1
 8004acc:	3608      	adds	r6, #8
 8004ace:	e76d      	b.n	80049ac <_dtoa_r+0x3cc>
 8004ad0:	2702      	movs	r7, #2
 8004ad2:	e770      	b.n	80049b6 <_dtoa_r+0x3d6>
 8004ad4:	46d0      	mov	r8, sl
 8004ad6:	9c08      	ldr	r4, [sp, #32]
 8004ad8:	e78f      	b.n	80049fa <_dtoa_r+0x41a>
 8004ada:	9903      	ldr	r1, [sp, #12]
 8004adc:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <_dtoa_r+0x5a4>)
 8004ade:	4421      	add	r1, r4
 8004ae0:	9112      	str	r1, [sp, #72]	; 0x48
 8004ae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ae8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004aec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004af0:	2900      	cmp	r1, #0
 8004af2:	d055      	beq.n	8004ba0 <_dtoa_r+0x5c0>
 8004af4:	2000      	movs	r0, #0
 8004af6:	4929      	ldr	r1, [pc, #164]	; (8004b9c <_dtoa_r+0x5bc>)
 8004af8:	f7fb fe18 	bl	800072c <__aeabi_ddiv>
 8004afc:	463b      	mov	r3, r7
 8004afe:	4632      	mov	r2, r6
 8004b00:	f7fb fb32 	bl	8000168 <__aeabi_dsub>
 8004b04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b08:	9f03      	ldr	r7, [sp, #12]
 8004b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b0e:	f7fb ff93 	bl	8000a38 <__aeabi_d2iz>
 8004b12:	4604      	mov	r4, r0
 8004b14:	f7fb fc76 	bl	8000404 <__aeabi_i2d>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b20:	f7fb fb22 	bl	8000168 <__aeabi_dsub>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	3430      	adds	r4, #48	; 0x30
 8004b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b32:	f807 4b01 	strb.w	r4, [r7], #1
 8004b36:	f7fb ff41 	bl	80009bc <__aeabi_dcmplt>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d174      	bne.n	8004c28 <_dtoa_r+0x648>
 8004b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b42:	2000      	movs	r0, #0
 8004b44:	4911      	ldr	r1, [pc, #68]	; (8004b8c <_dtoa_r+0x5ac>)
 8004b46:	f7fb fb0f 	bl	8000168 <__aeabi_dsub>
 8004b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b4e:	f7fb ff35 	bl	80009bc <__aeabi_dcmplt>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	f040 80b7 	bne.w	8004cc6 <_dtoa_r+0x6e6>
 8004b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b5a:	429f      	cmp	r7, r3
 8004b5c:	f43f af7a 	beq.w	8004a54 <_dtoa_r+0x474>
 8004b60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b64:	2200      	movs	r2, #0
 8004b66:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <_dtoa_r+0x5b0>)
 8004b68:	f7fb fcb6 	bl	80004d8 <__aeabi_dmul>
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <_dtoa_r+0x5b0>)
 8004b78:	f7fb fcae 	bl	80004d8 <__aeabi_dmul>
 8004b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b80:	e7c3      	b.n	8004b0a <_dtoa_r+0x52a>
 8004b82:	bf00      	nop
 8004b84:	08007658 	.word	0x08007658
 8004b88:	08007630 	.word	0x08007630
 8004b8c:	3ff00000 	.word	0x3ff00000
 8004b90:	40240000 	.word	0x40240000
 8004b94:	401c0000 	.word	0x401c0000
 8004b98:	40140000 	.word	0x40140000
 8004b9c:	3fe00000 	.word	0x3fe00000
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	f7fb fc98 	bl	80004d8 <__aeabi_dmul>
 8004ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004baa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bae:	9c03      	ldr	r4, [sp, #12]
 8004bb0:	9314      	str	r3, [sp, #80]	; 0x50
 8004bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bb6:	f7fb ff3f 	bl	8000a38 <__aeabi_d2iz>
 8004bba:	9015      	str	r0, [sp, #84]	; 0x54
 8004bbc:	f7fb fc22 	bl	8000404 <__aeabi_i2d>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bc8:	f7fb face 	bl	8000168 <__aeabi_dsub>
 8004bcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bce:	4606      	mov	r6, r0
 8004bd0:	3330      	adds	r3, #48	; 0x30
 8004bd2:	f804 3b01 	strb.w	r3, [r4], #1
 8004bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bd8:	460f      	mov	r7, r1
 8004bda:	429c      	cmp	r4, r3
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	d124      	bne.n	8004c2c <_dtoa_r+0x64c>
 8004be2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004be6:	4bb0      	ldr	r3, [pc, #704]	; (8004ea8 <_dtoa_r+0x8c8>)
 8004be8:	f7fb fac0 	bl	800016c <__adddf3>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	4639      	mov	r1, r7
 8004bf4:	f7fb ff00 	bl	80009f8 <__aeabi_dcmpgt>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d163      	bne.n	8004cc4 <_dtoa_r+0x6e4>
 8004bfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c00:	2000      	movs	r0, #0
 8004c02:	49a9      	ldr	r1, [pc, #676]	; (8004ea8 <_dtoa_r+0x8c8>)
 8004c04:	f7fb fab0 	bl	8000168 <__aeabi_dsub>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	4639      	mov	r1, r7
 8004c10:	f7fb fed4 	bl	80009bc <__aeabi_dcmplt>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	f43f af1d 	beq.w	8004a54 <_dtoa_r+0x474>
 8004c1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004c1c:	1e7b      	subs	r3, r7, #1
 8004c1e:	9314      	str	r3, [sp, #80]	; 0x50
 8004c20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004c24:	2b30      	cmp	r3, #48	; 0x30
 8004c26:	d0f8      	beq.n	8004c1a <_dtoa_r+0x63a>
 8004c28:	46c2      	mov	sl, r8
 8004c2a:	e03b      	b.n	8004ca4 <_dtoa_r+0x6c4>
 8004c2c:	4b9f      	ldr	r3, [pc, #636]	; (8004eac <_dtoa_r+0x8cc>)
 8004c2e:	f7fb fc53 	bl	80004d8 <__aeabi_dmul>
 8004c32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c36:	e7bc      	b.n	8004bb2 <_dtoa_r+0x5d2>
 8004c38:	9f03      	ldr	r7, [sp, #12]
 8004c3a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004c3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c42:	4640      	mov	r0, r8
 8004c44:	4649      	mov	r1, r9
 8004c46:	f7fb fd71 	bl	800072c <__aeabi_ddiv>
 8004c4a:	f7fb fef5 	bl	8000a38 <__aeabi_d2iz>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	f7fb fbd8 	bl	8000404 <__aeabi_i2d>
 8004c54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c58:	f7fb fc3e 	bl	80004d8 <__aeabi_dmul>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4640      	mov	r0, r8
 8004c62:	4649      	mov	r1, r9
 8004c64:	f7fb fa80 	bl	8000168 <__aeabi_dsub>
 8004c68:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004c6c:	f807 6b01 	strb.w	r6, [r7], #1
 8004c70:	9e03      	ldr	r6, [sp, #12]
 8004c72:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004c76:	1bbe      	subs	r6, r7, r6
 8004c78:	45b4      	cmp	ip, r6
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	d136      	bne.n	8004cee <_dtoa_r+0x70e>
 8004c80:	f7fb fa74 	bl	800016c <__adddf3>
 8004c84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c88:	4680      	mov	r8, r0
 8004c8a:	4689      	mov	r9, r1
 8004c8c:	f7fb feb4 	bl	80009f8 <__aeabi_dcmpgt>
 8004c90:	bb58      	cbnz	r0, 8004cea <_dtoa_r+0x70a>
 8004c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c96:	4640      	mov	r0, r8
 8004c98:	4649      	mov	r1, r9
 8004c9a:	f7fb fe85 	bl	80009a8 <__aeabi_dcmpeq>
 8004c9e:	b108      	cbz	r0, 8004ca4 <_dtoa_r+0x6c4>
 8004ca0:	07e1      	lsls	r1, r4, #31
 8004ca2:	d422      	bmi.n	8004cea <_dtoa_r+0x70a>
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	4659      	mov	r1, fp
 8004ca8:	f000 fe68 	bl	800597c <_Bfree>
 8004cac:	2300      	movs	r3, #0
 8004cae:	703b      	strb	r3, [r7, #0]
 8004cb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004cb2:	f10a 0001 	add.w	r0, sl, #1
 8004cb6:	6018      	str	r0, [r3, #0]
 8004cb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f43f acde 	beq.w	800467c <_dtoa_r+0x9c>
 8004cc0:	601f      	str	r7, [r3, #0]
 8004cc2:	e4db      	b.n	800467c <_dtoa_r+0x9c>
 8004cc4:	4627      	mov	r7, r4
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	461f      	mov	r7, r3
 8004cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cce:	2a39      	cmp	r2, #57	; 0x39
 8004cd0:	d107      	bne.n	8004ce2 <_dtoa_r+0x702>
 8004cd2:	9a03      	ldr	r2, [sp, #12]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d1f7      	bne.n	8004cc8 <_dtoa_r+0x6e8>
 8004cd8:	2230      	movs	r2, #48	; 0x30
 8004cda:	9903      	ldr	r1, [sp, #12]
 8004cdc:	f108 0801 	add.w	r8, r8, #1
 8004ce0:	700a      	strb	r2, [r1, #0]
 8004ce2:	781a      	ldrb	r2, [r3, #0]
 8004ce4:	3201      	adds	r2, #1
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e79e      	b.n	8004c28 <_dtoa_r+0x648>
 8004cea:	46d0      	mov	r8, sl
 8004cec:	e7eb      	b.n	8004cc6 <_dtoa_r+0x6e6>
 8004cee:	2200      	movs	r2, #0
 8004cf0:	4b6e      	ldr	r3, [pc, #440]	; (8004eac <_dtoa_r+0x8cc>)
 8004cf2:	f7fb fbf1 	bl	80004d8 <__aeabi_dmul>
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4680      	mov	r8, r0
 8004cfc:	4689      	mov	r9, r1
 8004cfe:	f7fb fe53 	bl	80009a8 <__aeabi_dcmpeq>
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d09b      	beq.n	8004c3e <_dtoa_r+0x65e>
 8004d06:	e7cd      	b.n	8004ca4 <_dtoa_r+0x6c4>
 8004d08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d0a:	2a00      	cmp	r2, #0
 8004d0c:	f000 80d0 	beq.w	8004eb0 <_dtoa_r+0x8d0>
 8004d10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004d12:	2a01      	cmp	r2, #1
 8004d14:	f300 80ae 	bgt.w	8004e74 <_dtoa_r+0x894>
 8004d18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d1a:	2a00      	cmp	r2, #0
 8004d1c:	f000 80a6 	beq.w	8004e6c <_dtoa_r+0x88c>
 8004d20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004d24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004d26:	9f06      	ldr	r7, [sp, #24]
 8004d28:	9a06      	ldr	r2, [sp, #24]
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	441a      	add	r2, r3
 8004d2e:	9206      	str	r2, [sp, #24]
 8004d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d32:	4628      	mov	r0, r5
 8004d34:	441a      	add	r2, r3
 8004d36:	9209      	str	r2, [sp, #36]	; 0x24
 8004d38:	f000 ff20 	bl	8005b7c <__i2b>
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	2f00      	cmp	r7, #0
 8004d40:	dd0c      	ble.n	8004d5c <_dtoa_r+0x77c>
 8004d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	dd09      	ble.n	8004d5c <_dtoa_r+0x77c>
 8004d48:	42bb      	cmp	r3, r7
 8004d4a:	bfa8      	it	ge
 8004d4c:	463b      	movge	r3, r7
 8004d4e:	9a06      	ldr	r2, [sp, #24]
 8004d50:	1aff      	subs	r7, r7, r3
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	9206      	str	r2, [sp, #24]
 8004d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d5e:	b1f3      	cbz	r3, 8004d9e <_dtoa_r+0x7be>
 8004d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80a8 	beq.w	8004eb8 <_dtoa_r+0x8d8>
 8004d68:	2c00      	cmp	r4, #0
 8004d6a:	dd10      	ble.n	8004d8e <_dtoa_r+0x7ae>
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4622      	mov	r2, r4
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 ffc1 	bl	8005cf8 <__pow5mult>
 8004d76:	465a      	mov	r2, fp
 8004d78:	4601      	mov	r1, r0
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f000 ff13 	bl	8005ba8 <__multiply>
 8004d82:	4680      	mov	r8, r0
 8004d84:	4659      	mov	r1, fp
 8004d86:	4628      	mov	r0, r5
 8004d88:	f000 fdf8 	bl	800597c <_Bfree>
 8004d8c:	46c3      	mov	fp, r8
 8004d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d90:	1b1a      	subs	r2, r3, r4
 8004d92:	d004      	beq.n	8004d9e <_dtoa_r+0x7be>
 8004d94:	4659      	mov	r1, fp
 8004d96:	4628      	mov	r0, r5
 8004d98:	f000 ffae 	bl	8005cf8 <__pow5mult>
 8004d9c:	4683      	mov	fp, r0
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 feeb 	bl	8005b7c <__i2b>
 8004da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004da8:	4604      	mov	r4, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f340 8086 	ble.w	8004ebc <_dtoa_r+0x8dc>
 8004db0:	461a      	mov	r2, r3
 8004db2:	4601      	mov	r1, r0
 8004db4:	4628      	mov	r0, r5
 8004db6:	f000 ff9f 	bl	8005cf8 <__pow5mult>
 8004dba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	dd7f      	ble.n	8004ec2 <_dtoa_r+0x8e2>
 8004dc2:	f04f 0800 	mov.w	r8, #0
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004dcc:	6918      	ldr	r0, [r3, #16]
 8004dce:	f000 fe87 	bl	8005ae0 <__hi0bits>
 8004dd2:	f1c0 0020 	rsb	r0, r0, #32
 8004dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd8:	4418      	add	r0, r3
 8004dda:	f010 001f 	ands.w	r0, r0, #31
 8004dde:	f000 8092 	beq.w	8004f06 <_dtoa_r+0x926>
 8004de2:	f1c0 0320 	rsb	r3, r0, #32
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	f340 808a 	ble.w	8004f00 <_dtoa_r+0x920>
 8004dec:	f1c0 001c 	rsb	r0, r0, #28
 8004df0:	9b06      	ldr	r3, [sp, #24]
 8004df2:	4407      	add	r7, r0
 8004df4:	4403      	add	r3, r0
 8004df6:	9306      	str	r3, [sp, #24]
 8004df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dfa:	4403      	add	r3, r0
 8004dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfe:	9b06      	ldr	r3, [sp, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dd05      	ble.n	8004e10 <_dtoa_r+0x830>
 8004e04:	4659      	mov	r1, fp
 8004e06:	461a      	mov	r2, r3
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 ffcf 	bl	8005dac <__lshift>
 8004e0e:	4683      	mov	fp, r0
 8004e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dd05      	ble.n	8004e22 <_dtoa_r+0x842>
 8004e16:	4621      	mov	r1, r4
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 ffc6 	bl	8005dac <__lshift>
 8004e20:	4604      	mov	r4, r0
 8004e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d070      	beq.n	8004f0a <_dtoa_r+0x92a>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4658      	mov	r0, fp
 8004e2c:	f001 f82e 	bl	8005e8c <__mcmp>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	da6a      	bge.n	8004f0a <_dtoa_r+0x92a>
 8004e34:	2300      	movs	r3, #0
 8004e36:	4659      	mov	r1, fp
 8004e38:	220a      	movs	r2, #10
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fdc0 	bl	80059c0 <__multadd>
 8004e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e42:	4683      	mov	fp, r0
 8004e44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8194 	beq.w	8005176 <_dtoa_r+0xb96>
 8004e4e:	4631      	mov	r1, r6
 8004e50:	2300      	movs	r3, #0
 8004e52:	220a      	movs	r2, #10
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 fdb3 	bl	80059c0 <__multadd>
 8004e5a:	f1b9 0f00 	cmp.w	r9, #0
 8004e5e:	4606      	mov	r6, r0
 8004e60:	f300 8093 	bgt.w	8004f8a <_dtoa_r+0x9aa>
 8004e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	dc57      	bgt.n	8004f1a <_dtoa_r+0x93a>
 8004e6a:	e08e      	b.n	8004f8a <_dtoa_r+0x9aa>
 8004e6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e72:	e757      	b.n	8004d24 <_dtoa_r+0x744>
 8004e74:	9b08      	ldr	r3, [sp, #32]
 8004e76:	1e5c      	subs	r4, r3, #1
 8004e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	bfb7      	itett	lt
 8004e7e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004e80:	1b1c      	subge	r4, r3, r4
 8004e82:	1ae2      	sublt	r2, r4, r3
 8004e84:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004e86:	bfbe      	ittt	lt
 8004e88:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004e8a:	189b      	addlt	r3, r3, r2
 8004e8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004e8e:	9b08      	ldr	r3, [sp, #32]
 8004e90:	bfb8      	it	lt
 8004e92:	2400      	movlt	r4, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bfbb      	ittet	lt
 8004e98:	9b06      	ldrlt	r3, [sp, #24]
 8004e9a:	9a08      	ldrlt	r2, [sp, #32]
 8004e9c:	9f06      	ldrge	r7, [sp, #24]
 8004e9e:	1a9f      	sublt	r7, r3, r2
 8004ea0:	bfac      	ite	ge
 8004ea2:	9b08      	ldrge	r3, [sp, #32]
 8004ea4:	2300      	movlt	r3, #0
 8004ea6:	e73f      	b.n	8004d28 <_dtoa_r+0x748>
 8004ea8:	3fe00000 	.word	0x3fe00000
 8004eac:	40240000 	.word	0x40240000
 8004eb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004eb2:	9f06      	ldr	r7, [sp, #24]
 8004eb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004eb6:	e742      	b.n	8004d3e <_dtoa_r+0x75e>
 8004eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eba:	e76b      	b.n	8004d94 <_dtoa_r+0x7b4>
 8004ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	dc19      	bgt.n	8004ef6 <_dtoa_r+0x916>
 8004ec2:	9b04      	ldr	r3, [sp, #16]
 8004ec4:	b9bb      	cbnz	r3, 8004ef6 <_dtoa_r+0x916>
 8004ec6:	9b05      	ldr	r3, [sp, #20]
 8004ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ecc:	b99b      	cbnz	r3, 8004ef6 <_dtoa_r+0x916>
 8004ece:	9b05      	ldr	r3, [sp, #20]
 8004ed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ed4:	0d1b      	lsrs	r3, r3, #20
 8004ed6:	051b      	lsls	r3, r3, #20
 8004ed8:	b183      	cbz	r3, 8004efc <_dtoa_r+0x91c>
 8004eda:	f04f 0801 	mov.w	r8, #1
 8004ede:	9b06      	ldr	r3, [sp, #24]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	9306      	str	r3, [sp, #24]
 8004ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f47f af6a 	bne.w	8004dc6 <_dtoa_r+0x7e6>
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	e76f      	b.n	8004dd6 <_dtoa_r+0x7f6>
 8004ef6:	f04f 0800 	mov.w	r8, #0
 8004efa:	e7f6      	b.n	8004eea <_dtoa_r+0x90a>
 8004efc:	4698      	mov	r8, r3
 8004efe:	e7f4      	b.n	8004eea <_dtoa_r+0x90a>
 8004f00:	f43f af7d 	beq.w	8004dfe <_dtoa_r+0x81e>
 8004f04:	4618      	mov	r0, r3
 8004f06:	301c      	adds	r0, #28
 8004f08:	e772      	b.n	8004df0 <_dtoa_r+0x810>
 8004f0a:	9b08      	ldr	r3, [sp, #32]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dc36      	bgt.n	8004f7e <_dtoa_r+0x99e>
 8004f10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	dd33      	ble.n	8004f7e <_dtoa_r+0x99e>
 8004f16:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f1a:	f1b9 0f00 	cmp.w	r9, #0
 8004f1e:	d10d      	bne.n	8004f3c <_dtoa_r+0x95c>
 8004f20:	4621      	mov	r1, r4
 8004f22:	464b      	mov	r3, r9
 8004f24:	2205      	movs	r2, #5
 8004f26:	4628      	mov	r0, r5
 8004f28:	f000 fd4a 	bl	80059c0 <__multadd>
 8004f2c:	4601      	mov	r1, r0
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4658      	mov	r0, fp
 8004f32:	f000 ffab 	bl	8005e8c <__mcmp>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f73f adb8 	bgt.w	8004aac <_dtoa_r+0x4cc>
 8004f3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f3e:	9f03      	ldr	r7, [sp, #12]
 8004f40:	ea6f 0a03 	mvn.w	sl, r3
 8004f44:	f04f 0800 	mov.w	r8, #0
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 fd16 	bl	800597c <_Bfree>
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	f43f aea7 	beq.w	8004ca4 <_dtoa_r+0x6c4>
 8004f56:	f1b8 0f00 	cmp.w	r8, #0
 8004f5a:	d005      	beq.n	8004f68 <_dtoa_r+0x988>
 8004f5c:	45b0      	cmp	r8, r6
 8004f5e:	d003      	beq.n	8004f68 <_dtoa_r+0x988>
 8004f60:	4641      	mov	r1, r8
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 fd0a 	bl	800597c <_Bfree>
 8004f68:	4631      	mov	r1, r6
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 fd06 	bl	800597c <_Bfree>
 8004f70:	e698      	b.n	8004ca4 <_dtoa_r+0x6c4>
 8004f72:	2400      	movs	r4, #0
 8004f74:	4626      	mov	r6, r4
 8004f76:	e7e1      	b.n	8004f3c <_dtoa_r+0x95c>
 8004f78:	46c2      	mov	sl, r8
 8004f7a:	4626      	mov	r6, r4
 8004f7c:	e596      	b.n	8004aac <_dtoa_r+0x4cc>
 8004f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80fd 	beq.w	8005184 <_dtoa_r+0xba4>
 8004f8a:	2f00      	cmp	r7, #0
 8004f8c:	dd05      	ble.n	8004f9a <_dtoa_r+0x9ba>
 8004f8e:	4631      	mov	r1, r6
 8004f90:	463a      	mov	r2, r7
 8004f92:	4628      	mov	r0, r5
 8004f94:	f000 ff0a 	bl	8005dac <__lshift>
 8004f98:	4606      	mov	r6, r0
 8004f9a:	f1b8 0f00 	cmp.w	r8, #0
 8004f9e:	d05c      	beq.n	800505a <_dtoa_r+0xa7a>
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	6871      	ldr	r1, [r6, #4]
 8004fa4:	f000 fcaa 	bl	80058fc <_Balloc>
 8004fa8:	4607      	mov	r7, r0
 8004faa:	b928      	cbnz	r0, 8004fb8 <_dtoa_r+0x9d8>
 8004fac:	4602      	mov	r2, r0
 8004fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004fb2:	4b7f      	ldr	r3, [pc, #508]	; (80051b0 <_dtoa_r+0xbd0>)
 8004fb4:	f7ff bb28 	b.w	8004608 <_dtoa_r+0x28>
 8004fb8:	6932      	ldr	r2, [r6, #16]
 8004fba:	f106 010c 	add.w	r1, r6, #12
 8004fbe:	3202      	adds	r2, #2
 8004fc0:	0092      	lsls	r2, r2, #2
 8004fc2:	300c      	adds	r0, #12
 8004fc4:	f000 fc8c 	bl	80058e0 <memcpy>
 8004fc8:	2201      	movs	r2, #1
 8004fca:	4639      	mov	r1, r7
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 feed 	bl	8005dac <__lshift>
 8004fd2:	46b0      	mov	r8, r6
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	9b03      	ldr	r3, [sp, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	9308      	str	r3, [sp, #32]
 8004fdc:	9b03      	ldr	r3, [sp, #12]
 8004fde:	444b      	add	r3, r9
 8004fe0:	930a      	str	r3, [sp, #40]	; 0x28
 8004fe2:	9b04      	ldr	r3, [sp, #16]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fea:	9b08      	ldr	r3, [sp, #32]
 8004fec:	4621      	mov	r1, r4
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	4658      	mov	r0, fp
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	f7ff fa68 	bl	80044c8 <quorem>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	3330      	adds	r3, #48	; 0x30
 8004ffe:	9006      	str	r0, [sp, #24]
 8005000:	4658      	mov	r0, fp
 8005002:	930b      	str	r3, [sp, #44]	; 0x2c
 8005004:	f000 ff42 	bl	8005e8c <__mcmp>
 8005008:	4632      	mov	r2, r6
 800500a:	4681      	mov	r9, r0
 800500c:	4621      	mov	r1, r4
 800500e:	4628      	mov	r0, r5
 8005010:	f000 ff58 	bl	8005ec4 <__mdiff>
 8005014:	68c2      	ldr	r2, [r0, #12]
 8005016:	4607      	mov	r7, r0
 8005018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800501a:	bb02      	cbnz	r2, 800505e <_dtoa_r+0xa7e>
 800501c:	4601      	mov	r1, r0
 800501e:	4658      	mov	r0, fp
 8005020:	f000 ff34 	bl	8005e8c <__mcmp>
 8005024:	4602      	mov	r2, r0
 8005026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005028:	4639      	mov	r1, r7
 800502a:	4628      	mov	r0, r5
 800502c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005030:	f000 fca4 	bl	800597c <_Bfree>
 8005034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005038:	9f08      	ldr	r7, [sp, #32]
 800503a:	ea43 0102 	orr.w	r1, r3, r2
 800503e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005040:	430b      	orrs	r3, r1
 8005042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005044:	d10d      	bne.n	8005062 <_dtoa_r+0xa82>
 8005046:	2b39      	cmp	r3, #57	; 0x39
 8005048:	d029      	beq.n	800509e <_dtoa_r+0xabe>
 800504a:	f1b9 0f00 	cmp.w	r9, #0
 800504e:	dd01      	ble.n	8005054 <_dtoa_r+0xa74>
 8005050:	9b06      	ldr	r3, [sp, #24]
 8005052:	3331      	adds	r3, #49	; 0x31
 8005054:	9a04      	ldr	r2, [sp, #16]
 8005056:	7013      	strb	r3, [r2, #0]
 8005058:	e776      	b.n	8004f48 <_dtoa_r+0x968>
 800505a:	4630      	mov	r0, r6
 800505c:	e7b9      	b.n	8004fd2 <_dtoa_r+0x9f2>
 800505e:	2201      	movs	r2, #1
 8005060:	e7e2      	b.n	8005028 <_dtoa_r+0xa48>
 8005062:	f1b9 0f00 	cmp.w	r9, #0
 8005066:	db06      	blt.n	8005076 <_dtoa_r+0xa96>
 8005068:	9922      	ldr	r1, [sp, #136]	; 0x88
 800506a:	ea41 0909 	orr.w	r9, r1, r9
 800506e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005070:	ea59 0101 	orrs.w	r1, r9, r1
 8005074:	d120      	bne.n	80050b8 <_dtoa_r+0xad8>
 8005076:	2a00      	cmp	r2, #0
 8005078:	ddec      	ble.n	8005054 <_dtoa_r+0xa74>
 800507a:	4659      	mov	r1, fp
 800507c:	2201      	movs	r2, #1
 800507e:	4628      	mov	r0, r5
 8005080:	9308      	str	r3, [sp, #32]
 8005082:	f000 fe93 	bl	8005dac <__lshift>
 8005086:	4621      	mov	r1, r4
 8005088:	4683      	mov	fp, r0
 800508a:	f000 feff 	bl	8005e8c <__mcmp>
 800508e:	2800      	cmp	r0, #0
 8005090:	9b08      	ldr	r3, [sp, #32]
 8005092:	dc02      	bgt.n	800509a <_dtoa_r+0xaba>
 8005094:	d1de      	bne.n	8005054 <_dtoa_r+0xa74>
 8005096:	07da      	lsls	r2, r3, #31
 8005098:	d5dc      	bpl.n	8005054 <_dtoa_r+0xa74>
 800509a:	2b39      	cmp	r3, #57	; 0x39
 800509c:	d1d8      	bne.n	8005050 <_dtoa_r+0xa70>
 800509e:	2339      	movs	r3, #57	; 0x39
 80050a0:	9a04      	ldr	r2, [sp, #16]
 80050a2:	7013      	strb	r3, [r2, #0]
 80050a4:	463b      	mov	r3, r7
 80050a6:	461f      	mov	r7, r3
 80050a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	2a39      	cmp	r2, #57	; 0x39
 80050b0:	d050      	beq.n	8005154 <_dtoa_r+0xb74>
 80050b2:	3201      	adds	r2, #1
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e747      	b.n	8004f48 <_dtoa_r+0x968>
 80050b8:	2a00      	cmp	r2, #0
 80050ba:	dd03      	ble.n	80050c4 <_dtoa_r+0xae4>
 80050bc:	2b39      	cmp	r3, #57	; 0x39
 80050be:	d0ee      	beq.n	800509e <_dtoa_r+0xabe>
 80050c0:	3301      	adds	r3, #1
 80050c2:	e7c7      	b.n	8005054 <_dtoa_r+0xa74>
 80050c4:	9a08      	ldr	r2, [sp, #32]
 80050c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80050cc:	428a      	cmp	r2, r1
 80050ce:	d02a      	beq.n	8005126 <_dtoa_r+0xb46>
 80050d0:	4659      	mov	r1, fp
 80050d2:	2300      	movs	r3, #0
 80050d4:	220a      	movs	r2, #10
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 fc72 	bl	80059c0 <__multadd>
 80050dc:	45b0      	cmp	r8, r6
 80050de:	4683      	mov	fp, r0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	f04f 020a 	mov.w	r2, #10
 80050e8:	4641      	mov	r1, r8
 80050ea:	4628      	mov	r0, r5
 80050ec:	d107      	bne.n	80050fe <_dtoa_r+0xb1e>
 80050ee:	f000 fc67 	bl	80059c0 <__multadd>
 80050f2:	4680      	mov	r8, r0
 80050f4:	4606      	mov	r6, r0
 80050f6:	9b08      	ldr	r3, [sp, #32]
 80050f8:	3301      	adds	r3, #1
 80050fa:	9308      	str	r3, [sp, #32]
 80050fc:	e775      	b.n	8004fea <_dtoa_r+0xa0a>
 80050fe:	f000 fc5f 	bl	80059c0 <__multadd>
 8005102:	4631      	mov	r1, r6
 8005104:	4680      	mov	r8, r0
 8005106:	2300      	movs	r3, #0
 8005108:	220a      	movs	r2, #10
 800510a:	4628      	mov	r0, r5
 800510c:	f000 fc58 	bl	80059c0 <__multadd>
 8005110:	4606      	mov	r6, r0
 8005112:	e7f0      	b.n	80050f6 <_dtoa_r+0xb16>
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	bfcc      	ite	gt
 800511a:	464f      	movgt	r7, r9
 800511c:	2701      	movle	r7, #1
 800511e:	f04f 0800 	mov.w	r8, #0
 8005122:	9a03      	ldr	r2, [sp, #12]
 8005124:	4417      	add	r7, r2
 8005126:	4659      	mov	r1, fp
 8005128:	2201      	movs	r2, #1
 800512a:	4628      	mov	r0, r5
 800512c:	9308      	str	r3, [sp, #32]
 800512e:	f000 fe3d 	bl	8005dac <__lshift>
 8005132:	4621      	mov	r1, r4
 8005134:	4683      	mov	fp, r0
 8005136:	f000 fea9 	bl	8005e8c <__mcmp>
 800513a:	2800      	cmp	r0, #0
 800513c:	dcb2      	bgt.n	80050a4 <_dtoa_r+0xac4>
 800513e:	d102      	bne.n	8005146 <_dtoa_r+0xb66>
 8005140:	9b08      	ldr	r3, [sp, #32]
 8005142:	07db      	lsls	r3, r3, #31
 8005144:	d4ae      	bmi.n	80050a4 <_dtoa_r+0xac4>
 8005146:	463b      	mov	r3, r7
 8005148:	461f      	mov	r7, r3
 800514a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800514e:	2a30      	cmp	r2, #48	; 0x30
 8005150:	d0fa      	beq.n	8005148 <_dtoa_r+0xb68>
 8005152:	e6f9      	b.n	8004f48 <_dtoa_r+0x968>
 8005154:	9a03      	ldr	r2, [sp, #12]
 8005156:	429a      	cmp	r2, r3
 8005158:	d1a5      	bne.n	80050a6 <_dtoa_r+0xac6>
 800515a:	2331      	movs	r3, #49	; 0x31
 800515c:	f10a 0a01 	add.w	sl, sl, #1
 8005160:	e779      	b.n	8005056 <_dtoa_r+0xa76>
 8005162:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <_dtoa_r+0xbd4>)
 8005164:	f7ff baa8 	b.w	80046b8 <_dtoa_r+0xd8>
 8005168:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800516a:	2b00      	cmp	r3, #0
 800516c:	f47f aa81 	bne.w	8004672 <_dtoa_r+0x92>
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <_dtoa_r+0xbd8>)
 8005172:	f7ff baa1 	b.w	80046b8 <_dtoa_r+0xd8>
 8005176:	f1b9 0f00 	cmp.w	r9, #0
 800517a:	dc03      	bgt.n	8005184 <_dtoa_r+0xba4>
 800517c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800517e:	2b02      	cmp	r3, #2
 8005180:	f73f aecb 	bgt.w	8004f1a <_dtoa_r+0x93a>
 8005184:	9f03      	ldr	r7, [sp, #12]
 8005186:	4621      	mov	r1, r4
 8005188:	4658      	mov	r0, fp
 800518a:	f7ff f99d 	bl	80044c8 <quorem>
 800518e:	9a03      	ldr	r2, [sp, #12]
 8005190:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005194:	f807 3b01 	strb.w	r3, [r7], #1
 8005198:	1aba      	subs	r2, r7, r2
 800519a:	4591      	cmp	r9, r2
 800519c:	ddba      	ble.n	8005114 <_dtoa_r+0xb34>
 800519e:	4659      	mov	r1, fp
 80051a0:	2300      	movs	r3, #0
 80051a2:	220a      	movs	r2, #10
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 fc0b 	bl	80059c0 <__multadd>
 80051aa:	4683      	mov	fp, r0
 80051ac:	e7eb      	b.n	8005186 <_dtoa_r+0xba6>
 80051ae:	bf00      	nop
 80051b0:	08007548 	.word	0x08007548
 80051b4:	0800734c 	.word	0x0800734c
 80051b8:	080074c9 	.word	0x080074c9

080051bc <rshift>:
 80051bc:	6903      	ldr	r3, [r0, #16]
 80051be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80051c6:	f100 0414 	add.w	r4, r0, #20
 80051ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80051ce:	dd46      	ble.n	800525e <rshift+0xa2>
 80051d0:	f011 011f 	ands.w	r1, r1, #31
 80051d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80051d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80051dc:	d10c      	bne.n	80051f8 <rshift+0x3c>
 80051de:	4629      	mov	r1, r5
 80051e0:	f100 0710 	add.w	r7, r0, #16
 80051e4:	42b1      	cmp	r1, r6
 80051e6:	d335      	bcc.n	8005254 <rshift+0x98>
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	1eea      	subs	r2, r5, #3
 80051ee:	4296      	cmp	r6, r2
 80051f0:	bf38      	it	cc
 80051f2:	2300      	movcc	r3, #0
 80051f4:	4423      	add	r3, r4
 80051f6:	e015      	b.n	8005224 <rshift+0x68>
 80051f8:	46a1      	mov	r9, r4
 80051fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80051fe:	f1c1 0820 	rsb	r8, r1, #32
 8005202:	40cf      	lsrs	r7, r1
 8005204:	f105 0e04 	add.w	lr, r5, #4
 8005208:	4576      	cmp	r6, lr
 800520a:	46f4      	mov	ip, lr
 800520c:	d816      	bhi.n	800523c <rshift+0x80>
 800520e:	1a9a      	subs	r2, r3, r2
 8005210:	0092      	lsls	r2, r2, #2
 8005212:	3a04      	subs	r2, #4
 8005214:	3501      	adds	r5, #1
 8005216:	42ae      	cmp	r6, r5
 8005218:	bf38      	it	cc
 800521a:	2200      	movcc	r2, #0
 800521c:	18a3      	adds	r3, r4, r2
 800521e:	50a7      	str	r7, [r4, r2]
 8005220:	b107      	cbz	r7, 8005224 <rshift+0x68>
 8005222:	3304      	adds	r3, #4
 8005224:	42a3      	cmp	r3, r4
 8005226:	eba3 0204 	sub.w	r2, r3, r4
 800522a:	bf08      	it	eq
 800522c:	2300      	moveq	r3, #0
 800522e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005232:	6102      	str	r2, [r0, #16]
 8005234:	bf08      	it	eq
 8005236:	6143      	streq	r3, [r0, #20]
 8005238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800523c:	f8dc c000 	ldr.w	ip, [ip]
 8005240:	fa0c fc08 	lsl.w	ip, ip, r8
 8005244:	ea4c 0707 	orr.w	r7, ip, r7
 8005248:	f849 7b04 	str.w	r7, [r9], #4
 800524c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005250:	40cf      	lsrs	r7, r1
 8005252:	e7d9      	b.n	8005208 <rshift+0x4c>
 8005254:	f851 cb04 	ldr.w	ip, [r1], #4
 8005258:	f847 cf04 	str.w	ip, [r7, #4]!
 800525c:	e7c2      	b.n	80051e4 <rshift+0x28>
 800525e:	4623      	mov	r3, r4
 8005260:	e7e0      	b.n	8005224 <rshift+0x68>

08005262 <__hexdig_fun>:
 8005262:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005266:	2b09      	cmp	r3, #9
 8005268:	d802      	bhi.n	8005270 <__hexdig_fun+0xe>
 800526a:	3820      	subs	r0, #32
 800526c:	b2c0      	uxtb	r0, r0
 800526e:	4770      	bx	lr
 8005270:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005274:	2b05      	cmp	r3, #5
 8005276:	d801      	bhi.n	800527c <__hexdig_fun+0x1a>
 8005278:	3847      	subs	r0, #71	; 0x47
 800527a:	e7f7      	b.n	800526c <__hexdig_fun+0xa>
 800527c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005280:	2b05      	cmp	r3, #5
 8005282:	d801      	bhi.n	8005288 <__hexdig_fun+0x26>
 8005284:	3827      	subs	r0, #39	; 0x27
 8005286:	e7f1      	b.n	800526c <__hexdig_fun+0xa>
 8005288:	2000      	movs	r0, #0
 800528a:	4770      	bx	lr

0800528c <__gethex>:
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	b08b      	sub	sp, #44	; 0x2c
 8005292:	9305      	str	r3, [sp, #20]
 8005294:	4bb2      	ldr	r3, [pc, #712]	; (8005560 <__gethex+0x2d4>)
 8005296:	9002      	str	r0, [sp, #8]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	468b      	mov	fp, r1
 800529c:	4618      	mov	r0, r3
 800529e:	4690      	mov	r8, r2
 80052a0:	9303      	str	r3, [sp, #12]
 80052a2:	f7fa ff55 	bl	8000150 <strlen>
 80052a6:	4682      	mov	sl, r0
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	f8db 2000 	ldr.w	r2, [fp]
 80052ae:	4403      	add	r3, r0
 80052b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80052b4:	9306      	str	r3, [sp, #24]
 80052b6:	1c93      	adds	r3, r2, #2
 80052b8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80052bc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80052c0:	32fe      	adds	r2, #254	; 0xfe
 80052c2:	18d1      	adds	r1, r2, r3
 80052c4:	461f      	mov	r7, r3
 80052c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80052ca:	9101      	str	r1, [sp, #4]
 80052cc:	2830      	cmp	r0, #48	; 0x30
 80052ce:	d0f8      	beq.n	80052c2 <__gethex+0x36>
 80052d0:	f7ff ffc7 	bl	8005262 <__hexdig_fun>
 80052d4:	4604      	mov	r4, r0
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d13a      	bne.n	8005350 <__gethex+0xc4>
 80052da:	4652      	mov	r2, sl
 80052dc:	4638      	mov	r0, r7
 80052de:	9903      	ldr	r1, [sp, #12]
 80052e0:	f001 fa26 	bl	8006730 <strncmp>
 80052e4:	4605      	mov	r5, r0
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d166      	bne.n	80053b8 <__gethex+0x12c>
 80052ea:	f817 000a 	ldrb.w	r0, [r7, sl]
 80052ee:	eb07 060a 	add.w	r6, r7, sl
 80052f2:	f7ff ffb6 	bl	8005262 <__hexdig_fun>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d060      	beq.n	80053bc <__gethex+0x130>
 80052fa:	4633      	mov	r3, r6
 80052fc:	7818      	ldrb	r0, [r3, #0]
 80052fe:	461f      	mov	r7, r3
 8005300:	2830      	cmp	r0, #48	; 0x30
 8005302:	f103 0301 	add.w	r3, r3, #1
 8005306:	d0f9      	beq.n	80052fc <__gethex+0x70>
 8005308:	f7ff ffab 	bl	8005262 <__hexdig_fun>
 800530c:	2301      	movs	r3, #1
 800530e:	fab0 f480 	clz	r4, r0
 8005312:	4635      	mov	r5, r6
 8005314:	0964      	lsrs	r4, r4, #5
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	463a      	mov	r2, r7
 800531a:	4616      	mov	r6, r2
 800531c:	7830      	ldrb	r0, [r6, #0]
 800531e:	3201      	adds	r2, #1
 8005320:	f7ff ff9f 	bl	8005262 <__hexdig_fun>
 8005324:	2800      	cmp	r0, #0
 8005326:	d1f8      	bne.n	800531a <__gethex+0x8e>
 8005328:	4652      	mov	r2, sl
 800532a:	4630      	mov	r0, r6
 800532c:	9903      	ldr	r1, [sp, #12]
 800532e:	f001 f9ff 	bl	8006730 <strncmp>
 8005332:	b980      	cbnz	r0, 8005356 <__gethex+0xca>
 8005334:	b94d      	cbnz	r5, 800534a <__gethex+0xbe>
 8005336:	eb06 050a 	add.w	r5, r6, sl
 800533a:	462a      	mov	r2, r5
 800533c:	4616      	mov	r6, r2
 800533e:	7830      	ldrb	r0, [r6, #0]
 8005340:	3201      	adds	r2, #1
 8005342:	f7ff ff8e 	bl	8005262 <__hexdig_fun>
 8005346:	2800      	cmp	r0, #0
 8005348:	d1f8      	bne.n	800533c <__gethex+0xb0>
 800534a:	1bad      	subs	r5, r5, r6
 800534c:	00ad      	lsls	r5, r5, #2
 800534e:	e004      	b.n	800535a <__gethex+0xce>
 8005350:	2400      	movs	r4, #0
 8005352:	4625      	mov	r5, r4
 8005354:	e7e0      	b.n	8005318 <__gethex+0x8c>
 8005356:	2d00      	cmp	r5, #0
 8005358:	d1f7      	bne.n	800534a <__gethex+0xbe>
 800535a:	7833      	ldrb	r3, [r6, #0]
 800535c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005360:	2b50      	cmp	r3, #80	; 0x50
 8005362:	d139      	bne.n	80053d8 <__gethex+0x14c>
 8005364:	7873      	ldrb	r3, [r6, #1]
 8005366:	2b2b      	cmp	r3, #43	; 0x2b
 8005368:	d02a      	beq.n	80053c0 <__gethex+0x134>
 800536a:	2b2d      	cmp	r3, #45	; 0x2d
 800536c:	d02c      	beq.n	80053c8 <__gethex+0x13c>
 800536e:	f04f 0900 	mov.w	r9, #0
 8005372:	1c71      	adds	r1, r6, #1
 8005374:	7808      	ldrb	r0, [r1, #0]
 8005376:	f7ff ff74 	bl	8005262 <__hexdig_fun>
 800537a:	1e43      	subs	r3, r0, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b18      	cmp	r3, #24
 8005380:	d82a      	bhi.n	80053d8 <__gethex+0x14c>
 8005382:	f1a0 0210 	sub.w	r2, r0, #16
 8005386:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800538a:	f7ff ff6a 	bl	8005262 <__hexdig_fun>
 800538e:	1e43      	subs	r3, r0, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b18      	cmp	r3, #24
 8005394:	d91b      	bls.n	80053ce <__gethex+0x142>
 8005396:	f1b9 0f00 	cmp.w	r9, #0
 800539a:	d000      	beq.n	800539e <__gethex+0x112>
 800539c:	4252      	negs	r2, r2
 800539e:	4415      	add	r5, r2
 80053a0:	f8cb 1000 	str.w	r1, [fp]
 80053a4:	b1d4      	cbz	r4, 80053dc <__gethex+0x150>
 80053a6:	9b01      	ldr	r3, [sp, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bf14      	ite	ne
 80053ac:	2700      	movne	r7, #0
 80053ae:	2706      	moveq	r7, #6
 80053b0:	4638      	mov	r0, r7
 80053b2:	b00b      	add	sp, #44	; 0x2c
 80053b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b8:	463e      	mov	r6, r7
 80053ba:	4625      	mov	r5, r4
 80053bc:	2401      	movs	r4, #1
 80053be:	e7cc      	b.n	800535a <__gethex+0xce>
 80053c0:	f04f 0900 	mov.w	r9, #0
 80053c4:	1cb1      	adds	r1, r6, #2
 80053c6:	e7d5      	b.n	8005374 <__gethex+0xe8>
 80053c8:	f04f 0901 	mov.w	r9, #1
 80053cc:	e7fa      	b.n	80053c4 <__gethex+0x138>
 80053ce:	230a      	movs	r3, #10
 80053d0:	fb03 0202 	mla	r2, r3, r2, r0
 80053d4:	3a10      	subs	r2, #16
 80053d6:	e7d6      	b.n	8005386 <__gethex+0xfa>
 80053d8:	4631      	mov	r1, r6
 80053da:	e7e1      	b.n	80053a0 <__gethex+0x114>
 80053dc:	4621      	mov	r1, r4
 80053de:	1bf3      	subs	r3, r6, r7
 80053e0:	3b01      	subs	r3, #1
 80053e2:	2b07      	cmp	r3, #7
 80053e4:	dc0a      	bgt.n	80053fc <__gethex+0x170>
 80053e6:	9802      	ldr	r0, [sp, #8]
 80053e8:	f000 fa88 	bl	80058fc <_Balloc>
 80053ec:	4604      	mov	r4, r0
 80053ee:	b940      	cbnz	r0, 8005402 <__gethex+0x176>
 80053f0:	4602      	mov	r2, r0
 80053f2:	21de      	movs	r1, #222	; 0xde
 80053f4:	4b5b      	ldr	r3, [pc, #364]	; (8005564 <__gethex+0x2d8>)
 80053f6:	485c      	ldr	r0, [pc, #368]	; (8005568 <__gethex+0x2dc>)
 80053f8:	f001 f9bc 	bl	8006774 <__assert_func>
 80053fc:	3101      	adds	r1, #1
 80053fe:	105b      	asrs	r3, r3, #1
 8005400:	e7ef      	b.n	80053e2 <__gethex+0x156>
 8005402:	f04f 0b00 	mov.w	fp, #0
 8005406:	f100 0914 	add.w	r9, r0, #20
 800540a:	f1ca 0301 	rsb	r3, sl, #1
 800540e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005412:	f8cd b004 	str.w	fp, [sp, #4]
 8005416:	9308      	str	r3, [sp, #32]
 8005418:	42b7      	cmp	r7, r6
 800541a:	d33f      	bcc.n	800549c <__gethex+0x210>
 800541c:	9f04      	ldr	r7, [sp, #16]
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	f847 3b04 	str.w	r3, [r7], #4
 8005424:	eba7 0709 	sub.w	r7, r7, r9
 8005428:	10bf      	asrs	r7, r7, #2
 800542a:	6127      	str	r7, [r4, #16]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fb57 	bl	8005ae0 <__hi0bits>
 8005432:	017f      	lsls	r7, r7, #5
 8005434:	f8d8 6000 	ldr.w	r6, [r8]
 8005438:	1a3f      	subs	r7, r7, r0
 800543a:	42b7      	cmp	r7, r6
 800543c:	dd62      	ble.n	8005504 <__gethex+0x278>
 800543e:	1bbf      	subs	r7, r7, r6
 8005440:	4639      	mov	r1, r7
 8005442:	4620      	mov	r0, r4
 8005444:	f000 fef1 	bl	800622a <__any_on>
 8005448:	4682      	mov	sl, r0
 800544a:	b1a8      	cbz	r0, 8005478 <__gethex+0x1ec>
 800544c:	f04f 0a01 	mov.w	sl, #1
 8005450:	1e7b      	subs	r3, r7, #1
 8005452:	1159      	asrs	r1, r3, #5
 8005454:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005458:	f003 021f 	and.w	r2, r3, #31
 800545c:	fa0a f202 	lsl.w	r2, sl, r2
 8005460:	420a      	tst	r2, r1
 8005462:	d009      	beq.n	8005478 <__gethex+0x1ec>
 8005464:	4553      	cmp	r3, sl
 8005466:	dd05      	ble.n	8005474 <__gethex+0x1e8>
 8005468:	4620      	mov	r0, r4
 800546a:	1eb9      	subs	r1, r7, #2
 800546c:	f000 fedd 	bl	800622a <__any_on>
 8005470:	2800      	cmp	r0, #0
 8005472:	d144      	bne.n	80054fe <__gethex+0x272>
 8005474:	f04f 0a02 	mov.w	sl, #2
 8005478:	4639      	mov	r1, r7
 800547a:	4620      	mov	r0, r4
 800547c:	f7ff fe9e 	bl	80051bc <rshift>
 8005480:	443d      	add	r5, r7
 8005482:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005486:	42ab      	cmp	r3, r5
 8005488:	da4a      	bge.n	8005520 <__gethex+0x294>
 800548a:	4621      	mov	r1, r4
 800548c:	9802      	ldr	r0, [sp, #8]
 800548e:	f000 fa75 	bl	800597c <_Bfree>
 8005492:	2300      	movs	r3, #0
 8005494:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005496:	27a3      	movs	r7, #163	; 0xa3
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	e789      	b.n	80053b0 <__gethex+0x124>
 800549c:	1e73      	subs	r3, r6, #1
 800549e:	9a06      	ldr	r2, [sp, #24]
 80054a0:	9307      	str	r3, [sp, #28]
 80054a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d019      	beq.n	80054de <__gethex+0x252>
 80054aa:	f1bb 0f20 	cmp.w	fp, #32
 80054ae:	d107      	bne.n	80054c0 <__gethex+0x234>
 80054b0:	9b04      	ldr	r3, [sp, #16]
 80054b2:	9a01      	ldr	r2, [sp, #4]
 80054b4:	f843 2b04 	str.w	r2, [r3], #4
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	2300      	movs	r3, #0
 80054bc:	469b      	mov	fp, r3
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80054c4:	f7ff fecd 	bl	8005262 <__hexdig_fun>
 80054c8:	9b01      	ldr	r3, [sp, #4]
 80054ca:	f000 000f 	and.w	r0, r0, #15
 80054ce:	fa00 f00b 	lsl.w	r0, r0, fp
 80054d2:	4303      	orrs	r3, r0
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	f10b 0b04 	add.w	fp, fp, #4
 80054da:	9b07      	ldr	r3, [sp, #28]
 80054dc:	e00d      	b.n	80054fa <__gethex+0x26e>
 80054de:	9a08      	ldr	r2, [sp, #32]
 80054e0:	1e73      	subs	r3, r6, #1
 80054e2:	4413      	add	r3, r2
 80054e4:	42bb      	cmp	r3, r7
 80054e6:	d3e0      	bcc.n	80054aa <__gethex+0x21e>
 80054e8:	4618      	mov	r0, r3
 80054ea:	4652      	mov	r2, sl
 80054ec:	9903      	ldr	r1, [sp, #12]
 80054ee:	9309      	str	r3, [sp, #36]	; 0x24
 80054f0:	f001 f91e 	bl	8006730 <strncmp>
 80054f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d1d7      	bne.n	80054aa <__gethex+0x21e>
 80054fa:	461e      	mov	r6, r3
 80054fc:	e78c      	b.n	8005418 <__gethex+0x18c>
 80054fe:	f04f 0a03 	mov.w	sl, #3
 8005502:	e7b9      	b.n	8005478 <__gethex+0x1ec>
 8005504:	da09      	bge.n	800551a <__gethex+0x28e>
 8005506:	1bf7      	subs	r7, r6, r7
 8005508:	4621      	mov	r1, r4
 800550a:	463a      	mov	r2, r7
 800550c:	9802      	ldr	r0, [sp, #8]
 800550e:	f000 fc4d 	bl	8005dac <__lshift>
 8005512:	4604      	mov	r4, r0
 8005514:	1bed      	subs	r5, r5, r7
 8005516:	f100 0914 	add.w	r9, r0, #20
 800551a:	f04f 0a00 	mov.w	sl, #0
 800551e:	e7b0      	b.n	8005482 <__gethex+0x1f6>
 8005520:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005524:	42a8      	cmp	r0, r5
 8005526:	dd72      	ble.n	800560e <__gethex+0x382>
 8005528:	1b45      	subs	r5, r0, r5
 800552a:	42ae      	cmp	r6, r5
 800552c:	dc35      	bgt.n	800559a <__gethex+0x30e>
 800552e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d029      	beq.n	800558a <__gethex+0x2fe>
 8005536:	2b03      	cmp	r3, #3
 8005538:	d02b      	beq.n	8005592 <__gethex+0x306>
 800553a:	2b01      	cmp	r3, #1
 800553c:	d11c      	bne.n	8005578 <__gethex+0x2ec>
 800553e:	42ae      	cmp	r6, r5
 8005540:	d11a      	bne.n	8005578 <__gethex+0x2ec>
 8005542:	2e01      	cmp	r6, #1
 8005544:	d112      	bne.n	800556c <__gethex+0x2e0>
 8005546:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800554a:	9a05      	ldr	r2, [sp, #20]
 800554c:	2762      	movs	r7, #98	; 0x62
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	2301      	movs	r3, #1
 8005552:	6123      	str	r3, [r4, #16]
 8005554:	f8c9 3000 	str.w	r3, [r9]
 8005558:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800555a:	601c      	str	r4, [r3, #0]
 800555c:	e728      	b.n	80053b0 <__gethex+0x124>
 800555e:	bf00      	nop
 8005560:	080075c0 	.word	0x080075c0
 8005564:	08007548 	.word	0x08007548
 8005568:	08007559 	.word	0x08007559
 800556c:	4620      	mov	r0, r4
 800556e:	1e71      	subs	r1, r6, #1
 8005570:	f000 fe5b 	bl	800622a <__any_on>
 8005574:	2800      	cmp	r0, #0
 8005576:	d1e6      	bne.n	8005546 <__gethex+0x2ba>
 8005578:	4621      	mov	r1, r4
 800557a:	9802      	ldr	r0, [sp, #8]
 800557c:	f000 f9fe 	bl	800597c <_Bfree>
 8005580:	2300      	movs	r3, #0
 8005582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005584:	2750      	movs	r7, #80	; 0x50
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	e712      	b.n	80053b0 <__gethex+0x124>
 800558a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f3      	bne.n	8005578 <__gethex+0x2ec>
 8005590:	e7d9      	b.n	8005546 <__gethex+0x2ba>
 8005592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1d6      	bne.n	8005546 <__gethex+0x2ba>
 8005598:	e7ee      	b.n	8005578 <__gethex+0x2ec>
 800559a:	1e6f      	subs	r7, r5, #1
 800559c:	f1ba 0f00 	cmp.w	sl, #0
 80055a0:	d132      	bne.n	8005608 <__gethex+0x37c>
 80055a2:	b127      	cbz	r7, 80055ae <__gethex+0x322>
 80055a4:	4639      	mov	r1, r7
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 fe3f 	bl	800622a <__any_on>
 80055ac:	4682      	mov	sl, r0
 80055ae:	2101      	movs	r1, #1
 80055b0:	117b      	asrs	r3, r7, #5
 80055b2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80055b6:	f007 071f 	and.w	r7, r7, #31
 80055ba:	fa01 f707 	lsl.w	r7, r1, r7
 80055be:	421f      	tst	r7, r3
 80055c0:	f04f 0702 	mov.w	r7, #2
 80055c4:	4629      	mov	r1, r5
 80055c6:	4620      	mov	r0, r4
 80055c8:	bf18      	it	ne
 80055ca:	f04a 0a02 	orrne.w	sl, sl, #2
 80055ce:	1b76      	subs	r6, r6, r5
 80055d0:	f7ff fdf4 	bl	80051bc <rshift>
 80055d4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80055d8:	f1ba 0f00 	cmp.w	sl, #0
 80055dc:	d048      	beq.n	8005670 <__gethex+0x3e4>
 80055de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d015      	beq.n	8005612 <__gethex+0x386>
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d017      	beq.n	800561a <__gethex+0x38e>
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d109      	bne.n	8005602 <__gethex+0x376>
 80055ee:	f01a 0f02 	tst.w	sl, #2
 80055f2:	d006      	beq.n	8005602 <__gethex+0x376>
 80055f4:	f8d9 0000 	ldr.w	r0, [r9]
 80055f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80055fc:	f01a 0f01 	tst.w	sl, #1
 8005600:	d10e      	bne.n	8005620 <__gethex+0x394>
 8005602:	f047 0710 	orr.w	r7, r7, #16
 8005606:	e033      	b.n	8005670 <__gethex+0x3e4>
 8005608:	f04f 0a01 	mov.w	sl, #1
 800560c:	e7cf      	b.n	80055ae <__gethex+0x322>
 800560e:	2701      	movs	r7, #1
 8005610:	e7e2      	b.n	80055d8 <__gethex+0x34c>
 8005612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005614:	f1c3 0301 	rsb	r3, r3, #1
 8005618:	9315      	str	r3, [sp, #84]	; 0x54
 800561a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <__gethex+0x376>
 8005620:	f04f 0c00 	mov.w	ip, #0
 8005624:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005628:	f104 0314 	add.w	r3, r4, #20
 800562c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005630:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005634:	4618      	mov	r0, r3
 8005636:	f853 2b04 	ldr.w	r2, [r3], #4
 800563a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800563e:	d01c      	beq.n	800567a <__gethex+0x3ee>
 8005640:	3201      	adds	r2, #1
 8005642:	6002      	str	r2, [r0, #0]
 8005644:	2f02      	cmp	r7, #2
 8005646:	f104 0314 	add.w	r3, r4, #20
 800564a:	d13d      	bne.n	80056c8 <__gethex+0x43c>
 800564c:	f8d8 2000 	ldr.w	r2, [r8]
 8005650:	3a01      	subs	r2, #1
 8005652:	42b2      	cmp	r2, r6
 8005654:	d10a      	bne.n	800566c <__gethex+0x3e0>
 8005656:	2201      	movs	r2, #1
 8005658:	1171      	asrs	r1, r6, #5
 800565a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800565e:	f006 061f 	and.w	r6, r6, #31
 8005662:	fa02 f606 	lsl.w	r6, r2, r6
 8005666:	421e      	tst	r6, r3
 8005668:	bf18      	it	ne
 800566a:	4617      	movne	r7, r2
 800566c:	f047 0720 	orr.w	r7, r7, #32
 8005670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005672:	601c      	str	r4, [r3, #0]
 8005674:	9b05      	ldr	r3, [sp, #20]
 8005676:	601d      	str	r5, [r3, #0]
 8005678:	e69a      	b.n	80053b0 <__gethex+0x124>
 800567a:	4299      	cmp	r1, r3
 800567c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005680:	d8d8      	bhi.n	8005634 <__gethex+0x3a8>
 8005682:	68a3      	ldr	r3, [r4, #8]
 8005684:	459b      	cmp	fp, r3
 8005686:	db17      	blt.n	80056b8 <__gethex+0x42c>
 8005688:	6861      	ldr	r1, [r4, #4]
 800568a:	9802      	ldr	r0, [sp, #8]
 800568c:	3101      	adds	r1, #1
 800568e:	f000 f935 	bl	80058fc <_Balloc>
 8005692:	4681      	mov	r9, r0
 8005694:	b918      	cbnz	r0, 800569e <__gethex+0x412>
 8005696:	4602      	mov	r2, r0
 8005698:	2184      	movs	r1, #132	; 0x84
 800569a:	4b19      	ldr	r3, [pc, #100]	; (8005700 <__gethex+0x474>)
 800569c:	e6ab      	b.n	80053f6 <__gethex+0x16a>
 800569e:	6922      	ldr	r2, [r4, #16]
 80056a0:	f104 010c 	add.w	r1, r4, #12
 80056a4:	3202      	adds	r2, #2
 80056a6:	0092      	lsls	r2, r2, #2
 80056a8:	300c      	adds	r0, #12
 80056aa:	f000 f919 	bl	80058e0 <memcpy>
 80056ae:	4621      	mov	r1, r4
 80056b0:	9802      	ldr	r0, [sp, #8]
 80056b2:	f000 f963 	bl	800597c <_Bfree>
 80056b6:	464c      	mov	r4, r9
 80056b8:	6923      	ldr	r3, [r4, #16]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	6122      	str	r2, [r4, #16]
 80056be:	2201      	movs	r2, #1
 80056c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056c4:	615a      	str	r2, [r3, #20]
 80056c6:	e7bd      	b.n	8005644 <__gethex+0x3b8>
 80056c8:	6922      	ldr	r2, [r4, #16]
 80056ca:	455a      	cmp	r2, fp
 80056cc:	dd0b      	ble.n	80056e6 <__gethex+0x45a>
 80056ce:	2101      	movs	r1, #1
 80056d0:	4620      	mov	r0, r4
 80056d2:	f7ff fd73 	bl	80051bc <rshift>
 80056d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80056da:	3501      	adds	r5, #1
 80056dc:	42ab      	cmp	r3, r5
 80056de:	f6ff aed4 	blt.w	800548a <__gethex+0x1fe>
 80056e2:	2701      	movs	r7, #1
 80056e4:	e7c2      	b.n	800566c <__gethex+0x3e0>
 80056e6:	f016 061f 	ands.w	r6, r6, #31
 80056ea:	d0fa      	beq.n	80056e2 <__gethex+0x456>
 80056ec:	4453      	add	r3, sl
 80056ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80056f2:	f000 f9f5 	bl	8005ae0 <__hi0bits>
 80056f6:	f1c6 0620 	rsb	r6, r6, #32
 80056fa:	42b0      	cmp	r0, r6
 80056fc:	dbe7      	blt.n	80056ce <__gethex+0x442>
 80056fe:	e7f0      	b.n	80056e2 <__gethex+0x456>
 8005700:	08007548 	.word	0x08007548

08005704 <L_shift>:
 8005704:	f1c2 0208 	rsb	r2, r2, #8
 8005708:	0092      	lsls	r2, r2, #2
 800570a:	b570      	push	{r4, r5, r6, lr}
 800570c:	f1c2 0620 	rsb	r6, r2, #32
 8005710:	6843      	ldr	r3, [r0, #4]
 8005712:	6804      	ldr	r4, [r0, #0]
 8005714:	fa03 f506 	lsl.w	r5, r3, r6
 8005718:	432c      	orrs	r4, r5
 800571a:	40d3      	lsrs	r3, r2
 800571c:	6004      	str	r4, [r0, #0]
 800571e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005722:	4288      	cmp	r0, r1
 8005724:	d3f4      	bcc.n	8005710 <L_shift+0xc>
 8005726:	bd70      	pop	{r4, r5, r6, pc}

08005728 <__match>:
 8005728:	b530      	push	{r4, r5, lr}
 800572a:	6803      	ldr	r3, [r0, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005732:	b914      	cbnz	r4, 800573a <__match+0x12>
 8005734:	6003      	str	r3, [r0, #0]
 8005736:	2001      	movs	r0, #1
 8005738:	bd30      	pop	{r4, r5, pc}
 800573a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800573e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005742:	2d19      	cmp	r5, #25
 8005744:	bf98      	it	ls
 8005746:	3220      	addls	r2, #32
 8005748:	42a2      	cmp	r2, r4
 800574a:	d0f0      	beq.n	800572e <__match+0x6>
 800574c:	2000      	movs	r0, #0
 800574e:	e7f3      	b.n	8005738 <__match+0x10>

08005750 <__hexnan>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	2500      	movs	r5, #0
 8005756:	680b      	ldr	r3, [r1, #0]
 8005758:	4682      	mov	sl, r0
 800575a:	115e      	asrs	r6, r3, #5
 800575c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005760:	f013 031f 	ands.w	r3, r3, #31
 8005764:	bf18      	it	ne
 8005766:	3604      	addne	r6, #4
 8005768:	1f37      	subs	r7, r6, #4
 800576a:	46b9      	mov	r9, r7
 800576c:	463c      	mov	r4, r7
 800576e:	46ab      	mov	fp, r5
 8005770:	b087      	sub	sp, #28
 8005772:	4690      	mov	r8, r2
 8005774:	6802      	ldr	r2, [r0, #0]
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	f846 5c04 	str.w	r5, [r6, #-4]
 800577c:	9502      	str	r5, [sp, #8]
 800577e:	7851      	ldrb	r1, [r2, #1]
 8005780:	1c53      	adds	r3, r2, #1
 8005782:	9303      	str	r3, [sp, #12]
 8005784:	b341      	cbz	r1, 80057d8 <__hexnan+0x88>
 8005786:	4608      	mov	r0, r1
 8005788:	9205      	str	r2, [sp, #20]
 800578a:	9104      	str	r1, [sp, #16]
 800578c:	f7ff fd69 	bl	8005262 <__hexdig_fun>
 8005790:	2800      	cmp	r0, #0
 8005792:	d14f      	bne.n	8005834 <__hexnan+0xe4>
 8005794:	9904      	ldr	r1, [sp, #16]
 8005796:	9a05      	ldr	r2, [sp, #20]
 8005798:	2920      	cmp	r1, #32
 800579a:	d818      	bhi.n	80057ce <__hexnan+0x7e>
 800579c:	9b02      	ldr	r3, [sp, #8]
 800579e:	459b      	cmp	fp, r3
 80057a0:	dd13      	ble.n	80057ca <__hexnan+0x7a>
 80057a2:	454c      	cmp	r4, r9
 80057a4:	d206      	bcs.n	80057b4 <__hexnan+0x64>
 80057a6:	2d07      	cmp	r5, #7
 80057a8:	dc04      	bgt.n	80057b4 <__hexnan+0x64>
 80057aa:	462a      	mov	r2, r5
 80057ac:	4649      	mov	r1, r9
 80057ae:	4620      	mov	r0, r4
 80057b0:	f7ff ffa8 	bl	8005704 <L_shift>
 80057b4:	4544      	cmp	r4, r8
 80057b6:	d950      	bls.n	800585a <__hexnan+0x10a>
 80057b8:	2300      	movs	r3, #0
 80057ba:	f1a4 0904 	sub.w	r9, r4, #4
 80057be:	f844 3c04 	str.w	r3, [r4, #-4]
 80057c2:	461d      	mov	r5, r3
 80057c4:	464c      	mov	r4, r9
 80057c6:	f8cd b008 	str.w	fp, [sp, #8]
 80057ca:	9a03      	ldr	r2, [sp, #12]
 80057cc:	e7d7      	b.n	800577e <__hexnan+0x2e>
 80057ce:	2929      	cmp	r1, #41	; 0x29
 80057d0:	d156      	bne.n	8005880 <__hexnan+0x130>
 80057d2:	3202      	adds	r2, #2
 80057d4:	f8ca 2000 	str.w	r2, [sl]
 80057d8:	f1bb 0f00 	cmp.w	fp, #0
 80057dc:	d050      	beq.n	8005880 <__hexnan+0x130>
 80057de:	454c      	cmp	r4, r9
 80057e0:	d206      	bcs.n	80057f0 <__hexnan+0xa0>
 80057e2:	2d07      	cmp	r5, #7
 80057e4:	dc04      	bgt.n	80057f0 <__hexnan+0xa0>
 80057e6:	462a      	mov	r2, r5
 80057e8:	4649      	mov	r1, r9
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff ff8a 	bl	8005704 <L_shift>
 80057f0:	4544      	cmp	r4, r8
 80057f2:	d934      	bls.n	800585e <__hexnan+0x10e>
 80057f4:	4623      	mov	r3, r4
 80057f6:	f1a8 0204 	sub.w	r2, r8, #4
 80057fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80057fe:	429f      	cmp	r7, r3
 8005800:	f842 1f04 	str.w	r1, [r2, #4]!
 8005804:	d2f9      	bcs.n	80057fa <__hexnan+0xaa>
 8005806:	1b3b      	subs	r3, r7, r4
 8005808:	f023 0303 	bic.w	r3, r3, #3
 800580c:	3304      	adds	r3, #4
 800580e:	3401      	adds	r4, #1
 8005810:	3e03      	subs	r6, #3
 8005812:	42b4      	cmp	r4, r6
 8005814:	bf88      	it	hi
 8005816:	2304      	movhi	r3, #4
 8005818:	2200      	movs	r2, #0
 800581a:	4443      	add	r3, r8
 800581c:	f843 2b04 	str.w	r2, [r3], #4
 8005820:	429f      	cmp	r7, r3
 8005822:	d2fb      	bcs.n	800581c <__hexnan+0xcc>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	b91b      	cbnz	r3, 8005830 <__hexnan+0xe0>
 8005828:	4547      	cmp	r7, r8
 800582a:	d127      	bne.n	800587c <__hexnan+0x12c>
 800582c:	2301      	movs	r3, #1
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	2005      	movs	r0, #5
 8005832:	e026      	b.n	8005882 <__hexnan+0x132>
 8005834:	3501      	adds	r5, #1
 8005836:	2d08      	cmp	r5, #8
 8005838:	f10b 0b01 	add.w	fp, fp, #1
 800583c:	dd06      	ble.n	800584c <__hexnan+0xfc>
 800583e:	4544      	cmp	r4, r8
 8005840:	d9c3      	bls.n	80057ca <__hexnan+0x7a>
 8005842:	2300      	movs	r3, #0
 8005844:	2501      	movs	r5, #1
 8005846:	f844 3c04 	str.w	r3, [r4, #-4]
 800584a:	3c04      	subs	r4, #4
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	f000 000f 	and.w	r0, r0, #15
 8005852:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005856:	6022      	str	r2, [r4, #0]
 8005858:	e7b7      	b.n	80057ca <__hexnan+0x7a>
 800585a:	2508      	movs	r5, #8
 800585c:	e7b5      	b.n	80057ca <__hexnan+0x7a>
 800585e:	9b01      	ldr	r3, [sp, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0df      	beq.n	8005824 <__hexnan+0xd4>
 8005864:	f04f 32ff 	mov.w	r2, #4294967295
 8005868:	f1c3 0320 	rsb	r3, r3, #32
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
 8005870:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005874:	401a      	ands	r2, r3
 8005876:	f846 2c04 	str.w	r2, [r6, #-4]
 800587a:	e7d3      	b.n	8005824 <__hexnan+0xd4>
 800587c:	3f04      	subs	r7, #4
 800587e:	e7d1      	b.n	8005824 <__hexnan+0xd4>
 8005880:	2004      	movs	r0, #4
 8005882:	b007      	add	sp, #28
 8005884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005888 <_localeconv_r>:
 8005888:	4800      	ldr	r0, [pc, #0]	; (800588c <_localeconv_r+0x4>)
 800588a:	4770      	bx	lr
 800588c:	20000164 	.word	0x20000164

08005890 <malloc>:
 8005890:	4b02      	ldr	r3, [pc, #8]	; (800589c <malloc+0xc>)
 8005892:	4601      	mov	r1, r0
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	f000 bd65 	b.w	8006364 <_malloc_r>
 800589a:	bf00      	nop
 800589c:	2000000c 	.word	0x2000000c

080058a0 <__ascii_mbtowc>:
 80058a0:	b082      	sub	sp, #8
 80058a2:	b901      	cbnz	r1, 80058a6 <__ascii_mbtowc+0x6>
 80058a4:	a901      	add	r1, sp, #4
 80058a6:	b142      	cbz	r2, 80058ba <__ascii_mbtowc+0x1a>
 80058a8:	b14b      	cbz	r3, 80058be <__ascii_mbtowc+0x1e>
 80058aa:	7813      	ldrb	r3, [r2, #0]
 80058ac:	600b      	str	r3, [r1, #0]
 80058ae:	7812      	ldrb	r2, [r2, #0]
 80058b0:	1e10      	subs	r0, r2, #0
 80058b2:	bf18      	it	ne
 80058b4:	2001      	movne	r0, #1
 80058b6:	b002      	add	sp, #8
 80058b8:	4770      	bx	lr
 80058ba:	4610      	mov	r0, r2
 80058bc:	e7fb      	b.n	80058b6 <__ascii_mbtowc+0x16>
 80058be:	f06f 0001 	mvn.w	r0, #1
 80058c2:	e7f8      	b.n	80058b6 <__ascii_mbtowc+0x16>

080058c4 <memchr>:
 80058c4:	4603      	mov	r3, r0
 80058c6:	b510      	push	{r4, lr}
 80058c8:	b2c9      	uxtb	r1, r1
 80058ca:	4402      	add	r2, r0
 80058cc:	4293      	cmp	r3, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	d101      	bne.n	80058d6 <memchr+0x12>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e003      	b.n	80058de <memchr+0x1a>
 80058d6:	7804      	ldrb	r4, [r0, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	428c      	cmp	r4, r1
 80058dc:	d1f6      	bne.n	80058cc <memchr+0x8>
 80058de:	bd10      	pop	{r4, pc}

080058e0 <memcpy>:
 80058e0:	440a      	add	r2, r1
 80058e2:	4291      	cmp	r1, r2
 80058e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058e8:	d100      	bne.n	80058ec <memcpy+0xc>
 80058ea:	4770      	bx	lr
 80058ec:	b510      	push	{r4, lr}
 80058ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f2:	4291      	cmp	r1, r2
 80058f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058f8:	d1f9      	bne.n	80058ee <memcpy+0xe>
 80058fa:	bd10      	pop	{r4, pc}

080058fc <_Balloc>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005900:	4604      	mov	r4, r0
 8005902:	460d      	mov	r5, r1
 8005904:	b976      	cbnz	r6, 8005924 <_Balloc+0x28>
 8005906:	2010      	movs	r0, #16
 8005908:	f7ff ffc2 	bl	8005890 <malloc>
 800590c:	4602      	mov	r2, r0
 800590e:	6260      	str	r0, [r4, #36]	; 0x24
 8005910:	b920      	cbnz	r0, 800591c <_Balloc+0x20>
 8005912:	2166      	movs	r1, #102	; 0x66
 8005914:	4b17      	ldr	r3, [pc, #92]	; (8005974 <_Balloc+0x78>)
 8005916:	4818      	ldr	r0, [pc, #96]	; (8005978 <_Balloc+0x7c>)
 8005918:	f000 ff2c 	bl	8006774 <__assert_func>
 800591c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005920:	6006      	str	r6, [r0, #0]
 8005922:	60c6      	str	r6, [r0, #12]
 8005924:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005926:	68f3      	ldr	r3, [r6, #12]
 8005928:	b183      	cbz	r3, 800594c <_Balloc+0x50>
 800592a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005932:	b9b8      	cbnz	r0, 8005964 <_Balloc+0x68>
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f605 	lsl.w	r6, r1, r5
 800593a:	1d72      	adds	r2, r6, #5
 800593c:	4620      	mov	r0, r4
 800593e:	0092      	lsls	r2, r2, #2
 8005940:	f000 fc94 	bl	800626c <_calloc_r>
 8005944:	b160      	cbz	r0, 8005960 <_Balloc+0x64>
 8005946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800594a:	e00e      	b.n	800596a <_Balloc+0x6e>
 800594c:	2221      	movs	r2, #33	; 0x21
 800594e:	2104      	movs	r1, #4
 8005950:	4620      	mov	r0, r4
 8005952:	f000 fc8b 	bl	800626c <_calloc_r>
 8005956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005958:	60f0      	str	r0, [r6, #12]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e4      	bne.n	800592a <_Balloc+0x2e>
 8005960:	2000      	movs	r0, #0
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	6802      	ldr	r2, [r0, #0]
 8005966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800596a:	2300      	movs	r3, #0
 800596c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005970:	e7f7      	b.n	8005962 <_Balloc+0x66>
 8005972:	bf00      	nop
 8005974:	080074d6 	.word	0x080074d6
 8005978:	080075d4 	.word	0x080075d4

0800597c <_Bfree>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005980:	4605      	mov	r5, r0
 8005982:	460c      	mov	r4, r1
 8005984:	b976      	cbnz	r6, 80059a4 <_Bfree+0x28>
 8005986:	2010      	movs	r0, #16
 8005988:	f7ff ff82 	bl	8005890 <malloc>
 800598c:	4602      	mov	r2, r0
 800598e:	6268      	str	r0, [r5, #36]	; 0x24
 8005990:	b920      	cbnz	r0, 800599c <_Bfree+0x20>
 8005992:	218a      	movs	r1, #138	; 0x8a
 8005994:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <_Bfree+0x3c>)
 8005996:	4809      	ldr	r0, [pc, #36]	; (80059bc <_Bfree+0x40>)
 8005998:	f000 feec 	bl	8006774 <__assert_func>
 800599c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059a0:	6006      	str	r6, [r0, #0]
 80059a2:	60c6      	str	r6, [r0, #12]
 80059a4:	b13c      	cbz	r4, 80059b6 <_Bfree+0x3a>
 80059a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059a8:	6862      	ldr	r2, [r4, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059b0:	6021      	str	r1, [r4, #0]
 80059b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	080074d6 	.word	0x080074d6
 80059bc:	080075d4 	.word	0x080075d4

080059c0 <__multadd>:
 80059c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c4:	4607      	mov	r7, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	461e      	mov	r6, r3
 80059ca:	2000      	movs	r0, #0
 80059cc:	690d      	ldr	r5, [r1, #16]
 80059ce:	f101 0c14 	add.w	ip, r1, #20
 80059d2:	f8dc 3000 	ldr.w	r3, [ip]
 80059d6:	3001      	adds	r0, #1
 80059d8:	b299      	uxth	r1, r3
 80059da:	fb02 6101 	mla	r1, r2, r1, r6
 80059de:	0c1e      	lsrs	r6, r3, #16
 80059e0:	0c0b      	lsrs	r3, r1, #16
 80059e2:	fb02 3306 	mla	r3, r2, r6, r3
 80059e6:	b289      	uxth	r1, r1
 80059e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80059ec:	4285      	cmp	r5, r0
 80059ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059f2:	f84c 1b04 	str.w	r1, [ip], #4
 80059f6:	dcec      	bgt.n	80059d2 <__multadd+0x12>
 80059f8:	b30e      	cbz	r6, 8005a3e <__multadd+0x7e>
 80059fa:	68a3      	ldr	r3, [r4, #8]
 80059fc:	42ab      	cmp	r3, r5
 80059fe:	dc19      	bgt.n	8005a34 <__multadd+0x74>
 8005a00:	6861      	ldr	r1, [r4, #4]
 8005a02:	4638      	mov	r0, r7
 8005a04:	3101      	adds	r1, #1
 8005a06:	f7ff ff79 	bl	80058fc <_Balloc>
 8005a0a:	4680      	mov	r8, r0
 8005a0c:	b928      	cbnz	r0, 8005a1a <__multadd+0x5a>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	21b5      	movs	r1, #181	; 0xb5
 8005a12:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <__multadd+0x84>)
 8005a14:	480c      	ldr	r0, [pc, #48]	; (8005a48 <__multadd+0x88>)
 8005a16:	f000 fead 	bl	8006774 <__assert_func>
 8005a1a:	6922      	ldr	r2, [r4, #16]
 8005a1c:	f104 010c 	add.w	r1, r4, #12
 8005a20:	3202      	adds	r2, #2
 8005a22:	0092      	lsls	r2, r2, #2
 8005a24:	300c      	adds	r0, #12
 8005a26:	f7ff ff5b 	bl	80058e0 <memcpy>
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	f7ff ffa5 	bl	800597c <_Bfree>
 8005a32:	4644      	mov	r4, r8
 8005a34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a38:	3501      	adds	r5, #1
 8005a3a:	615e      	str	r6, [r3, #20]
 8005a3c:	6125      	str	r5, [r4, #16]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a44:	08007548 	.word	0x08007548
 8005a48:	080075d4 	.word	0x080075d4

08005a4c <__s2b>:
 8005a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a50:	4615      	mov	r5, r2
 8005a52:	2209      	movs	r2, #9
 8005a54:	461f      	mov	r7, r3
 8005a56:	3308      	adds	r3, #8
 8005a58:	460c      	mov	r4, r1
 8005a5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a5e:	4606      	mov	r6, r0
 8005a60:	2201      	movs	r2, #1
 8005a62:	2100      	movs	r1, #0
 8005a64:	429a      	cmp	r2, r3
 8005a66:	db09      	blt.n	8005a7c <__s2b+0x30>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7ff ff47 	bl	80058fc <_Balloc>
 8005a6e:	b940      	cbnz	r0, 8005a82 <__s2b+0x36>
 8005a70:	4602      	mov	r2, r0
 8005a72:	21ce      	movs	r1, #206	; 0xce
 8005a74:	4b18      	ldr	r3, [pc, #96]	; (8005ad8 <__s2b+0x8c>)
 8005a76:	4819      	ldr	r0, [pc, #100]	; (8005adc <__s2b+0x90>)
 8005a78:	f000 fe7c 	bl	8006774 <__assert_func>
 8005a7c:	0052      	lsls	r2, r2, #1
 8005a7e:	3101      	adds	r1, #1
 8005a80:	e7f0      	b.n	8005a64 <__s2b+0x18>
 8005a82:	9b08      	ldr	r3, [sp, #32]
 8005a84:	2d09      	cmp	r5, #9
 8005a86:	6143      	str	r3, [r0, #20]
 8005a88:	f04f 0301 	mov.w	r3, #1
 8005a8c:	6103      	str	r3, [r0, #16]
 8005a8e:	dd16      	ble.n	8005abe <__s2b+0x72>
 8005a90:	f104 0909 	add.w	r9, r4, #9
 8005a94:	46c8      	mov	r8, r9
 8005a96:	442c      	add	r4, r5
 8005a98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005a9c:	4601      	mov	r1, r0
 8005a9e:	220a      	movs	r2, #10
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	3b30      	subs	r3, #48	; 0x30
 8005aa4:	f7ff ff8c 	bl	80059c0 <__multadd>
 8005aa8:	45a0      	cmp	r8, r4
 8005aaa:	d1f5      	bne.n	8005a98 <__s2b+0x4c>
 8005aac:	f1a5 0408 	sub.w	r4, r5, #8
 8005ab0:	444c      	add	r4, r9
 8005ab2:	1b2d      	subs	r5, r5, r4
 8005ab4:	1963      	adds	r3, r4, r5
 8005ab6:	42bb      	cmp	r3, r7
 8005ab8:	db04      	blt.n	8005ac4 <__s2b+0x78>
 8005aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005abe:	2509      	movs	r5, #9
 8005ac0:	340a      	adds	r4, #10
 8005ac2:	e7f6      	b.n	8005ab2 <__s2b+0x66>
 8005ac4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ac8:	4601      	mov	r1, r0
 8005aca:	220a      	movs	r2, #10
 8005acc:	4630      	mov	r0, r6
 8005ace:	3b30      	subs	r3, #48	; 0x30
 8005ad0:	f7ff ff76 	bl	80059c0 <__multadd>
 8005ad4:	e7ee      	b.n	8005ab4 <__s2b+0x68>
 8005ad6:	bf00      	nop
 8005ad8:	08007548 	.word	0x08007548
 8005adc:	080075d4 	.word	0x080075d4

08005ae0 <__hi0bits>:
 8005ae0:	0c02      	lsrs	r2, r0, #16
 8005ae2:	0412      	lsls	r2, r2, #16
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	b9ca      	cbnz	r2, 8005b1c <__hi0bits+0x3c>
 8005ae8:	0403      	lsls	r3, r0, #16
 8005aea:	2010      	movs	r0, #16
 8005aec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005af0:	bf04      	itt	eq
 8005af2:	021b      	lsleq	r3, r3, #8
 8005af4:	3008      	addeq	r0, #8
 8005af6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005afa:	bf04      	itt	eq
 8005afc:	011b      	lsleq	r3, r3, #4
 8005afe:	3004      	addeq	r0, #4
 8005b00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b04:	bf04      	itt	eq
 8005b06:	009b      	lsleq	r3, r3, #2
 8005b08:	3002      	addeq	r0, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	db05      	blt.n	8005b1a <__hi0bits+0x3a>
 8005b0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b12:	f100 0001 	add.w	r0, r0, #1
 8005b16:	bf08      	it	eq
 8005b18:	2020      	moveq	r0, #32
 8005b1a:	4770      	bx	lr
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e7e5      	b.n	8005aec <__hi0bits+0xc>

08005b20 <__lo0bits>:
 8005b20:	6803      	ldr	r3, [r0, #0]
 8005b22:	4602      	mov	r2, r0
 8005b24:	f013 0007 	ands.w	r0, r3, #7
 8005b28:	d00b      	beq.n	8005b42 <__lo0bits+0x22>
 8005b2a:	07d9      	lsls	r1, r3, #31
 8005b2c:	d421      	bmi.n	8005b72 <__lo0bits+0x52>
 8005b2e:	0798      	lsls	r0, r3, #30
 8005b30:	bf49      	itett	mi
 8005b32:	085b      	lsrmi	r3, r3, #1
 8005b34:	089b      	lsrpl	r3, r3, #2
 8005b36:	2001      	movmi	r0, #1
 8005b38:	6013      	strmi	r3, [r2, #0]
 8005b3a:	bf5c      	itt	pl
 8005b3c:	2002      	movpl	r0, #2
 8005b3e:	6013      	strpl	r3, [r2, #0]
 8005b40:	4770      	bx	lr
 8005b42:	b299      	uxth	r1, r3
 8005b44:	b909      	cbnz	r1, 8005b4a <__lo0bits+0x2a>
 8005b46:	2010      	movs	r0, #16
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	b2d9      	uxtb	r1, r3
 8005b4c:	b909      	cbnz	r1, 8005b52 <__lo0bits+0x32>
 8005b4e:	3008      	adds	r0, #8
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	0719      	lsls	r1, r3, #28
 8005b54:	bf04      	itt	eq
 8005b56:	091b      	lsreq	r3, r3, #4
 8005b58:	3004      	addeq	r0, #4
 8005b5a:	0799      	lsls	r1, r3, #30
 8005b5c:	bf04      	itt	eq
 8005b5e:	089b      	lsreq	r3, r3, #2
 8005b60:	3002      	addeq	r0, #2
 8005b62:	07d9      	lsls	r1, r3, #31
 8005b64:	d403      	bmi.n	8005b6e <__lo0bits+0x4e>
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	f100 0001 	add.w	r0, r0, #1
 8005b6c:	d003      	beq.n	8005b76 <__lo0bits+0x56>
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4770      	bx	lr
 8005b72:	2000      	movs	r0, #0
 8005b74:	4770      	bx	lr
 8005b76:	2020      	movs	r0, #32
 8005b78:	4770      	bx	lr
	...

08005b7c <__i2b>:
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	460c      	mov	r4, r1
 8005b80:	2101      	movs	r1, #1
 8005b82:	f7ff febb 	bl	80058fc <_Balloc>
 8005b86:	4602      	mov	r2, r0
 8005b88:	b928      	cbnz	r0, 8005b96 <__i2b+0x1a>
 8005b8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b8e:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <__i2b+0x24>)
 8005b90:	4804      	ldr	r0, [pc, #16]	; (8005ba4 <__i2b+0x28>)
 8005b92:	f000 fdef 	bl	8006774 <__assert_func>
 8005b96:	2301      	movs	r3, #1
 8005b98:	6144      	str	r4, [r0, #20]
 8005b9a:	6103      	str	r3, [r0, #16]
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08007548 	.word	0x08007548
 8005ba4:	080075d4 	.word	0x080075d4

08005ba8 <__multiply>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	4691      	mov	r9, r2
 8005bae:	690a      	ldr	r2, [r1, #16]
 8005bb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	bfbe      	ittt	lt
 8005bba:	460b      	movlt	r3, r1
 8005bbc:	464c      	movlt	r4, r9
 8005bbe:	4699      	movlt	r9, r3
 8005bc0:	6927      	ldr	r7, [r4, #16]
 8005bc2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005bc6:	68a3      	ldr	r3, [r4, #8]
 8005bc8:	6861      	ldr	r1, [r4, #4]
 8005bca:	eb07 060a 	add.w	r6, r7, sl
 8005bce:	42b3      	cmp	r3, r6
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	bfb8      	it	lt
 8005bd4:	3101      	addlt	r1, #1
 8005bd6:	f7ff fe91 	bl	80058fc <_Balloc>
 8005bda:	b930      	cbnz	r0, 8005bea <__multiply+0x42>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f240 115d 	movw	r1, #349	; 0x15d
 8005be2:	4b43      	ldr	r3, [pc, #268]	; (8005cf0 <__multiply+0x148>)
 8005be4:	4843      	ldr	r0, [pc, #268]	; (8005cf4 <__multiply+0x14c>)
 8005be6:	f000 fdc5 	bl	8006774 <__assert_func>
 8005bea:	f100 0514 	add.w	r5, r0, #20
 8005bee:	462b      	mov	r3, r5
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005bf6:	4543      	cmp	r3, r8
 8005bf8:	d321      	bcc.n	8005c3e <__multiply+0x96>
 8005bfa:	f104 0314 	add.w	r3, r4, #20
 8005bfe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c02:	f109 0314 	add.w	r3, r9, #20
 8005c06:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c0a:	9202      	str	r2, [sp, #8]
 8005c0c:	1b3a      	subs	r2, r7, r4
 8005c0e:	3a15      	subs	r2, #21
 8005c10:	f022 0203 	bic.w	r2, r2, #3
 8005c14:	3204      	adds	r2, #4
 8005c16:	f104 0115 	add.w	r1, r4, #21
 8005c1a:	428f      	cmp	r7, r1
 8005c1c:	bf38      	it	cc
 8005c1e:	2204      	movcc	r2, #4
 8005c20:	9201      	str	r2, [sp, #4]
 8005c22:	9a02      	ldr	r2, [sp, #8]
 8005c24:	9303      	str	r3, [sp, #12]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d80c      	bhi.n	8005c44 <__multiply+0x9c>
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	dd03      	ble.n	8005c36 <__multiply+0x8e>
 8005c2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d059      	beq.n	8005cea <__multiply+0x142>
 8005c36:	6106      	str	r6, [r0, #16]
 8005c38:	b005      	add	sp, #20
 8005c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3e:	f843 2b04 	str.w	r2, [r3], #4
 8005c42:	e7d8      	b.n	8005bf6 <__multiply+0x4e>
 8005c44:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c48:	f1ba 0f00 	cmp.w	sl, #0
 8005c4c:	d023      	beq.n	8005c96 <__multiply+0xee>
 8005c4e:	46a9      	mov	r9, r5
 8005c50:	f04f 0c00 	mov.w	ip, #0
 8005c54:	f104 0e14 	add.w	lr, r4, #20
 8005c58:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c5c:	f8d9 1000 	ldr.w	r1, [r9]
 8005c60:	fa1f fb82 	uxth.w	fp, r2
 8005c64:	b289      	uxth	r1, r1
 8005c66:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c6a:	4461      	add	r1, ip
 8005c6c:	f8d9 c000 	ldr.w	ip, [r9]
 8005c70:	0c12      	lsrs	r2, r2, #16
 8005c72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c76:	fb0a c202 	mla	r2, sl, r2, ip
 8005c7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c7e:	b289      	uxth	r1, r1
 8005c80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c84:	4577      	cmp	r7, lr
 8005c86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c8a:	f849 1b04 	str.w	r1, [r9], #4
 8005c8e:	d8e3      	bhi.n	8005c58 <__multiply+0xb0>
 8005c90:	9a01      	ldr	r2, [sp, #4]
 8005c92:	f845 c002 	str.w	ip, [r5, r2]
 8005c96:	9a03      	ldr	r2, [sp, #12]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ca2:	d020      	beq.n	8005ce6 <__multiply+0x13e>
 8005ca4:	46ae      	mov	lr, r5
 8005ca6:	f04f 0a00 	mov.w	sl, #0
 8005caa:	6829      	ldr	r1, [r5, #0]
 8005cac:	f104 0c14 	add.w	ip, r4, #20
 8005cb0:	f8bc b000 	ldrh.w	fp, [ip]
 8005cb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005cb8:	b289      	uxth	r1, r1
 8005cba:	fb09 220b 	mla	r2, r9, fp, r2
 8005cbe:	4492      	add	sl, r2
 8005cc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005cc4:	f84e 1b04 	str.w	r1, [lr], #4
 8005cc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005ccc:	f8be 1000 	ldrh.w	r1, [lr]
 8005cd0:	0c12      	lsrs	r2, r2, #16
 8005cd2:	fb09 1102 	mla	r1, r9, r2, r1
 8005cd6:	4567      	cmp	r7, ip
 8005cd8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005cdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ce0:	d8e6      	bhi.n	8005cb0 <__multiply+0x108>
 8005ce2:	9a01      	ldr	r2, [sp, #4]
 8005ce4:	50a9      	str	r1, [r5, r2]
 8005ce6:	3504      	adds	r5, #4
 8005ce8:	e79b      	b.n	8005c22 <__multiply+0x7a>
 8005cea:	3e01      	subs	r6, #1
 8005cec:	e79d      	b.n	8005c2a <__multiply+0x82>
 8005cee:	bf00      	nop
 8005cf0:	08007548 	.word	0x08007548
 8005cf4:	080075d4 	.word	0x080075d4

08005cf8 <__pow5mult>:
 8005cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cfc:	4615      	mov	r5, r2
 8005cfe:	f012 0203 	ands.w	r2, r2, #3
 8005d02:	4606      	mov	r6, r0
 8005d04:	460f      	mov	r7, r1
 8005d06:	d007      	beq.n	8005d18 <__pow5mult+0x20>
 8005d08:	4c25      	ldr	r4, [pc, #148]	; (8005da0 <__pow5mult+0xa8>)
 8005d0a:	3a01      	subs	r2, #1
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d12:	f7ff fe55 	bl	80059c0 <__multadd>
 8005d16:	4607      	mov	r7, r0
 8005d18:	10ad      	asrs	r5, r5, #2
 8005d1a:	d03d      	beq.n	8005d98 <__pow5mult+0xa0>
 8005d1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d1e:	b97c      	cbnz	r4, 8005d40 <__pow5mult+0x48>
 8005d20:	2010      	movs	r0, #16
 8005d22:	f7ff fdb5 	bl	8005890 <malloc>
 8005d26:	4602      	mov	r2, r0
 8005d28:	6270      	str	r0, [r6, #36]	; 0x24
 8005d2a:	b928      	cbnz	r0, 8005d38 <__pow5mult+0x40>
 8005d2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d30:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <__pow5mult+0xac>)
 8005d32:	481d      	ldr	r0, [pc, #116]	; (8005da8 <__pow5mult+0xb0>)
 8005d34:	f000 fd1e 	bl	8006774 <__assert_func>
 8005d38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d3c:	6004      	str	r4, [r0, #0]
 8005d3e:	60c4      	str	r4, [r0, #12]
 8005d40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d48:	b94c      	cbnz	r4, 8005d5e <__pow5mult+0x66>
 8005d4a:	f240 2171 	movw	r1, #625	; 0x271
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f7ff ff14 	bl	8005b7c <__i2b>
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d5c:	6003      	str	r3, [r0, #0]
 8005d5e:	f04f 0900 	mov.w	r9, #0
 8005d62:	07eb      	lsls	r3, r5, #31
 8005d64:	d50a      	bpl.n	8005d7c <__pow5mult+0x84>
 8005d66:	4639      	mov	r1, r7
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff ff1c 	bl	8005ba8 <__multiply>
 8005d70:	4680      	mov	r8, r0
 8005d72:	4639      	mov	r1, r7
 8005d74:	4630      	mov	r0, r6
 8005d76:	f7ff fe01 	bl	800597c <_Bfree>
 8005d7a:	4647      	mov	r7, r8
 8005d7c:	106d      	asrs	r5, r5, #1
 8005d7e:	d00b      	beq.n	8005d98 <__pow5mult+0xa0>
 8005d80:	6820      	ldr	r0, [r4, #0]
 8005d82:	b938      	cbnz	r0, 8005d94 <__pow5mult+0x9c>
 8005d84:	4622      	mov	r2, r4
 8005d86:	4621      	mov	r1, r4
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7ff ff0d 	bl	8005ba8 <__multiply>
 8005d8e:	6020      	str	r0, [r4, #0]
 8005d90:	f8c0 9000 	str.w	r9, [r0]
 8005d94:	4604      	mov	r4, r0
 8005d96:	e7e4      	b.n	8005d62 <__pow5mult+0x6a>
 8005d98:	4638      	mov	r0, r7
 8005d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d9e:	bf00      	nop
 8005da0:	08007720 	.word	0x08007720
 8005da4:	080074d6 	.word	0x080074d6
 8005da8:	080075d4 	.word	0x080075d4

08005dac <__lshift>:
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	460c      	mov	r4, r1
 8005db2:	4607      	mov	r7, r0
 8005db4:	4691      	mov	r9, r2
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	6849      	ldr	r1, [r1, #4]
 8005dba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005dc4:	f108 0601 	add.w	r6, r8, #1
 8005dc8:	42b3      	cmp	r3, r6
 8005dca:	db0b      	blt.n	8005de4 <__lshift+0x38>
 8005dcc:	4638      	mov	r0, r7
 8005dce:	f7ff fd95 	bl	80058fc <_Balloc>
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	b948      	cbnz	r0, 8005dea <__lshift+0x3e>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ddc:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <__lshift+0xd8>)
 8005dde:	482a      	ldr	r0, [pc, #168]	; (8005e88 <__lshift+0xdc>)
 8005de0:	f000 fcc8 	bl	8006774 <__assert_func>
 8005de4:	3101      	adds	r1, #1
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	e7ee      	b.n	8005dc8 <__lshift+0x1c>
 8005dea:	2300      	movs	r3, #0
 8005dec:	f100 0114 	add.w	r1, r0, #20
 8005df0:	f100 0210 	add.w	r2, r0, #16
 8005df4:	4618      	mov	r0, r3
 8005df6:	4553      	cmp	r3, sl
 8005df8:	db37      	blt.n	8005e6a <__lshift+0xbe>
 8005dfa:	6920      	ldr	r0, [r4, #16]
 8005dfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e00:	f104 0314 	add.w	r3, r4, #20
 8005e04:	f019 091f 	ands.w	r9, r9, #31
 8005e08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e10:	d02f      	beq.n	8005e72 <__lshift+0xc6>
 8005e12:	468a      	mov	sl, r1
 8005e14:	f04f 0c00 	mov.w	ip, #0
 8005e18:	f1c9 0e20 	rsb	lr, r9, #32
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	fa02 f209 	lsl.w	r2, r2, r9
 8005e22:	ea42 020c 	orr.w	r2, r2, ip
 8005e26:	f84a 2b04 	str.w	r2, [sl], #4
 8005e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2e:	4298      	cmp	r0, r3
 8005e30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005e34:	d8f2      	bhi.n	8005e1c <__lshift+0x70>
 8005e36:	1b03      	subs	r3, r0, r4
 8005e38:	3b15      	subs	r3, #21
 8005e3a:	f023 0303 	bic.w	r3, r3, #3
 8005e3e:	3304      	adds	r3, #4
 8005e40:	f104 0215 	add.w	r2, r4, #21
 8005e44:	4290      	cmp	r0, r2
 8005e46:	bf38      	it	cc
 8005e48:	2304      	movcc	r3, #4
 8005e4a:	f841 c003 	str.w	ip, [r1, r3]
 8005e4e:	f1bc 0f00 	cmp.w	ip, #0
 8005e52:	d001      	beq.n	8005e58 <__lshift+0xac>
 8005e54:	f108 0602 	add.w	r6, r8, #2
 8005e58:	3e01      	subs	r6, #1
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	612e      	str	r6, [r5, #16]
 8005e60:	f7ff fd8c 	bl	800597c <_Bfree>
 8005e64:	4628      	mov	r0, r5
 8005e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e6e:	3301      	adds	r3, #1
 8005e70:	e7c1      	b.n	8005df6 <__lshift+0x4a>
 8005e72:	3904      	subs	r1, #4
 8005e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e78:	4298      	cmp	r0, r3
 8005e7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e7e:	d8f9      	bhi.n	8005e74 <__lshift+0xc8>
 8005e80:	e7ea      	b.n	8005e58 <__lshift+0xac>
 8005e82:	bf00      	nop
 8005e84:	08007548 	.word	0x08007548
 8005e88:	080075d4 	.word	0x080075d4

08005e8c <__mcmp>:
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	690a      	ldr	r2, [r1, #16]
 8005e90:	6900      	ldr	r0, [r0, #16]
 8005e92:	b530      	push	{r4, r5, lr}
 8005e94:	1a80      	subs	r0, r0, r2
 8005e96:	d10d      	bne.n	8005eb4 <__mcmp+0x28>
 8005e98:	3314      	adds	r3, #20
 8005e9a:	3114      	adds	r1, #20
 8005e9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ea0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ea4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ea8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005eac:	4295      	cmp	r5, r2
 8005eae:	d002      	beq.n	8005eb6 <__mcmp+0x2a>
 8005eb0:	d304      	bcc.n	8005ebc <__mcmp+0x30>
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	bd30      	pop	{r4, r5, pc}
 8005eb6:	42a3      	cmp	r3, r4
 8005eb8:	d3f4      	bcc.n	8005ea4 <__mcmp+0x18>
 8005eba:	e7fb      	b.n	8005eb4 <__mcmp+0x28>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	e7f8      	b.n	8005eb4 <__mcmp+0x28>
	...

08005ec4 <__mdiff>:
 8005ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	460d      	mov	r5, r1
 8005eca:	4607      	mov	r7, r0
 8005ecc:	4611      	mov	r1, r2
 8005ece:	4628      	mov	r0, r5
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	f7ff ffdb 	bl	8005e8c <__mcmp>
 8005ed6:	1e06      	subs	r6, r0, #0
 8005ed8:	d111      	bne.n	8005efe <__mdiff+0x3a>
 8005eda:	4631      	mov	r1, r6
 8005edc:	4638      	mov	r0, r7
 8005ede:	f7ff fd0d 	bl	80058fc <_Balloc>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	b928      	cbnz	r0, 8005ef2 <__mdiff+0x2e>
 8005ee6:	f240 2132 	movw	r1, #562	; 0x232
 8005eea:	4b3a      	ldr	r3, [pc, #232]	; (8005fd4 <__mdiff+0x110>)
 8005eec:	483a      	ldr	r0, [pc, #232]	; (8005fd8 <__mdiff+0x114>)
 8005eee:	f000 fc41 	bl	8006774 <__assert_func>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ef8:	4610      	mov	r0, r2
 8005efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	bfa4      	itt	ge
 8005f00:	4623      	movge	r3, r4
 8005f02:	462c      	movge	r4, r5
 8005f04:	4638      	mov	r0, r7
 8005f06:	6861      	ldr	r1, [r4, #4]
 8005f08:	bfa6      	itte	ge
 8005f0a:	461d      	movge	r5, r3
 8005f0c:	2600      	movge	r6, #0
 8005f0e:	2601      	movlt	r6, #1
 8005f10:	f7ff fcf4 	bl	80058fc <_Balloc>
 8005f14:	4602      	mov	r2, r0
 8005f16:	b918      	cbnz	r0, 8005f20 <__mdiff+0x5c>
 8005f18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f1c:	4b2d      	ldr	r3, [pc, #180]	; (8005fd4 <__mdiff+0x110>)
 8005f1e:	e7e5      	b.n	8005eec <__mdiff+0x28>
 8005f20:	f102 0814 	add.w	r8, r2, #20
 8005f24:	46c2      	mov	sl, r8
 8005f26:	f04f 0c00 	mov.w	ip, #0
 8005f2a:	6927      	ldr	r7, [r4, #16]
 8005f2c:	60c6      	str	r6, [r0, #12]
 8005f2e:	692e      	ldr	r6, [r5, #16]
 8005f30:	f104 0014 	add.w	r0, r4, #20
 8005f34:	f105 0914 	add.w	r9, r5, #20
 8005f38:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005f3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f40:	3410      	adds	r4, #16
 8005f42:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005f46:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f4a:	fa1f f18b 	uxth.w	r1, fp
 8005f4e:	448c      	add	ip, r1
 8005f50:	b299      	uxth	r1, r3
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	ebac 0101 	sub.w	r1, ip, r1
 8005f58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f5c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f60:	b289      	uxth	r1, r1
 8005f62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f66:	454e      	cmp	r6, r9
 8005f68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f6c:	f84a 3b04 	str.w	r3, [sl], #4
 8005f70:	d8e7      	bhi.n	8005f42 <__mdiff+0x7e>
 8005f72:	1b73      	subs	r3, r6, r5
 8005f74:	3b15      	subs	r3, #21
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	3515      	adds	r5, #21
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	42ae      	cmp	r6, r5
 8005f80:	bf38      	it	cc
 8005f82:	2304      	movcc	r3, #4
 8005f84:	4418      	add	r0, r3
 8005f86:	4443      	add	r3, r8
 8005f88:	461e      	mov	r6, r3
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	4575      	cmp	r5, lr
 8005f8e:	d30e      	bcc.n	8005fae <__mdiff+0xea>
 8005f90:	f10e 0103 	add.w	r1, lr, #3
 8005f94:	1a09      	subs	r1, r1, r0
 8005f96:	f021 0103 	bic.w	r1, r1, #3
 8005f9a:	3803      	subs	r0, #3
 8005f9c:	4586      	cmp	lr, r0
 8005f9e:	bf38      	it	cc
 8005fa0:	2100      	movcc	r1, #0
 8005fa2:	4419      	add	r1, r3
 8005fa4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fa8:	b18b      	cbz	r3, 8005fce <__mdiff+0x10a>
 8005faa:	6117      	str	r7, [r2, #16]
 8005fac:	e7a4      	b.n	8005ef8 <__mdiff+0x34>
 8005fae:	f855 8b04 	ldr.w	r8, [r5], #4
 8005fb2:	fa1f f188 	uxth.w	r1, r8
 8005fb6:	4461      	add	r1, ip
 8005fb8:	140c      	asrs	r4, r1, #16
 8005fba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005fbe:	b289      	uxth	r1, r1
 8005fc0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005fc4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005fc8:	f846 1b04 	str.w	r1, [r6], #4
 8005fcc:	e7de      	b.n	8005f8c <__mdiff+0xc8>
 8005fce:	3f01      	subs	r7, #1
 8005fd0:	e7e8      	b.n	8005fa4 <__mdiff+0xe0>
 8005fd2:	bf00      	nop
 8005fd4:	08007548 	.word	0x08007548
 8005fd8:	080075d4 	.word	0x080075d4

08005fdc <__ulp>:
 8005fdc:	4b11      	ldr	r3, [pc, #68]	; (8006024 <__ulp+0x48>)
 8005fde:	400b      	ands	r3, r1
 8005fe0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	dd02      	ble.n	8005fee <__ulp+0x12>
 8005fe8:	2000      	movs	r0, #0
 8005fea:	4619      	mov	r1, r3
 8005fec:	4770      	bx	lr
 8005fee:	425b      	negs	r3, r3
 8005ff0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005ff4:	f04f 0000 	mov.w	r0, #0
 8005ff8:	f04f 0100 	mov.w	r1, #0
 8005ffc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006000:	da04      	bge.n	800600c <__ulp+0x30>
 8006002:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006006:	fa43 f102 	asr.w	r1, r3, r2
 800600a:	4770      	bx	lr
 800600c:	f1a2 0314 	sub.w	r3, r2, #20
 8006010:	2b1e      	cmp	r3, #30
 8006012:	bfd6      	itet	le
 8006014:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006018:	2301      	movgt	r3, #1
 800601a:	fa22 f303 	lsrle.w	r3, r2, r3
 800601e:	4618      	mov	r0, r3
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	7ff00000 	.word	0x7ff00000

08006028 <__b2d>:
 8006028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800602c:	6907      	ldr	r7, [r0, #16]
 800602e:	f100 0914 	add.w	r9, r0, #20
 8006032:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006036:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800603a:	f1a7 0804 	sub.w	r8, r7, #4
 800603e:	4630      	mov	r0, r6
 8006040:	f7ff fd4e 	bl	8005ae0 <__hi0bits>
 8006044:	f1c0 0320 	rsb	r3, r0, #32
 8006048:	280a      	cmp	r0, #10
 800604a:	600b      	str	r3, [r1, #0]
 800604c:	491f      	ldr	r1, [pc, #124]	; (80060cc <__b2d+0xa4>)
 800604e:	dc17      	bgt.n	8006080 <__b2d+0x58>
 8006050:	45c1      	cmp	r9, r8
 8006052:	bf28      	it	cs
 8006054:	2200      	movcs	r2, #0
 8006056:	f1c0 0c0b 	rsb	ip, r0, #11
 800605a:	fa26 f30c 	lsr.w	r3, r6, ip
 800605e:	bf38      	it	cc
 8006060:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006064:	ea43 0501 	orr.w	r5, r3, r1
 8006068:	f100 0315 	add.w	r3, r0, #21
 800606c:	fa06 f303 	lsl.w	r3, r6, r3
 8006070:	fa22 f20c 	lsr.w	r2, r2, ip
 8006074:	ea43 0402 	orr.w	r4, r3, r2
 8006078:	4620      	mov	r0, r4
 800607a:	4629      	mov	r1, r5
 800607c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006080:	45c1      	cmp	r9, r8
 8006082:	bf2e      	itee	cs
 8006084:	2200      	movcs	r2, #0
 8006086:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800608a:	f1a7 0808 	subcc.w	r8, r7, #8
 800608e:	f1b0 030b 	subs.w	r3, r0, #11
 8006092:	d016      	beq.n	80060c2 <__b2d+0x9a>
 8006094:	f1c3 0720 	rsb	r7, r3, #32
 8006098:	fa22 f107 	lsr.w	r1, r2, r7
 800609c:	45c8      	cmp	r8, r9
 800609e:	fa06 f603 	lsl.w	r6, r6, r3
 80060a2:	ea46 0601 	orr.w	r6, r6, r1
 80060a6:	bf94      	ite	ls
 80060a8:	2100      	movls	r1, #0
 80060aa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80060ae:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80060b2:	fa02 f003 	lsl.w	r0, r2, r3
 80060b6:	40f9      	lsrs	r1, r7
 80060b8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80060bc:	ea40 0401 	orr.w	r4, r0, r1
 80060c0:	e7da      	b.n	8006078 <__b2d+0x50>
 80060c2:	4614      	mov	r4, r2
 80060c4:	ea46 0501 	orr.w	r5, r6, r1
 80060c8:	e7d6      	b.n	8006078 <__b2d+0x50>
 80060ca:	bf00      	nop
 80060cc:	3ff00000 	.word	0x3ff00000

080060d0 <__d2b>:
 80060d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060d4:	2101      	movs	r1, #1
 80060d6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80060da:	4690      	mov	r8, r2
 80060dc:	461d      	mov	r5, r3
 80060de:	f7ff fc0d 	bl	80058fc <_Balloc>
 80060e2:	4604      	mov	r4, r0
 80060e4:	b930      	cbnz	r0, 80060f4 <__d2b+0x24>
 80060e6:	4602      	mov	r2, r0
 80060e8:	f240 310a 	movw	r1, #778	; 0x30a
 80060ec:	4b24      	ldr	r3, [pc, #144]	; (8006180 <__d2b+0xb0>)
 80060ee:	4825      	ldr	r0, [pc, #148]	; (8006184 <__d2b+0xb4>)
 80060f0:	f000 fb40 	bl	8006774 <__assert_func>
 80060f4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80060f8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80060fc:	bb2d      	cbnz	r5, 800614a <__d2b+0x7a>
 80060fe:	9301      	str	r3, [sp, #4]
 8006100:	f1b8 0300 	subs.w	r3, r8, #0
 8006104:	d026      	beq.n	8006154 <__d2b+0x84>
 8006106:	4668      	mov	r0, sp
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	f7ff fd09 	bl	8005b20 <__lo0bits>
 800610e:	9900      	ldr	r1, [sp, #0]
 8006110:	b1f0      	cbz	r0, 8006150 <__d2b+0x80>
 8006112:	9a01      	ldr	r2, [sp, #4]
 8006114:	f1c0 0320 	rsb	r3, r0, #32
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	430b      	orrs	r3, r1
 800611e:	40c2      	lsrs	r2, r0
 8006120:	6163      	str	r3, [r4, #20]
 8006122:	9201      	str	r2, [sp, #4]
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	bf14      	ite	ne
 800612a:	2102      	movne	r1, #2
 800612c:	2101      	moveq	r1, #1
 800612e:	61a3      	str	r3, [r4, #24]
 8006130:	6121      	str	r1, [r4, #16]
 8006132:	b1c5      	cbz	r5, 8006166 <__d2b+0x96>
 8006134:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006138:	4405      	add	r5, r0
 800613a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800613e:	603d      	str	r5, [r7, #0]
 8006140:	6030      	str	r0, [r6, #0]
 8006142:	4620      	mov	r0, r4
 8006144:	b002      	add	sp, #8
 8006146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800614e:	e7d6      	b.n	80060fe <__d2b+0x2e>
 8006150:	6161      	str	r1, [r4, #20]
 8006152:	e7e7      	b.n	8006124 <__d2b+0x54>
 8006154:	a801      	add	r0, sp, #4
 8006156:	f7ff fce3 	bl	8005b20 <__lo0bits>
 800615a:	2101      	movs	r1, #1
 800615c:	9b01      	ldr	r3, [sp, #4]
 800615e:	6121      	str	r1, [r4, #16]
 8006160:	6163      	str	r3, [r4, #20]
 8006162:	3020      	adds	r0, #32
 8006164:	e7e5      	b.n	8006132 <__d2b+0x62>
 8006166:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800616a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800616e:	6038      	str	r0, [r7, #0]
 8006170:	6918      	ldr	r0, [r3, #16]
 8006172:	f7ff fcb5 	bl	8005ae0 <__hi0bits>
 8006176:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800617a:	6031      	str	r1, [r6, #0]
 800617c:	e7e1      	b.n	8006142 <__d2b+0x72>
 800617e:	bf00      	nop
 8006180:	08007548 	.word	0x08007548
 8006184:	080075d4 	.word	0x080075d4

08006188 <__ratio>:
 8006188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	4688      	mov	r8, r1
 800618e:	4669      	mov	r1, sp
 8006190:	4681      	mov	r9, r0
 8006192:	f7ff ff49 	bl	8006028 <__b2d>
 8006196:	460f      	mov	r7, r1
 8006198:	4604      	mov	r4, r0
 800619a:	460d      	mov	r5, r1
 800619c:	4640      	mov	r0, r8
 800619e:	a901      	add	r1, sp, #4
 80061a0:	f7ff ff42 	bl	8006028 <__b2d>
 80061a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80061ac:	468b      	mov	fp, r1
 80061ae:	eba3 0c02 	sub.w	ip, r3, r2
 80061b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bfd5      	itete	le
 80061c0:	460a      	movle	r2, r1
 80061c2:	462a      	movgt	r2, r5
 80061c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80061c8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80061cc:	bfd8      	it	le
 80061ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80061d2:	465b      	mov	r3, fp
 80061d4:	4602      	mov	r2, r0
 80061d6:	4639      	mov	r1, r7
 80061d8:	4620      	mov	r0, r4
 80061da:	f7fa faa7 	bl	800072c <__aeabi_ddiv>
 80061de:	b003      	add	sp, #12
 80061e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080061e4 <__copybits>:
 80061e4:	3901      	subs	r1, #1
 80061e6:	b570      	push	{r4, r5, r6, lr}
 80061e8:	1149      	asrs	r1, r1, #5
 80061ea:	6914      	ldr	r4, [r2, #16]
 80061ec:	3101      	adds	r1, #1
 80061ee:	f102 0314 	add.w	r3, r2, #20
 80061f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80061f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80061fa:	1f05      	subs	r5, r0, #4
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d30c      	bcc.n	800621a <__copybits+0x36>
 8006200:	1aa3      	subs	r3, r4, r2
 8006202:	3b11      	subs	r3, #17
 8006204:	f023 0303 	bic.w	r3, r3, #3
 8006208:	3211      	adds	r2, #17
 800620a:	42a2      	cmp	r2, r4
 800620c:	bf88      	it	hi
 800620e:	2300      	movhi	r3, #0
 8006210:	4418      	add	r0, r3
 8006212:	2300      	movs	r3, #0
 8006214:	4288      	cmp	r0, r1
 8006216:	d305      	bcc.n	8006224 <__copybits+0x40>
 8006218:	bd70      	pop	{r4, r5, r6, pc}
 800621a:	f853 6b04 	ldr.w	r6, [r3], #4
 800621e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006222:	e7eb      	b.n	80061fc <__copybits+0x18>
 8006224:	f840 3b04 	str.w	r3, [r0], #4
 8006228:	e7f4      	b.n	8006214 <__copybits+0x30>

0800622a <__any_on>:
 800622a:	f100 0214 	add.w	r2, r0, #20
 800622e:	6900      	ldr	r0, [r0, #16]
 8006230:	114b      	asrs	r3, r1, #5
 8006232:	4298      	cmp	r0, r3
 8006234:	b510      	push	{r4, lr}
 8006236:	db11      	blt.n	800625c <__any_on+0x32>
 8006238:	dd0a      	ble.n	8006250 <__any_on+0x26>
 800623a:	f011 011f 	ands.w	r1, r1, #31
 800623e:	d007      	beq.n	8006250 <__any_on+0x26>
 8006240:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006244:	fa24 f001 	lsr.w	r0, r4, r1
 8006248:	fa00 f101 	lsl.w	r1, r0, r1
 800624c:	428c      	cmp	r4, r1
 800624e:	d10b      	bne.n	8006268 <__any_on+0x3e>
 8006250:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006254:	4293      	cmp	r3, r2
 8006256:	d803      	bhi.n	8006260 <__any_on+0x36>
 8006258:	2000      	movs	r0, #0
 800625a:	bd10      	pop	{r4, pc}
 800625c:	4603      	mov	r3, r0
 800625e:	e7f7      	b.n	8006250 <__any_on+0x26>
 8006260:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006264:	2900      	cmp	r1, #0
 8006266:	d0f5      	beq.n	8006254 <__any_on+0x2a>
 8006268:	2001      	movs	r0, #1
 800626a:	e7f6      	b.n	800625a <__any_on+0x30>

0800626c <_calloc_r>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	fba1 5402 	umull	r5, r4, r1, r2
 8006272:	b934      	cbnz	r4, 8006282 <_calloc_r+0x16>
 8006274:	4629      	mov	r1, r5
 8006276:	f000 f875 	bl	8006364 <_malloc_r>
 800627a:	4606      	mov	r6, r0
 800627c:	b928      	cbnz	r0, 800628a <_calloc_r+0x1e>
 800627e:	4630      	mov	r0, r6
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	220c      	movs	r2, #12
 8006284:	2600      	movs	r6, #0
 8006286:	6002      	str	r2, [r0, #0]
 8006288:	e7f9      	b.n	800627e <_calloc_r+0x12>
 800628a:	462a      	mov	r2, r5
 800628c:	4621      	mov	r1, r4
 800628e:	f7fc fbf1 	bl	8002a74 <memset>
 8006292:	e7f4      	b.n	800627e <_calloc_r+0x12>

08006294 <_free_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4605      	mov	r5, r0
 8006298:	2900      	cmp	r1, #0
 800629a:	d040      	beq.n	800631e <_free_r+0x8a>
 800629c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a0:	1f0c      	subs	r4, r1, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfb8      	it	lt
 80062a6:	18e4      	addlt	r4, r4, r3
 80062a8:	f000 faae 	bl	8006808 <__malloc_lock>
 80062ac:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <_free_r+0x8c>)
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	b933      	cbnz	r3, 80062c0 <_free_r+0x2c>
 80062b2:	6063      	str	r3, [r4, #4]
 80062b4:	6014      	str	r4, [r2, #0]
 80062b6:	4628      	mov	r0, r5
 80062b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062bc:	f000 baaa 	b.w	8006814 <__malloc_unlock>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d908      	bls.n	80062d6 <_free_r+0x42>
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	1821      	adds	r1, r4, r0
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf01      	itttt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	1809      	addeq	r1, r1, r0
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	e7ed      	b.n	80062b2 <_free_r+0x1e>
 80062d6:	461a      	mov	r2, r3
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	b10b      	cbz	r3, 80062e0 <_free_r+0x4c>
 80062dc:	42a3      	cmp	r3, r4
 80062de:	d9fa      	bls.n	80062d6 <_free_r+0x42>
 80062e0:	6811      	ldr	r1, [r2, #0]
 80062e2:	1850      	adds	r0, r2, r1
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d10b      	bne.n	8006300 <_free_r+0x6c>
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	4401      	add	r1, r0
 80062ec:	1850      	adds	r0, r2, r1
 80062ee:	4283      	cmp	r3, r0
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	d1e0      	bne.n	80062b6 <_free_r+0x22>
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	4401      	add	r1, r0
 80062fa:	6011      	str	r1, [r2, #0]
 80062fc:	6053      	str	r3, [r2, #4]
 80062fe:	e7da      	b.n	80062b6 <_free_r+0x22>
 8006300:	d902      	bls.n	8006308 <_free_r+0x74>
 8006302:	230c      	movs	r3, #12
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	e7d6      	b.n	80062b6 <_free_r+0x22>
 8006308:	6820      	ldr	r0, [r4, #0]
 800630a:	1821      	adds	r1, r4, r0
 800630c:	428b      	cmp	r3, r1
 800630e:	bf01      	itttt	eq
 8006310:	6819      	ldreq	r1, [r3, #0]
 8006312:	685b      	ldreq	r3, [r3, #4]
 8006314:	1809      	addeq	r1, r1, r0
 8006316:	6021      	streq	r1, [r4, #0]
 8006318:	6063      	str	r3, [r4, #4]
 800631a:	6054      	str	r4, [r2, #4]
 800631c:	e7cb      	b.n	80062b6 <_free_r+0x22>
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20000264 	.word	0x20000264

08006324 <sbrk_aligned>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	4e0e      	ldr	r6, [pc, #56]	; (8006360 <sbrk_aligned+0x3c>)
 8006328:	460c      	mov	r4, r1
 800632a:	6831      	ldr	r1, [r6, #0]
 800632c:	4605      	mov	r5, r0
 800632e:	b911      	cbnz	r1, 8006336 <sbrk_aligned+0x12>
 8006330:	f000 f9ee 	bl	8006710 <_sbrk_r>
 8006334:	6030      	str	r0, [r6, #0]
 8006336:	4621      	mov	r1, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f000 f9e9 	bl	8006710 <_sbrk_r>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	d00a      	beq.n	8006358 <sbrk_aligned+0x34>
 8006342:	1cc4      	adds	r4, r0, #3
 8006344:	f024 0403 	bic.w	r4, r4, #3
 8006348:	42a0      	cmp	r0, r4
 800634a:	d007      	beq.n	800635c <sbrk_aligned+0x38>
 800634c:	1a21      	subs	r1, r4, r0
 800634e:	4628      	mov	r0, r5
 8006350:	f000 f9de 	bl	8006710 <_sbrk_r>
 8006354:	3001      	adds	r0, #1
 8006356:	d101      	bne.n	800635c <sbrk_aligned+0x38>
 8006358:	f04f 34ff 	mov.w	r4, #4294967295
 800635c:	4620      	mov	r0, r4
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	20000268 	.word	0x20000268

08006364 <_malloc_r>:
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	1ccd      	adds	r5, r1, #3
 800636a:	f025 0503 	bic.w	r5, r5, #3
 800636e:	3508      	adds	r5, #8
 8006370:	2d0c      	cmp	r5, #12
 8006372:	bf38      	it	cc
 8006374:	250c      	movcc	r5, #12
 8006376:	2d00      	cmp	r5, #0
 8006378:	4607      	mov	r7, r0
 800637a:	db01      	blt.n	8006380 <_malloc_r+0x1c>
 800637c:	42a9      	cmp	r1, r5
 800637e:	d905      	bls.n	800638c <_malloc_r+0x28>
 8006380:	230c      	movs	r3, #12
 8006382:	2600      	movs	r6, #0
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4630      	mov	r0, r6
 8006388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800638c:	4e2e      	ldr	r6, [pc, #184]	; (8006448 <_malloc_r+0xe4>)
 800638e:	f000 fa3b 	bl	8006808 <__malloc_lock>
 8006392:	6833      	ldr	r3, [r6, #0]
 8006394:	461c      	mov	r4, r3
 8006396:	bb34      	cbnz	r4, 80063e6 <_malloc_r+0x82>
 8006398:	4629      	mov	r1, r5
 800639a:	4638      	mov	r0, r7
 800639c:	f7ff ffc2 	bl	8006324 <sbrk_aligned>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	4604      	mov	r4, r0
 80063a4:	d14d      	bne.n	8006442 <_malloc_r+0xde>
 80063a6:	6834      	ldr	r4, [r6, #0]
 80063a8:	4626      	mov	r6, r4
 80063aa:	2e00      	cmp	r6, #0
 80063ac:	d140      	bne.n	8006430 <_malloc_r+0xcc>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	4631      	mov	r1, r6
 80063b2:	4638      	mov	r0, r7
 80063b4:	eb04 0803 	add.w	r8, r4, r3
 80063b8:	f000 f9aa 	bl	8006710 <_sbrk_r>
 80063bc:	4580      	cmp	r8, r0
 80063be:	d13a      	bne.n	8006436 <_malloc_r+0xd2>
 80063c0:	6821      	ldr	r1, [r4, #0]
 80063c2:	3503      	adds	r5, #3
 80063c4:	1a6d      	subs	r5, r5, r1
 80063c6:	f025 0503 	bic.w	r5, r5, #3
 80063ca:	3508      	adds	r5, #8
 80063cc:	2d0c      	cmp	r5, #12
 80063ce:	bf38      	it	cc
 80063d0:	250c      	movcc	r5, #12
 80063d2:	4638      	mov	r0, r7
 80063d4:	4629      	mov	r1, r5
 80063d6:	f7ff ffa5 	bl	8006324 <sbrk_aligned>
 80063da:	3001      	adds	r0, #1
 80063dc:	d02b      	beq.n	8006436 <_malloc_r+0xd2>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	442b      	add	r3, r5
 80063e2:	6023      	str	r3, [r4, #0]
 80063e4:	e00e      	b.n	8006404 <_malloc_r+0xa0>
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	1b52      	subs	r2, r2, r5
 80063ea:	d41e      	bmi.n	800642a <_malloc_r+0xc6>
 80063ec:	2a0b      	cmp	r2, #11
 80063ee:	d916      	bls.n	800641e <_malloc_r+0xba>
 80063f0:	1961      	adds	r1, r4, r5
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	6025      	str	r5, [r4, #0]
 80063f6:	bf18      	it	ne
 80063f8:	6059      	strne	r1, [r3, #4]
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	bf08      	it	eq
 80063fe:	6031      	streq	r1, [r6, #0]
 8006400:	5162      	str	r2, [r4, r5]
 8006402:	604b      	str	r3, [r1, #4]
 8006404:	4638      	mov	r0, r7
 8006406:	f104 060b 	add.w	r6, r4, #11
 800640a:	f000 fa03 	bl	8006814 <__malloc_unlock>
 800640e:	f026 0607 	bic.w	r6, r6, #7
 8006412:	1d23      	adds	r3, r4, #4
 8006414:	1af2      	subs	r2, r6, r3
 8006416:	d0b6      	beq.n	8006386 <_malloc_r+0x22>
 8006418:	1b9b      	subs	r3, r3, r6
 800641a:	50a3      	str	r3, [r4, r2]
 800641c:	e7b3      	b.n	8006386 <_malloc_r+0x22>
 800641e:	6862      	ldr	r2, [r4, #4]
 8006420:	42a3      	cmp	r3, r4
 8006422:	bf0c      	ite	eq
 8006424:	6032      	streq	r2, [r6, #0]
 8006426:	605a      	strne	r2, [r3, #4]
 8006428:	e7ec      	b.n	8006404 <_malloc_r+0xa0>
 800642a:	4623      	mov	r3, r4
 800642c:	6864      	ldr	r4, [r4, #4]
 800642e:	e7b2      	b.n	8006396 <_malloc_r+0x32>
 8006430:	4634      	mov	r4, r6
 8006432:	6876      	ldr	r6, [r6, #4]
 8006434:	e7b9      	b.n	80063aa <_malloc_r+0x46>
 8006436:	230c      	movs	r3, #12
 8006438:	4638      	mov	r0, r7
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	f000 f9ea 	bl	8006814 <__malloc_unlock>
 8006440:	e7a1      	b.n	8006386 <_malloc_r+0x22>
 8006442:	6025      	str	r5, [r4, #0]
 8006444:	e7de      	b.n	8006404 <_malloc_r+0xa0>
 8006446:	bf00      	nop
 8006448:	20000264 	.word	0x20000264

0800644c <__ssputs_r>:
 800644c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	688e      	ldr	r6, [r1, #8]
 8006452:	4682      	mov	sl, r0
 8006454:	429e      	cmp	r6, r3
 8006456:	460c      	mov	r4, r1
 8006458:	4690      	mov	r8, r2
 800645a:	461f      	mov	r7, r3
 800645c:	d838      	bhi.n	80064d0 <__ssputs_r+0x84>
 800645e:	898a      	ldrh	r2, [r1, #12]
 8006460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006464:	d032      	beq.n	80064cc <__ssputs_r+0x80>
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	6909      	ldr	r1, [r1, #16]
 800646a:	3301      	adds	r3, #1
 800646c:	eba5 0901 	sub.w	r9, r5, r1
 8006470:	6965      	ldr	r5, [r4, #20]
 8006472:	444b      	add	r3, r9
 8006474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800647c:	106d      	asrs	r5, r5, #1
 800647e:	429d      	cmp	r5, r3
 8006480:	bf38      	it	cc
 8006482:	461d      	movcc	r5, r3
 8006484:	0553      	lsls	r3, r2, #21
 8006486:	d531      	bpl.n	80064ec <__ssputs_r+0xa0>
 8006488:	4629      	mov	r1, r5
 800648a:	f7ff ff6b 	bl	8006364 <_malloc_r>
 800648e:	4606      	mov	r6, r0
 8006490:	b950      	cbnz	r0, 80064a8 <__ssputs_r+0x5c>
 8006492:	230c      	movs	r3, #12
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	f8ca 3000 	str.w	r3, [sl]
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a8:	464a      	mov	r2, r9
 80064aa:	6921      	ldr	r1, [r4, #16]
 80064ac:	f7ff fa18 	bl	80058e0 <memcpy>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	6126      	str	r6, [r4, #16]
 80064be:	444e      	add	r6, r9
 80064c0:	6026      	str	r6, [r4, #0]
 80064c2:	463e      	mov	r6, r7
 80064c4:	6165      	str	r5, [r4, #20]
 80064c6:	eba5 0509 	sub.w	r5, r5, r9
 80064ca:	60a5      	str	r5, [r4, #8]
 80064cc:	42be      	cmp	r6, r7
 80064ce:	d900      	bls.n	80064d2 <__ssputs_r+0x86>
 80064d0:	463e      	mov	r6, r7
 80064d2:	4632      	mov	r2, r6
 80064d4:	4641      	mov	r1, r8
 80064d6:	6820      	ldr	r0, [r4, #0]
 80064d8:	f000 f97c 	bl	80067d4 <memmove>
 80064dc:	68a3      	ldr	r3, [r4, #8]
 80064de:	2000      	movs	r0, #0
 80064e0:	1b9b      	subs	r3, r3, r6
 80064e2:	60a3      	str	r3, [r4, #8]
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	4433      	add	r3, r6
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	e7db      	b.n	80064a4 <__ssputs_r+0x58>
 80064ec:	462a      	mov	r2, r5
 80064ee:	f000 f997 	bl	8006820 <_realloc_r>
 80064f2:	4606      	mov	r6, r0
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d1e1      	bne.n	80064bc <__ssputs_r+0x70>
 80064f8:	4650      	mov	r0, sl
 80064fa:	6921      	ldr	r1, [r4, #16]
 80064fc:	f7ff feca 	bl	8006294 <_free_r>
 8006500:	e7c7      	b.n	8006492 <__ssputs_r+0x46>
	...

08006504 <_svfiprintf_r>:
 8006504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	4698      	mov	r8, r3
 800650a:	898b      	ldrh	r3, [r1, #12]
 800650c:	4607      	mov	r7, r0
 800650e:	061b      	lsls	r3, r3, #24
 8006510:	460d      	mov	r5, r1
 8006512:	4614      	mov	r4, r2
 8006514:	b09d      	sub	sp, #116	; 0x74
 8006516:	d50e      	bpl.n	8006536 <_svfiprintf_r+0x32>
 8006518:	690b      	ldr	r3, [r1, #16]
 800651a:	b963      	cbnz	r3, 8006536 <_svfiprintf_r+0x32>
 800651c:	2140      	movs	r1, #64	; 0x40
 800651e:	f7ff ff21 	bl	8006364 <_malloc_r>
 8006522:	6028      	str	r0, [r5, #0]
 8006524:	6128      	str	r0, [r5, #16]
 8006526:	b920      	cbnz	r0, 8006532 <_svfiprintf_r+0x2e>
 8006528:	230c      	movs	r3, #12
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	e0d1      	b.n	80066d6 <_svfiprintf_r+0x1d2>
 8006532:	2340      	movs	r3, #64	; 0x40
 8006534:	616b      	str	r3, [r5, #20]
 8006536:	2300      	movs	r3, #0
 8006538:	9309      	str	r3, [sp, #36]	; 0x24
 800653a:	2320      	movs	r3, #32
 800653c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006540:	2330      	movs	r3, #48	; 0x30
 8006542:	f04f 0901 	mov.w	r9, #1
 8006546:	f8cd 800c 	str.w	r8, [sp, #12]
 800654a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066f0 <_svfiprintf_r+0x1ec>
 800654e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006552:	4623      	mov	r3, r4
 8006554:	469a      	mov	sl, r3
 8006556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800655a:	b10a      	cbz	r2, 8006560 <_svfiprintf_r+0x5c>
 800655c:	2a25      	cmp	r2, #37	; 0x25
 800655e:	d1f9      	bne.n	8006554 <_svfiprintf_r+0x50>
 8006560:	ebba 0b04 	subs.w	fp, sl, r4
 8006564:	d00b      	beq.n	800657e <_svfiprintf_r+0x7a>
 8006566:	465b      	mov	r3, fp
 8006568:	4622      	mov	r2, r4
 800656a:	4629      	mov	r1, r5
 800656c:	4638      	mov	r0, r7
 800656e:	f7ff ff6d 	bl	800644c <__ssputs_r>
 8006572:	3001      	adds	r0, #1
 8006574:	f000 80aa 	beq.w	80066cc <_svfiprintf_r+0x1c8>
 8006578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800657a:	445a      	add	r2, fp
 800657c:	9209      	str	r2, [sp, #36]	; 0x24
 800657e:	f89a 3000 	ldrb.w	r3, [sl]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 80a2 	beq.w	80066cc <_svfiprintf_r+0x1c8>
 8006588:	2300      	movs	r3, #0
 800658a:	f04f 32ff 	mov.w	r2, #4294967295
 800658e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006592:	f10a 0a01 	add.w	sl, sl, #1
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	9307      	str	r3, [sp, #28]
 800659a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800659e:	931a      	str	r3, [sp, #104]	; 0x68
 80065a0:	4654      	mov	r4, sl
 80065a2:	2205      	movs	r2, #5
 80065a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a8:	4851      	ldr	r0, [pc, #324]	; (80066f0 <_svfiprintf_r+0x1ec>)
 80065aa:	f7ff f98b 	bl	80058c4 <memchr>
 80065ae:	9a04      	ldr	r2, [sp, #16]
 80065b0:	b9d8      	cbnz	r0, 80065ea <_svfiprintf_r+0xe6>
 80065b2:	06d0      	lsls	r0, r2, #27
 80065b4:	bf44      	itt	mi
 80065b6:	2320      	movmi	r3, #32
 80065b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065bc:	0711      	lsls	r1, r2, #28
 80065be:	bf44      	itt	mi
 80065c0:	232b      	movmi	r3, #43	; 0x2b
 80065c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065c6:	f89a 3000 	ldrb.w	r3, [sl]
 80065ca:	2b2a      	cmp	r3, #42	; 0x2a
 80065cc:	d015      	beq.n	80065fa <_svfiprintf_r+0xf6>
 80065ce:	4654      	mov	r4, sl
 80065d0:	2000      	movs	r0, #0
 80065d2:	f04f 0c0a 	mov.w	ip, #10
 80065d6:	9a07      	ldr	r2, [sp, #28]
 80065d8:	4621      	mov	r1, r4
 80065da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065de:	3b30      	subs	r3, #48	; 0x30
 80065e0:	2b09      	cmp	r3, #9
 80065e2:	d94e      	bls.n	8006682 <_svfiprintf_r+0x17e>
 80065e4:	b1b0      	cbz	r0, 8006614 <_svfiprintf_r+0x110>
 80065e6:	9207      	str	r2, [sp, #28]
 80065e8:	e014      	b.n	8006614 <_svfiprintf_r+0x110>
 80065ea:	eba0 0308 	sub.w	r3, r0, r8
 80065ee:	fa09 f303 	lsl.w	r3, r9, r3
 80065f2:	4313      	orrs	r3, r2
 80065f4:	46a2      	mov	sl, r4
 80065f6:	9304      	str	r3, [sp, #16]
 80065f8:	e7d2      	b.n	80065a0 <_svfiprintf_r+0x9c>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	1d19      	adds	r1, r3, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	9103      	str	r1, [sp, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	bfbb      	ittet	lt
 8006606:	425b      	neglt	r3, r3
 8006608:	f042 0202 	orrlt.w	r2, r2, #2
 800660c:	9307      	strge	r3, [sp, #28]
 800660e:	9307      	strlt	r3, [sp, #28]
 8006610:	bfb8      	it	lt
 8006612:	9204      	strlt	r2, [sp, #16]
 8006614:	7823      	ldrb	r3, [r4, #0]
 8006616:	2b2e      	cmp	r3, #46	; 0x2e
 8006618:	d10c      	bne.n	8006634 <_svfiprintf_r+0x130>
 800661a:	7863      	ldrb	r3, [r4, #1]
 800661c:	2b2a      	cmp	r3, #42	; 0x2a
 800661e:	d135      	bne.n	800668c <_svfiprintf_r+0x188>
 8006620:	9b03      	ldr	r3, [sp, #12]
 8006622:	3402      	adds	r4, #2
 8006624:	1d1a      	adds	r2, r3, #4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	9203      	str	r2, [sp, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	bfb8      	it	lt
 800662e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006632:	9305      	str	r3, [sp, #20]
 8006634:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80066f4 <_svfiprintf_r+0x1f0>
 8006638:	2203      	movs	r2, #3
 800663a:	4650      	mov	r0, sl
 800663c:	7821      	ldrb	r1, [r4, #0]
 800663e:	f7ff f941 	bl	80058c4 <memchr>
 8006642:	b140      	cbz	r0, 8006656 <_svfiprintf_r+0x152>
 8006644:	2340      	movs	r3, #64	; 0x40
 8006646:	eba0 000a 	sub.w	r0, r0, sl
 800664a:	fa03 f000 	lsl.w	r0, r3, r0
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	3401      	adds	r4, #1
 8006652:	4303      	orrs	r3, r0
 8006654:	9304      	str	r3, [sp, #16]
 8006656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800665a:	2206      	movs	r2, #6
 800665c:	4826      	ldr	r0, [pc, #152]	; (80066f8 <_svfiprintf_r+0x1f4>)
 800665e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006662:	f7ff f92f 	bl	80058c4 <memchr>
 8006666:	2800      	cmp	r0, #0
 8006668:	d038      	beq.n	80066dc <_svfiprintf_r+0x1d8>
 800666a:	4b24      	ldr	r3, [pc, #144]	; (80066fc <_svfiprintf_r+0x1f8>)
 800666c:	bb1b      	cbnz	r3, 80066b6 <_svfiprintf_r+0x1b2>
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	3307      	adds	r3, #7
 8006672:	f023 0307 	bic.w	r3, r3, #7
 8006676:	3308      	adds	r3, #8
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667c:	4433      	add	r3, r6
 800667e:	9309      	str	r3, [sp, #36]	; 0x24
 8006680:	e767      	b.n	8006552 <_svfiprintf_r+0x4e>
 8006682:	460c      	mov	r4, r1
 8006684:	2001      	movs	r0, #1
 8006686:	fb0c 3202 	mla	r2, ip, r2, r3
 800668a:	e7a5      	b.n	80065d8 <_svfiprintf_r+0xd4>
 800668c:	2300      	movs	r3, #0
 800668e:	f04f 0c0a 	mov.w	ip, #10
 8006692:	4619      	mov	r1, r3
 8006694:	3401      	adds	r4, #1
 8006696:	9305      	str	r3, [sp, #20]
 8006698:	4620      	mov	r0, r4
 800669a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800669e:	3a30      	subs	r2, #48	; 0x30
 80066a0:	2a09      	cmp	r2, #9
 80066a2:	d903      	bls.n	80066ac <_svfiprintf_r+0x1a8>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0c5      	beq.n	8006634 <_svfiprintf_r+0x130>
 80066a8:	9105      	str	r1, [sp, #20]
 80066aa:	e7c3      	b.n	8006634 <_svfiprintf_r+0x130>
 80066ac:	4604      	mov	r4, r0
 80066ae:	2301      	movs	r3, #1
 80066b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80066b4:	e7f0      	b.n	8006698 <_svfiprintf_r+0x194>
 80066b6:	ab03      	add	r3, sp, #12
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	462a      	mov	r2, r5
 80066bc:	4638      	mov	r0, r7
 80066be:	4b10      	ldr	r3, [pc, #64]	; (8006700 <_svfiprintf_r+0x1fc>)
 80066c0:	a904      	add	r1, sp, #16
 80066c2:	f7fc fa7d 	bl	8002bc0 <_printf_float>
 80066c6:	1c42      	adds	r2, r0, #1
 80066c8:	4606      	mov	r6, r0
 80066ca:	d1d6      	bne.n	800667a <_svfiprintf_r+0x176>
 80066cc:	89ab      	ldrh	r3, [r5, #12]
 80066ce:	065b      	lsls	r3, r3, #25
 80066d0:	f53f af2c 	bmi.w	800652c <_svfiprintf_r+0x28>
 80066d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066d6:	b01d      	add	sp, #116	; 0x74
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	ab03      	add	r3, sp, #12
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	462a      	mov	r2, r5
 80066e2:	4638      	mov	r0, r7
 80066e4:	4b06      	ldr	r3, [pc, #24]	; (8006700 <_svfiprintf_r+0x1fc>)
 80066e6:	a904      	add	r1, sp, #16
 80066e8:	f7fc fd06 	bl	80030f8 <_printf_i>
 80066ec:	e7eb      	b.n	80066c6 <_svfiprintf_r+0x1c2>
 80066ee:	bf00      	nop
 80066f0:	0800772c 	.word	0x0800772c
 80066f4:	08007732 	.word	0x08007732
 80066f8:	08007736 	.word	0x08007736
 80066fc:	08002bc1 	.word	0x08002bc1
 8006700:	0800644d 	.word	0x0800644d

08006704 <nan>:
 8006704:	2000      	movs	r0, #0
 8006706:	4901      	ldr	r1, [pc, #4]	; (800670c <nan+0x8>)
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	7ff80000 	.word	0x7ff80000

08006710 <_sbrk_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	2300      	movs	r3, #0
 8006714:	4d05      	ldr	r5, [pc, #20]	; (800672c <_sbrk_r+0x1c>)
 8006716:	4604      	mov	r4, r0
 8006718:	4608      	mov	r0, r1
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	f7fa ff64 	bl	80015e8 <_sbrk>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_sbrk_r+0x1a>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_sbrk_r+0x1a>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	2000026c 	.word	0x2000026c

08006730 <strncmp>:
 8006730:	4603      	mov	r3, r0
 8006732:	b510      	push	{r4, lr}
 8006734:	b172      	cbz	r2, 8006754 <strncmp+0x24>
 8006736:	3901      	subs	r1, #1
 8006738:	1884      	adds	r4, r0, r2
 800673a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800673e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006742:	4290      	cmp	r0, r2
 8006744:	d101      	bne.n	800674a <strncmp+0x1a>
 8006746:	42a3      	cmp	r3, r4
 8006748:	d101      	bne.n	800674e <strncmp+0x1e>
 800674a:	1a80      	subs	r0, r0, r2
 800674c:	bd10      	pop	{r4, pc}
 800674e:	2800      	cmp	r0, #0
 8006750:	d1f3      	bne.n	800673a <strncmp+0xa>
 8006752:	e7fa      	b.n	800674a <strncmp+0x1a>
 8006754:	4610      	mov	r0, r2
 8006756:	e7f9      	b.n	800674c <strncmp+0x1c>

08006758 <__ascii_wctomb>:
 8006758:	4603      	mov	r3, r0
 800675a:	4608      	mov	r0, r1
 800675c:	b141      	cbz	r1, 8006770 <__ascii_wctomb+0x18>
 800675e:	2aff      	cmp	r2, #255	; 0xff
 8006760:	d904      	bls.n	800676c <__ascii_wctomb+0x14>
 8006762:	228a      	movs	r2, #138	; 0x8a
 8006764:	f04f 30ff 	mov.w	r0, #4294967295
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	4770      	bx	lr
 800676c:	2001      	movs	r0, #1
 800676e:	700a      	strb	r2, [r1, #0]
 8006770:	4770      	bx	lr
	...

08006774 <__assert_func>:
 8006774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006776:	4614      	mov	r4, r2
 8006778:	461a      	mov	r2, r3
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <__assert_func+0x2c>)
 800677c:	4605      	mov	r5, r0
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68d8      	ldr	r0, [r3, #12]
 8006782:	b14c      	cbz	r4, 8006798 <__assert_func+0x24>
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <__assert_func+0x30>)
 8006786:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800678a:	9100      	str	r1, [sp, #0]
 800678c:	462b      	mov	r3, r5
 800678e:	4906      	ldr	r1, [pc, #24]	; (80067a8 <__assert_func+0x34>)
 8006790:	f000 f80e 	bl	80067b0 <fiprintf>
 8006794:	f000 fa8a 	bl	8006cac <abort>
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <__assert_func+0x38>)
 800679a:	461c      	mov	r4, r3
 800679c:	e7f3      	b.n	8006786 <__assert_func+0x12>
 800679e:	bf00      	nop
 80067a0:	2000000c 	.word	0x2000000c
 80067a4:	0800773d 	.word	0x0800773d
 80067a8:	0800774a 	.word	0x0800774a
 80067ac:	08007778 	.word	0x08007778

080067b0 <fiprintf>:
 80067b0:	b40e      	push	{r1, r2, r3}
 80067b2:	b503      	push	{r0, r1, lr}
 80067b4:	4601      	mov	r1, r0
 80067b6:	ab03      	add	r3, sp, #12
 80067b8:	4805      	ldr	r0, [pc, #20]	; (80067d0 <fiprintf+0x20>)
 80067ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80067be:	6800      	ldr	r0, [r0, #0]
 80067c0:	9301      	str	r3, [sp, #4]
 80067c2:	f000 f883 	bl	80068cc <_vfiprintf_r>
 80067c6:	b002      	add	sp, #8
 80067c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067cc:	b003      	add	sp, #12
 80067ce:	4770      	bx	lr
 80067d0:	2000000c 	.word	0x2000000c

080067d4 <memmove>:
 80067d4:	4288      	cmp	r0, r1
 80067d6:	b510      	push	{r4, lr}
 80067d8:	eb01 0402 	add.w	r4, r1, r2
 80067dc:	d902      	bls.n	80067e4 <memmove+0x10>
 80067de:	4284      	cmp	r4, r0
 80067e0:	4623      	mov	r3, r4
 80067e2:	d807      	bhi.n	80067f4 <memmove+0x20>
 80067e4:	1e43      	subs	r3, r0, #1
 80067e6:	42a1      	cmp	r1, r4
 80067e8:	d008      	beq.n	80067fc <memmove+0x28>
 80067ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067f2:	e7f8      	b.n	80067e6 <memmove+0x12>
 80067f4:	4601      	mov	r1, r0
 80067f6:	4402      	add	r2, r0
 80067f8:	428a      	cmp	r2, r1
 80067fa:	d100      	bne.n	80067fe <memmove+0x2a>
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006806:	e7f7      	b.n	80067f8 <memmove+0x24>

08006808 <__malloc_lock>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__malloc_lock+0x8>)
 800680a:	f000 bc0b 	b.w	8007024 <__retarget_lock_acquire_recursive>
 800680e:	bf00      	nop
 8006810:	20000270 	.word	0x20000270

08006814 <__malloc_unlock>:
 8006814:	4801      	ldr	r0, [pc, #4]	; (800681c <__malloc_unlock+0x8>)
 8006816:	f000 bc06 	b.w	8007026 <__retarget_lock_release_recursive>
 800681a:	bf00      	nop
 800681c:	20000270 	.word	0x20000270

08006820 <_realloc_r>:
 8006820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006824:	4680      	mov	r8, r0
 8006826:	4614      	mov	r4, r2
 8006828:	460e      	mov	r6, r1
 800682a:	b921      	cbnz	r1, 8006836 <_realloc_r+0x16>
 800682c:	4611      	mov	r1, r2
 800682e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006832:	f7ff bd97 	b.w	8006364 <_malloc_r>
 8006836:	b92a      	cbnz	r2, 8006844 <_realloc_r+0x24>
 8006838:	f7ff fd2c 	bl	8006294 <_free_r>
 800683c:	4625      	mov	r5, r4
 800683e:	4628      	mov	r0, r5
 8006840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006844:	f000 fc56 	bl	80070f4 <_malloc_usable_size_r>
 8006848:	4284      	cmp	r4, r0
 800684a:	4607      	mov	r7, r0
 800684c:	d802      	bhi.n	8006854 <_realloc_r+0x34>
 800684e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006852:	d812      	bhi.n	800687a <_realloc_r+0x5a>
 8006854:	4621      	mov	r1, r4
 8006856:	4640      	mov	r0, r8
 8006858:	f7ff fd84 	bl	8006364 <_malloc_r>
 800685c:	4605      	mov	r5, r0
 800685e:	2800      	cmp	r0, #0
 8006860:	d0ed      	beq.n	800683e <_realloc_r+0x1e>
 8006862:	42bc      	cmp	r4, r7
 8006864:	4622      	mov	r2, r4
 8006866:	4631      	mov	r1, r6
 8006868:	bf28      	it	cs
 800686a:	463a      	movcs	r2, r7
 800686c:	f7ff f838 	bl	80058e0 <memcpy>
 8006870:	4631      	mov	r1, r6
 8006872:	4640      	mov	r0, r8
 8006874:	f7ff fd0e 	bl	8006294 <_free_r>
 8006878:	e7e1      	b.n	800683e <_realloc_r+0x1e>
 800687a:	4635      	mov	r5, r6
 800687c:	e7df      	b.n	800683e <_realloc_r+0x1e>

0800687e <__sfputc_r>:
 800687e:	6893      	ldr	r3, [r2, #8]
 8006880:	b410      	push	{r4}
 8006882:	3b01      	subs	r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	6093      	str	r3, [r2, #8]
 8006888:	da07      	bge.n	800689a <__sfputc_r+0x1c>
 800688a:	6994      	ldr	r4, [r2, #24]
 800688c:	42a3      	cmp	r3, r4
 800688e:	db01      	blt.n	8006894 <__sfputc_r+0x16>
 8006890:	290a      	cmp	r1, #10
 8006892:	d102      	bne.n	800689a <__sfputc_r+0x1c>
 8006894:	bc10      	pop	{r4}
 8006896:	f000 b949 	b.w	8006b2c <__swbuf_r>
 800689a:	6813      	ldr	r3, [r2, #0]
 800689c:	1c58      	adds	r0, r3, #1
 800689e:	6010      	str	r0, [r2, #0]
 80068a0:	7019      	strb	r1, [r3, #0]
 80068a2:	4608      	mov	r0, r1
 80068a4:	bc10      	pop	{r4}
 80068a6:	4770      	bx	lr

080068a8 <__sfputs_r>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	4606      	mov	r6, r0
 80068ac:	460f      	mov	r7, r1
 80068ae:	4614      	mov	r4, r2
 80068b0:	18d5      	adds	r5, r2, r3
 80068b2:	42ac      	cmp	r4, r5
 80068b4:	d101      	bne.n	80068ba <__sfputs_r+0x12>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e007      	b.n	80068ca <__sfputs_r+0x22>
 80068ba:	463a      	mov	r2, r7
 80068bc:	4630      	mov	r0, r6
 80068be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c2:	f7ff ffdc 	bl	800687e <__sfputc_r>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d1f3      	bne.n	80068b2 <__sfputs_r+0xa>
 80068ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068cc <_vfiprintf_r>:
 80068cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d0:	460d      	mov	r5, r1
 80068d2:	4614      	mov	r4, r2
 80068d4:	4698      	mov	r8, r3
 80068d6:	4606      	mov	r6, r0
 80068d8:	b09d      	sub	sp, #116	; 0x74
 80068da:	b118      	cbz	r0, 80068e4 <_vfiprintf_r+0x18>
 80068dc:	6983      	ldr	r3, [r0, #24]
 80068de:	b90b      	cbnz	r3, 80068e4 <_vfiprintf_r+0x18>
 80068e0:	f000 fb02 	bl	8006ee8 <__sinit>
 80068e4:	4b89      	ldr	r3, [pc, #548]	; (8006b0c <_vfiprintf_r+0x240>)
 80068e6:	429d      	cmp	r5, r3
 80068e8:	d11b      	bne.n	8006922 <_vfiprintf_r+0x56>
 80068ea:	6875      	ldr	r5, [r6, #4]
 80068ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068ee:	07d9      	lsls	r1, r3, #31
 80068f0:	d405      	bmi.n	80068fe <_vfiprintf_r+0x32>
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	059a      	lsls	r2, r3, #22
 80068f6:	d402      	bmi.n	80068fe <_vfiprintf_r+0x32>
 80068f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068fa:	f000 fb93 	bl	8007024 <__retarget_lock_acquire_recursive>
 80068fe:	89ab      	ldrh	r3, [r5, #12]
 8006900:	071b      	lsls	r3, r3, #28
 8006902:	d501      	bpl.n	8006908 <_vfiprintf_r+0x3c>
 8006904:	692b      	ldr	r3, [r5, #16]
 8006906:	b9eb      	cbnz	r3, 8006944 <_vfiprintf_r+0x78>
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f000 f960 	bl	8006bd0 <__swsetup_r>
 8006910:	b1c0      	cbz	r0, 8006944 <_vfiprintf_r+0x78>
 8006912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006914:	07dc      	lsls	r4, r3, #31
 8006916:	d50e      	bpl.n	8006936 <_vfiprintf_r+0x6a>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	b01d      	add	sp, #116	; 0x74
 800691e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006922:	4b7b      	ldr	r3, [pc, #492]	; (8006b10 <_vfiprintf_r+0x244>)
 8006924:	429d      	cmp	r5, r3
 8006926:	d101      	bne.n	800692c <_vfiprintf_r+0x60>
 8006928:	68b5      	ldr	r5, [r6, #8]
 800692a:	e7df      	b.n	80068ec <_vfiprintf_r+0x20>
 800692c:	4b79      	ldr	r3, [pc, #484]	; (8006b14 <_vfiprintf_r+0x248>)
 800692e:	429d      	cmp	r5, r3
 8006930:	bf08      	it	eq
 8006932:	68f5      	ldreq	r5, [r6, #12]
 8006934:	e7da      	b.n	80068ec <_vfiprintf_r+0x20>
 8006936:	89ab      	ldrh	r3, [r5, #12]
 8006938:	0598      	lsls	r0, r3, #22
 800693a:	d4ed      	bmi.n	8006918 <_vfiprintf_r+0x4c>
 800693c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800693e:	f000 fb72 	bl	8007026 <__retarget_lock_release_recursive>
 8006942:	e7e9      	b.n	8006918 <_vfiprintf_r+0x4c>
 8006944:	2300      	movs	r3, #0
 8006946:	9309      	str	r3, [sp, #36]	; 0x24
 8006948:	2320      	movs	r3, #32
 800694a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800694e:	2330      	movs	r3, #48	; 0x30
 8006950:	f04f 0901 	mov.w	r9, #1
 8006954:	f8cd 800c 	str.w	r8, [sp, #12]
 8006958:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006b18 <_vfiprintf_r+0x24c>
 800695c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006960:	4623      	mov	r3, r4
 8006962:	469a      	mov	sl, r3
 8006964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006968:	b10a      	cbz	r2, 800696e <_vfiprintf_r+0xa2>
 800696a:	2a25      	cmp	r2, #37	; 0x25
 800696c:	d1f9      	bne.n	8006962 <_vfiprintf_r+0x96>
 800696e:	ebba 0b04 	subs.w	fp, sl, r4
 8006972:	d00b      	beq.n	800698c <_vfiprintf_r+0xc0>
 8006974:	465b      	mov	r3, fp
 8006976:	4622      	mov	r2, r4
 8006978:	4629      	mov	r1, r5
 800697a:	4630      	mov	r0, r6
 800697c:	f7ff ff94 	bl	80068a8 <__sfputs_r>
 8006980:	3001      	adds	r0, #1
 8006982:	f000 80aa 	beq.w	8006ada <_vfiprintf_r+0x20e>
 8006986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006988:	445a      	add	r2, fp
 800698a:	9209      	str	r2, [sp, #36]	; 0x24
 800698c:	f89a 3000 	ldrb.w	r3, [sl]
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 80a2 	beq.w	8006ada <_vfiprintf_r+0x20e>
 8006996:	2300      	movs	r3, #0
 8006998:	f04f 32ff 	mov.w	r2, #4294967295
 800699c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069a0:	f10a 0a01 	add.w	sl, sl, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	9307      	str	r3, [sp, #28]
 80069a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069ac:	931a      	str	r3, [sp, #104]	; 0x68
 80069ae:	4654      	mov	r4, sl
 80069b0:	2205      	movs	r2, #5
 80069b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b6:	4858      	ldr	r0, [pc, #352]	; (8006b18 <_vfiprintf_r+0x24c>)
 80069b8:	f7fe ff84 	bl	80058c4 <memchr>
 80069bc:	9a04      	ldr	r2, [sp, #16]
 80069be:	b9d8      	cbnz	r0, 80069f8 <_vfiprintf_r+0x12c>
 80069c0:	06d1      	lsls	r1, r2, #27
 80069c2:	bf44      	itt	mi
 80069c4:	2320      	movmi	r3, #32
 80069c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ca:	0713      	lsls	r3, r2, #28
 80069cc:	bf44      	itt	mi
 80069ce:	232b      	movmi	r3, #43	; 0x2b
 80069d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069d4:	f89a 3000 	ldrb.w	r3, [sl]
 80069d8:	2b2a      	cmp	r3, #42	; 0x2a
 80069da:	d015      	beq.n	8006a08 <_vfiprintf_r+0x13c>
 80069dc:	4654      	mov	r4, sl
 80069de:	2000      	movs	r0, #0
 80069e0:	f04f 0c0a 	mov.w	ip, #10
 80069e4:	9a07      	ldr	r2, [sp, #28]
 80069e6:	4621      	mov	r1, r4
 80069e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069ec:	3b30      	subs	r3, #48	; 0x30
 80069ee:	2b09      	cmp	r3, #9
 80069f0:	d94e      	bls.n	8006a90 <_vfiprintf_r+0x1c4>
 80069f2:	b1b0      	cbz	r0, 8006a22 <_vfiprintf_r+0x156>
 80069f4:	9207      	str	r2, [sp, #28]
 80069f6:	e014      	b.n	8006a22 <_vfiprintf_r+0x156>
 80069f8:	eba0 0308 	sub.w	r3, r0, r8
 80069fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006a00:	4313      	orrs	r3, r2
 8006a02:	46a2      	mov	sl, r4
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	e7d2      	b.n	80069ae <_vfiprintf_r+0xe2>
 8006a08:	9b03      	ldr	r3, [sp, #12]
 8006a0a:	1d19      	adds	r1, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	9103      	str	r1, [sp, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bfbb      	ittet	lt
 8006a14:	425b      	neglt	r3, r3
 8006a16:	f042 0202 	orrlt.w	r2, r2, #2
 8006a1a:	9307      	strge	r3, [sp, #28]
 8006a1c:	9307      	strlt	r3, [sp, #28]
 8006a1e:	bfb8      	it	lt
 8006a20:	9204      	strlt	r2, [sp, #16]
 8006a22:	7823      	ldrb	r3, [r4, #0]
 8006a24:	2b2e      	cmp	r3, #46	; 0x2e
 8006a26:	d10c      	bne.n	8006a42 <_vfiprintf_r+0x176>
 8006a28:	7863      	ldrb	r3, [r4, #1]
 8006a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a2c:	d135      	bne.n	8006a9a <_vfiprintf_r+0x1ce>
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	3402      	adds	r4, #2
 8006a32:	1d1a      	adds	r2, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	9203      	str	r2, [sp, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfb8      	it	lt
 8006a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a40:	9305      	str	r3, [sp, #20]
 8006a42:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006b1c <_vfiprintf_r+0x250>
 8006a46:	2203      	movs	r2, #3
 8006a48:	4650      	mov	r0, sl
 8006a4a:	7821      	ldrb	r1, [r4, #0]
 8006a4c:	f7fe ff3a 	bl	80058c4 <memchr>
 8006a50:	b140      	cbz	r0, 8006a64 <_vfiprintf_r+0x198>
 8006a52:	2340      	movs	r3, #64	; 0x40
 8006a54:	eba0 000a 	sub.w	r0, r0, sl
 8006a58:	fa03 f000 	lsl.w	r0, r3, r0
 8006a5c:	9b04      	ldr	r3, [sp, #16]
 8006a5e:	3401      	adds	r4, #1
 8006a60:	4303      	orrs	r3, r0
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a68:	2206      	movs	r2, #6
 8006a6a:	482d      	ldr	r0, [pc, #180]	; (8006b20 <_vfiprintf_r+0x254>)
 8006a6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a70:	f7fe ff28 	bl	80058c4 <memchr>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d03f      	beq.n	8006af8 <_vfiprintf_r+0x22c>
 8006a78:	4b2a      	ldr	r3, [pc, #168]	; (8006b24 <_vfiprintf_r+0x258>)
 8006a7a:	bb1b      	cbnz	r3, 8006ac4 <_vfiprintf_r+0x1f8>
 8006a7c:	9b03      	ldr	r3, [sp, #12]
 8006a7e:	3307      	adds	r3, #7
 8006a80:	f023 0307 	bic.w	r3, r3, #7
 8006a84:	3308      	adds	r3, #8
 8006a86:	9303      	str	r3, [sp, #12]
 8006a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8a:	443b      	add	r3, r7
 8006a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a8e:	e767      	b.n	8006960 <_vfiprintf_r+0x94>
 8006a90:	460c      	mov	r4, r1
 8006a92:	2001      	movs	r0, #1
 8006a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a98:	e7a5      	b.n	80069e6 <_vfiprintf_r+0x11a>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f04f 0c0a 	mov.w	ip, #10
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	3401      	adds	r4, #1
 8006aa4:	9305      	str	r3, [sp, #20]
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aac:	3a30      	subs	r2, #48	; 0x30
 8006aae:	2a09      	cmp	r2, #9
 8006ab0:	d903      	bls.n	8006aba <_vfiprintf_r+0x1ee>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0c5      	beq.n	8006a42 <_vfiprintf_r+0x176>
 8006ab6:	9105      	str	r1, [sp, #20]
 8006ab8:	e7c3      	b.n	8006a42 <_vfiprintf_r+0x176>
 8006aba:	4604      	mov	r4, r0
 8006abc:	2301      	movs	r3, #1
 8006abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ac2:	e7f0      	b.n	8006aa6 <_vfiprintf_r+0x1da>
 8006ac4:	ab03      	add	r3, sp, #12
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	4630      	mov	r0, r6
 8006acc:	4b16      	ldr	r3, [pc, #88]	; (8006b28 <_vfiprintf_r+0x25c>)
 8006ace:	a904      	add	r1, sp, #16
 8006ad0:	f7fc f876 	bl	8002bc0 <_printf_float>
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	1c78      	adds	r0, r7, #1
 8006ad8:	d1d6      	bne.n	8006a88 <_vfiprintf_r+0x1bc>
 8006ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006adc:	07d9      	lsls	r1, r3, #31
 8006ade:	d405      	bmi.n	8006aec <_vfiprintf_r+0x220>
 8006ae0:	89ab      	ldrh	r3, [r5, #12]
 8006ae2:	059a      	lsls	r2, r3, #22
 8006ae4:	d402      	bmi.n	8006aec <_vfiprintf_r+0x220>
 8006ae6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ae8:	f000 fa9d 	bl	8007026 <__retarget_lock_release_recursive>
 8006aec:	89ab      	ldrh	r3, [r5, #12]
 8006aee:	065b      	lsls	r3, r3, #25
 8006af0:	f53f af12 	bmi.w	8006918 <_vfiprintf_r+0x4c>
 8006af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006af6:	e711      	b.n	800691c <_vfiprintf_r+0x50>
 8006af8:	ab03      	add	r3, sp, #12
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	462a      	mov	r2, r5
 8006afe:	4630      	mov	r0, r6
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <_vfiprintf_r+0x25c>)
 8006b02:	a904      	add	r1, sp, #16
 8006b04:	f7fc faf8 	bl	80030f8 <_printf_i>
 8006b08:	e7e4      	b.n	8006ad4 <_vfiprintf_r+0x208>
 8006b0a:	bf00      	nop
 8006b0c:	0800779c 	.word	0x0800779c
 8006b10:	080077bc 	.word	0x080077bc
 8006b14:	0800777c 	.word	0x0800777c
 8006b18:	0800772c 	.word	0x0800772c
 8006b1c:	08007732 	.word	0x08007732
 8006b20:	08007736 	.word	0x08007736
 8006b24:	08002bc1 	.word	0x08002bc1
 8006b28:	080068a9 	.word	0x080068a9

08006b2c <__swbuf_r>:
 8006b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2e:	460e      	mov	r6, r1
 8006b30:	4614      	mov	r4, r2
 8006b32:	4605      	mov	r5, r0
 8006b34:	b118      	cbz	r0, 8006b3e <__swbuf_r+0x12>
 8006b36:	6983      	ldr	r3, [r0, #24]
 8006b38:	b90b      	cbnz	r3, 8006b3e <__swbuf_r+0x12>
 8006b3a:	f000 f9d5 	bl	8006ee8 <__sinit>
 8006b3e:	4b21      	ldr	r3, [pc, #132]	; (8006bc4 <__swbuf_r+0x98>)
 8006b40:	429c      	cmp	r4, r3
 8006b42:	d12b      	bne.n	8006b9c <__swbuf_r+0x70>
 8006b44:	686c      	ldr	r4, [r5, #4]
 8006b46:	69a3      	ldr	r3, [r4, #24]
 8006b48:	60a3      	str	r3, [r4, #8]
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	071a      	lsls	r2, r3, #28
 8006b4e:	d52f      	bpl.n	8006bb0 <__swbuf_r+0x84>
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	b36b      	cbz	r3, 8006bb0 <__swbuf_r+0x84>
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	6820      	ldr	r0, [r4, #0]
 8006b58:	b2f6      	uxtb	r6, r6
 8006b5a:	1ac0      	subs	r0, r0, r3
 8006b5c:	6963      	ldr	r3, [r4, #20]
 8006b5e:	4637      	mov	r7, r6
 8006b60:	4283      	cmp	r3, r0
 8006b62:	dc04      	bgt.n	8006b6e <__swbuf_r+0x42>
 8006b64:	4621      	mov	r1, r4
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 f92a 	bl	8006dc0 <_fflush_r>
 8006b6c:	bb30      	cbnz	r0, 8006bbc <__swbuf_r+0x90>
 8006b6e:	68a3      	ldr	r3, [r4, #8]
 8006b70:	3001      	adds	r0, #1
 8006b72:	3b01      	subs	r3, #1
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	6022      	str	r2, [r4, #0]
 8006b7c:	701e      	strb	r6, [r3, #0]
 8006b7e:	6963      	ldr	r3, [r4, #20]
 8006b80:	4283      	cmp	r3, r0
 8006b82:	d004      	beq.n	8006b8e <__swbuf_r+0x62>
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	07db      	lsls	r3, r3, #31
 8006b88:	d506      	bpl.n	8006b98 <__swbuf_r+0x6c>
 8006b8a:	2e0a      	cmp	r6, #10
 8006b8c:	d104      	bne.n	8006b98 <__swbuf_r+0x6c>
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 f915 	bl	8006dc0 <_fflush_r>
 8006b96:	b988      	cbnz	r0, 8006bbc <__swbuf_r+0x90>
 8006b98:	4638      	mov	r0, r7
 8006b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <__swbuf_r+0x9c>)
 8006b9e:	429c      	cmp	r4, r3
 8006ba0:	d101      	bne.n	8006ba6 <__swbuf_r+0x7a>
 8006ba2:	68ac      	ldr	r4, [r5, #8]
 8006ba4:	e7cf      	b.n	8006b46 <__swbuf_r+0x1a>
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <__swbuf_r+0xa0>)
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	bf08      	it	eq
 8006bac:	68ec      	ldreq	r4, [r5, #12]
 8006bae:	e7ca      	b.n	8006b46 <__swbuf_r+0x1a>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 f80c 	bl	8006bd0 <__swsetup_r>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d0cb      	beq.n	8006b54 <__swbuf_r+0x28>
 8006bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8006bc0:	e7ea      	b.n	8006b98 <__swbuf_r+0x6c>
 8006bc2:	bf00      	nop
 8006bc4:	0800779c 	.word	0x0800779c
 8006bc8:	080077bc 	.word	0x080077bc
 8006bcc:	0800777c 	.word	0x0800777c

08006bd0 <__swsetup_r>:
 8006bd0:	4b32      	ldr	r3, [pc, #200]	; (8006c9c <__swsetup_r+0xcc>)
 8006bd2:	b570      	push	{r4, r5, r6, lr}
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	b125      	cbz	r5, 8006be6 <__swsetup_r+0x16>
 8006bdc:	69ab      	ldr	r3, [r5, #24]
 8006bde:	b913      	cbnz	r3, 8006be6 <__swsetup_r+0x16>
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 f981 	bl	8006ee8 <__sinit>
 8006be6:	4b2e      	ldr	r3, [pc, #184]	; (8006ca0 <__swsetup_r+0xd0>)
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d10f      	bne.n	8006c0c <__swsetup_r+0x3c>
 8006bec:	686c      	ldr	r4, [r5, #4]
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bf4:	0719      	lsls	r1, r3, #28
 8006bf6:	d42c      	bmi.n	8006c52 <__swsetup_r+0x82>
 8006bf8:	06dd      	lsls	r5, r3, #27
 8006bfa:	d411      	bmi.n	8006c20 <__swsetup_r+0x50>
 8006bfc:	2309      	movs	r3, #9
 8006bfe:	6033      	str	r3, [r6, #0]
 8006c00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	e03e      	b.n	8006c8a <__swsetup_r+0xba>
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <__swsetup_r+0xd4>)
 8006c0e:	429c      	cmp	r4, r3
 8006c10:	d101      	bne.n	8006c16 <__swsetup_r+0x46>
 8006c12:	68ac      	ldr	r4, [r5, #8]
 8006c14:	e7eb      	b.n	8006bee <__swsetup_r+0x1e>
 8006c16:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <__swsetup_r+0xd8>)
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	bf08      	it	eq
 8006c1c:	68ec      	ldreq	r4, [r5, #12]
 8006c1e:	e7e6      	b.n	8006bee <__swsetup_r+0x1e>
 8006c20:	0758      	lsls	r0, r3, #29
 8006c22:	d512      	bpl.n	8006c4a <__swsetup_r+0x7a>
 8006c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c26:	b141      	cbz	r1, 8006c3a <__swsetup_r+0x6a>
 8006c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	d002      	beq.n	8006c36 <__swsetup_r+0x66>
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff fb2f 	bl	8006294 <_free_r>
 8006c36:	2300      	movs	r3, #0
 8006c38:	6363      	str	r3, [r4, #52]	; 0x34
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	2300      	movs	r3, #0
 8006c44:	6063      	str	r3, [r4, #4]
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f043 0308 	orr.w	r3, r3, #8
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	b94b      	cbnz	r3, 8006c6a <__swsetup_r+0x9a>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c60:	d003      	beq.n	8006c6a <__swsetup_r+0x9a>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4630      	mov	r0, r6
 8006c66:	f000 fa05 	bl	8007074 <__smakebuf_r>
 8006c6a:	89a0      	ldrh	r0, [r4, #12]
 8006c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c70:	f010 0301 	ands.w	r3, r0, #1
 8006c74:	d00a      	beq.n	8006c8c <__swsetup_r+0xbc>
 8006c76:	2300      	movs	r3, #0
 8006c78:	60a3      	str	r3, [r4, #8]
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	425b      	negs	r3, r3
 8006c7e:	61a3      	str	r3, [r4, #24]
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	b943      	cbnz	r3, 8006c96 <__swsetup_r+0xc6>
 8006c84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c88:	d1ba      	bne.n	8006c00 <__swsetup_r+0x30>
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	0781      	lsls	r1, r0, #30
 8006c8e:	bf58      	it	pl
 8006c90:	6963      	ldrpl	r3, [r4, #20]
 8006c92:	60a3      	str	r3, [r4, #8]
 8006c94:	e7f4      	b.n	8006c80 <__swsetup_r+0xb0>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e7f7      	b.n	8006c8a <__swsetup_r+0xba>
 8006c9a:	bf00      	nop
 8006c9c:	2000000c 	.word	0x2000000c
 8006ca0:	0800779c 	.word	0x0800779c
 8006ca4:	080077bc 	.word	0x080077bc
 8006ca8:	0800777c 	.word	0x0800777c

08006cac <abort>:
 8006cac:	2006      	movs	r0, #6
 8006cae:	b508      	push	{r3, lr}
 8006cb0:	f000 fa50 	bl	8007154 <raise>
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	f7fa fc23 	bl	8001500 <_exit>
	...

08006cbc <__sflush_r>:
 8006cbc:	898a      	ldrh	r2, [r1, #12]
 8006cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	0710      	lsls	r0, r2, #28
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	d457      	bmi.n	8006d78 <__sflush_r+0xbc>
 8006cc8:	684b      	ldr	r3, [r1, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dc04      	bgt.n	8006cd8 <__sflush_r+0x1c>
 8006cce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dc01      	bgt.n	8006cd8 <__sflush_r+0x1c>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	d0fa      	beq.n	8006cd4 <__sflush_r+0x18>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ce4:	682f      	ldr	r7, [r5, #0]
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	d032      	beq.n	8006d50 <__sflush_r+0x94>
 8006cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	075a      	lsls	r2, r3, #29
 8006cf0:	d505      	bpl.n	8006cfe <__sflush_r+0x42>
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	1ac0      	subs	r0, r0, r3
 8006cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf8:	b10b      	cbz	r3, 8006cfe <__sflush_r+0x42>
 8006cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cfc:	1ac0      	subs	r0, r0, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4602      	mov	r2, r0
 8006d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d04:	4628      	mov	r0, r5
 8006d06:	6a21      	ldr	r1, [r4, #32]
 8006d08:	47b0      	blx	r6
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	d106      	bne.n	8006d1e <__sflush_r+0x62>
 8006d10:	6829      	ldr	r1, [r5, #0]
 8006d12:	291d      	cmp	r1, #29
 8006d14:	d82c      	bhi.n	8006d70 <__sflush_r+0xb4>
 8006d16:	4a29      	ldr	r2, [pc, #164]	; (8006dbc <__sflush_r+0x100>)
 8006d18:	40ca      	lsrs	r2, r1
 8006d1a:	07d6      	lsls	r6, r2, #31
 8006d1c:	d528      	bpl.n	8006d70 <__sflush_r+0xb4>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	6062      	str	r2, [r4, #4]
 8006d22:	6922      	ldr	r2, [r4, #16]
 8006d24:	04d9      	lsls	r1, r3, #19
 8006d26:	6022      	str	r2, [r4, #0]
 8006d28:	d504      	bpl.n	8006d34 <__sflush_r+0x78>
 8006d2a:	1c42      	adds	r2, r0, #1
 8006d2c:	d101      	bne.n	8006d32 <__sflush_r+0x76>
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	b903      	cbnz	r3, 8006d34 <__sflush_r+0x78>
 8006d32:	6560      	str	r0, [r4, #84]	; 0x54
 8006d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d36:	602f      	str	r7, [r5, #0]
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	d0cb      	beq.n	8006cd4 <__sflush_r+0x18>
 8006d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d40:	4299      	cmp	r1, r3
 8006d42:	d002      	beq.n	8006d4a <__sflush_r+0x8e>
 8006d44:	4628      	mov	r0, r5
 8006d46:	f7ff faa5 	bl	8006294 <_free_r>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d4e:	e7c2      	b.n	8006cd6 <__sflush_r+0x1a>
 8006d50:	6a21      	ldr	r1, [r4, #32]
 8006d52:	2301      	movs	r3, #1
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b0      	blx	r6
 8006d58:	1c41      	adds	r1, r0, #1
 8006d5a:	d1c7      	bne.n	8006cec <__sflush_r+0x30>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0c4      	beq.n	8006cec <__sflush_r+0x30>
 8006d62:	2b1d      	cmp	r3, #29
 8006d64:	d001      	beq.n	8006d6a <__sflush_r+0xae>
 8006d66:	2b16      	cmp	r3, #22
 8006d68:	d101      	bne.n	8006d6e <__sflush_r+0xb2>
 8006d6a:	602f      	str	r7, [r5, #0]
 8006d6c:	e7b2      	b.n	8006cd4 <__sflush_r+0x18>
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	e7ae      	b.n	8006cd6 <__sflush_r+0x1a>
 8006d78:	690f      	ldr	r7, [r1, #16]
 8006d7a:	2f00      	cmp	r7, #0
 8006d7c:	d0aa      	beq.n	8006cd4 <__sflush_r+0x18>
 8006d7e:	0793      	lsls	r3, r2, #30
 8006d80:	bf18      	it	ne
 8006d82:	2300      	movne	r3, #0
 8006d84:	680e      	ldr	r6, [r1, #0]
 8006d86:	bf08      	it	eq
 8006d88:	694b      	ldreq	r3, [r1, #20]
 8006d8a:	1bf6      	subs	r6, r6, r7
 8006d8c:	600f      	str	r7, [r1, #0]
 8006d8e:	608b      	str	r3, [r1, #8]
 8006d90:	2e00      	cmp	r6, #0
 8006d92:	dd9f      	ble.n	8006cd4 <__sflush_r+0x18>
 8006d94:	4633      	mov	r3, r6
 8006d96:	463a      	mov	r2, r7
 8006d98:	4628      	mov	r0, r5
 8006d9a:	6a21      	ldr	r1, [r4, #32]
 8006d9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006da0:	47e0      	blx	ip
 8006da2:	2800      	cmp	r0, #0
 8006da4:	dc06      	bgt.n	8006db4 <__sflush_r+0xf8>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	e790      	b.n	8006cd6 <__sflush_r+0x1a>
 8006db4:	4407      	add	r7, r0
 8006db6:	1a36      	subs	r6, r6, r0
 8006db8:	e7ea      	b.n	8006d90 <__sflush_r+0xd4>
 8006dba:	bf00      	nop
 8006dbc:	20400001 	.word	0x20400001

08006dc0 <_fflush_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	690b      	ldr	r3, [r1, #16]
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	b913      	cbnz	r3, 8006dd0 <_fflush_r+0x10>
 8006dca:	2500      	movs	r5, #0
 8006dcc:	4628      	mov	r0, r5
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	b118      	cbz	r0, 8006dda <_fflush_r+0x1a>
 8006dd2:	6983      	ldr	r3, [r0, #24]
 8006dd4:	b90b      	cbnz	r3, 8006dda <_fflush_r+0x1a>
 8006dd6:	f000 f887 	bl	8006ee8 <__sinit>
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <_fflush_r+0x6c>)
 8006ddc:	429c      	cmp	r4, r3
 8006dde:	d11b      	bne.n	8006e18 <_fflush_r+0x58>
 8006de0:	686c      	ldr	r4, [r5, #4]
 8006de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0ef      	beq.n	8006dca <_fflush_r+0xa>
 8006dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dec:	07d0      	lsls	r0, r2, #31
 8006dee:	d404      	bmi.n	8006dfa <_fflush_r+0x3a>
 8006df0:	0599      	lsls	r1, r3, #22
 8006df2:	d402      	bmi.n	8006dfa <_fflush_r+0x3a>
 8006df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006df6:	f000 f915 	bl	8007024 <__retarget_lock_acquire_recursive>
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	f7ff ff5d 	bl	8006cbc <__sflush_r>
 8006e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e04:	4605      	mov	r5, r0
 8006e06:	07da      	lsls	r2, r3, #31
 8006e08:	d4e0      	bmi.n	8006dcc <_fflush_r+0xc>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	059b      	lsls	r3, r3, #22
 8006e0e:	d4dd      	bmi.n	8006dcc <_fflush_r+0xc>
 8006e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e12:	f000 f908 	bl	8007026 <__retarget_lock_release_recursive>
 8006e16:	e7d9      	b.n	8006dcc <_fflush_r+0xc>
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <_fflush_r+0x70>)
 8006e1a:	429c      	cmp	r4, r3
 8006e1c:	d101      	bne.n	8006e22 <_fflush_r+0x62>
 8006e1e:	68ac      	ldr	r4, [r5, #8]
 8006e20:	e7df      	b.n	8006de2 <_fflush_r+0x22>
 8006e22:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <_fflush_r+0x74>)
 8006e24:	429c      	cmp	r4, r3
 8006e26:	bf08      	it	eq
 8006e28:	68ec      	ldreq	r4, [r5, #12]
 8006e2a:	e7da      	b.n	8006de2 <_fflush_r+0x22>
 8006e2c:	0800779c 	.word	0x0800779c
 8006e30:	080077bc 	.word	0x080077bc
 8006e34:	0800777c 	.word	0x0800777c

08006e38 <std>:
 8006e38:	2300      	movs	r3, #0
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e46:	6083      	str	r3, [r0, #8]
 8006e48:	8181      	strh	r1, [r0, #12]
 8006e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e4c:	81c2      	strh	r2, [r0, #14]
 8006e4e:	6183      	str	r3, [r0, #24]
 8006e50:	4619      	mov	r1, r3
 8006e52:	2208      	movs	r2, #8
 8006e54:	305c      	adds	r0, #92	; 0x5c
 8006e56:	f7fb fe0d 	bl	8002a74 <memset>
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <std+0x38>)
 8006e5c:	6224      	str	r4, [r4, #32]
 8006e5e:	6263      	str	r3, [r4, #36]	; 0x24
 8006e60:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <std+0x3c>)
 8006e62:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <std+0x40>)
 8006e66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e68:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <std+0x44>)
 8006e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	0800718d 	.word	0x0800718d
 8006e74:	080071af 	.word	0x080071af
 8006e78:	080071e7 	.word	0x080071e7
 8006e7c:	0800720b 	.word	0x0800720b

08006e80 <_cleanup_r>:
 8006e80:	4901      	ldr	r1, [pc, #4]	; (8006e88 <_cleanup_r+0x8>)
 8006e82:	f000 b8af 	b.w	8006fe4 <_fwalk_reent>
 8006e86:	bf00      	nop
 8006e88:	08006dc1 	.word	0x08006dc1

08006e8c <__sfmoreglue>:
 8006e8c:	2268      	movs	r2, #104	; 0x68
 8006e8e:	b570      	push	{r4, r5, r6, lr}
 8006e90:	1e4d      	subs	r5, r1, #1
 8006e92:	4355      	muls	r5, r2
 8006e94:	460e      	mov	r6, r1
 8006e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e9a:	f7ff fa63 	bl	8006364 <_malloc_r>
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	b140      	cbz	r0, 8006eb4 <__sfmoreglue+0x28>
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ea8:	300c      	adds	r0, #12
 8006eaa:	60a0      	str	r0, [r4, #8]
 8006eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eb0:	f7fb fde0 	bl	8002a74 <memset>
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}

08006eb8 <__sfp_lock_acquire>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <__sfp_lock_acquire+0x8>)
 8006eba:	f000 b8b3 	b.w	8007024 <__retarget_lock_acquire_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	20000271 	.word	0x20000271

08006ec4 <__sfp_lock_release>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <__sfp_lock_release+0x8>)
 8006ec6:	f000 b8ae 	b.w	8007026 <__retarget_lock_release_recursive>
 8006eca:	bf00      	nop
 8006ecc:	20000271 	.word	0x20000271

08006ed0 <__sinit_lock_acquire>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__sinit_lock_acquire+0x8>)
 8006ed2:	f000 b8a7 	b.w	8007024 <__retarget_lock_acquire_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	20000272 	.word	0x20000272

08006edc <__sinit_lock_release>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__sinit_lock_release+0x8>)
 8006ede:	f000 b8a2 	b.w	8007026 <__retarget_lock_release_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	20000272 	.word	0x20000272

08006ee8 <__sinit>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	4604      	mov	r4, r0
 8006eec:	f7ff fff0 	bl	8006ed0 <__sinit_lock_acquire>
 8006ef0:	69a3      	ldr	r3, [r4, #24]
 8006ef2:	b11b      	cbz	r3, 8006efc <__sinit+0x14>
 8006ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef8:	f7ff bff0 	b.w	8006edc <__sinit_lock_release>
 8006efc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f00:	6523      	str	r3, [r4, #80]	; 0x50
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <__sinit+0x68>)
 8006f04:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <__sinit+0x6c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	bf08      	it	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	4620      	mov	r0, r4
 8006f12:	bf08      	it	eq
 8006f14:	61a3      	streq	r3, [r4, #24]
 8006f16:	f000 f81f 	bl	8006f58 <__sfp>
 8006f1a:	6060      	str	r0, [r4, #4]
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 f81b 	bl	8006f58 <__sfp>
 8006f22:	60a0      	str	r0, [r4, #8]
 8006f24:	4620      	mov	r0, r4
 8006f26:	f000 f817 	bl	8006f58 <__sfp>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2104      	movs	r1, #4
 8006f2e:	60e0      	str	r0, [r4, #12]
 8006f30:	6860      	ldr	r0, [r4, #4]
 8006f32:	f7ff ff81 	bl	8006e38 <std>
 8006f36:	2201      	movs	r2, #1
 8006f38:	2109      	movs	r1, #9
 8006f3a:	68a0      	ldr	r0, [r4, #8]
 8006f3c:	f7ff ff7c 	bl	8006e38 <std>
 8006f40:	2202      	movs	r2, #2
 8006f42:	2112      	movs	r1, #18
 8006f44:	68e0      	ldr	r0, [r4, #12]
 8006f46:	f7ff ff77 	bl	8006e38 <std>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	61a3      	str	r3, [r4, #24]
 8006f4e:	e7d1      	b.n	8006ef4 <__sinit+0xc>
 8006f50:	08007338 	.word	0x08007338
 8006f54:	08006e81 	.word	0x08006e81

08006f58 <__sfp>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	f7ff ffac 	bl	8006eb8 <__sfp_lock_acquire>
 8006f60:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <__sfp+0x84>)
 8006f62:	681e      	ldr	r6, [r3, #0]
 8006f64:	69b3      	ldr	r3, [r6, #24]
 8006f66:	b913      	cbnz	r3, 8006f6e <__sfp+0x16>
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff ffbd 	bl	8006ee8 <__sinit>
 8006f6e:	3648      	adds	r6, #72	; 0x48
 8006f70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	d503      	bpl.n	8006f80 <__sfp+0x28>
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	b30b      	cbz	r3, 8006fc0 <__sfp+0x68>
 8006f7c:	6836      	ldr	r6, [r6, #0]
 8006f7e:	e7f7      	b.n	8006f70 <__sfp+0x18>
 8006f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f84:	b9d5      	cbnz	r5, 8006fbc <__sfp+0x64>
 8006f86:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <__sfp+0x88>)
 8006f88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f8c:	60e3      	str	r3, [r4, #12]
 8006f8e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f90:	f000 f847 	bl	8007022 <__retarget_lock_init_recursive>
 8006f94:	f7ff ff96 	bl	8006ec4 <__sfp_lock_release>
 8006f98:	2208      	movs	r2, #8
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fa4:	6025      	str	r5, [r4, #0]
 8006fa6:	61a5      	str	r5, [r4, #24]
 8006fa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fac:	f7fb fd62 	bl	8002a74 <memset>
 8006fb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fb8:	4620      	mov	r0, r4
 8006fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fbc:	3468      	adds	r4, #104	; 0x68
 8006fbe:	e7d9      	b.n	8006f74 <__sfp+0x1c>
 8006fc0:	2104      	movs	r1, #4
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7ff ff62 	bl	8006e8c <__sfmoreglue>
 8006fc8:	4604      	mov	r4, r0
 8006fca:	6030      	str	r0, [r6, #0]
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d1d5      	bne.n	8006f7c <__sfp+0x24>
 8006fd0:	f7ff ff78 	bl	8006ec4 <__sfp_lock_release>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	e7ee      	b.n	8006fb8 <__sfp+0x60>
 8006fda:	bf00      	nop
 8006fdc:	08007338 	.word	0x08007338
 8006fe0:	ffff0001 	.word	0xffff0001

08006fe4 <_fwalk_reent>:
 8006fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	4606      	mov	r6, r0
 8006fea:	4688      	mov	r8, r1
 8006fec:	2700      	movs	r7, #0
 8006fee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8006ffa:	d505      	bpl.n	8007008 <_fwalk_reent+0x24>
 8006ffc:	6824      	ldr	r4, [r4, #0]
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d1f7      	bne.n	8006ff2 <_fwalk_reent+0xe>
 8007002:	4638      	mov	r0, r7
 8007004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007008:	89ab      	ldrh	r3, [r5, #12]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d907      	bls.n	800701e <_fwalk_reent+0x3a>
 800700e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007012:	3301      	adds	r3, #1
 8007014:	d003      	beq.n	800701e <_fwalk_reent+0x3a>
 8007016:	4629      	mov	r1, r5
 8007018:	4630      	mov	r0, r6
 800701a:	47c0      	blx	r8
 800701c:	4307      	orrs	r7, r0
 800701e:	3568      	adds	r5, #104	; 0x68
 8007020:	e7e9      	b.n	8006ff6 <_fwalk_reent+0x12>

08007022 <__retarget_lock_init_recursive>:
 8007022:	4770      	bx	lr

08007024 <__retarget_lock_acquire_recursive>:
 8007024:	4770      	bx	lr

08007026 <__retarget_lock_release_recursive>:
 8007026:	4770      	bx	lr

08007028 <__swhatbuf_r>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	460e      	mov	r6, r1
 800702c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007030:	4614      	mov	r4, r2
 8007032:	2900      	cmp	r1, #0
 8007034:	461d      	mov	r5, r3
 8007036:	b096      	sub	sp, #88	; 0x58
 8007038:	da08      	bge.n	800704c <__swhatbuf_r+0x24>
 800703a:	2200      	movs	r2, #0
 800703c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007040:	602a      	str	r2, [r5, #0]
 8007042:	061a      	lsls	r2, r3, #24
 8007044:	d410      	bmi.n	8007068 <__swhatbuf_r+0x40>
 8007046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800704a:	e00e      	b.n	800706a <__swhatbuf_r+0x42>
 800704c:	466a      	mov	r2, sp
 800704e:	f000 f903 	bl	8007258 <_fstat_r>
 8007052:	2800      	cmp	r0, #0
 8007054:	dbf1      	blt.n	800703a <__swhatbuf_r+0x12>
 8007056:	9a01      	ldr	r2, [sp, #4]
 8007058:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800705c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007060:	425a      	negs	r2, r3
 8007062:	415a      	adcs	r2, r3
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	e7ee      	b.n	8007046 <__swhatbuf_r+0x1e>
 8007068:	2340      	movs	r3, #64	; 0x40
 800706a:	2000      	movs	r0, #0
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	b016      	add	sp, #88	; 0x58
 8007070:	bd70      	pop	{r4, r5, r6, pc}
	...

08007074 <__smakebuf_r>:
 8007074:	898b      	ldrh	r3, [r1, #12]
 8007076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007078:	079d      	lsls	r5, r3, #30
 800707a:	4606      	mov	r6, r0
 800707c:	460c      	mov	r4, r1
 800707e:	d507      	bpl.n	8007090 <__smakebuf_r+0x1c>
 8007080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	6123      	str	r3, [r4, #16]
 8007088:	2301      	movs	r3, #1
 800708a:	6163      	str	r3, [r4, #20]
 800708c:	b002      	add	sp, #8
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	466a      	mov	r2, sp
 8007092:	ab01      	add	r3, sp, #4
 8007094:	f7ff ffc8 	bl	8007028 <__swhatbuf_r>
 8007098:	9900      	ldr	r1, [sp, #0]
 800709a:	4605      	mov	r5, r0
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff f961 	bl	8006364 <_malloc_r>
 80070a2:	b948      	cbnz	r0, 80070b8 <__smakebuf_r+0x44>
 80070a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a8:	059a      	lsls	r2, r3, #22
 80070aa:	d4ef      	bmi.n	800708c <__smakebuf_r+0x18>
 80070ac:	f023 0303 	bic.w	r3, r3, #3
 80070b0:	f043 0302 	orr.w	r3, r3, #2
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	e7e3      	b.n	8007080 <__smakebuf_r+0xc>
 80070b8:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <__smakebuf_r+0x7c>)
 80070ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	6020      	str	r0, [r4, #0]
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	81a3      	strh	r3, [r4, #12]
 80070c6:	9b00      	ldr	r3, [sp, #0]
 80070c8:	6120      	str	r0, [r4, #16]
 80070ca:	6163      	str	r3, [r4, #20]
 80070cc:	9b01      	ldr	r3, [sp, #4]
 80070ce:	b15b      	cbz	r3, 80070e8 <__smakebuf_r+0x74>
 80070d0:	4630      	mov	r0, r6
 80070d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d6:	f000 f8d1 	bl	800727c <_isatty_r>
 80070da:	b128      	cbz	r0, 80070e8 <__smakebuf_r+0x74>
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	f023 0303 	bic.w	r3, r3, #3
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	81a3      	strh	r3, [r4, #12]
 80070e8:	89a0      	ldrh	r0, [r4, #12]
 80070ea:	4305      	orrs	r5, r0
 80070ec:	81a5      	strh	r5, [r4, #12]
 80070ee:	e7cd      	b.n	800708c <__smakebuf_r+0x18>
 80070f0:	08006e81 	.word	0x08006e81

080070f4 <_malloc_usable_size_r>:
 80070f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070f8:	1f18      	subs	r0, r3, #4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bfbc      	itt	lt
 80070fe:	580b      	ldrlt	r3, [r1, r0]
 8007100:	18c0      	addlt	r0, r0, r3
 8007102:	4770      	bx	lr

08007104 <_raise_r>:
 8007104:	291f      	cmp	r1, #31
 8007106:	b538      	push	{r3, r4, r5, lr}
 8007108:	4604      	mov	r4, r0
 800710a:	460d      	mov	r5, r1
 800710c:	d904      	bls.n	8007118 <_raise_r+0x14>
 800710e:	2316      	movs	r3, #22
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	f04f 30ff 	mov.w	r0, #4294967295
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800711a:	b112      	cbz	r2, 8007122 <_raise_r+0x1e>
 800711c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007120:	b94b      	cbnz	r3, 8007136 <_raise_r+0x32>
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f830 	bl	8007188 <_getpid_r>
 8007128:	462a      	mov	r2, r5
 800712a:	4601      	mov	r1, r0
 800712c:	4620      	mov	r0, r4
 800712e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007132:	f000 b817 	b.w	8007164 <_kill_r>
 8007136:	2b01      	cmp	r3, #1
 8007138:	d00a      	beq.n	8007150 <_raise_r+0x4c>
 800713a:	1c59      	adds	r1, r3, #1
 800713c:	d103      	bne.n	8007146 <_raise_r+0x42>
 800713e:	2316      	movs	r3, #22
 8007140:	6003      	str	r3, [r0, #0]
 8007142:	2001      	movs	r0, #1
 8007144:	e7e7      	b.n	8007116 <_raise_r+0x12>
 8007146:	2400      	movs	r4, #0
 8007148:	4628      	mov	r0, r5
 800714a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800714e:	4798      	blx	r3
 8007150:	2000      	movs	r0, #0
 8007152:	e7e0      	b.n	8007116 <_raise_r+0x12>

08007154 <raise>:
 8007154:	4b02      	ldr	r3, [pc, #8]	; (8007160 <raise+0xc>)
 8007156:	4601      	mov	r1, r0
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	f7ff bfd3 	b.w	8007104 <_raise_r>
 800715e:	bf00      	nop
 8007160:	2000000c 	.word	0x2000000c

08007164 <_kill_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	2300      	movs	r3, #0
 8007168:	4d06      	ldr	r5, [pc, #24]	; (8007184 <_kill_r+0x20>)
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	f7fa f9b5 	bl	80014e0 <_kill>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d102      	bne.n	8007180 <_kill_r+0x1c>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	b103      	cbz	r3, 8007180 <_kill_r+0x1c>
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	2000026c 	.word	0x2000026c

08007188 <_getpid_r>:
 8007188:	f7fa b9a3 	b.w	80014d2 <_getpid>

0800718c <__sread>:
 800718c:	b510      	push	{r4, lr}
 800718e:	460c      	mov	r4, r1
 8007190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007194:	f000 f894 	bl	80072c0 <_read_r>
 8007198:	2800      	cmp	r0, #0
 800719a:	bfab      	itete	ge
 800719c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800719e:	89a3      	ldrhlt	r3, [r4, #12]
 80071a0:	181b      	addge	r3, r3, r0
 80071a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071a6:	bfac      	ite	ge
 80071a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071aa:	81a3      	strhlt	r3, [r4, #12]
 80071ac:	bd10      	pop	{r4, pc}

080071ae <__swrite>:
 80071ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b2:	461f      	mov	r7, r3
 80071b4:	898b      	ldrh	r3, [r1, #12]
 80071b6:	4605      	mov	r5, r0
 80071b8:	05db      	lsls	r3, r3, #23
 80071ba:	460c      	mov	r4, r1
 80071bc:	4616      	mov	r6, r2
 80071be:	d505      	bpl.n	80071cc <__swrite+0x1e>
 80071c0:	2302      	movs	r3, #2
 80071c2:	2200      	movs	r2, #0
 80071c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c8:	f000 f868 	bl	800729c <_lseek_r>
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	4632      	mov	r2, r6
 80071d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	4628      	mov	r0, r5
 80071d8:	463b      	mov	r3, r7
 80071da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071e2:	f000 b817 	b.w	8007214 <_write_r>

080071e6 <__sseek>:
 80071e6:	b510      	push	{r4, lr}
 80071e8:	460c      	mov	r4, r1
 80071ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ee:	f000 f855 	bl	800729c <_lseek_r>
 80071f2:	1c43      	adds	r3, r0, #1
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	bf15      	itete	ne
 80071f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80071fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007202:	81a3      	strheq	r3, [r4, #12]
 8007204:	bf18      	it	ne
 8007206:	81a3      	strhne	r3, [r4, #12]
 8007208:	bd10      	pop	{r4, pc}

0800720a <__sclose>:
 800720a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720e:	f000 b813 	b.w	8007238 <_close_r>
	...

08007214 <_write_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	4611      	mov	r1, r2
 800721c:	2200      	movs	r2, #0
 800721e:	4d05      	ldr	r5, [pc, #20]	; (8007234 <_write_r+0x20>)
 8007220:	602a      	str	r2, [r5, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	f7fa f993 	bl	800154e <_write>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_write_r+0x1e>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_write_r+0x1e>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	2000026c 	.word	0x2000026c

08007238 <_close_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	2300      	movs	r3, #0
 800723c:	4d05      	ldr	r5, [pc, #20]	; (8007254 <_close_r+0x1c>)
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	f7fa f99f 	bl	8001586 <_close>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_close_r+0x1a>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_close_r+0x1a>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	2000026c 	.word	0x2000026c

08007258 <_fstat_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	2300      	movs	r3, #0
 800725c:	4d06      	ldr	r5, [pc, #24]	; (8007278 <_fstat_r+0x20>)
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	4611      	mov	r1, r2
 8007264:	602b      	str	r3, [r5, #0]
 8007266:	f7fa f999 	bl	800159c <_fstat>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d102      	bne.n	8007274 <_fstat_r+0x1c>
 800726e:	682b      	ldr	r3, [r5, #0]
 8007270:	b103      	cbz	r3, 8007274 <_fstat_r+0x1c>
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	bd38      	pop	{r3, r4, r5, pc}
 8007276:	bf00      	nop
 8007278:	2000026c 	.word	0x2000026c

0800727c <_isatty_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	2300      	movs	r3, #0
 8007280:	4d05      	ldr	r5, [pc, #20]	; (8007298 <_isatty_r+0x1c>)
 8007282:	4604      	mov	r4, r0
 8007284:	4608      	mov	r0, r1
 8007286:	602b      	str	r3, [r5, #0]
 8007288:	f7fa f997 	bl	80015ba <_isatty>
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	d102      	bne.n	8007296 <_isatty_r+0x1a>
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	b103      	cbz	r3, 8007296 <_isatty_r+0x1a>
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	bd38      	pop	{r3, r4, r5, pc}
 8007298:	2000026c 	.word	0x2000026c

0800729c <_lseek_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	2200      	movs	r2, #0
 80072a6:	4d05      	ldr	r5, [pc, #20]	; (80072bc <_lseek_r+0x20>)
 80072a8:	602a      	str	r2, [r5, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f7fa f98f 	bl	80015ce <_lseek>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d102      	bne.n	80072ba <_lseek_r+0x1e>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	b103      	cbz	r3, 80072ba <_lseek_r+0x1e>
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	2000026c 	.word	0x2000026c

080072c0 <_read_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	2200      	movs	r2, #0
 80072ca:	4d05      	ldr	r5, [pc, #20]	; (80072e0 <_read_r+0x20>)
 80072cc:	602a      	str	r2, [r5, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	f7fa f920 	bl	8001514 <_read>
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d102      	bne.n	80072de <_read_r+0x1e>
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	b103      	cbz	r3, 80072de <_read_r+0x1e>
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	bd38      	pop	{r3, r4, r5, pc}
 80072e0:	2000026c 	.word	0x2000026c

080072e4 <_init>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr

080072f0 <_fini>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr
