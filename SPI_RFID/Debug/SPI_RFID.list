
SPI_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000776c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08007880  08007880  00017880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d7c  08007d7c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007d7c  08007d7c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d7c  08007d7c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d7c  08007d7c  00017d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d80  08007d80  00017d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001e8  08007f6c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08007f6c  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f1e  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001900  00000000  00000000  0002812f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00029a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002a390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eeb  00000000  00000000  0002ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009825  00000000  00000000  00042b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ab1  00000000  00000000  0004c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1e09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  000d1e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007864 	.word	0x08007864

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007864 	.word	0x08007864

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fe21 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f871 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 f90b 	bl	8000e00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bea:	f000 f8df 	bl	8000dac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000bee:	f000 f8a7 	bl	8000d40 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000bf2:	f000 fbe0 	bl	80013b6 <MFRC522_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (MFRC522_Check(CardID) == MI_OK) {
 8000bf6:	482c      	ldr	r0, [pc, #176]	; (8000ca8 <main+0xd0>)
 8000bf8:	f000 f9f2 	bl	8000fe0 <MFRC522_Check>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d144      	bne.n	8000c8c <main+0xb4>
			sprintf(buffer,"0x%X 0x%X 0x%X 0x%X 0x%X \n",CardID[0],CardID[1],CardID[2],CardID[3],CardID[4]);
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <main+0xd0>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <main+0xd0>)
 8000c0a:	785b      	ldrb	r3, [r3, #1]
 8000c0c:	461c      	mov	r4, r3
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <main+0xd0>)
 8000c10:	789b      	ldrb	r3, [r3, #2]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <main+0xd0>)
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <main+0xd0>)
 8000c1c:	791b      	ldrb	r3, [r3, #4]
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	9101      	str	r1, [sp, #4]
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	4623      	mov	r3, r4
 8000c26:	4602      	mov	r2, r0
 8000c28:	4920      	ldr	r1, [pc, #128]	; (8000cac <main+0xd4>)
 8000c2a:	4821      	ldr	r0, [pc, #132]	; (8000cb0 <main+0xd8>)
 8000c2c:	f003 f85c 	bl	8003ce8 <siprintf>
			HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8000c30:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <main+0xd8>)
 8000c32:	f7ff fa8d 	bl	8000150 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	491c      	ldr	r1, [pc, #112]	; (8000cb0 <main+0xd8>)
 8000c40:	481c      	ldr	r0, [pc, #112]	; (8000cb4 <main+0xdc>)
 8000c42:	f002 f842 	bl	8002cca <HAL_UART_Transmit>
			HAL_Delay(100);
 8000c46:	2064      	movs	r0, #100	; 0x64
 8000c48:	f000 fe4e 	bl	80018e8 <HAL_Delay>
			if (MFRC522_Compare(CardID, MyID) == MI_OK) {
 8000c4c:	491a      	ldr	r1, [pc, #104]	; (8000cb8 <main+0xe0>)
 8000c4e:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <main+0xd0>)
 8000c50:	f000 f9df 	bl	8001012 <MFRC522_Compare>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10c      	bne.n	8000c74 <main+0x9c>
				HAL_UART_Transmit(&huart2, (uint8_t*) "\n correct\n", 11, 1000);
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	220b      	movs	r2, #11
 8000c60:	4916      	ldr	r1, [pc, #88]	; (8000cbc <main+0xe4>)
 8000c62:	4814      	ldr	r0, [pc, #80]	; (8000cb4 <main+0xdc>)
 8000c64:	f002 f831 	bl	8002cca <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <main+0xe8>)
 8000c6e:	f001 f8df 	bl	8001e30 <HAL_GPIO_TogglePin>
 8000c72:	e00b      	b.n	8000c8c <main+0xb4>
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t*) " wrong\n", 9, 1000);
 8000c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c78:	2209      	movs	r2, #9
 8000c7a:	4912      	ldr	r1, [pc, #72]	; (8000cc4 <main+0xec>)
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <main+0xdc>)
 8000c7e:	f002 f824 	bl	8002cca <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <main+0xe8>)
 8000c88:	f001 f8d2 	bl	8001e30 <HAL_GPIO_TogglePin>
			}
		}
		HAL_Delay(100);
 8000c8c:	2064      	movs	r0, #100	; 0x64
 8000c8e:	f000 fe2b 	bl	80018e8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <main+0xe8>)
 8000c98:	f001 f8ca 	bl	8001e30 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000c9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca0:	f000 fe22 	bl	80018e8 <HAL_Delay>
		if (MFRC522_Check(CardID) == MI_OK) {
 8000ca4:	e7a7      	b.n	8000bf6 <main+0x1e>
 8000ca6:	bf00      	nop
 8000ca8:	200002a0 	.word	0x200002a0
 8000cac:	08007880 	.word	0x08007880
 8000cb0:	200002a8 	.word	0x200002a8
 8000cb4:	2000025c 	.word	0x2000025c
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	0800789c 	.word	0x0800789c
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	080078a8 	.word	0x080078a8

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b090      	sub	sp, #64	; 0x40
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0318 	add.w	r3, r7, #24
 8000cd2:	2228      	movs	r2, #40	; 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 f98c 	bl	8002ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 f8b0 	bl	8001e64 <HAL_RCC_OscConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d0a:	f000 f8d9 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0e:	230f      	movs	r3, #15
 8000d10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fb1e 	bl	8002368 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d32:	f000 f8c5 	bl	8000ec0 <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3740      	adds	r7, #64	; 0x40
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <MX_SPI1_Init+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d8c:	220a      	movs	r2, #10
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_SPI1_Init+0x64>)
 8000d92:	f001 fc81 	bl	8002698 <HAL_SPI_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d9c:	f000 f890 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000204 	.word	0x20000204
 8000da8:	40013000 	.word	0x40013000

08000dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_USART2_UART_Init+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000de4:	f001 ff24 	bl	8002c30 <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dee:	f000 f867 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000025c 	.word	0x2000025c
 8000dfc:	40004400 	.word	0x40004400

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a26      	ldr	r2, [pc, #152]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e64:	f000 ffcc 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4813      	ldr	r0, [pc, #76]	; (8000ebc <MX_GPIO_Init+0xbc>)
 8000e6e:	f000 ffc7 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e8c:	f000 fe34 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e90:	2301      	movs	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_GPIO_Init+0xbc>)
 8000ea8:	f000 fe26 	bl	8001af8 <HAL_GPIO_Init>

}
 8000eac:	bf00      	nop
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40010c00 	.word	0x40010c00

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000eda:	f107 0208 	add.w	r2, r7, #8
 8000ede:	f107 010c 	add.w	r1, r7, #12
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <SPI1SendByte+0x2c>)
 8000eea:	f001 fc59 	bl	80027a0 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000eee:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000204 	.word	0x20000204

08000efc <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <SPI1_WriteReg+0x3c>)
 8000f12:	f000 ff75 	bl	8001e00 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffd7 	bl	8000ecc <SPI1SendByte>
	SPI1SendByte(value);
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ffd3 	bl	8000ecc <SPI1SendByte>
	cs_set();
 8000f26:	2201      	movs	r2, #1
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <SPI1_WriteReg+0x3c>)
 8000f2c:	f000 ff68 	bl	8001e00 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40010c00 	.word	0x40010c00

08000f3c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	480b      	ldr	r0, [pc, #44]	; (8000f78 <SPI1_ReadReg+0x3c>)
 8000f4c:	f000 ff58 	bl	8001e00 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffba 	bl	8000ecc <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff ffb7 	bl	8000ecc <SPI1SendByte>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000f62:	2201      	movs	r2, #1
 8000f64:	2101      	movs	r1, #1
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <SPI1_ReadReg+0x3c>)
 8000f68:	f000 ff4a 	bl	8001e00 <HAL_GPIO_WritePin>
	return val;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40010c00 	.word	0x40010c00

08000f7c <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f96:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000f98:	79ba      	ldrb	r2, [r7, #6]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ffac 	bl	8000efc <SPI1_WriteReg>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ffb5 	bl	8000f3c <SPI1_ReadReg>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
	return val;	
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	2026      	movs	r0, #38	; 0x26
 8000fec:	f000 f869 	bl	80010c2 <MFRC522_Request>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <MFRC522_Check+0x24>
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f955 	bl	80012aa <MFRC522_Anticoll>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 8001004:	f000 fa18 	bl	8001438 <MFRC522_Halt>
	return status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <MFRC522_Compare>:

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e00e      	b.n	8001040 <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) return MI_ERR;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	440b      	add	r3, r1
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d001      	beq.n	800103a <MFRC522_Compare+0x28>
 8001036:	2302      	movs	r3, #2
 8001038:	e006      	b.n	8001048 <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	3301      	adds	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d9ed      	bls.n	8001022 <MFRC522_Compare+0x10>
	}
	return MI_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	460a      	mov	r2, r1
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	4613      	mov	r3, r2
 8001060:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ffa1 	bl	8000fac <MFRC522_ReadRegister>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	4313      	orrs	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff7f 	bl	8000f7c <MFRC522_WriteRegister>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	460a      	mov	r2, r1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	4613      	mov	r3, r2
 8001094:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff87 	bl	8000fac <MFRC522_ReadRegister>
 800109e:	4603      	mov	r3, r0
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4013      	ands	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff61 	bl	8000f7c <MFRC522_WriteRegister>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af02      	add	r7, sp, #8
 80010c8:	4603      	mov	r3, r0
 80010ca:	6039      	str	r1, [r7, #0]
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 80010ce:	2107      	movs	r1, #7
 80010d0:	200d      	movs	r0, #13
 80010d2:	f7ff ff53 	bl	8000f7c <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	200c      	movs	r0, #12
 80010ea:	f000 f80f 	bl	800110c <MFRC522_ToCard>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <MFRC522_Request+0x3c>
 80010f8:	89bb      	ldrh	r3, [r7, #12]
 80010fa:	2b10      	cmp	r3, #16
 80010fc:	d001      	beq.n	8001102 <MFRC522_Request+0x40>
 80010fe:	2302      	movs	r3, #2
 8001100:	73fb      	strb	r3, [r7, #15]
	return status;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	4613      	mov	r3, r2
 800111c:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 800111e:	2302      	movs	r3, #2
 8001120:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b0c      	cmp	r3, #12
 800112e:	d006      	beq.n	800113e <MFRC522_ToCard+0x32>
 8001130:	2b0e      	cmp	r3, #14
 8001132:	d109      	bne.n	8001148 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001134:	2312      	movs	r3, #18
 8001136:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001138:	2310      	movs	r3, #16
 800113a:	757b      	strb	r3, [r7, #21]
			break;
 800113c:	e005      	b.n	800114a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 800113e:	2377      	movs	r3, #119	; 0x77
 8001140:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001142:	2330      	movs	r3, #48	; 0x30
 8001144:	757b      	strb	r3, [r7, #21]
			break;
 8001146:	e000      	b.n	800114a <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8001148:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800114a:	7dbb      	ldrb	r3, [r7, #22]
 800114c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4619      	mov	r1, r3
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff ff11 	bl	8000f7c <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	2004      	movs	r0, #4
 800115e:	f7ff ff92 	bl	8001086 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	200a      	movs	r0, #10
 8001166:	f7ff ff74 	bl	8001052 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800116a:	2100      	movs	r1, #0
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff05 	bl	8000f7c <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001172:	2300      	movs	r3, #0
 8001174:	827b      	strh	r3, [r7, #18]
 8001176:	e00a      	b.n	800118e <MFRC522_ToCard+0x82>
 8001178:	8a7b      	ldrh	r3, [r7, #18]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	2009      	movs	r0, #9
 8001184:	f7ff fefa 	bl	8000f7c <MFRC522_WriteRegister>
 8001188:	8a7b      	ldrh	r3, [r7, #18]
 800118a:	3301      	adds	r3, #1
 800118c:	827b      	strh	r3, [r7, #18]
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	b29b      	uxth	r3, r3
 8001192:	8a7a      	ldrh	r2, [r7, #18]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3ef      	bcc.n	8001178 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	4619      	mov	r1, r3
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff feed 	bl	8000f7c <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b0c      	cmp	r3, #12
 80011a6:	d103      	bne.n	80011b0 <MFRC522_ToCard+0xa4>
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	200d      	movs	r0, #13
 80011ac:	f7ff ff51 	bl	8001052 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80011b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011b4:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80011b6:	2004      	movs	r0, #4
 80011b8:	f7ff fef8 	bl	8000fac <MFRC522_ReadRegister>
 80011bc:	4603      	mov	r3, r0
 80011be:	753b      	strb	r3, [r7, #20]
		i--;
 80011c0:	8a7b      	ldrh	r3, [r7, #18]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80011c6:	8a7b      	ldrh	r3, [r7, #18]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00a      	beq.n	80011e2 <MFRC522_ToCard+0xd6>
 80011cc:	7d3b      	ldrb	r3, [r7, #20]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <MFRC522_ToCard+0xd6>
 80011d6:	7d3a      	ldrb	r2, [r7, #20]
 80011d8:	7d7b      	ldrb	r3, [r7, #21]
 80011da:	4013      	ands	r3, r2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0e9      	beq.n	80011b6 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	200d      	movs	r0, #13
 80011e6:	f7ff ff4e 	bl	8001086 <MFRC522_ClearBitMask>

	if (i != 0)  {
 80011ea:	8a7b      	ldrh	r3, [r7, #18]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d057      	beq.n	80012a0 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80011f0:	2006      	movs	r0, #6
 80011f2:	f7ff fedb 	bl	8000fac <MFRC522_ReadRegister>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f003 031b 	and.w	r3, r3, #27
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d14d      	bne.n	800129c <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001204:	7d3a      	ldrb	r2, [r7, #20]
 8001206:	7dbb      	ldrb	r3, [r7, #22]
 8001208:	4013      	ands	r3, r2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MFRC522_ToCard+0x10c>
 8001214:	2301      	movs	r3, #1
 8001216:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d140      	bne.n	80012a0 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800121e:	200a      	movs	r0, #10
 8001220:	f7ff fec4 	bl	8000fac <MFRC522_ReadRegister>
 8001224:	4603      	mov	r3, r0
 8001226:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001228:	200c      	movs	r0, #12
 800122a:	f7ff febf 	bl	8000fac <MFRC522_ReadRegister>
 800122e:	4603      	mov	r3, r0
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001236:	7c7b      	ldrb	r3, [r7, #17]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00b      	beq.n	8001254 <MFRC522_ToCard+0x148>
 800123c:	7d3b      	ldrb	r3, [r7, #20]
 800123e:	3b01      	subs	r3, #1
 8001240:	b29b      	uxth	r3, r3
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	b29a      	uxth	r2, r3
 8001246:	7c7b      	ldrb	r3, [r7, #17]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b29a      	uxth	r2, r3
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	801a      	strh	r2, [r3, #0]
 8001252:	e005      	b.n	8001260 <MFRC522_ToCard+0x154>
 8001254:	7d3b      	ldrb	r3, [r7, #20]
 8001256:	b29b      	uxth	r3, r3
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	b29a      	uxth	r2, r3
 800125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125e:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001260:	7d3b      	ldrb	r3, [r7, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <MFRC522_ToCard+0x15e>
 8001266:	2301      	movs	r3, #1
 8001268:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800126a:	7d3b      	ldrb	r3, [r7, #20]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d901      	bls.n	8001274 <MFRC522_ToCard+0x168>
 8001270:	2310      	movs	r3, #16
 8001272:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001274:	2300      	movs	r3, #0
 8001276:	827b      	strh	r3, [r7, #18]
 8001278:	e00a      	b.n	8001290 <MFRC522_ToCard+0x184>
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	18d4      	adds	r4, r2, r3
 8001280:	2009      	movs	r0, #9
 8001282:	f7ff fe93 	bl	8000fac <MFRC522_ReadRegister>
 8001286:	4603      	mov	r3, r0
 8001288:	7023      	strb	r3, [r4, #0]
 800128a:	8a7b      	ldrh	r3, [r7, #18]
 800128c:	3301      	adds	r3, #1
 800128e:	827b      	strh	r3, [r7, #18]
 8001290:	7d3b      	ldrb	r3, [r7, #20]
 8001292:	b29b      	uxth	r3, r3
 8001294:	8a7a      	ldrh	r2, [r7, #18]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3ef      	bcc.n	800127a <MFRC522_ToCard+0x16e>
 800129a:	e001      	b.n	80012a0 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800129c:	2302      	movs	r3, #2
 800129e:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}

080012aa <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af02      	add	r7, sp, #8
 80012b0:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 80012b6:	2100      	movs	r1, #0
 80012b8:	200d      	movs	r0, #13
 80012ba:	f7ff fe5f 	bl	8000f7c <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2293      	movs	r2, #147	; 0x93
 80012c2:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3301      	adds	r3, #1
 80012c8:	2220      	movs	r2, #32
 80012ca:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80012cc:	f107 030a 	add.w	r3, r7, #10
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2202      	movs	r2, #2
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	200c      	movs	r0, #12
 80012da:	f7ff ff17 	bl	800110c <MFRC522_ToCard>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d118      	bne.n	800131a <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 80012e8:	2300      	movs	r3, #0
 80012ea:	73bb      	strb	r3, [r7, #14]
 80012ec:	e009      	b.n	8001302 <MFRC522_Anticoll+0x58>
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
 80012f8:	4053      	eors	r3, r2
 80012fa:	737b      	strb	r3, [r7, #13]
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	3301      	adds	r3, #1
 8001300:	73bb      	strb	r3, [r7, #14]
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d9f2      	bls.n	80012ee <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	7b7a      	ldrb	r2, [r7, #13]
 8001312:	429a      	cmp	r2, r3
 8001314:	d001      	beq.n	800131a <MFRC522_Anticoll+0x70>
 8001316:	2302      	movs	r3, #2
 8001318:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
} 
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	460b      	mov	r3, r1
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001332:	2104      	movs	r1, #4
 8001334:	2005      	movs	r0, #5
 8001336:	f7ff fea6 	bl	8001086 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	200a      	movs	r0, #10
 800133e:	f7ff fe88 	bl	8001052 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
 8001346:	e00a      	b.n	800135e <MFRC522_CalculateCRC+0x3a>
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4413      	add	r3, r2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	2009      	movs	r0, #9
 8001354:	f7ff fe12 	bl	8000f7c <MFRC522_WriteRegister>
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	3301      	adds	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
 800135e:	7dfa      	ldrb	r2, [r7, #23]
 8001360:	7afb      	ldrb	r3, [r7, #11]
 8001362:	429a      	cmp	r2, r3
 8001364:	d3f0      	bcc.n	8001348 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001366:	2103      	movs	r1, #3
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff fe07 	bl	8000f7c <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 800136e:	23ff      	movs	r3, #255	; 0xff
 8001370:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001372:	2005      	movs	r0, #5
 8001374:	f7ff fe1a 	bl	8000fac <MFRC522_ReadRegister>
 8001378:	4603      	mov	r3, r0
 800137a:	75bb      	strb	r3, [r7, #22]
		i--;
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	3b01      	subs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <MFRC522_CalculateCRC+0x6e>
 8001388:	7dbb      	ldrb	r3, [r7, #22]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0ef      	beq.n	8001372 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001392:	2022      	movs	r0, #34	; 0x22
 8001394:	f7ff fe0a 	bl	8000fac <MFRC522_ReadRegister>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1c5c      	adds	r4, r3, #1
 80013a4:	2021      	movs	r0, #33	; 0x21
 80013a6:	f7ff fe01 	bl	8000fac <MFRC522_ReadRegister>
 80013aa:	4603      	mov	r3, r0
 80013ac:	7023      	strb	r3, [r4, #0]
}
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}

080013b6 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80013ba:	f000 f820 	bl	80013fe <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80013be:	218d      	movs	r1, #141	; 0x8d
 80013c0:	202a      	movs	r0, #42	; 0x2a
 80013c2:	f7ff fddb 	bl	8000f7c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80013c6:	213e      	movs	r1, #62	; 0x3e
 80013c8:	202b      	movs	r0, #43	; 0x2b
 80013ca:	f7ff fdd7 	bl	8000f7c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 80013ce:	211e      	movs	r1, #30
 80013d0:	202d      	movs	r0, #45	; 0x2d
 80013d2:	f7ff fdd3 	bl	8000f7c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80013d6:	2100      	movs	r1, #0
 80013d8:	202c      	movs	r0, #44	; 0x2c
 80013da:	f7ff fdcf 	bl	8000f7c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 80013de:	2170      	movs	r1, #112	; 0x70
 80013e0:	2026      	movs	r0, #38	; 0x26
 80013e2:	f7ff fdcb 	bl	8000f7c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80013e6:	2140      	movs	r1, #64	; 0x40
 80013e8:	2015      	movs	r0, #21
 80013ea:	f7ff fdc7 	bl	8000f7c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80013ee:	213d      	movs	r1, #61	; 0x3d
 80013f0:	2011      	movs	r0, #17
 80013f2:	f7ff fdc3 	bl	8000f7c <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 80013f6:	f000 f80a 	bl	800140e <MFRC522_AntennaOn>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}

080013fe <MFRC522_Reset>:

void MFRC522_Reset(void) {
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001402:	210f      	movs	r1, #15
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fdb9 	bl	8000f7c <MFRC522_WriteRegister>
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}

0800140e <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001414:	2014      	movs	r0, #20
 8001416:	f7ff fdc9 	bl	8000fac <MFRC522_ReadRegister>
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <MFRC522_AntennaOn+0x22>
 8001428:	2103      	movs	r1, #3
 800142a:	2014      	movs	r0, #20
 800142c:	f7ff fe11 	bl	8001052 <MFRC522_SetBitMask>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 800143e:	2350      	movs	r3, #80	; 0x50
 8001440:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001446:	463b      	mov	r3, r7
 8001448:	1c9a      	adds	r2, r3, #2
 800144a:	463b      	mov	r3, r7
 800144c:	2102      	movs	r1, #2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff68 	bl	8001324 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001454:	463a      	mov	r2, r7
 8001456:	4639      	mov	r1, r7
 8001458:	1dbb      	adds	r3, r7, #6
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	4613      	mov	r3, r2
 800145e:	2204      	movs	r2, #4
 8001460:	200c      	movs	r0, #12
 8001462:	f7ff fe53 	bl	800110c <MFRC522_ToCard>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_MspInit+0x5c>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <HAL_MspInit+0x5c>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_MspInit+0x5c>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_MspInit+0x5c>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_MspInit+0x5c>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_MspInit+0x5c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_MspInit+0x60>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_MspInit+0x60>)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010000 	.word	0x40010000

080014d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1b      	ldr	r2, [pc, #108]	; (800155c <HAL_SPI_MspInit+0x88>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d12f      	bne.n	8001554 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_SPI_MspInit+0x8c>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <HAL_SPI_MspInit+0x8c>)
 80014fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_SPI_MspInit+0x8c>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_SPI_MspInit+0x8c>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a13      	ldr	r2, [pc, #76]	; (8001560 <HAL_SPI_MspInit+0x8c>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_SPI_MspInit+0x8c>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001524:	23a0      	movs	r3, #160	; 0xa0
 8001526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <HAL_SPI_MspInit+0x90>)
 8001538:	f000 fade 	bl	8001af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800153c:	2340      	movs	r3, #64	; 0x40
 800153e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <HAL_SPI_MspInit+0x90>)
 8001550:	f000 fad2 	bl	8001af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40013000 	.word	0x40013000
 8001560:	40021000 	.word	0x40021000
 8001564:	40010800 	.word	0x40010800

08001568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0x88>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d12f      	bne.n	80015e8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_UART_MspInit+0x8c>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_UART_MspInit+0x8c>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	61d3      	str	r3, [r2, #28]
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_UART_MspInit+0x8c>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_UART_MspInit+0x8c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <HAL_UART_MspInit+0x8c>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_UART_MspInit+0x8c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b8:	2304      	movs	r3, #4
 80015ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <HAL_UART_MspInit+0x90>)
 80015cc:	f000 fa94 	bl	8001af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d0:	2308      	movs	r3, #8
 80015d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_UART_MspInit+0x90>)
 80015e4:	f000 fa88 	bl	8001af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40004400 	.word	0x40004400
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010800 	.word	0x40010800

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001642:	f000 f935 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}

0800164a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
	return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <_kill>:

int _kill(int pid, int sig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001662:	f001 fc9d 	bl	8002fa0 <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2216      	movs	r2, #22
 800166a:	601a      	str	r2, [r3, #0]
	return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffe7 	bl	8001658 <_kill>
	while (1) {}		/* Make sure we hang here */
 800168a:	e7fe      	b.n	800168a <_exit+0x12>

0800168c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e00a      	b.n	80016b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800169e:	f3af 8000 	nop.w
 80016a2:	4601      	mov	r1, r0
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf0      	blt.n	800169e <_read+0x12>
	}

return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e009      	b.n	80016ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf1      	blt.n	80016d8 <_write+0x12>
	}
	return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_close>:

int _close(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return -1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001724:	605a      	str	r2, [r3, #4]
	return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <_isatty>:

int _isatty(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
	return 0;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
	...

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001790:	f001 fc06 	bl	8002fa0 <__errno>
 8001794:	4603      	mov	r3, r0
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	e009      	b.n	80017b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <_sbrk+0x64>)
 80017b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20005000 	.word	0x20005000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	200002dc 	.word	0x200002dc
 80017c8:	200002f8 	.word	0x200002f8

080017cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	; (8001810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	; (800181c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017fe:	f7ff ffe5 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f001 fbd3 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001806:	f7ff f9e7 	bl	8000bd8 <main>
  bx lr
 800180a:	4770      	bx	lr
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001814:	08007d84 	.word	0x08007d84
  ldr r2, =_sbss
 8001818:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800181c:	200002f4 	.word	0x200002f4

08001820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC1_2_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_Init+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_Init+0x28>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f92b 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fe16 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f935 	bl	8001ade <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 f90b 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000010 	.word	0x20000010
 80018ac:	2000000c 	.word	0x2000000c

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x1c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x20>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_IncTick+0x20>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000010 	.word	0x20000010
 80018d0:	200002e0 	.word	0x200002e0

080018d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <HAL_GetTick+0x10>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	200002e0 	.word	0x200002e0

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff fff0 	bl	80018d4 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffe0 	bl	80018d4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000010 	.word	0x20000010

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff90 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff49 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff5e 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff90 	bl	80019e8 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5f 	bl	8001994 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffb0 	bl	8001a4c <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b08b      	sub	sp, #44	; 0x2c
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	e169      	b.n	8001de0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 8158 	bne.w	8001dda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a9a      	ldr	r2, [pc, #616]	; (8001d98 <HAL_GPIO_Init+0x2a0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d05e      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b34:	4a98      	ldr	r2, [pc, #608]	; (8001d98 <HAL_GPIO_Init+0x2a0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d875      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b3a:	4a98      	ldr	r2, [pc, #608]	; (8001d9c <HAL_GPIO_Init+0x2a4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d058      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b40:	4a96      	ldr	r2, [pc, #600]	; (8001d9c <HAL_GPIO_Init+0x2a4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d86f      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b46:	4a96      	ldr	r2, [pc, #600]	; (8001da0 <HAL_GPIO_Init+0x2a8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d052      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b4c:	4a94      	ldr	r2, [pc, #592]	; (8001da0 <HAL_GPIO_Init+0x2a8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d869      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b52:	4a94      	ldr	r2, [pc, #592]	; (8001da4 <HAL_GPIO_Init+0x2ac>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d04c      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b58:	4a92      	ldr	r2, [pc, #584]	; (8001da4 <HAL_GPIO_Init+0x2ac>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d863      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b5e:	4a92      	ldr	r2, [pc, #584]	; (8001da8 <HAL_GPIO_Init+0x2b0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d046      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b64:	4a90      	ldr	r2, [pc, #576]	; (8001da8 <HAL_GPIO_Init+0x2b0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d85d      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d82a      	bhi.n	8001bc4 <HAL_GPIO_Init+0xcc>
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d859      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b72:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <HAL_GPIO_Init+0x80>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001bf3 	.word	0x08001bf3
 8001b7c:	08001bcd 	.word	0x08001bcd
 8001b80:	08001bdf 	.word	0x08001bdf
 8001b84:	08001c21 	.word	0x08001c21
 8001b88:	08001c27 	.word	0x08001c27
 8001b8c:	08001c27 	.word	0x08001c27
 8001b90:	08001c27 	.word	0x08001c27
 8001b94:	08001c27 	.word	0x08001c27
 8001b98:	08001c27 	.word	0x08001c27
 8001b9c:	08001c27 	.word	0x08001c27
 8001ba0:	08001c27 	.word	0x08001c27
 8001ba4:	08001c27 	.word	0x08001c27
 8001ba8:	08001c27 	.word	0x08001c27
 8001bac:	08001c27 	.word	0x08001c27
 8001bb0:	08001c27 	.word	0x08001c27
 8001bb4:	08001c27 	.word	0x08001c27
 8001bb8:	08001c27 	.word	0x08001c27
 8001bbc:	08001bd5 	.word	0x08001bd5
 8001bc0:	08001be9 	.word	0x08001be9
 8001bc4:	4a79      	ldr	r2, [pc, #484]	; (8001dac <HAL_GPIO_Init+0x2b4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bca:	e02c      	b.n	8001c26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e029      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e024      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	3308      	adds	r3, #8
 8001be4:	623b      	str	r3, [r7, #32]
          break;
 8001be6:	e01f      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	330c      	adds	r3, #12
 8001bee:	623b      	str	r3, [r7, #32]
          break;
 8001bf0:	e01a      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e013      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	611a      	str	r2, [r3, #16]
          break;
 8001c12:	e009      	b.n	8001c28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c14:	2308      	movs	r3, #8
 8001c16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	615a      	str	r2, [r3, #20]
          break;
 8001c1e:	e003      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
          break;
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          break;
 8001c26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2bff      	cmp	r3, #255	; 0xff
 8001c2c:	d801      	bhi.n	8001c32 <HAL_GPIO_Init+0x13a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	e001      	b.n	8001c36 <HAL_GPIO_Init+0x13e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3304      	adds	r3, #4
 8001c36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2bff      	cmp	r3, #255	; 0xff
 8001c3c:	d802      	bhi.n	8001c44 <HAL_GPIO_Init+0x14c>
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	e002      	b.n	8001c4a <HAL_GPIO_Init+0x152>
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	3b08      	subs	r3, #8
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	210f      	movs	r1, #15
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	431a      	orrs	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80b1 	beq.w	8001dda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c78:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <HAL_GPIO_Init+0x2b8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a4c      	ldr	r2, [pc, #304]	; (8001db0 <HAL_GPIO_Init+0x2b8>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b4a      	ldr	r3, [pc, #296]	; (8001db0 <HAL_GPIO_Init+0x2b8>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c90:	4a48      	ldr	r2, [pc, #288]	; (8001db4 <HAL_GPIO_Init+0x2bc>)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a40      	ldr	r2, [pc, #256]	; (8001db8 <HAL_GPIO_Init+0x2c0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <HAL_GPIO_Init+0x1ec>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3f      	ldr	r2, [pc, #252]	; (8001dbc <HAL_GPIO_Init+0x2c4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_GPIO_Init+0x1e8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3e      	ldr	r2, [pc, #248]	; (8001dc0 <HAL_GPIO_Init+0x2c8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0x1e4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3d      	ldr	r2, [pc, #244]	; (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_GPIO_Init+0x1e0>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e006      	b.n	8001ce6 <HAL_GPIO_Init+0x1ee>
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e004      	b.n	8001ce6 <HAL_GPIO_Init+0x1ee>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x1ee>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_GPIO_Init+0x1ee>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce8:	f002 0203 	and.w	r2, r2, #3
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cf6:	492f      	ldr	r1, [pc, #188]	; (8001db4 <HAL_GPIO_Init+0x2bc>)
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	492c      	ldr	r1, [pc, #176]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	4928      	ldr	r1, [pc, #160]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4922      	ldr	r1, [pc, #136]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	491e      	ldr	r1, [pc, #120]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4918      	ldr	r1, [pc, #96]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	4914      	ldr	r1, [pc, #80]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d021      	beq.n	8001dcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
 8001d94:	e021      	b.n	8001dda <HAL_GPIO_Init+0x2e2>
 8001d96:	bf00      	nop
 8001d98:	10320000 	.word	0x10320000
 8001d9c:	10310000 	.word	0x10310000
 8001da0:	10220000 	.word	0x10220000
 8001da4:	10210000 	.word	0x10210000
 8001da8:	10120000 	.word	0x10120000
 8001dac:	10110000 	.word	0x10110000
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40010800 	.word	0x40010800
 8001dbc:	40010c00 	.word	0x40010c00
 8001dc0:	40011000 	.word	0x40011000
 8001dc4:	40011400 	.word	0x40011400
 8001dc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	4909      	ldr	r1, [pc, #36]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	3301      	adds	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f47f ae8e 	bne.w	8001b0c <HAL_GPIO_Init+0x14>
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	372c      	adds	r7, #44	; 0x2c
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	40010400 	.word	0x40010400

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	611a      	str	r2, [r3, #16]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	041a      	lsls	r2, r3, #16
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43d9      	mvns	r1, r3
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	400b      	ands	r3, r1
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	611a      	str	r2, [r3, #16]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e272      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8087 	beq.w	8001f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e84:	4b92      	ldr	r3, [pc, #584]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d00c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e90:	4b8f      	ldr	r3, [pc, #572]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d112      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
 8001e9c:	4b8c      	ldr	r3, [pc, #560]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d10b      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eaa:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d06c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x12c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d168      	bne.n	8001f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e24c      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x76>
 8001ecc:	4b80      	ldr	r3, [pc, #512]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a7f      	ldr	r2, [pc, #508]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e02e      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x98>
 8001ee2:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b78      	ldr	r3, [pc, #480]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a77      	ldr	r2, [pc, #476]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0xbc>
 8001f06:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a71      	ldr	r2, [pc, #452]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6e      	ldr	r2, [pc, #440]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001f20:	4b6b      	ldr	r3, [pc, #428]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a6a      	ldr	r2, [pc, #424]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a67      	ldr	r2, [pc, #412]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fcc8 	bl	80018d4 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fcc4 	bl	80018d4 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e200      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe4>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fcb4 	bl	80018d4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff fcb0 	bl	80018d4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1ec      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x10c>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d11c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x18c>
 8001fb6:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x176>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1c0      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4939      	ldr	r1, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e03a      	b.n	8002066 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fc69 	bl	80018d4 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff fc65 	bl	80018d4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1a1      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4927      	ldr	r1, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff fc48 	bl	80018d4 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002048:	f7ff fc44 	bl	80018d4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e180      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03a      	beq.n	80020e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d019      	beq.n	80020ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_RCC_OscConfig+0x274>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7ff fc28 	bl	80018d4 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002088:	f7ff fc24 	bl	80018d4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e160      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f000 fad8 	bl	800265c <RCC_Delay>
 80020ac:	e01c      	b.n	80020e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_OscConfig+0x274>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b4:	f7ff fc0e 	bl	80018d4 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ba:	e00f      	b.n	80020dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020bc:	f7ff fc0a 	bl	80018d4 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d908      	bls.n	80020dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e146      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	42420000 	.word	0x42420000
 80020d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4b92      	ldr	r3, [pc, #584]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1e9      	bne.n	80020bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a6 	beq.w	8002242 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b8b      	ldr	r3, [pc, #556]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a87      	ldr	r2, [pc, #540]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b85      	ldr	r3, [pc, #532]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b82      	ldr	r3, [pc, #520]	; (800232c <HAL_RCC_OscConfig+0x4c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b7f      	ldr	r3, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x4c8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7e      	ldr	r2, [pc, #504]	; (800232c <HAL_RCC_OscConfig+0x4c8>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff fbcb 	bl	80018d4 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7ff fbc7 	bl	80018d4 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e103      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b75      	ldr	r3, [pc, #468]	; (800232c <HAL_RCC_OscConfig+0x4c8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x312>
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a6e      	ldr	r2, [pc, #440]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e02d      	b.n	80021d2 <HAL_RCC_OscConfig+0x36e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x334>
 800217e:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a69      	ldr	r2, [pc, #420]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a66      	ldr	r2, [pc, #408]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	e01c      	b.n	80021d2 <HAL_RCC_OscConfig+0x36e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x356>
 80021a0:	4b61      	ldr	r3, [pc, #388]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a60      	ldr	r2, [pc, #384]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a5d      	ldr	r2, [pc, #372]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x36e>
 80021ba:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a5a      	ldr	r2, [pc, #360]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	4b58      	ldr	r3, [pc, #352]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a57      	ldr	r2, [pc, #348]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7ff fb7b 	bl	80018d4 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fb77 	bl	80018d4 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0b1      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ee      	beq.n	80021e2 <HAL_RCC_OscConfig+0x37e>
 8002204:	e014      	b.n	8002230 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7ff fb65 	bl	80018d4 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff fb61 	bl	80018d4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e09b      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ee      	bne.n	800220e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8087 	beq.w	800235a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d061      	beq.n	800231c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d146      	bne.n	80022ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCC_OscConfig+0x4cc>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff fb35 	bl	80018d4 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226e:	f7ff fb31 	bl	80018d4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e06d      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d108      	bne.n	80022a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4921      	ldr	r1, [pc, #132]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a19      	ldr	r1, [r3, #32]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	430b      	orrs	r3, r1
 80022ba:	491b      	ldr	r1, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x4cc>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff fb05 	bl	80018d4 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff fb01 	bl	80018d4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e03d      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x46a>
 80022ec:	e035      	b.n	800235a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_RCC_OscConfig+0x4cc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff faee 	bl	80018d4 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff faea 	bl	80018d4 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e026      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x498>
 800231a:	e01e      	b.n	800235a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e019      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
 8002330:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_OscConfig+0x500>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	429a      	cmp	r2, r3
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000

08002368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d0      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d910      	bls.n	80023ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 0207 	bic.w	r2, r3, #7
 8002392:	4965      	ldr	r1, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d040      	beq.n	8002488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d115      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e073      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06b      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4936      	ldr	r1, [pc, #216]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002458:	f7ff fa3c 	bl	80018d4 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7ff fa38 	bl	80018d4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e053      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d210      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	4922      	ldr	r1, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1cc>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1d0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f99a 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40022000 	.word	0x40022000
 800252c:	40021000 	.word	0x40021000
 8002530:	080078c0 	.word	0x080078c0
 8002534:	20000008 	.word	0x20000008
 8002538:	2000000c 	.word	0x2000000c

0800253c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b490      	push	{r4, r7}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002544:	1d3c      	adds	r4, r7, #4
 8002546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800254c:	f240 2301 	movw	r3, #513	; 0x201
 8002550:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d002      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x40>
 8002576:	2b08      	cmp	r3, #8
 8002578:	d003      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x46>
 800257a:	e02b      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800257e:	623b      	str	r3, [r7, #32]
      break;
 8002580:	e02b      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	0c9b      	lsrs	r3, r3, #18
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3328      	adds	r3, #40	; 0x28
 800258c:	443b      	add	r3, r7
 800258e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002592:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d012      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	0c5b      	lsrs	r3, r3, #17
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	3328      	adds	r3, #40	; 0x28
 80025aa:	443b      	add	r3, r7
 80025ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025b6:	fb03 f202 	mul.w	r2, r3, r2
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
 80025c2:	e004      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	623b      	str	r3, [r7, #32]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025d6:	623b      	str	r3, [r7, #32]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	6a3b      	ldr	r3, [r7, #32]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3728      	adds	r7, #40	; 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc90      	pop	{r4, r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	080078b0 	.word	0x080078b0
 80025ec:	40021000 	.word	0x40021000
 80025f0:	007a1200 	.word	0x007a1200
 80025f4:	003d0900 	.word	0x003d0900

080025f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b02      	ldr	r3, [pc, #8]	; (8002608 <HAL_RCC_GetHCLKFreq+0x10>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	20000008 	.word	0x20000008

0800260c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002610:	f7ff fff2 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4903      	ldr	r1, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	080078d0 	.word	0x080078d0

08002634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002638:	f7ff ffde 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0adb      	lsrs	r3, r3, #11
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	4903      	ldr	r1, [pc, #12]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	080078d0 	.word	0x080078d0

0800265c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <RCC_Delay+0x34>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <RCC_Delay+0x38>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0a5b      	lsrs	r3, r3, #9
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002678:	bf00      	nop
  }
  while (Delay --);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e5a      	subs	r2, r3, #1
 800267e:	60fa      	str	r2, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <RCC_Delay+0x1c>
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000008 	.word	0x20000008
 8002694:	10624dd3 	.word	0x10624dd3

08002698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e076      	b.n	8002798 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d108      	bne.n	80026c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ba:	d009      	beq.n	80026d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
 80026c2:	e005      	b.n	80026d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fef2 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	ea42 0103 	orr.w	r1, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	0c1a      	lsrs	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f002 0204 	and.w	r2, r2, #4
 8002776:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002786:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	; 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027ae:	2301      	movs	r3, #1
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x26>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e18a      	b.n	8002adc <HAL_SPI_TransmitReceive+0x33c>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ce:	f7ff f881 	bl	80018d4 <HAL_GetTick>
 80027d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d00f      	beq.n	8002810 <HAL_SPI_TransmitReceive+0x70>
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f6:	d107      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x68>
 8002800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002804:	2b04      	cmp	r3, #4
 8002806:	d003      	beq.n	8002810 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800280e:	e15b      	b.n	8002ac8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_SPI_TransmitReceive+0x82>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <HAL_SPI_TransmitReceive+0x82>
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002828:	e14e      	b.n	8002ac8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b04      	cmp	r3, #4
 8002834:	d003      	beq.n	800283e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2205      	movs	r2, #5
 800283a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	887a      	ldrh	r2, [r7, #2]
 800284e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	887a      	ldrh	r2, [r7, #2]
 8002866:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d007      	beq.n	8002892 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800289a:	d178      	bne.n	800298e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_SPI_TransmitReceive+0x10a>
 80028a4:	8b7b      	ldrh	r3, [r7, #26]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d166      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	881a      	ldrh	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ce:	e053      	b.n	8002978 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d11b      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x176>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d016      	beq.n	8002916 <HAL_SPI_TransmitReceive+0x176>
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d113      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	881a      	ldrh	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	1c9a      	adds	r2, r3, #2
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d119      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x1b8>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d014      	beq.n	8002958 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	b292      	uxth	r2, r2
 800293a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002954:	2301      	movs	r3, #1
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002958:	f7fe ffbc 	bl	80018d4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002964:	429a      	cmp	r2, r3
 8002966:	d807      	bhi.n	8002978 <HAL_SPI_TransmitReceive+0x1d8>
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d003      	beq.n	8002978 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002976:	e0a7      	b.n	8002ac8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1a6      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x130>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1a1      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x130>
 800298c:	e07c      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_SPI_TransmitReceive+0x1fc>
 8002996:	8b7b      	ldrh	r3, [r7, #26]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d16b      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	7812      	ldrb	r2, [r2, #0]
 80029a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c2:	e057      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d11c      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x26c>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d017      	beq.n	8002a0c <HAL_SPI_TransmitReceive+0x26c>
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d114      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	330c      	adds	r3, #12
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d119      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x2ae>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d014      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a4e:	f7fe ff41 	bl	80018d4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d803      	bhi.n	8002a66 <HAL_SPI_TransmitReceive+0x2c6>
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d102      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x2cc>
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d103      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a72:	e029      	b.n	8002ac8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1a2      	bne.n	80029c4 <HAL_SPI_TransmitReceive+0x224>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d19d      	bne.n	80029c4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f8b1 	bl	8002bf4 <SPI_EndRxTxTransaction>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002aa4:	e010      	b.n	8002ac8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10b      	bne.n	8002ac6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	e000      	b.n	8002ac8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ac6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3730      	adds	r7, #48	; 0x30
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002af4:	f7fe feee 	bl	80018d4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b04:	f7fe fee6 	bl	80018d4 <HAL_GetTick>
 8002b08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	015b      	lsls	r3, r3, #5
 8002b10:	0d1b      	lsrs	r3, r3, #20
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b1a:	e054      	b.n	8002bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d050      	beq.n	8002bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b24:	f7fe fed6 	bl	80018d4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d902      	bls.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d13d      	bne.n	8002bb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b52:	d111      	bne.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5c:	d004      	beq.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d107      	bne.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b80:	d10f      	bne.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e017      	b.n	8002be6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d19b      	bne.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff ff6a 	bl	8002ae4 <SPI_WaitFlagStateUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e000      	b.n	8002c28 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e03f      	b.n	8002cc2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fc86 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f905 	bl	8002e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b08a      	sub	sp, #40	; 0x28
 8002cce:	af02      	add	r7, sp, #8
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d17c      	bne.n	8002de4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_UART_Transmit+0x2c>
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e075      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Transmit+0x3e>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e06e      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2221      	movs	r2, #33	; 0x21
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d1e:	f7fe fdd9 	bl	80018d4 <HAL_GetTick>
 8002d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d38:	d108      	bne.n	8002d4c <HAL_UART_Transmit+0x82>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d104      	bne.n	8002d4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	e003      	b.n	8002d54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d5c:	e02a      	b.n	8002db4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f840 	bl	8002dee <UART_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e036      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10b      	bne.n	8002d96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	3302      	adds	r3, #2
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e007      	b.n	8002da6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	3301      	adds	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1cf      	bne.n	8002d5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2140      	movs	r1, #64	; 0x40
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f810 	bl	8002dee <UART_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e006      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfe:	e02c      	b.n	8002e5a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d028      	beq.n	8002e5a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e0e:	f7fe fd61 	bl	80018d4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d21d      	bcs.n	8002e5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e2c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0201 	bic.w	r2, r2, #1
 8002e3c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e00f      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d0c3      	beq.n	8002e00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ebe:	f023 030c 	bic.w	r3, r3, #12
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <UART_SetConfig+0x114>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d103      	bne.n	8002ef4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eec:	f7ff fba2 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	e002      	b.n	8002efa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ef4:	f7ff fb8a 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8002ef8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009a      	lsls	r2, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <UART_SetConfig+0x118>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	0119      	lsls	r1, r3, #4
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <UART_SetConfig+0x118>)
 8002f32:	fba3 0302 	umull	r0, r3, r3, r2
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2064      	movs	r0, #100	; 0x64
 8002f3a:	fb00 f303 	mul.w	r3, r0, r3
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	3332      	adds	r3, #50	; 0x32
 8002f44:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <UART_SetConfig+0x118>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f50:	4419      	add	r1, r3
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	009a      	lsls	r2, r3, #2
 8002f5c:	441a      	add	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <UART_SetConfig+0x118>)
 8002f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2064      	movs	r0, #100	; 0x64
 8002f72:	fb00 f303 	mul.w	r3, r0, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	3332      	adds	r3, #50	; 0x32
 8002f7c:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <UART_SetConfig+0x118>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	f003 020f 	and.w	r2, r3, #15
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	440a      	add	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	51eb851f 	.word	0x51eb851f

08002fa0 <__errno>:
 8002fa0:	4b01      	ldr	r3, [pc, #4]	; (8002fa8 <__errno+0x8>)
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000014 	.word	0x20000014

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	2600      	movs	r6, #0
 8002fb0:	4d0c      	ldr	r5, [pc, #48]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb2:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb4:	1b64      	subs	r4, r4, r5
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	42a6      	cmp	r6, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	f004 fc52 	bl	8007864 <_init>
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	4d0a      	ldr	r5, [pc, #40]	; (8002fec <__libc_init_array+0x40>)
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd4:	4798      	blx	r3
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fde:	4798      	blx	r3
 8002fe0:	3601      	adds	r6, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	08007d7c 	.word	0x08007d7c
 8002fe8:	08007d7c 	.word	0x08007d7c
 8002fec:	08007d7c 	.word	0x08007d7c
 8002ff0:	08007d80 	.word	0x08007d80

08002ff4 <memset>:
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4402      	add	r2, r0
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <memset+0xa>
 8002ffc:	4770      	bx	lr
 8002ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8003002:	e7f9      	b.n	8002ff8 <memset+0x4>

08003004 <__cvt>:
 8003004:	2b00      	cmp	r3, #0
 8003006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800300a:	461f      	mov	r7, r3
 800300c:	bfbb      	ittet	lt
 800300e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003012:	461f      	movlt	r7, r3
 8003014:	2300      	movge	r3, #0
 8003016:	232d      	movlt	r3, #45	; 0x2d
 8003018:	b088      	sub	sp, #32
 800301a:	4614      	mov	r4, r2
 800301c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800301e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003020:	7013      	strb	r3, [r2, #0]
 8003022:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003024:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003028:	f023 0820 	bic.w	r8, r3, #32
 800302c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003030:	d005      	beq.n	800303e <__cvt+0x3a>
 8003032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003036:	d100      	bne.n	800303a <__cvt+0x36>
 8003038:	3501      	adds	r5, #1
 800303a:	2302      	movs	r3, #2
 800303c:	e000      	b.n	8003040 <__cvt+0x3c>
 800303e:	2303      	movs	r3, #3
 8003040:	aa07      	add	r2, sp, #28
 8003042:	9204      	str	r2, [sp, #16]
 8003044:	aa06      	add	r2, sp, #24
 8003046:	e9cd a202 	strd	sl, r2, [sp, #8]
 800304a:	e9cd 3500 	strd	r3, r5, [sp]
 800304e:	4622      	mov	r2, r4
 8003050:	463b      	mov	r3, r7
 8003052:	f001 fd85 	bl	8004b60 <_dtoa_r>
 8003056:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800305a:	4606      	mov	r6, r0
 800305c:	d102      	bne.n	8003064 <__cvt+0x60>
 800305e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003060:	07db      	lsls	r3, r3, #31
 8003062:	d522      	bpl.n	80030aa <__cvt+0xa6>
 8003064:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003068:	eb06 0905 	add.w	r9, r6, r5
 800306c:	d110      	bne.n	8003090 <__cvt+0x8c>
 800306e:	7833      	ldrb	r3, [r6, #0]
 8003070:	2b30      	cmp	r3, #48	; 0x30
 8003072:	d10a      	bne.n	800308a <__cvt+0x86>
 8003074:	2200      	movs	r2, #0
 8003076:	2300      	movs	r3, #0
 8003078:	4620      	mov	r0, r4
 800307a:	4639      	mov	r1, r7
 800307c:	f7fd fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8003080:	b918      	cbnz	r0, 800308a <__cvt+0x86>
 8003082:	f1c5 0501 	rsb	r5, r5, #1
 8003086:	f8ca 5000 	str.w	r5, [sl]
 800308a:	f8da 3000 	ldr.w	r3, [sl]
 800308e:	4499      	add	r9, r3
 8003090:	2200      	movs	r2, #0
 8003092:	2300      	movs	r3, #0
 8003094:	4620      	mov	r0, r4
 8003096:	4639      	mov	r1, r7
 8003098:	f7fd fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800309c:	b108      	cbz	r0, 80030a2 <__cvt+0x9e>
 800309e:	f8cd 901c 	str.w	r9, [sp, #28]
 80030a2:	2230      	movs	r2, #48	; 0x30
 80030a4:	9b07      	ldr	r3, [sp, #28]
 80030a6:	454b      	cmp	r3, r9
 80030a8:	d307      	bcc.n	80030ba <__cvt+0xb6>
 80030aa:	4630      	mov	r0, r6
 80030ac:	9b07      	ldr	r3, [sp, #28]
 80030ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80030b0:	1b9b      	subs	r3, r3, r6
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	b008      	add	sp, #32
 80030b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ba:	1c59      	adds	r1, r3, #1
 80030bc:	9107      	str	r1, [sp, #28]
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e7f0      	b.n	80030a4 <__cvt+0xa0>

080030c2 <__exponent>:
 80030c2:	4603      	mov	r3, r0
 80030c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030c6:	2900      	cmp	r1, #0
 80030c8:	f803 2b02 	strb.w	r2, [r3], #2
 80030cc:	bfb6      	itet	lt
 80030ce:	222d      	movlt	r2, #45	; 0x2d
 80030d0:	222b      	movge	r2, #43	; 0x2b
 80030d2:	4249      	neglt	r1, r1
 80030d4:	2909      	cmp	r1, #9
 80030d6:	7042      	strb	r2, [r0, #1]
 80030d8:	dd2b      	ble.n	8003132 <__exponent+0x70>
 80030da:	f10d 0407 	add.w	r4, sp, #7
 80030de:	46a4      	mov	ip, r4
 80030e0:	270a      	movs	r7, #10
 80030e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80030e6:	460a      	mov	r2, r1
 80030e8:	46a6      	mov	lr, r4
 80030ea:	fb07 1516 	mls	r5, r7, r6, r1
 80030ee:	2a63      	cmp	r2, #99	; 0x63
 80030f0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80030f4:	4631      	mov	r1, r6
 80030f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80030fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80030fe:	dcf0      	bgt.n	80030e2 <__exponent+0x20>
 8003100:	3130      	adds	r1, #48	; 0x30
 8003102:	f1ae 0502 	sub.w	r5, lr, #2
 8003106:	f804 1c01 	strb.w	r1, [r4, #-1]
 800310a:	4629      	mov	r1, r5
 800310c:	1c44      	adds	r4, r0, #1
 800310e:	4561      	cmp	r1, ip
 8003110:	d30a      	bcc.n	8003128 <__exponent+0x66>
 8003112:	f10d 0209 	add.w	r2, sp, #9
 8003116:	eba2 020e 	sub.w	r2, r2, lr
 800311a:	4565      	cmp	r5, ip
 800311c:	bf88      	it	hi
 800311e:	2200      	movhi	r2, #0
 8003120:	4413      	add	r3, r2
 8003122:	1a18      	subs	r0, r3, r0
 8003124:	b003      	add	sp, #12
 8003126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003128:	f811 2b01 	ldrb.w	r2, [r1], #1
 800312c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003130:	e7ed      	b.n	800310e <__exponent+0x4c>
 8003132:	2330      	movs	r3, #48	; 0x30
 8003134:	3130      	adds	r1, #48	; 0x30
 8003136:	7083      	strb	r3, [r0, #2]
 8003138:	70c1      	strb	r1, [r0, #3]
 800313a:	1d03      	adds	r3, r0, #4
 800313c:	e7f1      	b.n	8003122 <__exponent+0x60>
	...

08003140 <_printf_float>:
 8003140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003144:	b091      	sub	sp, #68	; 0x44
 8003146:	460c      	mov	r4, r1
 8003148:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800314c:	4616      	mov	r6, r2
 800314e:	461f      	mov	r7, r3
 8003150:	4605      	mov	r5, r0
 8003152:	f002 fe59 	bl	8005e08 <_localeconv_r>
 8003156:	6803      	ldr	r3, [r0, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	9309      	str	r3, [sp, #36]	; 0x24
 800315c:	f7fc fff8 	bl	8000150 <strlen>
 8003160:	2300      	movs	r3, #0
 8003162:	930e      	str	r3, [sp, #56]	; 0x38
 8003164:	f8d8 3000 	ldr.w	r3, [r8]
 8003168:	900a      	str	r0, [sp, #40]	; 0x28
 800316a:	3307      	adds	r3, #7
 800316c:	f023 0307 	bic.w	r3, r3, #7
 8003170:	f103 0208 	add.w	r2, r3, #8
 8003174:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003178:	f8d4 b000 	ldr.w	fp, [r4]
 800317c:	f8c8 2000 	str.w	r2, [r8]
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003188:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800318c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003190:	930b      	str	r3, [sp, #44]	; 0x2c
 8003192:	f04f 32ff 	mov.w	r2, #4294967295
 8003196:	4640      	mov	r0, r8
 8003198:	4b9c      	ldr	r3, [pc, #624]	; (800340c <_printf_float+0x2cc>)
 800319a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800319c:	f7fd fc36 	bl	8000a0c <__aeabi_dcmpun>
 80031a0:	bb70      	cbnz	r0, 8003200 <_printf_float+0xc0>
 80031a2:	f04f 32ff 	mov.w	r2, #4294967295
 80031a6:	4640      	mov	r0, r8
 80031a8:	4b98      	ldr	r3, [pc, #608]	; (800340c <_printf_float+0x2cc>)
 80031aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031ac:	f7fd fc10 	bl	80009d0 <__aeabi_dcmple>
 80031b0:	bb30      	cbnz	r0, 8003200 <_printf_float+0xc0>
 80031b2:	2200      	movs	r2, #0
 80031b4:	2300      	movs	r3, #0
 80031b6:	4640      	mov	r0, r8
 80031b8:	4651      	mov	r1, sl
 80031ba:	f7fd fbff 	bl	80009bc <__aeabi_dcmplt>
 80031be:	b110      	cbz	r0, 80031c6 <_printf_float+0x86>
 80031c0:	232d      	movs	r3, #45	; 0x2d
 80031c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031c6:	4b92      	ldr	r3, [pc, #584]	; (8003410 <_printf_float+0x2d0>)
 80031c8:	4892      	ldr	r0, [pc, #584]	; (8003414 <_printf_float+0x2d4>)
 80031ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80031ce:	bf94      	ite	ls
 80031d0:	4698      	movls	r8, r3
 80031d2:	4680      	movhi	r8, r0
 80031d4:	2303      	movs	r3, #3
 80031d6:	f04f 0a00 	mov.w	sl, #0
 80031da:	6123      	str	r3, [r4, #16]
 80031dc:	f02b 0304 	bic.w	r3, fp, #4
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	4633      	mov	r3, r6
 80031e4:	4621      	mov	r1, r4
 80031e6:	4628      	mov	r0, r5
 80031e8:	9700      	str	r7, [sp, #0]
 80031ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80031ec:	f000 f9d4 	bl	8003598 <_printf_common>
 80031f0:	3001      	adds	r0, #1
 80031f2:	f040 8090 	bne.w	8003316 <_printf_float+0x1d6>
 80031f6:	f04f 30ff 	mov.w	r0, #4294967295
 80031fa:	b011      	add	sp, #68	; 0x44
 80031fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003200:	4642      	mov	r2, r8
 8003202:	4653      	mov	r3, sl
 8003204:	4640      	mov	r0, r8
 8003206:	4651      	mov	r1, sl
 8003208:	f7fd fc00 	bl	8000a0c <__aeabi_dcmpun>
 800320c:	b148      	cbz	r0, 8003222 <_printf_float+0xe2>
 800320e:	f1ba 0f00 	cmp.w	sl, #0
 8003212:	bfb8      	it	lt
 8003214:	232d      	movlt	r3, #45	; 0x2d
 8003216:	4880      	ldr	r0, [pc, #512]	; (8003418 <_printf_float+0x2d8>)
 8003218:	bfb8      	it	lt
 800321a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800321e:	4b7f      	ldr	r3, [pc, #508]	; (800341c <_printf_float+0x2dc>)
 8003220:	e7d3      	b.n	80031ca <_printf_float+0x8a>
 8003222:	6863      	ldr	r3, [r4, #4]
 8003224:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	d142      	bne.n	80032b2 <_printf_float+0x172>
 800322c:	2306      	movs	r3, #6
 800322e:	6063      	str	r3, [r4, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	9206      	str	r2, [sp, #24]
 8003234:	aa0e      	add	r2, sp, #56	; 0x38
 8003236:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800323a:	aa0d      	add	r2, sp, #52	; 0x34
 800323c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003240:	9203      	str	r2, [sp, #12]
 8003242:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003246:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800324a:	6023      	str	r3, [r4, #0]
 800324c:	6863      	ldr	r3, [r4, #4]
 800324e:	4642      	mov	r2, r8
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	4628      	mov	r0, r5
 8003254:	4653      	mov	r3, sl
 8003256:	910b      	str	r1, [sp, #44]	; 0x2c
 8003258:	f7ff fed4 	bl	8003004 <__cvt>
 800325c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800325e:	4680      	mov	r8, r0
 8003260:	2947      	cmp	r1, #71	; 0x47
 8003262:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003264:	d108      	bne.n	8003278 <_printf_float+0x138>
 8003266:	1cc8      	adds	r0, r1, #3
 8003268:	db02      	blt.n	8003270 <_printf_float+0x130>
 800326a:	6863      	ldr	r3, [r4, #4]
 800326c:	4299      	cmp	r1, r3
 800326e:	dd40      	ble.n	80032f2 <_printf_float+0x1b2>
 8003270:	f1a9 0902 	sub.w	r9, r9, #2
 8003274:	fa5f f989 	uxtb.w	r9, r9
 8003278:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800327c:	d81f      	bhi.n	80032be <_printf_float+0x17e>
 800327e:	464a      	mov	r2, r9
 8003280:	3901      	subs	r1, #1
 8003282:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003286:	910d      	str	r1, [sp, #52]	; 0x34
 8003288:	f7ff ff1b 	bl	80030c2 <__exponent>
 800328c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800328e:	4682      	mov	sl, r0
 8003290:	1813      	adds	r3, r2, r0
 8003292:	2a01      	cmp	r2, #1
 8003294:	6123      	str	r3, [r4, #16]
 8003296:	dc02      	bgt.n	800329e <_printf_float+0x15e>
 8003298:	6822      	ldr	r2, [r4, #0]
 800329a:	07d2      	lsls	r2, r2, #31
 800329c:	d501      	bpl.n	80032a2 <_printf_float+0x162>
 800329e:	3301      	adds	r3, #1
 80032a0:	6123      	str	r3, [r4, #16]
 80032a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d09b      	beq.n	80031e2 <_printf_float+0xa2>
 80032aa:	232d      	movs	r3, #45	; 0x2d
 80032ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032b0:	e797      	b.n	80031e2 <_printf_float+0xa2>
 80032b2:	2947      	cmp	r1, #71	; 0x47
 80032b4:	d1bc      	bne.n	8003230 <_printf_float+0xf0>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ba      	bne.n	8003230 <_printf_float+0xf0>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e7b7      	b.n	800322e <_printf_float+0xee>
 80032be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80032c2:	d118      	bne.n	80032f6 <_printf_float+0x1b6>
 80032c4:	2900      	cmp	r1, #0
 80032c6:	6863      	ldr	r3, [r4, #4]
 80032c8:	dd0b      	ble.n	80032e2 <_printf_float+0x1a2>
 80032ca:	6121      	str	r1, [r4, #16]
 80032cc:	b913      	cbnz	r3, 80032d4 <_printf_float+0x194>
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	07d0      	lsls	r0, r2, #31
 80032d2:	d502      	bpl.n	80032da <_printf_float+0x19a>
 80032d4:	3301      	adds	r3, #1
 80032d6:	440b      	add	r3, r1
 80032d8:	6123      	str	r3, [r4, #16]
 80032da:	f04f 0a00 	mov.w	sl, #0
 80032de:	65a1      	str	r1, [r4, #88]	; 0x58
 80032e0:	e7df      	b.n	80032a2 <_printf_float+0x162>
 80032e2:	b913      	cbnz	r3, 80032ea <_printf_float+0x1aa>
 80032e4:	6822      	ldr	r2, [r4, #0]
 80032e6:	07d2      	lsls	r2, r2, #31
 80032e8:	d501      	bpl.n	80032ee <_printf_float+0x1ae>
 80032ea:	3302      	adds	r3, #2
 80032ec:	e7f4      	b.n	80032d8 <_printf_float+0x198>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e7f2      	b.n	80032d8 <_printf_float+0x198>
 80032f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80032f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032f8:	4299      	cmp	r1, r3
 80032fa:	db05      	blt.n	8003308 <_printf_float+0x1c8>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	6121      	str	r1, [r4, #16]
 8003300:	07d8      	lsls	r0, r3, #31
 8003302:	d5ea      	bpl.n	80032da <_printf_float+0x19a>
 8003304:	1c4b      	adds	r3, r1, #1
 8003306:	e7e7      	b.n	80032d8 <_printf_float+0x198>
 8003308:	2900      	cmp	r1, #0
 800330a:	bfcc      	ite	gt
 800330c:	2201      	movgt	r2, #1
 800330e:	f1c1 0202 	rsble	r2, r1, #2
 8003312:	4413      	add	r3, r2
 8003314:	e7e0      	b.n	80032d8 <_printf_float+0x198>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	055a      	lsls	r2, r3, #21
 800331a:	d407      	bmi.n	800332c <_printf_float+0x1ec>
 800331c:	6923      	ldr	r3, [r4, #16]
 800331e:	4642      	mov	r2, r8
 8003320:	4631      	mov	r1, r6
 8003322:	4628      	mov	r0, r5
 8003324:	47b8      	blx	r7
 8003326:	3001      	adds	r0, #1
 8003328:	d12b      	bne.n	8003382 <_printf_float+0x242>
 800332a:	e764      	b.n	80031f6 <_printf_float+0xb6>
 800332c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003330:	f240 80dd 	bls.w	80034ee <_printf_float+0x3ae>
 8003334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003338:	2200      	movs	r2, #0
 800333a:	2300      	movs	r3, #0
 800333c:	f7fd fb34 	bl	80009a8 <__aeabi_dcmpeq>
 8003340:	2800      	cmp	r0, #0
 8003342:	d033      	beq.n	80033ac <_printf_float+0x26c>
 8003344:	2301      	movs	r3, #1
 8003346:	4631      	mov	r1, r6
 8003348:	4628      	mov	r0, r5
 800334a:	4a35      	ldr	r2, [pc, #212]	; (8003420 <_printf_float+0x2e0>)
 800334c:	47b8      	blx	r7
 800334e:	3001      	adds	r0, #1
 8003350:	f43f af51 	beq.w	80031f6 <_printf_float+0xb6>
 8003354:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003358:	429a      	cmp	r2, r3
 800335a:	db02      	blt.n	8003362 <_printf_float+0x222>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	07d8      	lsls	r0, r3, #31
 8003360:	d50f      	bpl.n	8003382 <_printf_float+0x242>
 8003362:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003366:	4631      	mov	r1, r6
 8003368:	4628      	mov	r0, r5
 800336a:	47b8      	blx	r7
 800336c:	3001      	adds	r0, #1
 800336e:	f43f af42 	beq.w	80031f6 <_printf_float+0xb6>
 8003372:	f04f 0800 	mov.w	r8, #0
 8003376:	f104 091a 	add.w	r9, r4, #26
 800337a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800337c:	3b01      	subs	r3, #1
 800337e:	4543      	cmp	r3, r8
 8003380:	dc09      	bgt.n	8003396 <_printf_float+0x256>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	079b      	lsls	r3, r3, #30
 8003386:	f100 8102 	bmi.w	800358e <_printf_float+0x44e>
 800338a:	68e0      	ldr	r0, [r4, #12]
 800338c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800338e:	4298      	cmp	r0, r3
 8003390:	bfb8      	it	lt
 8003392:	4618      	movlt	r0, r3
 8003394:	e731      	b.n	80031fa <_printf_float+0xba>
 8003396:	2301      	movs	r3, #1
 8003398:	464a      	mov	r2, r9
 800339a:	4631      	mov	r1, r6
 800339c:	4628      	mov	r0, r5
 800339e:	47b8      	blx	r7
 80033a0:	3001      	adds	r0, #1
 80033a2:	f43f af28 	beq.w	80031f6 <_printf_float+0xb6>
 80033a6:	f108 0801 	add.w	r8, r8, #1
 80033aa:	e7e6      	b.n	800337a <_printf_float+0x23a>
 80033ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	dc38      	bgt.n	8003424 <_printf_float+0x2e4>
 80033b2:	2301      	movs	r3, #1
 80033b4:	4631      	mov	r1, r6
 80033b6:	4628      	mov	r0, r5
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <_printf_float+0x2e0>)
 80033ba:	47b8      	blx	r7
 80033bc:	3001      	adds	r0, #1
 80033be:	f43f af1a 	beq.w	80031f6 <_printf_float+0xb6>
 80033c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033c6:	4313      	orrs	r3, r2
 80033c8:	d102      	bne.n	80033d0 <_printf_float+0x290>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	07d9      	lsls	r1, r3, #31
 80033ce:	d5d8      	bpl.n	8003382 <_printf_float+0x242>
 80033d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033d4:	4631      	mov	r1, r6
 80033d6:	4628      	mov	r0, r5
 80033d8:	47b8      	blx	r7
 80033da:	3001      	adds	r0, #1
 80033dc:	f43f af0b 	beq.w	80031f6 <_printf_float+0xb6>
 80033e0:	f04f 0900 	mov.w	r9, #0
 80033e4:	f104 0a1a 	add.w	sl, r4, #26
 80033e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033ea:	425b      	negs	r3, r3
 80033ec:	454b      	cmp	r3, r9
 80033ee:	dc01      	bgt.n	80033f4 <_printf_float+0x2b4>
 80033f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033f2:	e794      	b.n	800331e <_printf_float+0x1de>
 80033f4:	2301      	movs	r3, #1
 80033f6:	4652      	mov	r2, sl
 80033f8:	4631      	mov	r1, r6
 80033fa:	4628      	mov	r0, r5
 80033fc:	47b8      	blx	r7
 80033fe:	3001      	adds	r0, #1
 8003400:	f43f aef9 	beq.w	80031f6 <_printf_float+0xb6>
 8003404:	f109 0901 	add.w	r9, r9, #1
 8003408:	e7ee      	b.n	80033e8 <_printf_float+0x2a8>
 800340a:	bf00      	nop
 800340c:	7fefffff 	.word	0x7fefffff
 8003410:	080078dc 	.word	0x080078dc
 8003414:	080078e0 	.word	0x080078e0
 8003418:	080078e8 	.word	0x080078e8
 800341c:	080078e4 	.word	0x080078e4
 8003420:	080078ec 	.word	0x080078ec
 8003424:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003426:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003428:	429a      	cmp	r2, r3
 800342a:	bfa8      	it	ge
 800342c:	461a      	movge	r2, r3
 800342e:	2a00      	cmp	r2, #0
 8003430:	4691      	mov	r9, r2
 8003432:	dc37      	bgt.n	80034a4 <_printf_float+0x364>
 8003434:	f04f 0b00 	mov.w	fp, #0
 8003438:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800343c:	f104 021a 	add.w	r2, r4, #26
 8003440:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003444:	ebaa 0309 	sub.w	r3, sl, r9
 8003448:	455b      	cmp	r3, fp
 800344a:	dc33      	bgt.n	80034b4 <_printf_float+0x374>
 800344c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003450:	429a      	cmp	r2, r3
 8003452:	db3b      	blt.n	80034cc <_printf_float+0x38c>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	07da      	lsls	r2, r3, #31
 8003458:	d438      	bmi.n	80034cc <_printf_float+0x38c>
 800345a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800345c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800345e:	eba3 020a 	sub.w	r2, r3, sl
 8003462:	eba3 0901 	sub.w	r9, r3, r1
 8003466:	4591      	cmp	r9, r2
 8003468:	bfa8      	it	ge
 800346a:	4691      	movge	r9, r2
 800346c:	f1b9 0f00 	cmp.w	r9, #0
 8003470:	dc34      	bgt.n	80034dc <_printf_float+0x39c>
 8003472:	f04f 0800 	mov.w	r8, #0
 8003476:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800347a:	f104 0a1a 	add.w	sl, r4, #26
 800347e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	eba3 0309 	sub.w	r3, r3, r9
 8003488:	4543      	cmp	r3, r8
 800348a:	f77f af7a 	ble.w	8003382 <_printf_float+0x242>
 800348e:	2301      	movs	r3, #1
 8003490:	4652      	mov	r2, sl
 8003492:	4631      	mov	r1, r6
 8003494:	4628      	mov	r0, r5
 8003496:	47b8      	blx	r7
 8003498:	3001      	adds	r0, #1
 800349a:	f43f aeac 	beq.w	80031f6 <_printf_float+0xb6>
 800349e:	f108 0801 	add.w	r8, r8, #1
 80034a2:	e7ec      	b.n	800347e <_printf_float+0x33e>
 80034a4:	4613      	mov	r3, r2
 80034a6:	4631      	mov	r1, r6
 80034a8:	4642      	mov	r2, r8
 80034aa:	4628      	mov	r0, r5
 80034ac:	47b8      	blx	r7
 80034ae:	3001      	adds	r0, #1
 80034b0:	d1c0      	bne.n	8003434 <_printf_float+0x2f4>
 80034b2:	e6a0      	b.n	80031f6 <_printf_float+0xb6>
 80034b4:	2301      	movs	r3, #1
 80034b6:	4631      	mov	r1, r6
 80034b8:	4628      	mov	r0, r5
 80034ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80034bc:	47b8      	blx	r7
 80034be:	3001      	adds	r0, #1
 80034c0:	f43f ae99 	beq.w	80031f6 <_printf_float+0xb6>
 80034c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034c6:	f10b 0b01 	add.w	fp, fp, #1
 80034ca:	e7b9      	b.n	8003440 <_printf_float+0x300>
 80034cc:	4631      	mov	r1, r6
 80034ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034d2:	4628      	mov	r0, r5
 80034d4:	47b8      	blx	r7
 80034d6:	3001      	adds	r0, #1
 80034d8:	d1bf      	bne.n	800345a <_printf_float+0x31a>
 80034da:	e68c      	b.n	80031f6 <_printf_float+0xb6>
 80034dc:	464b      	mov	r3, r9
 80034de:	4631      	mov	r1, r6
 80034e0:	4628      	mov	r0, r5
 80034e2:	eb08 020a 	add.w	r2, r8, sl
 80034e6:	47b8      	blx	r7
 80034e8:	3001      	adds	r0, #1
 80034ea:	d1c2      	bne.n	8003472 <_printf_float+0x332>
 80034ec:	e683      	b.n	80031f6 <_printf_float+0xb6>
 80034ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034f0:	2a01      	cmp	r2, #1
 80034f2:	dc01      	bgt.n	80034f8 <_printf_float+0x3b8>
 80034f4:	07db      	lsls	r3, r3, #31
 80034f6:	d537      	bpl.n	8003568 <_printf_float+0x428>
 80034f8:	2301      	movs	r3, #1
 80034fa:	4642      	mov	r2, r8
 80034fc:	4631      	mov	r1, r6
 80034fe:	4628      	mov	r0, r5
 8003500:	47b8      	blx	r7
 8003502:	3001      	adds	r0, #1
 8003504:	f43f ae77 	beq.w	80031f6 <_printf_float+0xb6>
 8003508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800350c:	4631      	mov	r1, r6
 800350e:	4628      	mov	r0, r5
 8003510:	47b8      	blx	r7
 8003512:	3001      	adds	r0, #1
 8003514:	f43f ae6f 	beq.w	80031f6 <_printf_float+0xb6>
 8003518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800351c:	2200      	movs	r2, #0
 800351e:	2300      	movs	r3, #0
 8003520:	f7fd fa42 	bl	80009a8 <__aeabi_dcmpeq>
 8003524:	b9d8      	cbnz	r0, 800355e <_printf_float+0x41e>
 8003526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003528:	f108 0201 	add.w	r2, r8, #1
 800352c:	3b01      	subs	r3, #1
 800352e:	4631      	mov	r1, r6
 8003530:	4628      	mov	r0, r5
 8003532:	47b8      	blx	r7
 8003534:	3001      	adds	r0, #1
 8003536:	d10e      	bne.n	8003556 <_printf_float+0x416>
 8003538:	e65d      	b.n	80031f6 <_printf_float+0xb6>
 800353a:	2301      	movs	r3, #1
 800353c:	464a      	mov	r2, r9
 800353e:	4631      	mov	r1, r6
 8003540:	4628      	mov	r0, r5
 8003542:	47b8      	blx	r7
 8003544:	3001      	adds	r0, #1
 8003546:	f43f ae56 	beq.w	80031f6 <_printf_float+0xb6>
 800354a:	f108 0801 	add.w	r8, r8, #1
 800354e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003550:	3b01      	subs	r3, #1
 8003552:	4543      	cmp	r3, r8
 8003554:	dcf1      	bgt.n	800353a <_printf_float+0x3fa>
 8003556:	4653      	mov	r3, sl
 8003558:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800355c:	e6e0      	b.n	8003320 <_printf_float+0x1e0>
 800355e:	f04f 0800 	mov.w	r8, #0
 8003562:	f104 091a 	add.w	r9, r4, #26
 8003566:	e7f2      	b.n	800354e <_printf_float+0x40e>
 8003568:	2301      	movs	r3, #1
 800356a:	4642      	mov	r2, r8
 800356c:	e7df      	b.n	800352e <_printf_float+0x3ee>
 800356e:	2301      	movs	r3, #1
 8003570:	464a      	mov	r2, r9
 8003572:	4631      	mov	r1, r6
 8003574:	4628      	mov	r0, r5
 8003576:	47b8      	blx	r7
 8003578:	3001      	adds	r0, #1
 800357a:	f43f ae3c 	beq.w	80031f6 <_printf_float+0xb6>
 800357e:	f108 0801 	add.w	r8, r8, #1
 8003582:	68e3      	ldr	r3, [r4, #12]
 8003584:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003586:	1a5b      	subs	r3, r3, r1
 8003588:	4543      	cmp	r3, r8
 800358a:	dcf0      	bgt.n	800356e <_printf_float+0x42e>
 800358c:	e6fd      	b.n	800338a <_printf_float+0x24a>
 800358e:	f04f 0800 	mov.w	r8, #0
 8003592:	f104 0919 	add.w	r9, r4, #25
 8003596:	e7f4      	b.n	8003582 <_printf_float+0x442>

08003598 <_printf_common>:
 8003598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800359c:	4616      	mov	r6, r2
 800359e:	4699      	mov	r9, r3
 80035a0:	688a      	ldr	r2, [r1, #8]
 80035a2:	690b      	ldr	r3, [r1, #16]
 80035a4:	4607      	mov	r7, r0
 80035a6:	4293      	cmp	r3, r2
 80035a8:	bfb8      	it	lt
 80035aa:	4613      	movlt	r3, r2
 80035ac:	6033      	str	r3, [r6, #0]
 80035ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035b2:	460c      	mov	r4, r1
 80035b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035b8:	b10a      	cbz	r2, 80035be <_printf_common+0x26>
 80035ba:	3301      	adds	r3, #1
 80035bc:	6033      	str	r3, [r6, #0]
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	0699      	lsls	r1, r3, #26
 80035c2:	bf42      	ittt	mi
 80035c4:	6833      	ldrmi	r3, [r6, #0]
 80035c6:	3302      	addmi	r3, #2
 80035c8:	6033      	strmi	r3, [r6, #0]
 80035ca:	6825      	ldr	r5, [r4, #0]
 80035cc:	f015 0506 	ands.w	r5, r5, #6
 80035d0:	d106      	bne.n	80035e0 <_printf_common+0x48>
 80035d2:	f104 0a19 	add.w	sl, r4, #25
 80035d6:	68e3      	ldr	r3, [r4, #12]
 80035d8:	6832      	ldr	r2, [r6, #0]
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	42ab      	cmp	r3, r5
 80035de:	dc28      	bgt.n	8003632 <_printf_common+0x9a>
 80035e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035e4:	1e13      	subs	r3, r2, #0
 80035e6:	6822      	ldr	r2, [r4, #0]
 80035e8:	bf18      	it	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	0692      	lsls	r2, r2, #26
 80035ee:	d42d      	bmi.n	800364c <_printf_common+0xb4>
 80035f0:	4649      	mov	r1, r9
 80035f2:	4638      	mov	r0, r7
 80035f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035f8:	47c0      	blx	r8
 80035fa:	3001      	adds	r0, #1
 80035fc:	d020      	beq.n	8003640 <_printf_common+0xa8>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	68e5      	ldr	r5, [r4, #12]
 8003602:	f003 0306 	and.w	r3, r3, #6
 8003606:	2b04      	cmp	r3, #4
 8003608:	bf18      	it	ne
 800360a:	2500      	movne	r5, #0
 800360c:	6832      	ldr	r2, [r6, #0]
 800360e:	f04f 0600 	mov.w	r6, #0
 8003612:	68a3      	ldr	r3, [r4, #8]
 8003614:	bf08      	it	eq
 8003616:	1aad      	subeq	r5, r5, r2
 8003618:	6922      	ldr	r2, [r4, #16]
 800361a:	bf08      	it	eq
 800361c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003620:	4293      	cmp	r3, r2
 8003622:	bfc4      	itt	gt
 8003624:	1a9b      	subgt	r3, r3, r2
 8003626:	18ed      	addgt	r5, r5, r3
 8003628:	341a      	adds	r4, #26
 800362a:	42b5      	cmp	r5, r6
 800362c:	d11a      	bne.n	8003664 <_printf_common+0xcc>
 800362e:	2000      	movs	r0, #0
 8003630:	e008      	b.n	8003644 <_printf_common+0xac>
 8003632:	2301      	movs	r3, #1
 8003634:	4652      	mov	r2, sl
 8003636:	4649      	mov	r1, r9
 8003638:	4638      	mov	r0, r7
 800363a:	47c0      	blx	r8
 800363c:	3001      	adds	r0, #1
 800363e:	d103      	bne.n	8003648 <_printf_common+0xb0>
 8003640:	f04f 30ff 	mov.w	r0, #4294967295
 8003644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003648:	3501      	adds	r5, #1
 800364a:	e7c4      	b.n	80035d6 <_printf_common+0x3e>
 800364c:	2030      	movs	r0, #48	; 0x30
 800364e:	18e1      	adds	r1, r4, r3
 8003650:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800365a:	4422      	add	r2, r4
 800365c:	3302      	adds	r3, #2
 800365e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003662:	e7c5      	b.n	80035f0 <_printf_common+0x58>
 8003664:	2301      	movs	r3, #1
 8003666:	4622      	mov	r2, r4
 8003668:	4649      	mov	r1, r9
 800366a:	4638      	mov	r0, r7
 800366c:	47c0      	blx	r8
 800366e:	3001      	adds	r0, #1
 8003670:	d0e6      	beq.n	8003640 <_printf_common+0xa8>
 8003672:	3601      	adds	r6, #1
 8003674:	e7d9      	b.n	800362a <_printf_common+0x92>
	...

08003678 <_printf_i>:
 8003678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800367c:	7e0f      	ldrb	r7, [r1, #24]
 800367e:	4691      	mov	r9, r2
 8003680:	2f78      	cmp	r7, #120	; 0x78
 8003682:	4680      	mov	r8, r0
 8003684:	460c      	mov	r4, r1
 8003686:	469a      	mov	sl, r3
 8003688:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800368a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800368e:	d807      	bhi.n	80036a0 <_printf_i+0x28>
 8003690:	2f62      	cmp	r7, #98	; 0x62
 8003692:	d80a      	bhi.n	80036aa <_printf_i+0x32>
 8003694:	2f00      	cmp	r7, #0
 8003696:	f000 80d9 	beq.w	800384c <_printf_i+0x1d4>
 800369a:	2f58      	cmp	r7, #88	; 0x58
 800369c:	f000 80a4 	beq.w	80037e8 <_printf_i+0x170>
 80036a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036a8:	e03a      	b.n	8003720 <_printf_i+0xa8>
 80036aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ae:	2b15      	cmp	r3, #21
 80036b0:	d8f6      	bhi.n	80036a0 <_printf_i+0x28>
 80036b2:	a101      	add	r1, pc, #4	; (adr r1, 80036b8 <_printf_i+0x40>)
 80036b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036b8:	08003711 	.word	0x08003711
 80036bc:	08003725 	.word	0x08003725
 80036c0:	080036a1 	.word	0x080036a1
 80036c4:	080036a1 	.word	0x080036a1
 80036c8:	080036a1 	.word	0x080036a1
 80036cc:	080036a1 	.word	0x080036a1
 80036d0:	08003725 	.word	0x08003725
 80036d4:	080036a1 	.word	0x080036a1
 80036d8:	080036a1 	.word	0x080036a1
 80036dc:	080036a1 	.word	0x080036a1
 80036e0:	080036a1 	.word	0x080036a1
 80036e4:	08003833 	.word	0x08003833
 80036e8:	08003755 	.word	0x08003755
 80036ec:	08003815 	.word	0x08003815
 80036f0:	080036a1 	.word	0x080036a1
 80036f4:	080036a1 	.word	0x080036a1
 80036f8:	08003855 	.word	0x08003855
 80036fc:	080036a1 	.word	0x080036a1
 8003700:	08003755 	.word	0x08003755
 8003704:	080036a1 	.word	0x080036a1
 8003708:	080036a1 	.word	0x080036a1
 800370c:	0800381d 	.word	0x0800381d
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	1d1a      	adds	r2, r3, #4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	602a      	str	r2, [r5, #0]
 8003718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800371c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003720:	2301      	movs	r3, #1
 8003722:	e0a4      	b.n	800386e <_printf_i+0x1f6>
 8003724:	6820      	ldr	r0, [r4, #0]
 8003726:	6829      	ldr	r1, [r5, #0]
 8003728:	0606      	lsls	r6, r0, #24
 800372a:	f101 0304 	add.w	r3, r1, #4
 800372e:	d50a      	bpl.n	8003746 <_printf_i+0xce>
 8003730:	680e      	ldr	r6, [r1, #0]
 8003732:	602b      	str	r3, [r5, #0]
 8003734:	2e00      	cmp	r6, #0
 8003736:	da03      	bge.n	8003740 <_printf_i+0xc8>
 8003738:	232d      	movs	r3, #45	; 0x2d
 800373a:	4276      	negs	r6, r6
 800373c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003740:	230a      	movs	r3, #10
 8003742:	485e      	ldr	r0, [pc, #376]	; (80038bc <_printf_i+0x244>)
 8003744:	e019      	b.n	800377a <_printf_i+0x102>
 8003746:	680e      	ldr	r6, [r1, #0]
 8003748:	f010 0f40 	tst.w	r0, #64	; 0x40
 800374c:	602b      	str	r3, [r5, #0]
 800374e:	bf18      	it	ne
 8003750:	b236      	sxthne	r6, r6
 8003752:	e7ef      	b.n	8003734 <_printf_i+0xbc>
 8003754:	682b      	ldr	r3, [r5, #0]
 8003756:	6820      	ldr	r0, [r4, #0]
 8003758:	1d19      	adds	r1, r3, #4
 800375a:	6029      	str	r1, [r5, #0]
 800375c:	0601      	lsls	r1, r0, #24
 800375e:	d501      	bpl.n	8003764 <_printf_i+0xec>
 8003760:	681e      	ldr	r6, [r3, #0]
 8003762:	e002      	b.n	800376a <_printf_i+0xf2>
 8003764:	0646      	lsls	r6, r0, #25
 8003766:	d5fb      	bpl.n	8003760 <_printf_i+0xe8>
 8003768:	881e      	ldrh	r6, [r3, #0]
 800376a:	2f6f      	cmp	r7, #111	; 0x6f
 800376c:	bf0c      	ite	eq
 800376e:	2308      	moveq	r3, #8
 8003770:	230a      	movne	r3, #10
 8003772:	4852      	ldr	r0, [pc, #328]	; (80038bc <_printf_i+0x244>)
 8003774:	2100      	movs	r1, #0
 8003776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800377a:	6865      	ldr	r5, [r4, #4]
 800377c:	2d00      	cmp	r5, #0
 800377e:	bfa8      	it	ge
 8003780:	6821      	ldrge	r1, [r4, #0]
 8003782:	60a5      	str	r5, [r4, #8]
 8003784:	bfa4      	itt	ge
 8003786:	f021 0104 	bicge.w	r1, r1, #4
 800378a:	6021      	strge	r1, [r4, #0]
 800378c:	b90e      	cbnz	r6, 8003792 <_printf_i+0x11a>
 800378e:	2d00      	cmp	r5, #0
 8003790:	d04d      	beq.n	800382e <_printf_i+0x1b6>
 8003792:	4615      	mov	r5, r2
 8003794:	fbb6 f1f3 	udiv	r1, r6, r3
 8003798:	fb03 6711 	mls	r7, r3, r1, r6
 800379c:	5dc7      	ldrb	r7, [r0, r7]
 800379e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037a2:	4637      	mov	r7, r6
 80037a4:	42bb      	cmp	r3, r7
 80037a6:	460e      	mov	r6, r1
 80037a8:	d9f4      	bls.n	8003794 <_printf_i+0x11c>
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d10b      	bne.n	80037c6 <_printf_i+0x14e>
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	07de      	lsls	r6, r3, #31
 80037b2:	d508      	bpl.n	80037c6 <_printf_i+0x14e>
 80037b4:	6923      	ldr	r3, [r4, #16]
 80037b6:	6861      	ldr	r1, [r4, #4]
 80037b8:	4299      	cmp	r1, r3
 80037ba:	bfde      	ittt	le
 80037bc:	2330      	movle	r3, #48	; 0x30
 80037be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037c6:	1b52      	subs	r2, r2, r5
 80037c8:	6122      	str	r2, [r4, #16]
 80037ca:	464b      	mov	r3, r9
 80037cc:	4621      	mov	r1, r4
 80037ce:	4640      	mov	r0, r8
 80037d0:	f8cd a000 	str.w	sl, [sp]
 80037d4:	aa03      	add	r2, sp, #12
 80037d6:	f7ff fedf 	bl	8003598 <_printf_common>
 80037da:	3001      	adds	r0, #1
 80037dc:	d14c      	bne.n	8003878 <_printf_i+0x200>
 80037de:	f04f 30ff 	mov.w	r0, #4294967295
 80037e2:	b004      	add	sp, #16
 80037e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e8:	4834      	ldr	r0, [pc, #208]	; (80038bc <_printf_i+0x244>)
 80037ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037ee:	6829      	ldr	r1, [r5, #0]
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80037f6:	6029      	str	r1, [r5, #0]
 80037f8:	061d      	lsls	r5, r3, #24
 80037fa:	d514      	bpl.n	8003826 <_printf_i+0x1ae>
 80037fc:	07df      	lsls	r7, r3, #31
 80037fe:	bf44      	itt	mi
 8003800:	f043 0320 	orrmi.w	r3, r3, #32
 8003804:	6023      	strmi	r3, [r4, #0]
 8003806:	b91e      	cbnz	r6, 8003810 <_printf_i+0x198>
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	f023 0320 	bic.w	r3, r3, #32
 800380e:	6023      	str	r3, [r4, #0]
 8003810:	2310      	movs	r3, #16
 8003812:	e7af      	b.n	8003774 <_printf_i+0xfc>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	f043 0320 	orr.w	r3, r3, #32
 800381a:	6023      	str	r3, [r4, #0]
 800381c:	2378      	movs	r3, #120	; 0x78
 800381e:	4828      	ldr	r0, [pc, #160]	; (80038c0 <_printf_i+0x248>)
 8003820:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003824:	e7e3      	b.n	80037ee <_printf_i+0x176>
 8003826:	0659      	lsls	r1, r3, #25
 8003828:	bf48      	it	mi
 800382a:	b2b6      	uxthmi	r6, r6
 800382c:	e7e6      	b.n	80037fc <_printf_i+0x184>
 800382e:	4615      	mov	r5, r2
 8003830:	e7bb      	b.n	80037aa <_printf_i+0x132>
 8003832:	682b      	ldr	r3, [r5, #0]
 8003834:	6826      	ldr	r6, [r4, #0]
 8003836:	1d18      	adds	r0, r3, #4
 8003838:	6961      	ldr	r1, [r4, #20]
 800383a:	6028      	str	r0, [r5, #0]
 800383c:	0635      	lsls	r5, r6, #24
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	d501      	bpl.n	8003846 <_printf_i+0x1ce>
 8003842:	6019      	str	r1, [r3, #0]
 8003844:	e002      	b.n	800384c <_printf_i+0x1d4>
 8003846:	0670      	lsls	r0, r6, #25
 8003848:	d5fb      	bpl.n	8003842 <_printf_i+0x1ca>
 800384a:	8019      	strh	r1, [r3, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	4615      	mov	r5, r2
 8003850:	6123      	str	r3, [r4, #16]
 8003852:	e7ba      	b.n	80037ca <_printf_i+0x152>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	2100      	movs	r1, #0
 8003858:	1d1a      	adds	r2, r3, #4
 800385a:	602a      	str	r2, [r5, #0]
 800385c:	681d      	ldr	r5, [r3, #0]
 800385e:	6862      	ldr	r2, [r4, #4]
 8003860:	4628      	mov	r0, r5
 8003862:	f002 faef 	bl	8005e44 <memchr>
 8003866:	b108      	cbz	r0, 800386c <_printf_i+0x1f4>
 8003868:	1b40      	subs	r0, r0, r5
 800386a:	6060      	str	r0, [r4, #4]
 800386c:	6863      	ldr	r3, [r4, #4]
 800386e:	6123      	str	r3, [r4, #16]
 8003870:	2300      	movs	r3, #0
 8003872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003876:	e7a8      	b.n	80037ca <_printf_i+0x152>
 8003878:	462a      	mov	r2, r5
 800387a:	4649      	mov	r1, r9
 800387c:	4640      	mov	r0, r8
 800387e:	6923      	ldr	r3, [r4, #16]
 8003880:	47d0      	blx	sl
 8003882:	3001      	adds	r0, #1
 8003884:	d0ab      	beq.n	80037de <_printf_i+0x166>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	079b      	lsls	r3, r3, #30
 800388a:	d413      	bmi.n	80038b4 <_printf_i+0x23c>
 800388c:	68e0      	ldr	r0, [r4, #12]
 800388e:	9b03      	ldr	r3, [sp, #12]
 8003890:	4298      	cmp	r0, r3
 8003892:	bfb8      	it	lt
 8003894:	4618      	movlt	r0, r3
 8003896:	e7a4      	b.n	80037e2 <_printf_i+0x16a>
 8003898:	2301      	movs	r3, #1
 800389a:	4632      	mov	r2, r6
 800389c:	4649      	mov	r1, r9
 800389e:	4640      	mov	r0, r8
 80038a0:	47d0      	blx	sl
 80038a2:	3001      	adds	r0, #1
 80038a4:	d09b      	beq.n	80037de <_printf_i+0x166>
 80038a6:	3501      	adds	r5, #1
 80038a8:	68e3      	ldr	r3, [r4, #12]
 80038aa:	9903      	ldr	r1, [sp, #12]
 80038ac:	1a5b      	subs	r3, r3, r1
 80038ae:	42ab      	cmp	r3, r5
 80038b0:	dcf2      	bgt.n	8003898 <_printf_i+0x220>
 80038b2:	e7eb      	b.n	800388c <_printf_i+0x214>
 80038b4:	2500      	movs	r5, #0
 80038b6:	f104 0619 	add.w	r6, r4, #25
 80038ba:	e7f5      	b.n	80038a8 <_printf_i+0x230>
 80038bc:	080078ee 	.word	0x080078ee
 80038c0:	080078ff 	.word	0x080078ff

080038c4 <_scanf_float>:
 80038c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c8:	b087      	sub	sp, #28
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	688b      	ldr	r3, [r1, #8]
 80038ce:	4617      	mov	r7, r2
 80038d0:	1e5a      	subs	r2, r3, #1
 80038d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80038d6:	bf85      	ittet	hi
 80038d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80038dc:	195b      	addhi	r3, r3, r5
 80038de:	2300      	movls	r3, #0
 80038e0:	9302      	strhi	r3, [sp, #8]
 80038e2:	bf88      	it	hi
 80038e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80038e8:	468b      	mov	fp, r1
 80038ea:	f04f 0500 	mov.w	r5, #0
 80038ee:	bf8c      	ite	hi
 80038f0:	608b      	strhi	r3, [r1, #8]
 80038f2:	9302      	strls	r3, [sp, #8]
 80038f4:	680b      	ldr	r3, [r1, #0]
 80038f6:	4680      	mov	r8, r0
 80038f8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80038fc:	f84b 3b1c 	str.w	r3, [fp], #28
 8003900:	460c      	mov	r4, r1
 8003902:	465e      	mov	r6, fp
 8003904:	46aa      	mov	sl, r5
 8003906:	46a9      	mov	r9, r5
 8003908:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800390c:	9501      	str	r5, [sp, #4]
 800390e:	68a2      	ldr	r2, [r4, #8]
 8003910:	b152      	cbz	r2, 8003928 <_scanf_float+0x64>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b4e      	cmp	r3, #78	; 0x4e
 8003918:	d864      	bhi.n	80039e4 <_scanf_float+0x120>
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d83c      	bhi.n	8003998 <_scanf_float+0xd4>
 800391e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003922:	b2c8      	uxtb	r0, r1
 8003924:	280e      	cmp	r0, #14
 8003926:	d93a      	bls.n	800399e <_scanf_float+0xda>
 8003928:	f1b9 0f00 	cmp.w	r9, #0
 800392c:	d003      	beq.n	8003936 <_scanf_float+0x72>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800393a:	f1ba 0f01 	cmp.w	sl, #1
 800393e:	f200 8113 	bhi.w	8003b68 <_scanf_float+0x2a4>
 8003942:	455e      	cmp	r6, fp
 8003944:	f200 8105 	bhi.w	8003b52 <_scanf_float+0x28e>
 8003948:	2501      	movs	r5, #1
 800394a:	4628      	mov	r0, r5
 800394c:	b007      	add	sp, #28
 800394e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003952:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003956:	2a0d      	cmp	r2, #13
 8003958:	d8e6      	bhi.n	8003928 <_scanf_float+0x64>
 800395a:	a101      	add	r1, pc, #4	; (adr r1, 8003960 <_scanf_float+0x9c>)
 800395c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003960:	08003a9f 	.word	0x08003a9f
 8003964:	08003929 	.word	0x08003929
 8003968:	08003929 	.word	0x08003929
 800396c:	08003929 	.word	0x08003929
 8003970:	08003aff 	.word	0x08003aff
 8003974:	08003ad7 	.word	0x08003ad7
 8003978:	08003929 	.word	0x08003929
 800397c:	08003929 	.word	0x08003929
 8003980:	08003aad 	.word	0x08003aad
 8003984:	08003929 	.word	0x08003929
 8003988:	08003929 	.word	0x08003929
 800398c:	08003929 	.word	0x08003929
 8003990:	08003929 	.word	0x08003929
 8003994:	08003a65 	.word	0x08003a65
 8003998:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800399c:	e7db      	b.n	8003956 <_scanf_float+0x92>
 800399e:	290e      	cmp	r1, #14
 80039a0:	d8c2      	bhi.n	8003928 <_scanf_float+0x64>
 80039a2:	a001      	add	r0, pc, #4	; (adr r0, 80039a8 <_scanf_float+0xe4>)
 80039a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80039a8:	08003a57 	.word	0x08003a57
 80039ac:	08003929 	.word	0x08003929
 80039b0:	08003a57 	.word	0x08003a57
 80039b4:	08003aeb 	.word	0x08003aeb
 80039b8:	08003929 	.word	0x08003929
 80039bc:	08003a05 	.word	0x08003a05
 80039c0:	08003a41 	.word	0x08003a41
 80039c4:	08003a41 	.word	0x08003a41
 80039c8:	08003a41 	.word	0x08003a41
 80039cc:	08003a41 	.word	0x08003a41
 80039d0:	08003a41 	.word	0x08003a41
 80039d4:	08003a41 	.word	0x08003a41
 80039d8:	08003a41 	.word	0x08003a41
 80039dc:	08003a41 	.word	0x08003a41
 80039e0:	08003a41 	.word	0x08003a41
 80039e4:	2b6e      	cmp	r3, #110	; 0x6e
 80039e6:	d809      	bhi.n	80039fc <_scanf_float+0x138>
 80039e8:	2b60      	cmp	r3, #96	; 0x60
 80039ea:	d8b2      	bhi.n	8003952 <_scanf_float+0x8e>
 80039ec:	2b54      	cmp	r3, #84	; 0x54
 80039ee:	d077      	beq.n	8003ae0 <_scanf_float+0x21c>
 80039f0:	2b59      	cmp	r3, #89	; 0x59
 80039f2:	d199      	bne.n	8003928 <_scanf_float+0x64>
 80039f4:	2d07      	cmp	r5, #7
 80039f6:	d197      	bne.n	8003928 <_scanf_float+0x64>
 80039f8:	2508      	movs	r5, #8
 80039fa:	e029      	b.n	8003a50 <_scanf_float+0x18c>
 80039fc:	2b74      	cmp	r3, #116	; 0x74
 80039fe:	d06f      	beq.n	8003ae0 <_scanf_float+0x21c>
 8003a00:	2b79      	cmp	r3, #121	; 0x79
 8003a02:	e7f6      	b.n	80039f2 <_scanf_float+0x12e>
 8003a04:	6821      	ldr	r1, [r4, #0]
 8003a06:	05c8      	lsls	r0, r1, #23
 8003a08:	d51a      	bpl.n	8003a40 <_scanf_float+0x17c>
 8003a0a:	9b02      	ldr	r3, [sp, #8]
 8003a0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003a10:	6021      	str	r1, [r4, #0]
 8003a12:	f109 0901 	add.w	r9, r9, #1
 8003a16:	b11b      	cbz	r3, 8003a20 <_scanf_float+0x15c>
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	3201      	adds	r2, #1
 8003a1c:	9302      	str	r3, [sp, #8]
 8003a1e:	60a2      	str	r2, [r4, #8]
 8003a20:	68a3      	ldr	r3, [r4, #8]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	60a3      	str	r3, [r4, #8]
 8003a26:	6923      	ldr	r3, [r4, #16]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	6123      	str	r3, [r4, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	f340 8084 	ble.w	8003b40 <_scanf_float+0x27c>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	e766      	b.n	800390e <_scanf_float+0x4a>
 8003a40:	eb1a 0f05 	cmn.w	sl, r5
 8003a44:	f47f af70 	bne.w	8003928 <_scanf_float+0x64>
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003a4e:	6022      	str	r2, [r4, #0]
 8003a50:	f806 3b01 	strb.w	r3, [r6], #1
 8003a54:	e7e4      	b.n	8003a20 <_scanf_float+0x15c>
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	0610      	lsls	r0, r2, #24
 8003a5a:	f57f af65 	bpl.w	8003928 <_scanf_float+0x64>
 8003a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a62:	e7f4      	b.n	8003a4e <_scanf_float+0x18a>
 8003a64:	f1ba 0f00 	cmp.w	sl, #0
 8003a68:	d10e      	bne.n	8003a88 <_scanf_float+0x1c4>
 8003a6a:	f1b9 0f00 	cmp.w	r9, #0
 8003a6e:	d10e      	bne.n	8003a8e <_scanf_float+0x1ca>
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003a76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003a7a:	d108      	bne.n	8003a8e <_scanf_float+0x1ca>
 8003a7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003a80:	f04f 0a01 	mov.w	sl, #1
 8003a84:	6022      	str	r2, [r4, #0]
 8003a86:	e7e3      	b.n	8003a50 <_scanf_float+0x18c>
 8003a88:	f1ba 0f02 	cmp.w	sl, #2
 8003a8c:	d055      	beq.n	8003b3a <_scanf_float+0x276>
 8003a8e:	2d01      	cmp	r5, #1
 8003a90:	d002      	beq.n	8003a98 <_scanf_float+0x1d4>
 8003a92:	2d04      	cmp	r5, #4
 8003a94:	f47f af48 	bne.w	8003928 <_scanf_float+0x64>
 8003a98:	3501      	adds	r5, #1
 8003a9a:	b2ed      	uxtb	r5, r5
 8003a9c:	e7d8      	b.n	8003a50 <_scanf_float+0x18c>
 8003a9e:	f1ba 0f01 	cmp.w	sl, #1
 8003aa2:	f47f af41 	bne.w	8003928 <_scanf_float+0x64>
 8003aa6:	f04f 0a02 	mov.w	sl, #2
 8003aaa:	e7d1      	b.n	8003a50 <_scanf_float+0x18c>
 8003aac:	b97d      	cbnz	r5, 8003ace <_scanf_float+0x20a>
 8003aae:	f1b9 0f00 	cmp.w	r9, #0
 8003ab2:	f47f af3c 	bne.w	800392e <_scanf_float+0x6a>
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003abc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003ac0:	f47f af39 	bne.w	8003936 <_scanf_float+0x72>
 8003ac4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003ac8:	2501      	movs	r5, #1
 8003aca:	6022      	str	r2, [r4, #0]
 8003acc:	e7c0      	b.n	8003a50 <_scanf_float+0x18c>
 8003ace:	2d03      	cmp	r5, #3
 8003ad0:	d0e2      	beq.n	8003a98 <_scanf_float+0x1d4>
 8003ad2:	2d05      	cmp	r5, #5
 8003ad4:	e7de      	b.n	8003a94 <_scanf_float+0x1d0>
 8003ad6:	2d02      	cmp	r5, #2
 8003ad8:	f47f af26 	bne.w	8003928 <_scanf_float+0x64>
 8003adc:	2503      	movs	r5, #3
 8003ade:	e7b7      	b.n	8003a50 <_scanf_float+0x18c>
 8003ae0:	2d06      	cmp	r5, #6
 8003ae2:	f47f af21 	bne.w	8003928 <_scanf_float+0x64>
 8003ae6:	2507      	movs	r5, #7
 8003ae8:	e7b2      	b.n	8003a50 <_scanf_float+0x18c>
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	0591      	lsls	r1, r2, #22
 8003aee:	f57f af1b 	bpl.w	8003928 <_scanf_float+0x64>
 8003af2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003af6:	6022      	str	r2, [r4, #0]
 8003af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8003afc:	e7a8      	b.n	8003a50 <_scanf_float+0x18c>
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003b04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003b08:	d006      	beq.n	8003b18 <_scanf_float+0x254>
 8003b0a:	0550      	lsls	r0, r2, #21
 8003b0c:	f57f af0c 	bpl.w	8003928 <_scanf_float+0x64>
 8003b10:	f1b9 0f00 	cmp.w	r9, #0
 8003b14:	f43f af0f 	beq.w	8003936 <_scanf_float+0x72>
 8003b18:	0591      	lsls	r1, r2, #22
 8003b1a:	bf58      	it	pl
 8003b1c:	9901      	ldrpl	r1, [sp, #4]
 8003b1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003b22:	bf58      	it	pl
 8003b24:	eba9 0101 	subpl.w	r1, r9, r1
 8003b28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003b2c:	f04f 0900 	mov.w	r9, #0
 8003b30:	bf58      	it	pl
 8003b32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003b36:	6022      	str	r2, [r4, #0]
 8003b38:	e78a      	b.n	8003a50 <_scanf_float+0x18c>
 8003b3a:	f04f 0a03 	mov.w	sl, #3
 8003b3e:	e787      	b.n	8003a50 <_scanf_float+0x18c>
 8003b40:	4639      	mov	r1, r7
 8003b42:	4640      	mov	r0, r8
 8003b44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003b48:	4798      	blx	r3
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	f43f aedf 	beq.w	800390e <_scanf_float+0x4a>
 8003b50:	e6ea      	b.n	8003928 <_scanf_float+0x64>
 8003b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b56:	463a      	mov	r2, r7
 8003b58:	4640      	mov	r0, r8
 8003b5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b5e:	4798      	blx	r3
 8003b60:	6923      	ldr	r3, [r4, #16]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	6123      	str	r3, [r4, #16]
 8003b66:	e6ec      	b.n	8003942 <_scanf_float+0x7e>
 8003b68:	1e6b      	subs	r3, r5, #1
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d825      	bhi.n	8003bba <_scanf_float+0x2f6>
 8003b6e:	2d02      	cmp	r5, #2
 8003b70:	d836      	bhi.n	8003be0 <_scanf_float+0x31c>
 8003b72:	455e      	cmp	r6, fp
 8003b74:	f67f aee8 	bls.w	8003948 <_scanf_float+0x84>
 8003b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b7c:	463a      	mov	r2, r7
 8003b7e:	4640      	mov	r0, r8
 8003b80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b84:	4798      	blx	r3
 8003b86:	6923      	ldr	r3, [r4, #16]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	6123      	str	r3, [r4, #16]
 8003b8c:	e7f1      	b.n	8003b72 <_scanf_float+0x2ae>
 8003b8e:	9802      	ldr	r0, [sp, #8]
 8003b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003b98:	463a      	mov	r2, r7
 8003b9a:	9002      	str	r0, [sp, #8]
 8003b9c:	4640      	mov	r0, r8
 8003b9e:	4798      	blx	r3
 8003ba0:	6923      	ldr	r3, [r4, #16]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	6123      	str	r3, [r4, #16]
 8003ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003baa:	fa5f fa8a 	uxtb.w	sl, sl
 8003bae:	f1ba 0f02 	cmp.w	sl, #2
 8003bb2:	d1ec      	bne.n	8003b8e <_scanf_float+0x2ca>
 8003bb4:	3d03      	subs	r5, #3
 8003bb6:	b2ed      	uxtb	r5, r5
 8003bb8:	1b76      	subs	r6, r6, r5
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	05da      	lsls	r2, r3, #23
 8003bbe:	d52f      	bpl.n	8003c20 <_scanf_float+0x35c>
 8003bc0:	055b      	lsls	r3, r3, #21
 8003bc2:	d510      	bpl.n	8003be6 <_scanf_float+0x322>
 8003bc4:	455e      	cmp	r6, fp
 8003bc6:	f67f aebf 	bls.w	8003948 <_scanf_float+0x84>
 8003bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003bce:	463a      	mov	r2, r7
 8003bd0:	4640      	mov	r0, r8
 8003bd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003bd6:	4798      	blx	r3
 8003bd8:	6923      	ldr	r3, [r4, #16]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	6123      	str	r3, [r4, #16]
 8003bde:	e7f1      	b.n	8003bc4 <_scanf_float+0x300>
 8003be0:	46aa      	mov	sl, r5
 8003be2:	9602      	str	r6, [sp, #8]
 8003be4:	e7df      	b.n	8003ba6 <_scanf_float+0x2e2>
 8003be6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003bea:	6923      	ldr	r3, [r4, #16]
 8003bec:	2965      	cmp	r1, #101	; 0x65
 8003bee:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bf2:	f106 35ff 	add.w	r5, r6, #4294967295
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	d00c      	beq.n	8003c14 <_scanf_float+0x350>
 8003bfa:	2945      	cmp	r1, #69	; 0x45
 8003bfc:	d00a      	beq.n	8003c14 <_scanf_float+0x350>
 8003bfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c02:	463a      	mov	r2, r7
 8003c04:	4640      	mov	r0, r8
 8003c06:	4798      	blx	r3
 8003c08:	6923      	ldr	r3, [r4, #16]
 8003c0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	1eb5      	subs	r5, r6, #2
 8003c12:	6123      	str	r3, [r4, #16]
 8003c14:	463a      	mov	r2, r7
 8003c16:	4640      	mov	r0, r8
 8003c18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c1c:	4798      	blx	r3
 8003c1e:	462e      	mov	r6, r5
 8003c20:	6825      	ldr	r5, [r4, #0]
 8003c22:	f015 0510 	ands.w	r5, r5, #16
 8003c26:	d155      	bne.n	8003cd4 <_scanf_float+0x410>
 8003c28:	7035      	strb	r5, [r6, #0]
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c34:	d11b      	bne.n	8003c6e <_scanf_float+0x3aa>
 8003c36:	9b01      	ldr	r3, [sp, #4]
 8003c38:	454b      	cmp	r3, r9
 8003c3a:	eba3 0209 	sub.w	r2, r3, r9
 8003c3e:	d123      	bne.n	8003c88 <_scanf_float+0x3c4>
 8003c40:	2200      	movs	r2, #0
 8003c42:	4659      	mov	r1, fp
 8003c44:	4640      	mov	r0, r8
 8003c46:	f000 fe7b 	bl	8004940 <_strtod_r>
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	f012 0f02 	tst.w	r2, #2
 8003c52:	4606      	mov	r6, r0
 8003c54:	460f      	mov	r7, r1
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	d021      	beq.n	8003c9e <_scanf_float+0x3da>
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	9903      	ldr	r1, [sp, #12]
 8003c5e:	600a      	str	r2, [r1, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	e9c3 6700 	strd	r6, r7, [r3]
 8003c66:	68e3      	ldr	r3, [r4, #12]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	60e3      	str	r3, [r4, #12]
 8003c6c:	e66d      	b.n	800394a <_scanf_float+0x86>
 8003c6e:	9b04      	ldr	r3, [sp, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0e5      	beq.n	8003c40 <_scanf_float+0x37c>
 8003c74:	9905      	ldr	r1, [sp, #20]
 8003c76:	230a      	movs	r3, #10
 8003c78:	462a      	mov	r2, r5
 8003c7a:	4640      	mov	r0, r8
 8003c7c:	3101      	adds	r1, #1
 8003c7e:	f000 fee1 	bl	8004a44 <_strtol_r>
 8003c82:	9b04      	ldr	r3, [sp, #16]
 8003c84:	9e05      	ldr	r6, [sp, #20]
 8003c86:	1ac2      	subs	r2, r0, r3
 8003c88:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003c8c:	429e      	cmp	r6, r3
 8003c8e:	bf28      	it	cs
 8003c90:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003c94:	4630      	mov	r0, r6
 8003c96:	4910      	ldr	r1, [pc, #64]	; (8003cd8 <_scanf_float+0x414>)
 8003c98:	f000 f826 	bl	8003ce8 <siprintf>
 8003c9c:	e7d0      	b.n	8003c40 <_scanf_float+0x37c>
 8003c9e:	f012 0f04 	tst.w	r2, #4
 8003ca2:	f103 0204 	add.w	r2, r3, #4
 8003ca6:	d1d9      	bne.n	8003c5c <_scanf_float+0x398>
 8003ca8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003cac:	f8cc 2000 	str.w	r2, [ip]
 8003cb0:	f8d3 8000 	ldr.w	r8, [r3]
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	f7fc fea8 	bl	8000a0c <__aeabi_dcmpun>
 8003cbc:	b128      	cbz	r0, 8003cca <_scanf_float+0x406>
 8003cbe:	4807      	ldr	r0, [pc, #28]	; (8003cdc <_scanf_float+0x418>)
 8003cc0:	f000 f80e 	bl	8003ce0 <nanf>
 8003cc4:	f8c8 0000 	str.w	r0, [r8]
 8003cc8:	e7cd      	b.n	8003c66 <_scanf_float+0x3a2>
 8003cca:	4630      	mov	r0, r6
 8003ccc:	4639      	mov	r1, r7
 8003cce:	f7fc fefb 	bl	8000ac8 <__aeabi_d2f>
 8003cd2:	e7f7      	b.n	8003cc4 <_scanf_float+0x400>
 8003cd4:	2500      	movs	r5, #0
 8003cd6:	e638      	b.n	800394a <_scanf_float+0x86>
 8003cd8:	08007910 	.word	0x08007910
 8003cdc:	08007d18 	.word	0x08007d18

08003ce0 <nanf>:
 8003ce0:	4800      	ldr	r0, [pc, #0]	; (8003ce4 <nanf+0x4>)
 8003ce2:	4770      	bx	lr
 8003ce4:	7fc00000 	.word	0x7fc00000

08003ce8 <siprintf>:
 8003ce8:	b40e      	push	{r1, r2, r3}
 8003cea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cee:	b500      	push	{lr}
 8003cf0:	b09c      	sub	sp, #112	; 0x70
 8003cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8003cf4:	9002      	str	r0, [sp, #8]
 8003cf6:	9006      	str	r0, [sp, #24]
 8003cf8:	9107      	str	r1, [sp, #28]
 8003cfa:	9104      	str	r1, [sp, #16]
 8003cfc:	4808      	ldr	r0, [pc, #32]	; (8003d20 <siprintf+0x38>)
 8003cfe:	4909      	ldr	r1, [pc, #36]	; (8003d24 <siprintf+0x3c>)
 8003d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d04:	9105      	str	r1, [sp, #20]
 8003d06:	6800      	ldr	r0, [r0, #0]
 8003d08:	a902      	add	r1, sp, #8
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	f002 feba 	bl	8006a84 <_svfiprintf_r>
 8003d10:	2200      	movs	r2, #0
 8003d12:	9b02      	ldr	r3, [sp, #8]
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	b01c      	add	sp, #112	; 0x70
 8003d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d1c:	b003      	add	sp, #12
 8003d1e:	4770      	bx	lr
 8003d20:	20000014 	.word	0x20000014
 8003d24:	ffff0208 	.word	0xffff0208

08003d28 <sulp>:
 8003d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2c:	460f      	mov	r7, r1
 8003d2e:	4690      	mov	r8, r2
 8003d30:	f002 fc14 	bl	800655c <__ulp>
 8003d34:	4604      	mov	r4, r0
 8003d36:	460d      	mov	r5, r1
 8003d38:	f1b8 0f00 	cmp.w	r8, #0
 8003d3c:	d011      	beq.n	8003d62 <sulp+0x3a>
 8003d3e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003d42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	dd0b      	ble.n	8003d62 <sulp+0x3a>
 8003d4a:	2400      	movs	r4, #0
 8003d4c:	051b      	lsls	r3, r3, #20
 8003d4e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003d52:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	f7fc fbbd 	bl	80004d8 <__aeabi_dmul>
 8003d5e:	4604      	mov	r4, r0
 8003d60:	460d      	mov	r5, r1
 8003d62:	4620      	mov	r0, r4
 8003d64:	4629      	mov	r1, r5
 8003d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d6a:	0000      	movs	r0, r0
 8003d6c:	0000      	movs	r0, r0
	...

08003d70 <_strtod_l>:
 8003d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d74:	469b      	mov	fp, r3
 8003d76:	2300      	movs	r3, #0
 8003d78:	b09f      	sub	sp, #124	; 0x7c
 8003d7a:	931a      	str	r3, [sp, #104]	; 0x68
 8003d7c:	4b9e      	ldr	r3, [pc, #632]	; (8003ff8 <_strtod_l+0x288>)
 8003d7e:	4682      	mov	sl, r0
 8003d80:	681f      	ldr	r7, [r3, #0]
 8003d82:	460e      	mov	r6, r1
 8003d84:	4638      	mov	r0, r7
 8003d86:	9215      	str	r2, [sp, #84]	; 0x54
 8003d88:	f7fc f9e2 	bl	8000150 <strlen>
 8003d8c:	f04f 0800 	mov.w	r8, #0
 8003d90:	4604      	mov	r4, r0
 8003d92:	f04f 0900 	mov.w	r9, #0
 8003d96:	9619      	str	r6, [sp, #100]	; 0x64
 8003d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d9a:	781a      	ldrb	r2, [r3, #0]
 8003d9c:	2a2b      	cmp	r2, #43	; 0x2b
 8003d9e:	d04c      	beq.n	8003e3a <_strtod_l+0xca>
 8003da0:	d83a      	bhi.n	8003e18 <_strtod_l+0xa8>
 8003da2:	2a0d      	cmp	r2, #13
 8003da4:	d833      	bhi.n	8003e0e <_strtod_l+0x9e>
 8003da6:	2a08      	cmp	r2, #8
 8003da8:	d833      	bhi.n	8003e12 <_strtod_l+0xa2>
 8003daa:	2a00      	cmp	r2, #0
 8003dac:	d03d      	beq.n	8003e2a <_strtod_l+0xba>
 8003dae:	2300      	movs	r3, #0
 8003db0:	930a      	str	r3, [sp, #40]	; 0x28
 8003db2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003db4:	782b      	ldrb	r3, [r5, #0]
 8003db6:	2b30      	cmp	r3, #48	; 0x30
 8003db8:	f040 80aa 	bne.w	8003f10 <_strtod_l+0x1a0>
 8003dbc:	786b      	ldrb	r3, [r5, #1]
 8003dbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003dc2:	2b58      	cmp	r3, #88	; 0x58
 8003dc4:	d166      	bne.n	8003e94 <_strtod_l+0x124>
 8003dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dc8:	4650      	mov	r0, sl
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	ab1a      	add	r3, sp, #104	; 0x68
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	4a8a      	ldr	r2, [pc, #552]	; (8003ffc <_strtod_l+0x28c>)
 8003dd2:	f8cd b008 	str.w	fp, [sp, #8]
 8003dd6:	ab1b      	add	r3, sp, #108	; 0x6c
 8003dd8:	a919      	add	r1, sp, #100	; 0x64
 8003dda:	f001 fd17 	bl	800580c <__gethex>
 8003dde:	f010 0607 	ands.w	r6, r0, #7
 8003de2:	4604      	mov	r4, r0
 8003de4:	d005      	beq.n	8003df2 <_strtod_l+0x82>
 8003de6:	2e06      	cmp	r6, #6
 8003de8:	d129      	bne.n	8003e3e <_strtod_l+0xce>
 8003dea:	2300      	movs	r3, #0
 8003dec:	3501      	adds	r5, #1
 8003dee:	9519      	str	r5, [sp, #100]	; 0x64
 8003df0:	930a      	str	r3, [sp, #40]	; 0x28
 8003df2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 858a 	bne.w	800490e <_strtod_l+0xb9e>
 8003dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dfc:	b1d3      	cbz	r3, 8003e34 <_strtod_l+0xc4>
 8003dfe:	4642      	mov	r2, r8
 8003e00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	b01f      	add	sp, #124	; 0x7c
 8003e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0e:	2a20      	cmp	r2, #32
 8003e10:	d1cd      	bne.n	8003dae <_strtod_l+0x3e>
 8003e12:	3301      	adds	r3, #1
 8003e14:	9319      	str	r3, [sp, #100]	; 0x64
 8003e16:	e7bf      	b.n	8003d98 <_strtod_l+0x28>
 8003e18:	2a2d      	cmp	r2, #45	; 0x2d
 8003e1a:	d1c8      	bne.n	8003dae <_strtod_l+0x3e>
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	920a      	str	r2, [sp, #40]	; 0x28
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	9219      	str	r2, [sp, #100]	; 0x64
 8003e24:	785b      	ldrb	r3, [r3, #1]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1c3      	bne.n	8003db2 <_strtod_l+0x42>
 8003e2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e2c:	9619      	str	r6, [sp, #100]	; 0x64
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f040 856b 	bne.w	800490a <_strtod_l+0xb9a>
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	e7e4      	b.n	8003e04 <_strtod_l+0x94>
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	e7ef      	b.n	8003e1e <_strtod_l+0xae>
 8003e3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003e40:	b13a      	cbz	r2, 8003e52 <_strtod_l+0xe2>
 8003e42:	2135      	movs	r1, #53	; 0x35
 8003e44:	a81c      	add	r0, sp, #112	; 0x70
 8003e46:	f002 fc8d 	bl	8006764 <__copybits>
 8003e4a:	4650      	mov	r0, sl
 8003e4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003e4e:	f002 f855 	bl	8005efc <_Bfree>
 8003e52:	3e01      	subs	r6, #1
 8003e54:	2e04      	cmp	r6, #4
 8003e56:	d806      	bhi.n	8003e66 <_strtod_l+0xf6>
 8003e58:	e8df f006 	tbb	[pc, r6]
 8003e5c:	1714030a 	.word	0x1714030a
 8003e60:	0a          	.byte	0x0a
 8003e61:	00          	.byte	0x00
 8003e62:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003e66:	0721      	lsls	r1, r4, #28
 8003e68:	d5c3      	bpl.n	8003df2 <_strtod_l+0x82>
 8003e6a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003e6e:	e7c0      	b.n	8003df2 <_strtod_l+0x82>
 8003e70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003e72:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003e76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003e7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e7e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003e82:	e7f0      	b.n	8003e66 <_strtod_l+0xf6>
 8003e84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004000 <_strtod_l+0x290>
 8003e88:	e7ed      	b.n	8003e66 <_strtod_l+0xf6>
 8003e8a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003e8e:	f04f 38ff 	mov.w	r8, #4294967295
 8003e92:	e7e8      	b.n	8003e66 <_strtod_l+0xf6>
 8003e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	9219      	str	r2, [sp, #100]	; 0x64
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d0f9      	beq.n	8003e94 <_strtod_l+0x124>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0a6      	beq.n	8003df2 <_strtod_l+0x82>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	9307      	str	r3, [sp, #28]
 8003ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003eaa:	220a      	movs	r2, #10
 8003eac:	9308      	str	r3, [sp, #32]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	469b      	mov	fp, r3
 8003eb2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003eb6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003eb8:	7805      	ldrb	r5, [r0, #0]
 8003eba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003ebe:	b2d9      	uxtb	r1, r3
 8003ec0:	2909      	cmp	r1, #9
 8003ec2:	d927      	bls.n	8003f14 <_strtod_l+0x1a4>
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	f002 fef2 	bl	8006cb0 <strncmp>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d033      	beq.n	8003f38 <_strtod_l+0x1c8>
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	462a      	mov	r2, r5
 8003ed4:	465c      	mov	r4, fp
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	9004      	str	r0, [sp, #16]
 8003eda:	2a65      	cmp	r2, #101	; 0x65
 8003edc:	d001      	beq.n	8003ee2 <_strtod_l+0x172>
 8003ede:	2a45      	cmp	r2, #69	; 0x45
 8003ee0:	d114      	bne.n	8003f0c <_strtod_l+0x19c>
 8003ee2:	b91c      	cbnz	r4, 8003eec <_strtod_l+0x17c>
 8003ee4:	9a07      	ldr	r2, [sp, #28]
 8003ee6:	4302      	orrs	r2, r0
 8003ee8:	d09f      	beq.n	8003e2a <_strtod_l+0xba>
 8003eea:	2400      	movs	r4, #0
 8003eec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003eee:	1c72      	adds	r2, r6, #1
 8003ef0:	9219      	str	r2, [sp, #100]	; 0x64
 8003ef2:	7872      	ldrb	r2, [r6, #1]
 8003ef4:	2a2b      	cmp	r2, #43	; 0x2b
 8003ef6:	d079      	beq.n	8003fec <_strtod_l+0x27c>
 8003ef8:	2a2d      	cmp	r2, #45	; 0x2d
 8003efa:	f000 8083 	beq.w	8004004 <_strtod_l+0x294>
 8003efe:	2700      	movs	r7, #0
 8003f00:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003f04:	2909      	cmp	r1, #9
 8003f06:	f240 8083 	bls.w	8004010 <_strtod_l+0x2a0>
 8003f0a:	9619      	str	r6, [sp, #100]	; 0x64
 8003f0c:	2500      	movs	r5, #0
 8003f0e:	e09f      	b.n	8004050 <_strtod_l+0x2e0>
 8003f10:	2300      	movs	r3, #0
 8003f12:	e7c8      	b.n	8003ea6 <_strtod_l+0x136>
 8003f14:	f1bb 0f08 	cmp.w	fp, #8
 8003f18:	bfd5      	itete	le
 8003f1a:	9906      	ldrle	r1, [sp, #24]
 8003f1c:	9905      	ldrgt	r1, [sp, #20]
 8003f1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8003f22:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003f26:	f100 0001 	add.w	r0, r0, #1
 8003f2a:	bfd4      	ite	le
 8003f2c:	9306      	strle	r3, [sp, #24]
 8003f2e:	9305      	strgt	r3, [sp, #20]
 8003f30:	f10b 0b01 	add.w	fp, fp, #1
 8003f34:	9019      	str	r0, [sp, #100]	; 0x64
 8003f36:	e7be      	b.n	8003eb6 <_strtod_l+0x146>
 8003f38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f3a:	191a      	adds	r2, r3, r4
 8003f3c:	9219      	str	r2, [sp, #100]	; 0x64
 8003f3e:	5d1a      	ldrb	r2, [r3, r4]
 8003f40:	f1bb 0f00 	cmp.w	fp, #0
 8003f44:	d036      	beq.n	8003fb4 <_strtod_l+0x244>
 8003f46:	465c      	mov	r4, fp
 8003f48:	9004      	str	r0, [sp, #16]
 8003f4a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003f4e:	2b09      	cmp	r3, #9
 8003f50:	d912      	bls.n	8003f78 <_strtod_l+0x208>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e7c1      	b.n	8003eda <_strtod_l+0x16a>
 8003f56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f58:	3001      	adds	r0, #1
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	9219      	str	r2, [sp, #100]	; 0x64
 8003f5e:	785a      	ldrb	r2, [r3, #1]
 8003f60:	2a30      	cmp	r2, #48	; 0x30
 8003f62:	d0f8      	beq.n	8003f56 <_strtod_l+0x1e6>
 8003f64:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	f200 84d5 	bhi.w	8004918 <_strtod_l+0xba8>
 8003f6e:	9004      	str	r0, [sp, #16]
 8003f70:	2000      	movs	r0, #0
 8003f72:	4604      	mov	r4, r0
 8003f74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f76:	9308      	str	r3, [sp, #32]
 8003f78:	3a30      	subs	r2, #48	; 0x30
 8003f7a:	f100 0301 	add.w	r3, r0, #1
 8003f7e:	d013      	beq.n	8003fa8 <_strtod_l+0x238>
 8003f80:	9904      	ldr	r1, [sp, #16]
 8003f82:	1905      	adds	r5, r0, r4
 8003f84:	4419      	add	r1, r3
 8003f86:	9104      	str	r1, [sp, #16]
 8003f88:	4623      	mov	r3, r4
 8003f8a:	210a      	movs	r1, #10
 8003f8c:	42ab      	cmp	r3, r5
 8003f8e:	d113      	bne.n	8003fb8 <_strtod_l+0x248>
 8003f90:	1823      	adds	r3, r4, r0
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	f104 0401 	add.w	r4, r4, #1
 8003f98:	4404      	add	r4, r0
 8003f9a:	dc1b      	bgt.n	8003fd4 <_strtod_l+0x264>
 8003f9c:	230a      	movs	r3, #10
 8003f9e:	9906      	ldr	r1, [sp, #24]
 8003fa0:	fb03 2301 	mla	r3, r3, r1, r2
 8003fa4:	9306      	str	r3, [sp, #24]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003faa:	4618      	mov	r0, r3
 8003fac:	1c51      	adds	r1, r2, #1
 8003fae:	9119      	str	r1, [sp, #100]	; 0x64
 8003fb0:	7852      	ldrb	r2, [r2, #1]
 8003fb2:	e7ca      	b.n	8003f4a <_strtod_l+0x1da>
 8003fb4:	4658      	mov	r0, fp
 8003fb6:	e7d3      	b.n	8003f60 <_strtod_l+0x1f0>
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	dc04      	bgt.n	8003fc6 <_strtod_l+0x256>
 8003fbc:	9f06      	ldr	r7, [sp, #24]
 8003fbe:	434f      	muls	r7, r1
 8003fc0:	9706      	str	r7, [sp, #24]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	e7e2      	b.n	8003f8c <_strtod_l+0x21c>
 8003fc6:	1c5f      	adds	r7, r3, #1
 8003fc8:	2f10      	cmp	r7, #16
 8003fca:	bfde      	ittt	le
 8003fcc:	9f05      	ldrle	r7, [sp, #20]
 8003fce:	434f      	mulle	r7, r1
 8003fd0:	9705      	strle	r7, [sp, #20]
 8003fd2:	e7f6      	b.n	8003fc2 <_strtod_l+0x252>
 8003fd4:	2c10      	cmp	r4, #16
 8003fd6:	bfdf      	itttt	le
 8003fd8:	230a      	movle	r3, #10
 8003fda:	9905      	ldrle	r1, [sp, #20]
 8003fdc:	fb03 2301 	mlale	r3, r3, r1, r2
 8003fe0:	9305      	strle	r3, [sp, #20]
 8003fe2:	e7e0      	b.n	8003fa6 <_strtod_l+0x236>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	9304      	str	r3, [sp, #16]
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e77b      	b.n	8003ee4 <_strtod_l+0x174>
 8003fec:	2700      	movs	r7, #0
 8003fee:	1cb2      	adds	r2, r6, #2
 8003ff0:	9219      	str	r2, [sp, #100]	; 0x64
 8003ff2:	78b2      	ldrb	r2, [r6, #2]
 8003ff4:	e784      	b.n	8003f00 <_strtod_l+0x190>
 8003ff6:	bf00      	nop
 8003ff8:	08007b60 	.word	0x08007b60
 8003ffc:	08007918 	.word	0x08007918
 8004000:	7ff00000 	.word	0x7ff00000
 8004004:	2701      	movs	r7, #1
 8004006:	e7f2      	b.n	8003fee <_strtod_l+0x27e>
 8004008:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800400a:	1c51      	adds	r1, r2, #1
 800400c:	9119      	str	r1, [sp, #100]	; 0x64
 800400e:	7852      	ldrb	r2, [r2, #1]
 8004010:	2a30      	cmp	r2, #48	; 0x30
 8004012:	d0f9      	beq.n	8004008 <_strtod_l+0x298>
 8004014:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004018:	2908      	cmp	r1, #8
 800401a:	f63f af77 	bhi.w	8003f0c <_strtod_l+0x19c>
 800401e:	f04f 0e0a 	mov.w	lr, #10
 8004022:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004026:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004028:	9209      	str	r2, [sp, #36]	; 0x24
 800402a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800402c:	1c51      	adds	r1, r2, #1
 800402e:	9119      	str	r1, [sp, #100]	; 0x64
 8004030:	7852      	ldrb	r2, [r2, #1]
 8004032:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004036:	2d09      	cmp	r5, #9
 8004038:	d935      	bls.n	80040a6 <_strtod_l+0x336>
 800403a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800403c:	1b49      	subs	r1, r1, r5
 800403e:	2908      	cmp	r1, #8
 8004040:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004044:	dc02      	bgt.n	800404c <_strtod_l+0x2dc>
 8004046:	4565      	cmp	r5, ip
 8004048:	bfa8      	it	ge
 800404a:	4665      	movge	r5, ip
 800404c:	b107      	cbz	r7, 8004050 <_strtod_l+0x2e0>
 800404e:	426d      	negs	r5, r5
 8004050:	2c00      	cmp	r4, #0
 8004052:	d14c      	bne.n	80040ee <_strtod_l+0x37e>
 8004054:	9907      	ldr	r1, [sp, #28]
 8004056:	4301      	orrs	r1, r0
 8004058:	f47f aecb 	bne.w	8003df2 <_strtod_l+0x82>
 800405c:	2b00      	cmp	r3, #0
 800405e:	f47f aee4 	bne.w	8003e2a <_strtod_l+0xba>
 8004062:	2a69      	cmp	r2, #105	; 0x69
 8004064:	d026      	beq.n	80040b4 <_strtod_l+0x344>
 8004066:	dc23      	bgt.n	80040b0 <_strtod_l+0x340>
 8004068:	2a49      	cmp	r2, #73	; 0x49
 800406a:	d023      	beq.n	80040b4 <_strtod_l+0x344>
 800406c:	2a4e      	cmp	r2, #78	; 0x4e
 800406e:	f47f aedc 	bne.w	8003e2a <_strtod_l+0xba>
 8004072:	499d      	ldr	r1, [pc, #628]	; (80042e8 <_strtod_l+0x578>)
 8004074:	a819      	add	r0, sp, #100	; 0x64
 8004076:	f001 fe17 	bl	8005ca8 <__match>
 800407a:	2800      	cmp	r0, #0
 800407c:	f43f aed5 	beq.w	8003e2a <_strtod_l+0xba>
 8004080:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b28      	cmp	r3, #40	; 0x28
 8004086:	d12c      	bne.n	80040e2 <_strtod_l+0x372>
 8004088:	4998      	ldr	r1, [pc, #608]	; (80042ec <_strtod_l+0x57c>)
 800408a:	aa1c      	add	r2, sp, #112	; 0x70
 800408c:	a819      	add	r0, sp, #100	; 0x64
 800408e:	f001 fe1f 	bl	8005cd0 <__hexnan>
 8004092:	2805      	cmp	r0, #5
 8004094:	d125      	bne.n	80040e2 <_strtod_l+0x372>
 8004096:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004098:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800409c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80040a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80040a4:	e6a5      	b.n	8003df2 <_strtod_l+0x82>
 80040a6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80040aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80040ae:	e7bc      	b.n	800402a <_strtod_l+0x2ba>
 80040b0:	2a6e      	cmp	r2, #110	; 0x6e
 80040b2:	e7dc      	b.n	800406e <_strtod_l+0x2fe>
 80040b4:	498e      	ldr	r1, [pc, #568]	; (80042f0 <_strtod_l+0x580>)
 80040b6:	a819      	add	r0, sp, #100	; 0x64
 80040b8:	f001 fdf6 	bl	8005ca8 <__match>
 80040bc:	2800      	cmp	r0, #0
 80040be:	f43f aeb4 	beq.w	8003e2a <_strtod_l+0xba>
 80040c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040c4:	498b      	ldr	r1, [pc, #556]	; (80042f4 <_strtod_l+0x584>)
 80040c6:	3b01      	subs	r3, #1
 80040c8:	a819      	add	r0, sp, #100	; 0x64
 80040ca:	9319      	str	r3, [sp, #100]	; 0x64
 80040cc:	f001 fdec 	bl	8005ca8 <__match>
 80040d0:	b910      	cbnz	r0, 80040d8 <_strtod_l+0x368>
 80040d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040d4:	3301      	adds	r3, #1
 80040d6:	9319      	str	r3, [sp, #100]	; 0x64
 80040d8:	f04f 0800 	mov.w	r8, #0
 80040dc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80042f8 <_strtod_l+0x588>
 80040e0:	e687      	b.n	8003df2 <_strtod_l+0x82>
 80040e2:	4886      	ldr	r0, [pc, #536]	; (80042fc <_strtod_l+0x58c>)
 80040e4:	f002 fdce 	bl	8006c84 <nan>
 80040e8:	4680      	mov	r8, r0
 80040ea:	4689      	mov	r9, r1
 80040ec:	e681      	b.n	8003df2 <_strtod_l+0x82>
 80040ee:	9b04      	ldr	r3, [sp, #16]
 80040f0:	f1bb 0f00 	cmp.w	fp, #0
 80040f4:	bf08      	it	eq
 80040f6:	46a3      	moveq	fp, r4
 80040f8:	1aeb      	subs	r3, r5, r3
 80040fa:	2c10      	cmp	r4, #16
 80040fc:	9806      	ldr	r0, [sp, #24]
 80040fe:	4626      	mov	r6, r4
 8004100:	9307      	str	r3, [sp, #28]
 8004102:	bfa8      	it	ge
 8004104:	2610      	movge	r6, #16
 8004106:	f7fc f96d 	bl	80003e4 <__aeabi_ui2d>
 800410a:	2c09      	cmp	r4, #9
 800410c:	4680      	mov	r8, r0
 800410e:	4689      	mov	r9, r1
 8004110:	dd13      	ble.n	800413a <_strtod_l+0x3ca>
 8004112:	4b7b      	ldr	r3, [pc, #492]	; (8004300 <_strtod_l+0x590>)
 8004114:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004118:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800411c:	f7fc f9dc 	bl	80004d8 <__aeabi_dmul>
 8004120:	4680      	mov	r8, r0
 8004122:	9805      	ldr	r0, [sp, #20]
 8004124:	4689      	mov	r9, r1
 8004126:	f7fc f95d 	bl	80003e4 <__aeabi_ui2d>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4640      	mov	r0, r8
 8004130:	4649      	mov	r1, r9
 8004132:	f7fc f81b 	bl	800016c <__adddf3>
 8004136:	4680      	mov	r8, r0
 8004138:	4689      	mov	r9, r1
 800413a:	2c0f      	cmp	r4, #15
 800413c:	dc36      	bgt.n	80041ac <_strtod_l+0x43c>
 800413e:	9b07      	ldr	r3, [sp, #28]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f43f ae56 	beq.w	8003df2 <_strtod_l+0x82>
 8004146:	dd22      	ble.n	800418e <_strtod_l+0x41e>
 8004148:	2b16      	cmp	r3, #22
 800414a:	dc09      	bgt.n	8004160 <_strtod_l+0x3f0>
 800414c:	496c      	ldr	r1, [pc, #432]	; (8004300 <_strtod_l+0x590>)
 800414e:	4642      	mov	r2, r8
 8004150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004154:	464b      	mov	r3, r9
 8004156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800415a:	f7fc f9bd 	bl	80004d8 <__aeabi_dmul>
 800415e:	e7c3      	b.n	80040e8 <_strtod_l+0x378>
 8004160:	9a07      	ldr	r2, [sp, #28]
 8004162:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004166:	4293      	cmp	r3, r2
 8004168:	db20      	blt.n	80041ac <_strtod_l+0x43c>
 800416a:	4d65      	ldr	r5, [pc, #404]	; (8004300 <_strtod_l+0x590>)
 800416c:	f1c4 040f 	rsb	r4, r4, #15
 8004170:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004174:	4642      	mov	r2, r8
 8004176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800417a:	464b      	mov	r3, r9
 800417c:	f7fc f9ac 	bl	80004d8 <__aeabi_dmul>
 8004180:	9b07      	ldr	r3, [sp, #28]
 8004182:	1b1c      	subs	r4, r3, r4
 8004184:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004188:	e9d5 2300 	ldrd	r2, r3, [r5]
 800418c:	e7e5      	b.n	800415a <_strtod_l+0x3ea>
 800418e:	9b07      	ldr	r3, [sp, #28]
 8004190:	3316      	adds	r3, #22
 8004192:	db0b      	blt.n	80041ac <_strtod_l+0x43c>
 8004194:	9b04      	ldr	r3, [sp, #16]
 8004196:	4640      	mov	r0, r8
 8004198:	1b5d      	subs	r5, r3, r5
 800419a:	4b59      	ldr	r3, [pc, #356]	; (8004300 <_strtod_l+0x590>)
 800419c:	4649      	mov	r1, r9
 800419e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80041a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041a6:	f7fc fac1 	bl	800072c <__aeabi_ddiv>
 80041aa:	e79d      	b.n	80040e8 <_strtod_l+0x378>
 80041ac:	9b07      	ldr	r3, [sp, #28]
 80041ae:	1ba6      	subs	r6, r4, r6
 80041b0:	441e      	add	r6, r3
 80041b2:	2e00      	cmp	r6, #0
 80041b4:	dd74      	ble.n	80042a0 <_strtod_l+0x530>
 80041b6:	f016 030f 	ands.w	r3, r6, #15
 80041ba:	d00a      	beq.n	80041d2 <_strtod_l+0x462>
 80041bc:	4950      	ldr	r1, [pc, #320]	; (8004300 <_strtod_l+0x590>)
 80041be:	4642      	mov	r2, r8
 80041c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80041c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041c8:	464b      	mov	r3, r9
 80041ca:	f7fc f985 	bl	80004d8 <__aeabi_dmul>
 80041ce:	4680      	mov	r8, r0
 80041d0:	4689      	mov	r9, r1
 80041d2:	f036 060f 	bics.w	r6, r6, #15
 80041d6:	d052      	beq.n	800427e <_strtod_l+0x50e>
 80041d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80041dc:	dd27      	ble.n	800422e <_strtod_l+0x4be>
 80041de:	f04f 0b00 	mov.w	fp, #0
 80041e2:	f8cd b010 	str.w	fp, [sp, #16]
 80041e6:	f8cd b020 	str.w	fp, [sp, #32]
 80041ea:	f8cd b018 	str.w	fp, [sp, #24]
 80041ee:	2322      	movs	r3, #34	; 0x22
 80041f0:	f04f 0800 	mov.w	r8, #0
 80041f4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80042f8 <_strtod_l+0x588>
 80041f8:	f8ca 3000 	str.w	r3, [sl]
 80041fc:	9b08      	ldr	r3, [sp, #32]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f43f adf7 	beq.w	8003df2 <_strtod_l+0x82>
 8004204:	4650      	mov	r0, sl
 8004206:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004208:	f001 fe78 	bl	8005efc <_Bfree>
 800420c:	4650      	mov	r0, sl
 800420e:	9906      	ldr	r1, [sp, #24]
 8004210:	f001 fe74 	bl	8005efc <_Bfree>
 8004214:	4650      	mov	r0, sl
 8004216:	9904      	ldr	r1, [sp, #16]
 8004218:	f001 fe70 	bl	8005efc <_Bfree>
 800421c:	4650      	mov	r0, sl
 800421e:	9908      	ldr	r1, [sp, #32]
 8004220:	f001 fe6c 	bl	8005efc <_Bfree>
 8004224:	4659      	mov	r1, fp
 8004226:	4650      	mov	r0, sl
 8004228:	f001 fe68 	bl	8005efc <_Bfree>
 800422c:	e5e1      	b.n	8003df2 <_strtod_l+0x82>
 800422e:	4b35      	ldr	r3, [pc, #212]	; (8004304 <_strtod_l+0x594>)
 8004230:	4640      	mov	r0, r8
 8004232:	9305      	str	r3, [sp, #20]
 8004234:	2300      	movs	r3, #0
 8004236:	4649      	mov	r1, r9
 8004238:	461f      	mov	r7, r3
 800423a:	1136      	asrs	r6, r6, #4
 800423c:	2e01      	cmp	r6, #1
 800423e:	dc21      	bgt.n	8004284 <_strtod_l+0x514>
 8004240:	b10b      	cbz	r3, 8004246 <_strtod_l+0x4d6>
 8004242:	4680      	mov	r8, r0
 8004244:	4689      	mov	r9, r1
 8004246:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <_strtod_l+0x594>)
 8004248:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800424c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004250:	4642      	mov	r2, r8
 8004252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004256:	464b      	mov	r3, r9
 8004258:	f7fc f93e 	bl	80004d8 <__aeabi_dmul>
 800425c:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <_strtod_l+0x588>)
 800425e:	460a      	mov	r2, r1
 8004260:	400b      	ands	r3, r1
 8004262:	4929      	ldr	r1, [pc, #164]	; (8004308 <_strtod_l+0x598>)
 8004264:	4680      	mov	r8, r0
 8004266:	428b      	cmp	r3, r1
 8004268:	d8b9      	bhi.n	80041de <_strtod_l+0x46e>
 800426a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800426e:	428b      	cmp	r3, r1
 8004270:	bf86      	itte	hi
 8004272:	f04f 38ff 	movhi.w	r8, #4294967295
 8004276:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800430c <_strtod_l+0x59c>
 800427a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800427e:	2300      	movs	r3, #0
 8004280:	9305      	str	r3, [sp, #20]
 8004282:	e07f      	b.n	8004384 <_strtod_l+0x614>
 8004284:	07f2      	lsls	r2, r6, #31
 8004286:	d505      	bpl.n	8004294 <_strtod_l+0x524>
 8004288:	9b05      	ldr	r3, [sp, #20]
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f7fc f923 	bl	80004d8 <__aeabi_dmul>
 8004292:	2301      	movs	r3, #1
 8004294:	9a05      	ldr	r2, [sp, #20]
 8004296:	3701      	adds	r7, #1
 8004298:	3208      	adds	r2, #8
 800429a:	1076      	asrs	r6, r6, #1
 800429c:	9205      	str	r2, [sp, #20]
 800429e:	e7cd      	b.n	800423c <_strtod_l+0x4cc>
 80042a0:	d0ed      	beq.n	800427e <_strtod_l+0x50e>
 80042a2:	4276      	negs	r6, r6
 80042a4:	f016 020f 	ands.w	r2, r6, #15
 80042a8:	d00a      	beq.n	80042c0 <_strtod_l+0x550>
 80042aa:	4b15      	ldr	r3, [pc, #84]	; (8004300 <_strtod_l+0x590>)
 80042ac:	4640      	mov	r0, r8
 80042ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042b2:	4649      	mov	r1, r9
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fc fa38 	bl	800072c <__aeabi_ddiv>
 80042bc:	4680      	mov	r8, r0
 80042be:	4689      	mov	r9, r1
 80042c0:	1136      	asrs	r6, r6, #4
 80042c2:	d0dc      	beq.n	800427e <_strtod_l+0x50e>
 80042c4:	2e1f      	cmp	r6, #31
 80042c6:	dd23      	ble.n	8004310 <_strtod_l+0x5a0>
 80042c8:	f04f 0b00 	mov.w	fp, #0
 80042cc:	f8cd b010 	str.w	fp, [sp, #16]
 80042d0:	f8cd b020 	str.w	fp, [sp, #32]
 80042d4:	f8cd b018 	str.w	fp, [sp, #24]
 80042d8:	2322      	movs	r3, #34	; 0x22
 80042da:	f04f 0800 	mov.w	r8, #0
 80042de:	f04f 0900 	mov.w	r9, #0
 80042e2:	f8ca 3000 	str.w	r3, [sl]
 80042e6:	e789      	b.n	80041fc <_strtod_l+0x48c>
 80042e8:	080078e9 	.word	0x080078e9
 80042ec:	0800792c 	.word	0x0800792c
 80042f0:	080078e1 	.word	0x080078e1
 80042f4:	08007a6c 	.word	0x08007a6c
 80042f8:	7ff00000 	.word	0x7ff00000
 80042fc:	08007d18 	.word	0x08007d18
 8004300:	08007bf8 	.word	0x08007bf8
 8004304:	08007bd0 	.word	0x08007bd0
 8004308:	7ca00000 	.word	0x7ca00000
 800430c:	7fefffff 	.word	0x7fefffff
 8004310:	f016 0310 	ands.w	r3, r6, #16
 8004314:	bf18      	it	ne
 8004316:	236a      	movne	r3, #106	; 0x6a
 8004318:	4640      	mov	r0, r8
 800431a:	9305      	str	r3, [sp, #20]
 800431c:	4649      	mov	r1, r9
 800431e:	2300      	movs	r3, #0
 8004320:	4fb0      	ldr	r7, [pc, #704]	; (80045e4 <_strtod_l+0x874>)
 8004322:	07f2      	lsls	r2, r6, #31
 8004324:	d504      	bpl.n	8004330 <_strtod_l+0x5c0>
 8004326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432a:	f7fc f8d5 	bl	80004d8 <__aeabi_dmul>
 800432e:	2301      	movs	r3, #1
 8004330:	1076      	asrs	r6, r6, #1
 8004332:	f107 0708 	add.w	r7, r7, #8
 8004336:	d1f4      	bne.n	8004322 <_strtod_l+0x5b2>
 8004338:	b10b      	cbz	r3, 800433e <_strtod_l+0x5ce>
 800433a:	4680      	mov	r8, r0
 800433c:	4689      	mov	r9, r1
 800433e:	9b05      	ldr	r3, [sp, #20]
 8004340:	b1c3      	cbz	r3, 8004374 <_strtod_l+0x604>
 8004342:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004346:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800434a:	2b00      	cmp	r3, #0
 800434c:	4649      	mov	r1, r9
 800434e:	dd11      	ble.n	8004374 <_strtod_l+0x604>
 8004350:	2b1f      	cmp	r3, #31
 8004352:	f340 8127 	ble.w	80045a4 <_strtod_l+0x834>
 8004356:	2b34      	cmp	r3, #52	; 0x34
 8004358:	bfd8      	it	le
 800435a:	f04f 33ff 	movle.w	r3, #4294967295
 800435e:	f04f 0800 	mov.w	r8, #0
 8004362:	bfcf      	iteee	gt
 8004364:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004368:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800436c:	fa03 f202 	lslle.w	r2, r3, r2
 8004370:	ea02 0901 	andle.w	r9, r2, r1
 8004374:	2200      	movs	r2, #0
 8004376:	2300      	movs	r3, #0
 8004378:	4640      	mov	r0, r8
 800437a:	4649      	mov	r1, r9
 800437c:	f7fc fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8004380:	2800      	cmp	r0, #0
 8004382:	d1a1      	bne.n	80042c8 <_strtod_l+0x558>
 8004384:	9b06      	ldr	r3, [sp, #24]
 8004386:	465a      	mov	r2, fp
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	4650      	mov	r0, sl
 800438c:	4623      	mov	r3, r4
 800438e:	9908      	ldr	r1, [sp, #32]
 8004390:	f001 fe1c 	bl	8005fcc <__s2b>
 8004394:	9008      	str	r0, [sp, #32]
 8004396:	2800      	cmp	r0, #0
 8004398:	f43f af21 	beq.w	80041de <_strtod_l+0x46e>
 800439c:	9b04      	ldr	r3, [sp, #16]
 800439e:	f04f 0b00 	mov.w	fp, #0
 80043a2:	1b5d      	subs	r5, r3, r5
 80043a4:	9b07      	ldr	r3, [sp, #28]
 80043a6:	f8cd b010 	str.w	fp, [sp, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bfb4      	ite	lt
 80043ae:	462b      	movlt	r3, r5
 80043b0:	2300      	movge	r3, #0
 80043b2:	930e      	str	r3, [sp, #56]	; 0x38
 80043b4:	9b07      	ldr	r3, [sp, #28]
 80043b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80043ba:	9314      	str	r3, [sp, #80]	; 0x50
 80043bc:	9b08      	ldr	r3, [sp, #32]
 80043be:	4650      	mov	r0, sl
 80043c0:	6859      	ldr	r1, [r3, #4]
 80043c2:	f001 fd5b 	bl	8005e7c <_Balloc>
 80043c6:	9006      	str	r0, [sp, #24]
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f43f af10 	beq.w	80041ee <_strtod_l+0x47e>
 80043ce:	9b08      	ldr	r3, [sp, #32]
 80043d0:	300c      	adds	r0, #12
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	f103 010c 	add.w	r1, r3, #12
 80043d8:	3202      	adds	r2, #2
 80043da:	0092      	lsls	r2, r2, #2
 80043dc:	f001 fd40 	bl	8005e60 <memcpy>
 80043e0:	ab1c      	add	r3, sp, #112	; 0x70
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	ab1b      	add	r3, sp, #108	; 0x6c
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4642      	mov	r2, r8
 80043ea:	464b      	mov	r3, r9
 80043ec:	4650      	mov	r0, sl
 80043ee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80043f2:	f002 f92d 	bl	8006650 <__d2b>
 80043f6:	901a      	str	r0, [sp, #104]	; 0x68
 80043f8:	2800      	cmp	r0, #0
 80043fa:	f43f aef8 	beq.w	80041ee <_strtod_l+0x47e>
 80043fe:	2101      	movs	r1, #1
 8004400:	4650      	mov	r0, sl
 8004402:	f001 fe7b 	bl	80060fc <__i2b>
 8004406:	4603      	mov	r3, r0
 8004408:	9004      	str	r0, [sp, #16]
 800440a:	2800      	cmp	r0, #0
 800440c:	f43f aeef 	beq.w	80041ee <_strtod_l+0x47e>
 8004410:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004412:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004414:	2d00      	cmp	r5, #0
 8004416:	bfab      	itete	ge
 8004418:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800441a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800441c:	18ee      	addge	r6, r5, r3
 800441e:	1b5c      	sublt	r4, r3, r5
 8004420:	9b05      	ldr	r3, [sp, #20]
 8004422:	bfa8      	it	ge
 8004424:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004426:	eba5 0503 	sub.w	r5, r5, r3
 800442a:	4415      	add	r5, r2
 800442c:	4b6e      	ldr	r3, [pc, #440]	; (80045e8 <_strtod_l+0x878>)
 800442e:	f105 35ff 	add.w	r5, r5, #4294967295
 8004432:	bfb8      	it	lt
 8004434:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004436:	429d      	cmp	r5, r3
 8004438:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800443c:	f280 80c4 	bge.w	80045c8 <_strtod_l+0x858>
 8004440:	1b5b      	subs	r3, r3, r5
 8004442:	2b1f      	cmp	r3, #31
 8004444:	f04f 0701 	mov.w	r7, #1
 8004448:	eba2 0203 	sub.w	r2, r2, r3
 800444c:	f300 80b1 	bgt.w	80045b2 <_strtod_l+0x842>
 8004450:	2500      	movs	r5, #0
 8004452:	fa07 f303 	lsl.w	r3, r7, r3
 8004456:	930f      	str	r3, [sp, #60]	; 0x3c
 8004458:	18b7      	adds	r7, r6, r2
 800445a:	9b05      	ldr	r3, [sp, #20]
 800445c:	42be      	cmp	r6, r7
 800445e:	4414      	add	r4, r2
 8004460:	441c      	add	r4, r3
 8004462:	4633      	mov	r3, r6
 8004464:	bfa8      	it	ge
 8004466:	463b      	movge	r3, r7
 8004468:	42a3      	cmp	r3, r4
 800446a:	bfa8      	it	ge
 800446c:	4623      	movge	r3, r4
 800446e:	2b00      	cmp	r3, #0
 8004470:	bfc2      	ittt	gt
 8004472:	1aff      	subgt	r7, r7, r3
 8004474:	1ae4      	subgt	r4, r4, r3
 8004476:	1af6      	subgt	r6, r6, r3
 8004478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800447a:	2b00      	cmp	r3, #0
 800447c:	dd17      	ble.n	80044ae <_strtod_l+0x73e>
 800447e:	461a      	mov	r2, r3
 8004480:	4650      	mov	r0, sl
 8004482:	9904      	ldr	r1, [sp, #16]
 8004484:	f001 fef8 	bl	8006278 <__pow5mult>
 8004488:	9004      	str	r0, [sp, #16]
 800448a:	2800      	cmp	r0, #0
 800448c:	f43f aeaf 	beq.w	80041ee <_strtod_l+0x47e>
 8004490:	4601      	mov	r1, r0
 8004492:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004494:	4650      	mov	r0, sl
 8004496:	f001 fe47 	bl	8006128 <__multiply>
 800449a:	9009      	str	r0, [sp, #36]	; 0x24
 800449c:	2800      	cmp	r0, #0
 800449e:	f43f aea6 	beq.w	80041ee <_strtod_l+0x47e>
 80044a2:	4650      	mov	r0, sl
 80044a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80044a6:	f001 fd29 	bl	8005efc <_Bfree>
 80044aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ac:	931a      	str	r3, [sp, #104]	; 0x68
 80044ae:	2f00      	cmp	r7, #0
 80044b0:	f300 808e 	bgt.w	80045d0 <_strtod_l+0x860>
 80044b4:	9b07      	ldr	r3, [sp, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	dd08      	ble.n	80044cc <_strtod_l+0x75c>
 80044ba:	4650      	mov	r0, sl
 80044bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80044be:	9906      	ldr	r1, [sp, #24]
 80044c0:	f001 feda 	bl	8006278 <__pow5mult>
 80044c4:	9006      	str	r0, [sp, #24]
 80044c6:	2800      	cmp	r0, #0
 80044c8:	f43f ae91 	beq.w	80041ee <_strtod_l+0x47e>
 80044cc:	2c00      	cmp	r4, #0
 80044ce:	dd08      	ble.n	80044e2 <_strtod_l+0x772>
 80044d0:	4622      	mov	r2, r4
 80044d2:	4650      	mov	r0, sl
 80044d4:	9906      	ldr	r1, [sp, #24]
 80044d6:	f001 ff29 	bl	800632c <__lshift>
 80044da:	9006      	str	r0, [sp, #24]
 80044dc:	2800      	cmp	r0, #0
 80044de:	f43f ae86 	beq.w	80041ee <_strtod_l+0x47e>
 80044e2:	2e00      	cmp	r6, #0
 80044e4:	dd08      	ble.n	80044f8 <_strtod_l+0x788>
 80044e6:	4632      	mov	r2, r6
 80044e8:	4650      	mov	r0, sl
 80044ea:	9904      	ldr	r1, [sp, #16]
 80044ec:	f001 ff1e 	bl	800632c <__lshift>
 80044f0:	9004      	str	r0, [sp, #16]
 80044f2:	2800      	cmp	r0, #0
 80044f4:	f43f ae7b 	beq.w	80041ee <_strtod_l+0x47e>
 80044f8:	4650      	mov	r0, sl
 80044fa:	9a06      	ldr	r2, [sp, #24]
 80044fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80044fe:	f001 ffa1 	bl	8006444 <__mdiff>
 8004502:	4683      	mov	fp, r0
 8004504:	2800      	cmp	r0, #0
 8004506:	f43f ae72 	beq.w	80041ee <_strtod_l+0x47e>
 800450a:	2400      	movs	r4, #0
 800450c:	68c3      	ldr	r3, [r0, #12]
 800450e:	9904      	ldr	r1, [sp, #16]
 8004510:	60c4      	str	r4, [r0, #12]
 8004512:	930b      	str	r3, [sp, #44]	; 0x2c
 8004514:	f001 ff7a 	bl	800640c <__mcmp>
 8004518:	42a0      	cmp	r0, r4
 800451a:	da6b      	bge.n	80045f4 <_strtod_l+0x884>
 800451c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800451e:	ea53 0308 	orrs.w	r3, r3, r8
 8004522:	f040 8091 	bne.w	8004648 <_strtod_l+0x8d8>
 8004526:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 808c 	bne.w	8004648 <_strtod_l+0x8d8>
 8004530:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004534:	0d1b      	lsrs	r3, r3, #20
 8004536:	051b      	lsls	r3, r3, #20
 8004538:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800453c:	f240 8084 	bls.w	8004648 <_strtod_l+0x8d8>
 8004540:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004544:	b91b      	cbnz	r3, 800454e <_strtod_l+0x7de>
 8004546:	f8db 3010 	ldr.w	r3, [fp, #16]
 800454a:	2b01      	cmp	r3, #1
 800454c:	dd7c      	ble.n	8004648 <_strtod_l+0x8d8>
 800454e:	4659      	mov	r1, fp
 8004550:	2201      	movs	r2, #1
 8004552:	4650      	mov	r0, sl
 8004554:	f001 feea 	bl	800632c <__lshift>
 8004558:	9904      	ldr	r1, [sp, #16]
 800455a:	4683      	mov	fp, r0
 800455c:	f001 ff56 	bl	800640c <__mcmp>
 8004560:	2800      	cmp	r0, #0
 8004562:	dd71      	ble.n	8004648 <_strtod_l+0x8d8>
 8004564:	9905      	ldr	r1, [sp, #20]
 8004566:	464b      	mov	r3, r9
 8004568:	4a20      	ldr	r2, [pc, #128]	; (80045ec <_strtod_l+0x87c>)
 800456a:	2900      	cmp	r1, #0
 800456c:	f000 808c 	beq.w	8004688 <_strtod_l+0x918>
 8004570:	ea02 0109 	and.w	r1, r2, r9
 8004574:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004578:	f300 8086 	bgt.w	8004688 <_strtod_l+0x918>
 800457c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004580:	f77f aeaa 	ble.w	80042d8 <_strtod_l+0x568>
 8004584:	4640      	mov	r0, r8
 8004586:	4649      	mov	r1, r9
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <_strtod_l+0x880>)
 800458a:	2200      	movs	r2, #0
 800458c:	f7fb ffa4 	bl	80004d8 <__aeabi_dmul>
 8004590:	460b      	mov	r3, r1
 8004592:	4303      	orrs	r3, r0
 8004594:	bf08      	it	eq
 8004596:	2322      	moveq	r3, #34	; 0x22
 8004598:	4680      	mov	r8, r0
 800459a:	4689      	mov	r9, r1
 800459c:	bf08      	it	eq
 800459e:	f8ca 3000 	streq.w	r3, [sl]
 80045a2:	e62f      	b.n	8004204 <_strtod_l+0x494>
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	ea03 0808 	and.w	r8, r3, r8
 80045b0:	e6e0      	b.n	8004374 <_strtod_l+0x604>
 80045b2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80045b6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80045ba:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80045be:	35e2      	adds	r5, #226	; 0xe2
 80045c0:	fa07 f505 	lsl.w	r5, r7, r5
 80045c4:	970f      	str	r7, [sp, #60]	; 0x3c
 80045c6:	e747      	b.n	8004458 <_strtod_l+0x6e8>
 80045c8:	2301      	movs	r3, #1
 80045ca:	2500      	movs	r5, #0
 80045cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80045ce:	e743      	b.n	8004458 <_strtod_l+0x6e8>
 80045d0:	463a      	mov	r2, r7
 80045d2:	4650      	mov	r0, sl
 80045d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045d6:	f001 fea9 	bl	800632c <__lshift>
 80045da:	901a      	str	r0, [sp, #104]	; 0x68
 80045dc:	2800      	cmp	r0, #0
 80045de:	f47f af69 	bne.w	80044b4 <_strtod_l+0x744>
 80045e2:	e604      	b.n	80041ee <_strtod_l+0x47e>
 80045e4:	08007940 	.word	0x08007940
 80045e8:	fffffc02 	.word	0xfffffc02
 80045ec:	7ff00000 	.word	0x7ff00000
 80045f0:	39500000 	.word	0x39500000
 80045f4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80045f8:	d165      	bne.n	80046c6 <_strtod_l+0x956>
 80045fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004600:	b35a      	cbz	r2, 800465a <_strtod_l+0x8ea>
 8004602:	4a99      	ldr	r2, [pc, #612]	; (8004868 <_strtod_l+0xaf8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d12b      	bne.n	8004660 <_strtod_l+0x8f0>
 8004608:	9b05      	ldr	r3, [sp, #20]
 800460a:	4641      	mov	r1, r8
 800460c:	b303      	cbz	r3, 8004650 <_strtod_l+0x8e0>
 800460e:	464a      	mov	r2, r9
 8004610:	4b96      	ldr	r3, [pc, #600]	; (800486c <_strtod_l+0xafc>)
 8004612:	4013      	ands	r3, r2
 8004614:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	d81b      	bhi.n	8004656 <_strtod_l+0x8e6>
 800461e:	0d1b      	lsrs	r3, r3, #20
 8004620:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	4299      	cmp	r1, r3
 800462a:	d119      	bne.n	8004660 <_strtod_l+0x8f0>
 800462c:	4b90      	ldr	r3, [pc, #576]	; (8004870 <_strtod_l+0xb00>)
 800462e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004630:	429a      	cmp	r2, r3
 8004632:	d102      	bne.n	800463a <_strtod_l+0x8ca>
 8004634:	3101      	adds	r1, #1
 8004636:	f43f adda 	beq.w	80041ee <_strtod_l+0x47e>
 800463a:	f04f 0800 	mov.w	r8, #0
 800463e:	4b8b      	ldr	r3, [pc, #556]	; (800486c <_strtod_l+0xafc>)
 8004640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004642:	401a      	ands	r2, r3
 8004644:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004648:	9b05      	ldr	r3, [sp, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d19a      	bne.n	8004584 <_strtod_l+0x814>
 800464e:	e5d9      	b.n	8004204 <_strtod_l+0x494>
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	e7e8      	b.n	8004628 <_strtod_l+0x8b8>
 8004656:	4613      	mov	r3, r2
 8004658:	e7e6      	b.n	8004628 <_strtod_l+0x8b8>
 800465a:	ea53 0308 	orrs.w	r3, r3, r8
 800465e:	d081      	beq.n	8004564 <_strtod_l+0x7f4>
 8004660:	b1e5      	cbz	r5, 800469c <_strtod_l+0x92c>
 8004662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004664:	421d      	tst	r5, r3
 8004666:	d0ef      	beq.n	8004648 <_strtod_l+0x8d8>
 8004668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	9a05      	ldr	r2, [sp, #20]
 8004670:	b1c3      	cbz	r3, 80046a4 <_strtod_l+0x934>
 8004672:	f7ff fb59 	bl	8003d28 <sulp>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800467e:	f7fb fd75 	bl	800016c <__adddf3>
 8004682:	4680      	mov	r8, r0
 8004684:	4689      	mov	r9, r1
 8004686:	e7df      	b.n	8004648 <_strtod_l+0x8d8>
 8004688:	4013      	ands	r3, r2
 800468a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800468e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004692:	f04f 38ff 	mov.w	r8, #4294967295
 8004696:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800469a:	e7d5      	b.n	8004648 <_strtod_l+0x8d8>
 800469c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800469e:	ea13 0f08 	tst.w	r3, r8
 80046a2:	e7e0      	b.n	8004666 <_strtod_l+0x8f6>
 80046a4:	f7ff fb40 	bl	8003d28 <sulp>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046b0:	f7fb fd5a 	bl	8000168 <__aeabi_dsub>
 80046b4:	2200      	movs	r2, #0
 80046b6:	2300      	movs	r3, #0
 80046b8:	4680      	mov	r8, r0
 80046ba:	4689      	mov	r9, r1
 80046bc:	f7fc f974 	bl	80009a8 <__aeabi_dcmpeq>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d0c1      	beq.n	8004648 <_strtod_l+0x8d8>
 80046c4:	e608      	b.n	80042d8 <_strtod_l+0x568>
 80046c6:	4658      	mov	r0, fp
 80046c8:	9904      	ldr	r1, [sp, #16]
 80046ca:	f002 f81d 	bl	8006708 <__ratio>
 80046ce:	2200      	movs	r2, #0
 80046d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046d4:	4606      	mov	r6, r0
 80046d6:	460f      	mov	r7, r1
 80046d8:	f7fc f97a 	bl	80009d0 <__aeabi_dcmple>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d070      	beq.n	80047c2 <_strtod_l+0xa52>
 80046e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d042      	beq.n	800476c <_strtod_l+0x9fc>
 80046e6:	2600      	movs	r6, #0
 80046e8:	4f62      	ldr	r7, [pc, #392]	; (8004874 <_strtod_l+0xb04>)
 80046ea:	4d62      	ldr	r5, [pc, #392]	; (8004874 <_strtod_l+0xb04>)
 80046ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046f2:	0d1b      	lsrs	r3, r3, #20
 80046f4:	051b      	lsls	r3, r3, #20
 80046f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80046f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80046fa:	4b5f      	ldr	r3, [pc, #380]	; (8004878 <_strtod_l+0xb08>)
 80046fc:	429a      	cmp	r2, r3
 80046fe:	f040 80c3 	bne.w	8004888 <_strtod_l+0xb18>
 8004702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004704:	4640      	mov	r0, r8
 8004706:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800470a:	4649      	mov	r1, r9
 800470c:	f001 ff26 	bl	800655c <__ulp>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4630      	mov	r0, r6
 8004716:	4639      	mov	r1, r7
 8004718:	f7fb fede 	bl	80004d8 <__aeabi_dmul>
 800471c:	4642      	mov	r2, r8
 800471e:	464b      	mov	r3, r9
 8004720:	f7fb fd24 	bl	800016c <__adddf3>
 8004724:	460b      	mov	r3, r1
 8004726:	4951      	ldr	r1, [pc, #324]	; (800486c <_strtod_l+0xafc>)
 8004728:	4a54      	ldr	r2, [pc, #336]	; (800487c <_strtod_l+0xb0c>)
 800472a:	4019      	ands	r1, r3
 800472c:	4291      	cmp	r1, r2
 800472e:	4680      	mov	r8, r0
 8004730:	d95d      	bls.n	80047ee <_strtod_l+0xa7e>
 8004732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004734:	4b4e      	ldr	r3, [pc, #312]	; (8004870 <_strtod_l+0xb00>)
 8004736:	429a      	cmp	r2, r3
 8004738:	d103      	bne.n	8004742 <_strtod_l+0x9d2>
 800473a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800473c:	3301      	adds	r3, #1
 800473e:	f43f ad56 	beq.w	80041ee <_strtod_l+0x47e>
 8004742:	f04f 38ff 	mov.w	r8, #4294967295
 8004746:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004870 <_strtod_l+0xb00>
 800474a:	4650      	mov	r0, sl
 800474c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800474e:	f001 fbd5 	bl	8005efc <_Bfree>
 8004752:	4650      	mov	r0, sl
 8004754:	9906      	ldr	r1, [sp, #24]
 8004756:	f001 fbd1 	bl	8005efc <_Bfree>
 800475a:	4650      	mov	r0, sl
 800475c:	9904      	ldr	r1, [sp, #16]
 800475e:	f001 fbcd 	bl	8005efc <_Bfree>
 8004762:	4659      	mov	r1, fp
 8004764:	4650      	mov	r0, sl
 8004766:	f001 fbc9 	bl	8005efc <_Bfree>
 800476a:	e627      	b.n	80043bc <_strtod_l+0x64c>
 800476c:	f1b8 0f00 	cmp.w	r8, #0
 8004770:	d119      	bne.n	80047a6 <_strtod_l+0xa36>
 8004772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004778:	b9e3      	cbnz	r3, 80047b4 <_strtod_l+0xa44>
 800477a:	2200      	movs	r2, #0
 800477c:	4630      	mov	r0, r6
 800477e:	4639      	mov	r1, r7
 8004780:	4b3c      	ldr	r3, [pc, #240]	; (8004874 <_strtod_l+0xb04>)
 8004782:	f7fc f91b 	bl	80009bc <__aeabi_dcmplt>
 8004786:	b9c8      	cbnz	r0, 80047bc <_strtod_l+0xa4c>
 8004788:	2200      	movs	r2, #0
 800478a:	4630      	mov	r0, r6
 800478c:	4639      	mov	r1, r7
 800478e:	4b3c      	ldr	r3, [pc, #240]	; (8004880 <_strtod_l+0xb10>)
 8004790:	f7fb fea2 	bl	80004d8 <__aeabi_dmul>
 8004794:	4604      	mov	r4, r0
 8004796:	460d      	mov	r5, r1
 8004798:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800479c:	9416      	str	r4, [sp, #88]	; 0x58
 800479e:	9317      	str	r3, [sp, #92]	; 0x5c
 80047a0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80047a4:	e7a2      	b.n	80046ec <_strtod_l+0x97c>
 80047a6:	f1b8 0f01 	cmp.w	r8, #1
 80047aa:	d103      	bne.n	80047b4 <_strtod_l+0xa44>
 80047ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f43f ad92 	beq.w	80042d8 <_strtod_l+0x568>
 80047b4:	2600      	movs	r6, #0
 80047b6:	2400      	movs	r4, #0
 80047b8:	4f32      	ldr	r7, [pc, #200]	; (8004884 <_strtod_l+0xb14>)
 80047ba:	e796      	b.n	80046ea <_strtod_l+0x97a>
 80047bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80047be:	4d30      	ldr	r5, [pc, #192]	; (8004880 <_strtod_l+0xb10>)
 80047c0:	e7ea      	b.n	8004798 <_strtod_l+0xa28>
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <_strtod_l+0xb10>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	4630      	mov	r0, r6
 80047c8:	4639      	mov	r1, r7
 80047ca:	f7fb fe85 	bl	80004d8 <__aeabi_dmul>
 80047ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047d0:	4604      	mov	r4, r0
 80047d2:	460d      	mov	r5, r1
 80047d4:	b933      	cbnz	r3, 80047e4 <_strtod_l+0xa74>
 80047d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047da:	9010      	str	r0, [sp, #64]	; 0x40
 80047dc:	9311      	str	r3, [sp, #68]	; 0x44
 80047de:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80047e2:	e783      	b.n	80046ec <_strtod_l+0x97c>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80047ec:	e7f7      	b.n	80047de <_strtod_l+0xa6e>
 80047ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80047f2:	9b05      	ldr	r3, [sp, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1a8      	bne.n	800474a <_strtod_l+0x9da>
 80047f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80047fe:	0d1b      	lsrs	r3, r3, #20
 8004800:	051b      	lsls	r3, r3, #20
 8004802:	429a      	cmp	r2, r3
 8004804:	d1a1      	bne.n	800474a <_strtod_l+0x9da>
 8004806:	4620      	mov	r0, r4
 8004808:	4629      	mov	r1, r5
 800480a:	f7fc f9ad 	bl	8000b68 <__aeabi_d2lz>
 800480e:	f7fb fe35 	bl	800047c <__aeabi_l2d>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f7fb fca5 	bl	8000168 <__aeabi_dsub>
 800481e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004824:	ea43 0308 	orr.w	r3, r3, r8
 8004828:	4313      	orrs	r3, r2
 800482a:	4604      	mov	r4, r0
 800482c:	460d      	mov	r5, r1
 800482e:	d066      	beq.n	80048fe <_strtod_l+0xb8e>
 8004830:	a309      	add	r3, pc, #36	; (adr r3, 8004858 <_strtod_l+0xae8>)
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	f7fc f8c1 	bl	80009bc <__aeabi_dcmplt>
 800483a:	2800      	cmp	r0, #0
 800483c:	f47f ace2 	bne.w	8004204 <_strtod_l+0x494>
 8004840:	a307      	add	r3, pc, #28	; (adr r3, 8004860 <_strtod_l+0xaf0>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fc f8d5 	bl	80009f8 <__aeabi_dcmpgt>
 800484e:	2800      	cmp	r0, #0
 8004850:	f43f af7b 	beq.w	800474a <_strtod_l+0x9da>
 8004854:	e4d6      	b.n	8004204 <_strtod_l+0x494>
 8004856:	bf00      	nop
 8004858:	94a03595 	.word	0x94a03595
 800485c:	3fdfffff 	.word	0x3fdfffff
 8004860:	35afe535 	.word	0x35afe535
 8004864:	3fe00000 	.word	0x3fe00000
 8004868:	000fffff 	.word	0x000fffff
 800486c:	7ff00000 	.word	0x7ff00000
 8004870:	7fefffff 	.word	0x7fefffff
 8004874:	3ff00000 	.word	0x3ff00000
 8004878:	7fe00000 	.word	0x7fe00000
 800487c:	7c9fffff 	.word	0x7c9fffff
 8004880:	3fe00000 	.word	0x3fe00000
 8004884:	bff00000 	.word	0xbff00000
 8004888:	9b05      	ldr	r3, [sp, #20]
 800488a:	b313      	cbz	r3, 80048d2 <_strtod_l+0xb62>
 800488c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800488e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004892:	d81e      	bhi.n	80048d2 <_strtod_l+0xb62>
 8004894:	a326      	add	r3, pc, #152	; (adr r3, 8004930 <_strtod_l+0xbc0>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	4620      	mov	r0, r4
 800489c:	4629      	mov	r1, r5
 800489e:	f7fc f897 	bl	80009d0 <__aeabi_dcmple>
 80048a2:	b190      	cbz	r0, 80048ca <_strtod_l+0xb5a>
 80048a4:	4629      	mov	r1, r5
 80048a6:	4620      	mov	r0, r4
 80048a8:	f7fc f8ee 	bl	8000a88 <__aeabi_d2uiz>
 80048ac:	2801      	cmp	r0, #1
 80048ae:	bf38      	it	cc
 80048b0:	2001      	movcc	r0, #1
 80048b2:	f7fb fd97 	bl	80003e4 <__aeabi_ui2d>
 80048b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048b8:	4604      	mov	r4, r0
 80048ba:	460d      	mov	r5, r1
 80048bc:	b9d3      	cbnz	r3, 80048f4 <_strtod_l+0xb84>
 80048be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048c2:	9012      	str	r0, [sp, #72]	; 0x48
 80048c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80048c6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80048ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048cc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80048d0:	1a9f      	subs	r7, r3, r2
 80048d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048d6:	f001 fe41 	bl	800655c <__ulp>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fb fdf9 	bl	80004d8 <__aeabi_dmul>
 80048e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80048ea:	f7fb fc3f 	bl	800016c <__adddf3>
 80048ee:	4680      	mov	r8, r0
 80048f0:	4689      	mov	r9, r1
 80048f2:	e77e      	b.n	80047f2 <_strtod_l+0xa82>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80048fc:	e7e3      	b.n	80048c6 <_strtod_l+0xb56>
 80048fe:	a30e      	add	r3, pc, #56	; (adr r3, 8004938 <_strtod_l+0xbc8>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fc f85a 	bl	80009bc <__aeabi_dcmplt>
 8004908:	e7a1      	b.n	800484e <_strtod_l+0xade>
 800490a:	2300      	movs	r3, #0
 800490c:	930a      	str	r3, [sp, #40]	; 0x28
 800490e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004910:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	f7ff ba71 	b.w	8003dfa <_strtod_l+0x8a>
 8004918:	2a65      	cmp	r2, #101	; 0x65
 800491a:	f43f ab63 	beq.w	8003fe4 <_strtod_l+0x274>
 800491e:	2a45      	cmp	r2, #69	; 0x45
 8004920:	f43f ab60 	beq.w	8003fe4 <_strtod_l+0x274>
 8004924:	2301      	movs	r3, #1
 8004926:	f7ff bb95 	b.w	8004054 <_strtod_l+0x2e4>
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w
 8004930:	ffc00000 	.word	0xffc00000
 8004934:	41dfffff 	.word	0x41dfffff
 8004938:	94a03595 	.word	0x94a03595
 800493c:	3fcfffff 	.word	0x3fcfffff

08004940 <_strtod_r>:
 8004940:	4b01      	ldr	r3, [pc, #4]	; (8004948 <_strtod_r+0x8>)
 8004942:	f7ff ba15 	b.w	8003d70 <_strtod_l>
 8004946:	bf00      	nop
 8004948:	2000007c 	.word	0x2000007c

0800494c <_strtol_l.constprop.0>:
 800494c:	2b01      	cmp	r3, #1
 800494e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004952:	4680      	mov	r8, r0
 8004954:	d001      	beq.n	800495a <_strtol_l.constprop.0+0xe>
 8004956:	2b24      	cmp	r3, #36	; 0x24
 8004958:	d906      	bls.n	8004968 <_strtol_l.constprop.0+0x1c>
 800495a:	f7fe fb21 	bl	8002fa0 <__errno>
 800495e:	2316      	movs	r3, #22
 8004960:	6003      	str	r3, [r0, #0]
 8004962:	2000      	movs	r0, #0
 8004964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004968:	460d      	mov	r5, r1
 800496a:	4f35      	ldr	r7, [pc, #212]	; (8004a40 <_strtol_l.constprop.0+0xf4>)
 800496c:	4628      	mov	r0, r5
 800496e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004972:	5de6      	ldrb	r6, [r4, r7]
 8004974:	f016 0608 	ands.w	r6, r6, #8
 8004978:	d1f8      	bne.n	800496c <_strtol_l.constprop.0+0x20>
 800497a:	2c2d      	cmp	r4, #45	; 0x2d
 800497c:	d12f      	bne.n	80049de <_strtol_l.constprop.0+0x92>
 800497e:	2601      	movs	r6, #1
 8004980:	782c      	ldrb	r4, [r5, #0]
 8004982:	1c85      	adds	r5, r0, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d057      	beq.n	8004a38 <_strtol_l.constprop.0+0xec>
 8004988:	2b10      	cmp	r3, #16
 800498a:	d109      	bne.n	80049a0 <_strtol_l.constprop.0+0x54>
 800498c:	2c30      	cmp	r4, #48	; 0x30
 800498e:	d107      	bne.n	80049a0 <_strtol_l.constprop.0+0x54>
 8004990:	7828      	ldrb	r0, [r5, #0]
 8004992:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004996:	2858      	cmp	r0, #88	; 0x58
 8004998:	d149      	bne.n	8004a2e <_strtol_l.constprop.0+0xe2>
 800499a:	2310      	movs	r3, #16
 800499c:	786c      	ldrb	r4, [r5, #1]
 800499e:	3502      	adds	r5, #2
 80049a0:	2700      	movs	r7, #0
 80049a2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80049a6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80049aa:	fbbe f9f3 	udiv	r9, lr, r3
 80049ae:	4638      	mov	r0, r7
 80049b0:	fb03 ea19 	mls	sl, r3, r9, lr
 80049b4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80049b8:	f1bc 0f09 	cmp.w	ip, #9
 80049bc:	d814      	bhi.n	80049e8 <_strtol_l.constprop.0+0x9c>
 80049be:	4664      	mov	r4, ip
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	dd22      	ble.n	8004a0a <_strtol_l.constprop.0+0xbe>
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	db1d      	blt.n	8004a04 <_strtol_l.constprop.0+0xb8>
 80049c8:	4581      	cmp	r9, r0
 80049ca:	d31b      	bcc.n	8004a04 <_strtol_l.constprop.0+0xb8>
 80049cc:	d101      	bne.n	80049d2 <_strtol_l.constprop.0+0x86>
 80049ce:	45a2      	cmp	sl, r4
 80049d0:	db18      	blt.n	8004a04 <_strtol_l.constprop.0+0xb8>
 80049d2:	2701      	movs	r7, #1
 80049d4:	fb00 4003 	mla	r0, r0, r3, r4
 80049d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049dc:	e7ea      	b.n	80049b4 <_strtol_l.constprop.0+0x68>
 80049de:	2c2b      	cmp	r4, #43	; 0x2b
 80049e0:	bf04      	itt	eq
 80049e2:	782c      	ldrbeq	r4, [r5, #0]
 80049e4:	1c85      	addeq	r5, r0, #2
 80049e6:	e7cd      	b.n	8004984 <_strtol_l.constprop.0+0x38>
 80049e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80049ec:	f1bc 0f19 	cmp.w	ip, #25
 80049f0:	d801      	bhi.n	80049f6 <_strtol_l.constprop.0+0xaa>
 80049f2:	3c37      	subs	r4, #55	; 0x37
 80049f4:	e7e4      	b.n	80049c0 <_strtol_l.constprop.0+0x74>
 80049f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80049fa:	f1bc 0f19 	cmp.w	ip, #25
 80049fe:	d804      	bhi.n	8004a0a <_strtol_l.constprop.0+0xbe>
 8004a00:	3c57      	subs	r4, #87	; 0x57
 8004a02:	e7dd      	b.n	80049c0 <_strtol_l.constprop.0+0x74>
 8004a04:	f04f 37ff 	mov.w	r7, #4294967295
 8004a08:	e7e6      	b.n	80049d8 <_strtol_l.constprop.0+0x8c>
 8004a0a:	2f00      	cmp	r7, #0
 8004a0c:	da07      	bge.n	8004a1e <_strtol_l.constprop.0+0xd2>
 8004a0e:	2322      	movs	r3, #34	; 0x22
 8004a10:	4670      	mov	r0, lr
 8004a12:	f8c8 3000 	str.w	r3, [r8]
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	d0a4      	beq.n	8004964 <_strtol_l.constprop.0+0x18>
 8004a1a:	1e69      	subs	r1, r5, #1
 8004a1c:	e005      	b.n	8004a2a <_strtol_l.constprop.0+0xde>
 8004a1e:	b106      	cbz	r6, 8004a22 <_strtol_l.constprop.0+0xd6>
 8004a20:	4240      	negs	r0, r0
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d09e      	beq.n	8004964 <_strtol_l.constprop.0+0x18>
 8004a26:	2f00      	cmp	r7, #0
 8004a28:	d1f7      	bne.n	8004a1a <_strtol_l.constprop.0+0xce>
 8004a2a:	6011      	str	r1, [r2, #0]
 8004a2c:	e79a      	b.n	8004964 <_strtol_l.constprop.0+0x18>
 8004a2e:	2430      	movs	r4, #48	; 0x30
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1b5      	bne.n	80049a0 <_strtol_l.constprop.0+0x54>
 8004a34:	2308      	movs	r3, #8
 8004a36:	e7b3      	b.n	80049a0 <_strtol_l.constprop.0+0x54>
 8004a38:	2c30      	cmp	r4, #48	; 0x30
 8004a3a:	d0a9      	beq.n	8004990 <_strtol_l.constprop.0+0x44>
 8004a3c:	230a      	movs	r3, #10
 8004a3e:	e7af      	b.n	80049a0 <_strtol_l.constprop.0+0x54>
 8004a40:	08007969 	.word	0x08007969

08004a44 <_strtol_r>:
 8004a44:	f7ff bf82 	b.w	800494c <_strtol_l.constprop.0>

08004a48 <quorem>:
 8004a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	6903      	ldr	r3, [r0, #16]
 8004a4e:	690c      	ldr	r4, [r1, #16]
 8004a50:	4607      	mov	r7, r0
 8004a52:	42a3      	cmp	r3, r4
 8004a54:	f2c0 8082 	blt.w	8004b5c <quorem+0x114>
 8004a58:	3c01      	subs	r4, #1
 8004a5a:	f100 0514 	add.w	r5, r0, #20
 8004a5e:	f101 0814 	add.w	r8, r1, #20
 8004a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a70:	3301      	adds	r3, #1
 8004a72:	429a      	cmp	r2, r3
 8004a74:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a80:	d331      	bcc.n	8004ae6 <quorem+0x9e>
 8004a82:	f04f 0e00 	mov.w	lr, #0
 8004a86:	4640      	mov	r0, r8
 8004a88:	46ac      	mov	ip, r5
 8004a8a:	46f2      	mov	sl, lr
 8004a8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a90:	b293      	uxth	r3, r2
 8004a92:	fb06 e303 	mla	r3, r6, r3, lr
 8004a96:	0c12      	lsrs	r2, r2, #16
 8004a98:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	fb06 e202 	mla	r2, r6, r2, lr
 8004aa2:	ebaa 0303 	sub.w	r3, sl, r3
 8004aa6:	f8dc a000 	ldr.w	sl, [ip]
 8004aaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004aae:	fa1f fa8a 	uxth.w	sl, sl
 8004ab2:	4453      	add	r3, sl
 8004ab4:	f8dc a000 	ldr.w	sl, [ip]
 8004ab8:	b292      	uxth	r2, r2
 8004aba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004abe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ac8:	4581      	cmp	r9, r0
 8004aca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ace:	f84c 3b04 	str.w	r3, [ip], #4
 8004ad2:	d2db      	bcs.n	8004a8c <quorem+0x44>
 8004ad4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ad8:	b92b      	cbnz	r3, 8004ae6 <quorem+0x9e>
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	3b04      	subs	r3, #4
 8004ade:	429d      	cmp	r5, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	d32f      	bcc.n	8004b44 <quorem+0xfc>
 8004ae4:	613c      	str	r4, [r7, #16]
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f001 fc90 	bl	800640c <__mcmp>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	db25      	blt.n	8004b3c <quorem+0xf4>
 8004af0:	4628      	mov	r0, r5
 8004af2:	f04f 0c00 	mov.w	ip, #0
 8004af6:	3601      	adds	r6, #1
 8004af8:	f858 1b04 	ldr.w	r1, [r8], #4
 8004afc:	f8d0 e000 	ldr.w	lr, [r0]
 8004b00:	b28b      	uxth	r3, r1
 8004b02:	ebac 0303 	sub.w	r3, ip, r3
 8004b06:	fa1f f28e 	uxth.w	r2, lr
 8004b0a:	4413      	add	r3, r2
 8004b0c:	0c0a      	lsrs	r2, r1, #16
 8004b0e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b1c:	45c1      	cmp	r9, r8
 8004b1e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b22:	f840 3b04 	str.w	r3, [r0], #4
 8004b26:	d2e7      	bcs.n	8004af8 <quorem+0xb0>
 8004b28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b30:	b922      	cbnz	r2, 8004b3c <quorem+0xf4>
 8004b32:	3b04      	subs	r3, #4
 8004b34:	429d      	cmp	r5, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	d30a      	bcc.n	8004b50 <quorem+0x108>
 8004b3a:	613c      	str	r4, [r7, #16]
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	b003      	add	sp, #12
 8004b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	3b04      	subs	r3, #4
 8004b48:	2a00      	cmp	r2, #0
 8004b4a:	d1cb      	bne.n	8004ae4 <quorem+0x9c>
 8004b4c:	3c01      	subs	r4, #1
 8004b4e:	e7c6      	b.n	8004ade <quorem+0x96>
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	3b04      	subs	r3, #4
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	d1f0      	bne.n	8004b3a <quorem+0xf2>
 8004b58:	3c01      	subs	r4, #1
 8004b5a:	e7eb      	b.n	8004b34 <quorem+0xec>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	e7ee      	b.n	8004b3e <quorem+0xf6>

08004b60 <_dtoa_r>:
 8004b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b64:	4616      	mov	r6, r2
 8004b66:	461f      	mov	r7, r3
 8004b68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004b6a:	b099      	sub	sp, #100	; 0x64
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004b76:	b974      	cbnz	r4, 8004b96 <_dtoa_r+0x36>
 8004b78:	2010      	movs	r0, #16
 8004b7a:	f001 f949 	bl	8005e10 <malloc>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	6268      	str	r0, [r5, #36]	; 0x24
 8004b82:	b920      	cbnz	r0, 8004b8e <_dtoa_r+0x2e>
 8004b84:	21ea      	movs	r1, #234	; 0xea
 8004b86:	4ba8      	ldr	r3, [pc, #672]	; (8004e28 <_dtoa_r+0x2c8>)
 8004b88:	48a8      	ldr	r0, [pc, #672]	; (8004e2c <_dtoa_r+0x2cc>)
 8004b8a:	f002 f8b3 	bl	8006cf4 <__assert_func>
 8004b8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b92:	6004      	str	r4, [r0, #0]
 8004b94:	60c4      	str	r4, [r0, #12]
 8004b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	b151      	cbz	r1, 8004bb2 <_dtoa_r+0x52>
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4093      	lsls	r3, r2
 8004ba2:	604a      	str	r2, [r1, #4]
 8004ba4:	608b      	str	r3, [r1, #8]
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f001 f9a8 	bl	8005efc <_Bfree>
 8004bac:	2200      	movs	r2, #0
 8004bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	1e3b      	subs	r3, r7, #0
 8004bb4:	bfaf      	iteee	ge
 8004bb6:	2300      	movge	r3, #0
 8004bb8:	2201      	movlt	r2, #1
 8004bba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bbe:	9305      	strlt	r3, [sp, #20]
 8004bc0:	bfa8      	it	ge
 8004bc2:	f8c8 3000 	strge.w	r3, [r8]
 8004bc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004bca:	4b99      	ldr	r3, [pc, #612]	; (8004e30 <_dtoa_r+0x2d0>)
 8004bcc:	bfb8      	it	lt
 8004bce:	f8c8 2000 	strlt.w	r2, [r8]
 8004bd2:	ea33 0309 	bics.w	r3, r3, r9
 8004bd6:	d119      	bne.n	8004c0c <_dtoa_r+0xac>
 8004bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004be4:	4333      	orrs	r3, r6
 8004be6:	f000 857f 	beq.w	80056e8 <_dtoa_r+0xb88>
 8004bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004bec:	b953      	cbnz	r3, 8004c04 <_dtoa_r+0xa4>
 8004bee:	4b91      	ldr	r3, [pc, #580]	; (8004e34 <_dtoa_r+0x2d4>)
 8004bf0:	e022      	b.n	8004c38 <_dtoa_r+0xd8>
 8004bf2:	4b91      	ldr	r3, [pc, #580]	; (8004e38 <_dtoa_r+0x2d8>)
 8004bf4:	9303      	str	r3, [sp, #12]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	9803      	ldr	r0, [sp, #12]
 8004bfe:	b019      	add	sp, #100	; 0x64
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c04:	4b8b      	ldr	r3, [pc, #556]	; (8004e34 <_dtoa_r+0x2d4>)
 8004c06:	9303      	str	r3, [sp, #12]
 8004c08:	3303      	adds	r3, #3
 8004c0a:	e7f5      	b.n	8004bf8 <_dtoa_r+0x98>
 8004c0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f7fb fec4 	bl	80009a8 <__aeabi_dcmpeq>
 8004c20:	4680      	mov	r8, r0
 8004c22:	b158      	cbz	r0, 8004c3c <_dtoa_r+0xdc>
 8004c24:	2301      	movs	r3, #1
 8004c26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8558 	beq.w	80056e2 <_dtoa_r+0xb82>
 8004c32:	4882      	ldr	r0, [pc, #520]	; (8004e3c <_dtoa_r+0x2dc>)
 8004c34:	6018      	str	r0, [r3, #0]
 8004c36:	1e43      	subs	r3, r0, #1
 8004c38:	9303      	str	r3, [sp, #12]
 8004c3a:	e7df      	b.n	8004bfc <_dtoa_r+0x9c>
 8004c3c:	ab16      	add	r3, sp, #88	; 0x58
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	ab17      	add	r3, sp, #92	; 0x5c
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	4628      	mov	r0, r5
 8004c46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c4a:	f001 fd01 	bl	8006650 <__d2b>
 8004c4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004c52:	4683      	mov	fp, r0
 8004c54:	2c00      	cmp	r4, #0
 8004c56:	d07f      	beq.n	8004d58 <_dtoa_r+0x1f8>
 8004c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004c62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004c6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004c6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004c72:	2200      	movs	r2, #0
 8004c74:	4b72      	ldr	r3, [pc, #456]	; (8004e40 <_dtoa_r+0x2e0>)
 8004c76:	f7fb fa77 	bl	8000168 <__aeabi_dsub>
 8004c7a:	a365      	add	r3, pc, #404	; (adr r3, 8004e10 <_dtoa_r+0x2b0>)
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f7fb fc2a 	bl	80004d8 <__aeabi_dmul>
 8004c84:	a364      	add	r3, pc, #400	; (adr r3, 8004e18 <_dtoa_r+0x2b8>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f7fb fa6f 	bl	800016c <__adddf3>
 8004c8e:	4606      	mov	r6, r0
 8004c90:	4620      	mov	r0, r4
 8004c92:	460f      	mov	r7, r1
 8004c94:	f7fb fbb6 	bl	8000404 <__aeabi_i2d>
 8004c98:	a361      	add	r3, pc, #388	; (adr r3, 8004e20 <_dtoa_r+0x2c0>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f7fb fc1b 	bl	80004d8 <__aeabi_dmul>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	4639      	mov	r1, r7
 8004caa:	f7fb fa5f 	bl	800016c <__adddf3>
 8004cae:	4606      	mov	r6, r0
 8004cb0:	460f      	mov	r7, r1
 8004cb2:	f7fb fec1 	bl	8000a38 <__aeabi_d2iz>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	4682      	mov	sl, r0
 8004cba:	2300      	movs	r3, #0
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	f7fb fe7c 	bl	80009bc <__aeabi_dcmplt>
 8004cc4:	b148      	cbz	r0, 8004cda <_dtoa_r+0x17a>
 8004cc6:	4650      	mov	r0, sl
 8004cc8:	f7fb fb9c 	bl	8000404 <__aeabi_i2d>
 8004ccc:	4632      	mov	r2, r6
 8004cce:	463b      	mov	r3, r7
 8004cd0:	f7fb fe6a 	bl	80009a8 <__aeabi_dcmpeq>
 8004cd4:	b908      	cbnz	r0, 8004cda <_dtoa_r+0x17a>
 8004cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cda:	f1ba 0f16 	cmp.w	sl, #22
 8004cde:	d858      	bhi.n	8004d92 <_dtoa_r+0x232>
 8004ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ce4:	4b57      	ldr	r3, [pc, #348]	; (8004e44 <_dtoa_r+0x2e4>)
 8004ce6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f7fb fe65 	bl	80009bc <__aeabi_dcmplt>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d04f      	beq.n	8004d96 <_dtoa_r+0x236>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d00:	1b1c      	subs	r4, r3, r4
 8004d02:	1e63      	subs	r3, r4, #1
 8004d04:	9309      	str	r3, [sp, #36]	; 0x24
 8004d06:	bf49      	itett	mi
 8004d08:	f1c4 0301 	rsbmi	r3, r4, #1
 8004d0c:	2300      	movpl	r3, #0
 8004d0e:	9306      	strmi	r3, [sp, #24]
 8004d10:	2300      	movmi	r3, #0
 8004d12:	bf54      	ite	pl
 8004d14:	9306      	strpl	r3, [sp, #24]
 8004d16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004d18:	f1ba 0f00 	cmp.w	sl, #0
 8004d1c:	db3d      	blt.n	8004d9a <_dtoa_r+0x23a>
 8004d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d20:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004d24:	4453      	add	r3, sl
 8004d26:	9309      	str	r3, [sp, #36]	; 0x24
 8004d28:	2300      	movs	r3, #0
 8004d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	f200 808c 	bhi.w	8004e4c <_dtoa_r+0x2ec>
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	bfc4      	itt	gt
 8004d38:	3b04      	subgt	r3, #4
 8004d3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d3e:	bfc8      	it	gt
 8004d40:	2400      	movgt	r4, #0
 8004d42:	f1a3 0302 	sub.w	r3, r3, #2
 8004d46:	bfd8      	it	le
 8004d48:	2401      	movle	r4, #1
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	f200 808a 	bhi.w	8004e64 <_dtoa_r+0x304>
 8004d50:	e8df f003 	tbb	[pc, r3]
 8004d54:	5b4d4f2d 	.word	0x5b4d4f2d
 8004d58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004d5c:	441c      	add	r4, r3
 8004d5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	bfc3      	ittte	gt
 8004d66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d6a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004d6e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004d72:	f1c3 0320 	rsble	r3, r3, #32
 8004d76:	bfc6      	itte	gt
 8004d78:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004d7c:	4318      	orrgt	r0, r3
 8004d7e:	fa06 f003 	lslle.w	r0, r6, r3
 8004d82:	f7fb fb2f 	bl	80003e4 <__aeabi_ui2d>
 8004d86:	2301      	movs	r3, #1
 8004d88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004d8c:	3c01      	subs	r4, #1
 8004d8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d90:	e76f      	b.n	8004c72 <_dtoa_r+0x112>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e7b2      	b.n	8004cfc <_dtoa_r+0x19c>
 8004d96:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d98:	e7b1      	b.n	8004cfe <_dtoa_r+0x19e>
 8004d9a:	9b06      	ldr	r3, [sp, #24]
 8004d9c:	eba3 030a 	sub.w	r3, r3, sl
 8004da0:	9306      	str	r3, [sp, #24]
 8004da2:	f1ca 0300 	rsb	r3, sl, #0
 8004da6:	930a      	str	r3, [sp, #40]	; 0x28
 8004da8:	2300      	movs	r3, #0
 8004daa:	930e      	str	r3, [sp, #56]	; 0x38
 8004dac:	e7be      	b.n	8004d2c <_dtoa_r+0x1cc>
 8004dae:	2300      	movs	r3, #0
 8004db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	dc58      	bgt.n	8004e6a <_dtoa_r+0x30a>
 8004db8:	f04f 0901 	mov.w	r9, #1
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	f8cd 9020 	str.w	r9, [sp, #32]
 8004dc2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004dca:	6042      	str	r2, [r0, #4]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	f102 0614 	add.w	r6, r2, #20
 8004dd2:	429e      	cmp	r6, r3
 8004dd4:	6841      	ldr	r1, [r0, #4]
 8004dd6:	d94e      	bls.n	8004e76 <_dtoa_r+0x316>
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f001 f84f 	bl	8005e7c <_Balloc>
 8004dde:	9003      	str	r0, [sp, #12]
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d14c      	bne.n	8004e7e <_dtoa_r+0x31e>
 8004de4:	4602      	mov	r2, r0
 8004de6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <_dtoa_r+0x2e8>)
 8004dec:	e6cc      	b.n	8004b88 <_dtoa_r+0x28>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e7de      	b.n	8004db0 <_dtoa_r+0x250>
 8004df2:	2300      	movs	r3, #0
 8004df4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004df6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004df8:	eb0a 0903 	add.w	r9, sl, r3
 8004dfc:	f109 0301 	add.w	r3, r9, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	9308      	str	r3, [sp, #32]
 8004e04:	bfb8      	it	lt
 8004e06:	2301      	movlt	r3, #1
 8004e08:	e7dd      	b.n	8004dc6 <_dtoa_r+0x266>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e7f2      	b.n	8004df4 <_dtoa_r+0x294>
 8004e0e:	bf00      	nop
 8004e10:	636f4361 	.word	0x636f4361
 8004e14:	3fd287a7 	.word	0x3fd287a7
 8004e18:	8b60c8b3 	.word	0x8b60c8b3
 8004e1c:	3fc68a28 	.word	0x3fc68a28
 8004e20:	509f79fb 	.word	0x509f79fb
 8004e24:	3fd34413 	.word	0x3fd34413
 8004e28:	08007a76 	.word	0x08007a76
 8004e2c:	08007a8d 	.word	0x08007a8d
 8004e30:	7ff00000 	.word	0x7ff00000
 8004e34:	08007a72 	.word	0x08007a72
 8004e38:	08007a69 	.word	0x08007a69
 8004e3c:	080078ed 	.word	0x080078ed
 8004e40:	3ff80000 	.word	0x3ff80000
 8004e44:	08007bf8 	.word	0x08007bf8
 8004e48:	08007ae8 	.word	0x08007ae8
 8004e4c:	2401      	movs	r4, #1
 8004e4e:	2300      	movs	r3, #0
 8004e50:	940b      	str	r4, [sp, #44]	; 0x2c
 8004e52:	9322      	str	r3, [sp, #136]	; 0x88
 8004e54:	f04f 39ff 	mov.w	r9, #4294967295
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2312      	movs	r3, #18
 8004e5c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004e60:	9223      	str	r2, [sp, #140]	; 0x8c
 8004e62:	e7b0      	b.n	8004dc6 <_dtoa_r+0x266>
 8004e64:	2301      	movs	r3, #1
 8004e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e68:	e7f4      	b.n	8004e54 <_dtoa_r+0x2f4>
 8004e6a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004e6e:	464b      	mov	r3, r9
 8004e70:	f8cd 9020 	str.w	r9, [sp, #32]
 8004e74:	e7a7      	b.n	8004dc6 <_dtoa_r+0x266>
 8004e76:	3101      	adds	r1, #1
 8004e78:	6041      	str	r1, [r0, #4]
 8004e7a:	0052      	lsls	r2, r2, #1
 8004e7c:	e7a7      	b.n	8004dce <_dtoa_r+0x26e>
 8004e7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e80:	9a03      	ldr	r2, [sp, #12]
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	9b08      	ldr	r3, [sp, #32]
 8004e86:	2b0e      	cmp	r3, #14
 8004e88:	f200 80a8 	bhi.w	8004fdc <_dtoa_r+0x47c>
 8004e8c:	2c00      	cmp	r4, #0
 8004e8e:	f000 80a5 	beq.w	8004fdc <_dtoa_r+0x47c>
 8004e92:	f1ba 0f00 	cmp.w	sl, #0
 8004e96:	dd34      	ble.n	8004f02 <_dtoa_r+0x3a2>
 8004e98:	4a9a      	ldr	r2, [pc, #616]	; (8005104 <_dtoa_r+0x5a4>)
 8004e9a:	f00a 030f 	and.w	r3, sl, #15
 8004e9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ea2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004ea6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004eaa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004eae:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004eb2:	d016      	beq.n	8004ee2 <_dtoa_r+0x382>
 8004eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004eb8:	4b93      	ldr	r3, [pc, #588]	; (8005108 <_dtoa_r+0x5a8>)
 8004eba:	2703      	movs	r7, #3
 8004ebc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ec0:	f7fb fc34 	bl	800072c <__aeabi_ddiv>
 8004ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ec8:	f004 040f 	and.w	r4, r4, #15
 8004ecc:	4e8e      	ldr	r6, [pc, #568]	; (8005108 <_dtoa_r+0x5a8>)
 8004ece:	b954      	cbnz	r4, 8004ee6 <_dtoa_r+0x386>
 8004ed0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ed8:	f7fb fc28 	bl	800072c <__aeabi_ddiv>
 8004edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ee0:	e029      	b.n	8004f36 <_dtoa_r+0x3d6>
 8004ee2:	2702      	movs	r7, #2
 8004ee4:	e7f2      	b.n	8004ecc <_dtoa_r+0x36c>
 8004ee6:	07e1      	lsls	r1, r4, #31
 8004ee8:	d508      	bpl.n	8004efc <_dtoa_r+0x39c>
 8004eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004eee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ef2:	f7fb faf1 	bl	80004d8 <__aeabi_dmul>
 8004ef6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004efa:	3701      	adds	r7, #1
 8004efc:	1064      	asrs	r4, r4, #1
 8004efe:	3608      	adds	r6, #8
 8004f00:	e7e5      	b.n	8004ece <_dtoa_r+0x36e>
 8004f02:	f000 80a5 	beq.w	8005050 <_dtoa_r+0x4f0>
 8004f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f0a:	f1ca 0400 	rsb	r4, sl, #0
 8004f0e:	4b7d      	ldr	r3, [pc, #500]	; (8005104 <_dtoa_r+0x5a4>)
 8004f10:	f004 020f 	and.w	r2, r4, #15
 8004f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f7fb fadc 	bl	80004d8 <__aeabi_dmul>
 8004f20:	2702      	movs	r7, #2
 8004f22:	2300      	movs	r3, #0
 8004f24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f28:	4e77      	ldr	r6, [pc, #476]	; (8005108 <_dtoa_r+0x5a8>)
 8004f2a:	1124      	asrs	r4, r4, #4
 8004f2c:	2c00      	cmp	r4, #0
 8004f2e:	f040 8084 	bne.w	800503a <_dtoa_r+0x4da>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1d2      	bne.n	8004edc <_dtoa_r+0x37c>
 8004f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 808b 	beq.w	8005054 <_dtoa_r+0x4f4>
 8004f3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	4b6f      	ldr	r3, [pc, #444]	; (800510c <_dtoa_r+0x5ac>)
 8004f4e:	f7fb fd35 	bl	80009bc <__aeabi_dcmplt>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d07e      	beq.n	8005054 <_dtoa_r+0x4f4>
 8004f56:	9b08      	ldr	r3, [sp, #32]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d07b      	beq.n	8005054 <_dtoa_r+0x4f4>
 8004f5c:	f1b9 0f00 	cmp.w	r9, #0
 8004f60:	dd38      	ble.n	8004fd4 <_dtoa_r+0x474>
 8004f62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f66:	2200      	movs	r2, #0
 8004f68:	4b69      	ldr	r3, [pc, #420]	; (8005110 <_dtoa_r+0x5b0>)
 8004f6a:	f7fb fab5 	bl	80004d8 <__aeabi_dmul>
 8004f6e:	464c      	mov	r4, r9
 8004f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f74:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004f78:	3701      	adds	r7, #1
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	f7fb fa42 	bl	8000404 <__aeabi_i2d>
 8004f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f84:	f7fb faa8 	bl	80004d8 <__aeabi_dmul>
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4b62      	ldr	r3, [pc, #392]	; (8005114 <_dtoa_r+0x5b4>)
 8004f8c:	f7fb f8ee 	bl	800016c <__adddf3>
 8004f90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004f94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f98:	9611      	str	r6, [sp, #68]	; 0x44
 8004f9a:	2c00      	cmp	r4, #0
 8004f9c:	d15d      	bne.n	800505a <_dtoa_r+0x4fa>
 8004f9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	4b5c      	ldr	r3, [pc, #368]	; (8005118 <_dtoa_r+0x5b8>)
 8004fa6:	f7fb f8df 	bl	8000168 <__aeabi_dsub>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fb2:	4633      	mov	r3, r6
 8004fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fb6:	f7fb fd1f 	bl	80009f8 <__aeabi_dcmpgt>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f040 829c 	bne.w	80054f8 <_dtoa_r+0x998>
 8004fc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fc6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004fca:	f7fb fcf7 	bl	80009bc <__aeabi_dcmplt>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	f040 8290 	bne.w	80054f4 <_dtoa_r+0x994>
 8004fd4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004fd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f2c0 8152 	blt.w	8005288 <_dtoa_r+0x728>
 8004fe4:	f1ba 0f0e 	cmp.w	sl, #14
 8004fe8:	f300 814e 	bgt.w	8005288 <_dtoa_r+0x728>
 8004fec:	4b45      	ldr	r3, [pc, #276]	; (8005104 <_dtoa_r+0x5a4>)
 8004fee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ff2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ff6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004ffa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f280 80db 	bge.w	80051b8 <_dtoa_r+0x658>
 8005002:	9b08      	ldr	r3, [sp, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f300 80d7 	bgt.w	80051b8 <_dtoa_r+0x658>
 800500a:	f040 8272 	bne.w	80054f2 <_dtoa_r+0x992>
 800500e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005012:	2200      	movs	r2, #0
 8005014:	4b40      	ldr	r3, [pc, #256]	; (8005118 <_dtoa_r+0x5b8>)
 8005016:	f7fb fa5f 	bl	80004d8 <__aeabi_dmul>
 800501a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800501e:	f7fb fce1 	bl	80009e4 <__aeabi_dcmpge>
 8005022:	9c08      	ldr	r4, [sp, #32]
 8005024:	4626      	mov	r6, r4
 8005026:	2800      	cmp	r0, #0
 8005028:	f040 8248 	bne.w	80054bc <_dtoa_r+0x95c>
 800502c:	2331      	movs	r3, #49	; 0x31
 800502e:	9f03      	ldr	r7, [sp, #12]
 8005030:	f10a 0a01 	add.w	sl, sl, #1
 8005034:	f807 3b01 	strb.w	r3, [r7], #1
 8005038:	e244      	b.n	80054c4 <_dtoa_r+0x964>
 800503a:	07e2      	lsls	r2, r4, #31
 800503c:	d505      	bpl.n	800504a <_dtoa_r+0x4ea>
 800503e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005042:	f7fb fa49 	bl	80004d8 <__aeabi_dmul>
 8005046:	2301      	movs	r3, #1
 8005048:	3701      	adds	r7, #1
 800504a:	1064      	asrs	r4, r4, #1
 800504c:	3608      	adds	r6, #8
 800504e:	e76d      	b.n	8004f2c <_dtoa_r+0x3cc>
 8005050:	2702      	movs	r7, #2
 8005052:	e770      	b.n	8004f36 <_dtoa_r+0x3d6>
 8005054:	46d0      	mov	r8, sl
 8005056:	9c08      	ldr	r4, [sp, #32]
 8005058:	e78f      	b.n	8004f7a <_dtoa_r+0x41a>
 800505a:	9903      	ldr	r1, [sp, #12]
 800505c:	4b29      	ldr	r3, [pc, #164]	; (8005104 <_dtoa_r+0x5a4>)
 800505e:	4421      	add	r1, r4
 8005060:	9112      	str	r1, [sp, #72]	; 0x48
 8005062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005064:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005068:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800506c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005070:	2900      	cmp	r1, #0
 8005072:	d055      	beq.n	8005120 <_dtoa_r+0x5c0>
 8005074:	2000      	movs	r0, #0
 8005076:	4929      	ldr	r1, [pc, #164]	; (800511c <_dtoa_r+0x5bc>)
 8005078:	f7fb fb58 	bl	800072c <__aeabi_ddiv>
 800507c:	463b      	mov	r3, r7
 800507e:	4632      	mov	r2, r6
 8005080:	f7fb f872 	bl	8000168 <__aeabi_dsub>
 8005084:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005088:	9f03      	ldr	r7, [sp, #12]
 800508a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800508e:	f7fb fcd3 	bl	8000a38 <__aeabi_d2iz>
 8005092:	4604      	mov	r4, r0
 8005094:	f7fb f9b6 	bl	8000404 <__aeabi_i2d>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050a0:	f7fb f862 	bl	8000168 <__aeabi_dsub>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	3430      	adds	r4, #48	; 0x30
 80050aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050b2:	f807 4b01 	strb.w	r4, [r7], #1
 80050b6:	f7fb fc81 	bl	80009bc <__aeabi_dcmplt>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d174      	bne.n	80051a8 <_dtoa_r+0x648>
 80050be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c2:	2000      	movs	r0, #0
 80050c4:	4911      	ldr	r1, [pc, #68]	; (800510c <_dtoa_r+0x5ac>)
 80050c6:	f7fb f84f 	bl	8000168 <__aeabi_dsub>
 80050ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050ce:	f7fb fc75 	bl	80009bc <__aeabi_dcmplt>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	f040 80b7 	bne.w	8005246 <_dtoa_r+0x6e6>
 80050d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050da:	429f      	cmp	r7, r3
 80050dc:	f43f af7a 	beq.w	8004fd4 <_dtoa_r+0x474>
 80050e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050e4:	2200      	movs	r2, #0
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <_dtoa_r+0x5b0>)
 80050e8:	f7fb f9f6 	bl	80004d8 <__aeabi_dmul>
 80050ec:	2200      	movs	r2, #0
 80050ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <_dtoa_r+0x5b0>)
 80050f8:	f7fb f9ee 	bl	80004d8 <__aeabi_dmul>
 80050fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005100:	e7c3      	b.n	800508a <_dtoa_r+0x52a>
 8005102:	bf00      	nop
 8005104:	08007bf8 	.word	0x08007bf8
 8005108:	08007bd0 	.word	0x08007bd0
 800510c:	3ff00000 	.word	0x3ff00000
 8005110:	40240000 	.word	0x40240000
 8005114:	401c0000 	.word	0x401c0000
 8005118:	40140000 	.word	0x40140000
 800511c:	3fe00000 	.word	0x3fe00000
 8005120:	4630      	mov	r0, r6
 8005122:	4639      	mov	r1, r7
 8005124:	f7fb f9d8 	bl	80004d8 <__aeabi_dmul>
 8005128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800512a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800512e:	9c03      	ldr	r4, [sp, #12]
 8005130:	9314      	str	r3, [sp, #80]	; 0x50
 8005132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005136:	f7fb fc7f 	bl	8000a38 <__aeabi_d2iz>
 800513a:	9015      	str	r0, [sp, #84]	; 0x54
 800513c:	f7fb f962 	bl	8000404 <__aeabi_i2d>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005148:	f7fb f80e 	bl	8000168 <__aeabi_dsub>
 800514c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800514e:	4606      	mov	r6, r0
 8005150:	3330      	adds	r3, #48	; 0x30
 8005152:	f804 3b01 	strb.w	r3, [r4], #1
 8005156:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005158:	460f      	mov	r7, r1
 800515a:	429c      	cmp	r4, r3
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	d124      	bne.n	80051ac <_dtoa_r+0x64c>
 8005162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005166:	4bb0      	ldr	r3, [pc, #704]	; (8005428 <_dtoa_r+0x8c8>)
 8005168:	f7fb f800 	bl	800016c <__adddf3>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb fc40 	bl	80009f8 <__aeabi_dcmpgt>
 8005178:	2800      	cmp	r0, #0
 800517a:	d163      	bne.n	8005244 <_dtoa_r+0x6e4>
 800517c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005180:	2000      	movs	r0, #0
 8005182:	49a9      	ldr	r1, [pc, #676]	; (8005428 <_dtoa_r+0x8c8>)
 8005184:	f7fa fff0 	bl	8000168 <__aeabi_dsub>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4630      	mov	r0, r6
 800518e:	4639      	mov	r1, r7
 8005190:	f7fb fc14 	bl	80009bc <__aeabi_dcmplt>
 8005194:	2800      	cmp	r0, #0
 8005196:	f43f af1d 	beq.w	8004fd4 <_dtoa_r+0x474>
 800519a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800519c:	1e7b      	subs	r3, r7, #1
 800519e:	9314      	str	r3, [sp, #80]	; 0x50
 80051a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80051a4:	2b30      	cmp	r3, #48	; 0x30
 80051a6:	d0f8      	beq.n	800519a <_dtoa_r+0x63a>
 80051a8:	46c2      	mov	sl, r8
 80051aa:	e03b      	b.n	8005224 <_dtoa_r+0x6c4>
 80051ac:	4b9f      	ldr	r3, [pc, #636]	; (800542c <_dtoa_r+0x8cc>)
 80051ae:	f7fb f993 	bl	80004d8 <__aeabi_dmul>
 80051b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051b6:	e7bc      	b.n	8005132 <_dtoa_r+0x5d2>
 80051b8:	9f03      	ldr	r7, [sp, #12]
 80051ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80051be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051c2:	4640      	mov	r0, r8
 80051c4:	4649      	mov	r1, r9
 80051c6:	f7fb fab1 	bl	800072c <__aeabi_ddiv>
 80051ca:	f7fb fc35 	bl	8000a38 <__aeabi_d2iz>
 80051ce:	4604      	mov	r4, r0
 80051d0:	f7fb f918 	bl	8000404 <__aeabi_i2d>
 80051d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051d8:	f7fb f97e 	bl	80004d8 <__aeabi_dmul>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4640      	mov	r0, r8
 80051e2:	4649      	mov	r1, r9
 80051e4:	f7fa ffc0 	bl	8000168 <__aeabi_dsub>
 80051e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80051ec:	f807 6b01 	strb.w	r6, [r7], #1
 80051f0:	9e03      	ldr	r6, [sp, #12]
 80051f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80051f6:	1bbe      	subs	r6, r7, r6
 80051f8:	45b4      	cmp	ip, r6
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	d136      	bne.n	800526e <_dtoa_r+0x70e>
 8005200:	f7fa ffb4 	bl	800016c <__adddf3>
 8005204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005208:	4680      	mov	r8, r0
 800520a:	4689      	mov	r9, r1
 800520c:	f7fb fbf4 	bl	80009f8 <__aeabi_dcmpgt>
 8005210:	bb58      	cbnz	r0, 800526a <_dtoa_r+0x70a>
 8005212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005216:	4640      	mov	r0, r8
 8005218:	4649      	mov	r1, r9
 800521a:	f7fb fbc5 	bl	80009a8 <__aeabi_dcmpeq>
 800521e:	b108      	cbz	r0, 8005224 <_dtoa_r+0x6c4>
 8005220:	07e1      	lsls	r1, r4, #31
 8005222:	d422      	bmi.n	800526a <_dtoa_r+0x70a>
 8005224:	4628      	mov	r0, r5
 8005226:	4659      	mov	r1, fp
 8005228:	f000 fe68 	bl	8005efc <_Bfree>
 800522c:	2300      	movs	r3, #0
 800522e:	703b      	strb	r3, [r7, #0]
 8005230:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005232:	f10a 0001 	add.w	r0, sl, #1
 8005236:	6018      	str	r0, [r3, #0]
 8005238:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800523a:	2b00      	cmp	r3, #0
 800523c:	f43f acde 	beq.w	8004bfc <_dtoa_r+0x9c>
 8005240:	601f      	str	r7, [r3, #0]
 8005242:	e4db      	b.n	8004bfc <_dtoa_r+0x9c>
 8005244:	4627      	mov	r7, r4
 8005246:	463b      	mov	r3, r7
 8005248:	461f      	mov	r7, r3
 800524a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800524e:	2a39      	cmp	r2, #57	; 0x39
 8005250:	d107      	bne.n	8005262 <_dtoa_r+0x702>
 8005252:	9a03      	ldr	r2, [sp, #12]
 8005254:	429a      	cmp	r2, r3
 8005256:	d1f7      	bne.n	8005248 <_dtoa_r+0x6e8>
 8005258:	2230      	movs	r2, #48	; 0x30
 800525a:	9903      	ldr	r1, [sp, #12]
 800525c:	f108 0801 	add.w	r8, r8, #1
 8005260:	700a      	strb	r2, [r1, #0]
 8005262:	781a      	ldrb	r2, [r3, #0]
 8005264:	3201      	adds	r2, #1
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e79e      	b.n	80051a8 <_dtoa_r+0x648>
 800526a:	46d0      	mov	r8, sl
 800526c:	e7eb      	b.n	8005246 <_dtoa_r+0x6e6>
 800526e:	2200      	movs	r2, #0
 8005270:	4b6e      	ldr	r3, [pc, #440]	; (800542c <_dtoa_r+0x8cc>)
 8005272:	f7fb f931 	bl	80004d8 <__aeabi_dmul>
 8005276:	2200      	movs	r2, #0
 8005278:	2300      	movs	r3, #0
 800527a:	4680      	mov	r8, r0
 800527c:	4689      	mov	r9, r1
 800527e:	f7fb fb93 	bl	80009a8 <__aeabi_dcmpeq>
 8005282:	2800      	cmp	r0, #0
 8005284:	d09b      	beq.n	80051be <_dtoa_r+0x65e>
 8005286:	e7cd      	b.n	8005224 <_dtoa_r+0x6c4>
 8005288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800528a:	2a00      	cmp	r2, #0
 800528c:	f000 80d0 	beq.w	8005430 <_dtoa_r+0x8d0>
 8005290:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005292:	2a01      	cmp	r2, #1
 8005294:	f300 80ae 	bgt.w	80053f4 <_dtoa_r+0x894>
 8005298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800529a:	2a00      	cmp	r2, #0
 800529c:	f000 80a6 	beq.w	80053ec <_dtoa_r+0x88c>
 80052a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80052a6:	9f06      	ldr	r7, [sp, #24]
 80052a8:	9a06      	ldr	r2, [sp, #24]
 80052aa:	2101      	movs	r1, #1
 80052ac:	441a      	add	r2, r3
 80052ae:	9206      	str	r2, [sp, #24]
 80052b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b2:	4628      	mov	r0, r5
 80052b4:	441a      	add	r2, r3
 80052b6:	9209      	str	r2, [sp, #36]	; 0x24
 80052b8:	f000 ff20 	bl	80060fc <__i2b>
 80052bc:	4606      	mov	r6, r0
 80052be:	2f00      	cmp	r7, #0
 80052c0:	dd0c      	ble.n	80052dc <_dtoa_r+0x77c>
 80052c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dd09      	ble.n	80052dc <_dtoa_r+0x77c>
 80052c8:	42bb      	cmp	r3, r7
 80052ca:	bfa8      	it	ge
 80052cc:	463b      	movge	r3, r7
 80052ce:	9a06      	ldr	r2, [sp, #24]
 80052d0:	1aff      	subs	r7, r7, r3
 80052d2:	1ad2      	subs	r2, r2, r3
 80052d4:	9206      	str	r2, [sp, #24]
 80052d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	9309      	str	r3, [sp, #36]	; 0x24
 80052dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052de:	b1f3      	cbz	r3, 800531e <_dtoa_r+0x7be>
 80052e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80a8 	beq.w	8005438 <_dtoa_r+0x8d8>
 80052e8:	2c00      	cmp	r4, #0
 80052ea:	dd10      	ble.n	800530e <_dtoa_r+0x7ae>
 80052ec:	4631      	mov	r1, r6
 80052ee:	4622      	mov	r2, r4
 80052f0:	4628      	mov	r0, r5
 80052f2:	f000 ffc1 	bl	8006278 <__pow5mult>
 80052f6:	465a      	mov	r2, fp
 80052f8:	4601      	mov	r1, r0
 80052fa:	4606      	mov	r6, r0
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 ff13 	bl	8006128 <__multiply>
 8005302:	4680      	mov	r8, r0
 8005304:	4659      	mov	r1, fp
 8005306:	4628      	mov	r0, r5
 8005308:	f000 fdf8 	bl	8005efc <_Bfree>
 800530c:	46c3      	mov	fp, r8
 800530e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005310:	1b1a      	subs	r2, r3, r4
 8005312:	d004      	beq.n	800531e <_dtoa_r+0x7be>
 8005314:	4659      	mov	r1, fp
 8005316:	4628      	mov	r0, r5
 8005318:	f000 ffae 	bl	8006278 <__pow5mult>
 800531c:	4683      	mov	fp, r0
 800531e:	2101      	movs	r1, #1
 8005320:	4628      	mov	r0, r5
 8005322:	f000 feeb 	bl	80060fc <__i2b>
 8005326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005328:	4604      	mov	r4, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	f340 8086 	ble.w	800543c <_dtoa_r+0x8dc>
 8005330:	461a      	mov	r2, r3
 8005332:	4601      	mov	r1, r0
 8005334:	4628      	mov	r0, r5
 8005336:	f000 ff9f 	bl	8006278 <__pow5mult>
 800533a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800533c:	4604      	mov	r4, r0
 800533e:	2b01      	cmp	r3, #1
 8005340:	dd7f      	ble.n	8005442 <_dtoa_r+0x8e2>
 8005342:	f04f 0800 	mov.w	r8, #0
 8005346:	6923      	ldr	r3, [r4, #16]
 8005348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800534c:	6918      	ldr	r0, [r3, #16]
 800534e:	f000 fe87 	bl	8006060 <__hi0bits>
 8005352:	f1c0 0020 	rsb	r0, r0, #32
 8005356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005358:	4418      	add	r0, r3
 800535a:	f010 001f 	ands.w	r0, r0, #31
 800535e:	f000 8092 	beq.w	8005486 <_dtoa_r+0x926>
 8005362:	f1c0 0320 	rsb	r3, r0, #32
 8005366:	2b04      	cmp	r3, #4
 8005368:	f340 808a 	ble.w	8005480 <_dtoa_r+0x920>
 800536c:	f1c0 001c 	rsb	r0, r0, #28
 8005370:	9b06      	ldr	r3, [sp, #24]
 8005372:	4407      	add	r7, r0
 8005374:	4403      	add	r3, r0
 8005376:	9306      	str	r3, [sp, #24]
 8005378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537a:	4403      	add	r3, r0
 800537c:	9309      	str	r3, [sp, #36]	; 0x24
 800537e:	9b06      	ldr	r3, [sp, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	dd05      	ble.n	8005390 <_dtoa_r+0x830>
 8005384:	4659      	mov	r1, fp
 8005386:	461a      	mov	r2, r3
 8005388:	4628      	mov	r0, r5
 800538a:	f000 ffcf 	bl	800632c <__lshift>
 800538e:	4683      	mov	fp, r0
 8005390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	dd05      	ble.n	80053a2 <_dtoa_r+0x842>
 8005396:	4621      	mov	r1, r4
 8005398:	461a      	mov	r2, r3
 800539a:	4628      	mov	r0, r5
 800539c:	f000 ffc6 	bl	800632c <__lshift>
 80053a0:	4604      	mov	r4, r0
 80053a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d070      	beq.n	800548a <_dtoa_r+0x92a>
 80053a8:	4621      	mov	r1, r4
 80053aa:	4658      	mov	r0, fp
 80053ac:	f001 f82e 	bl	800640c <__mcmp>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	da6a      	bge.n	800548a <_dtoa_r+0x92a>
 80053b4:	2300      	movs	r3, #0
 80053b6:	4659      	mov	r1, fp
 80053b8:	220a      	movs	r2, #10
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 fdc0 	bl	8005f40 <__multadd>
 80053c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053c2:	4683      	mov	fp, r0
 80053c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8194 	beq.w	80056f6 <_dtoa_r+0xb96>
 80053ce:	4631      	mov	r1, r6
 80053d0:	2300      	movs	r3, #0
 80053d2:	220a      	movs	r2, #10
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 fdb3 	bl	8005f40 <__multadd>
 80053da:	f1b9 0f00 	cmp.w	r9, #0
 80053de:	4606      	mov	r6, r0
 80053e0:	f300 8093 	bgt.w	800550a <_dtoa_r+0x9aa>
 80053e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	dc57      	bgt.n	800549a <_dtoa_r+0x93a>
 80053ea:	e08e      	b.n	800550a <_dtoa_r+0x9aa>
 80053ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80053ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053f2:	e757      	b.n	80052a4 <_dtoa_r+0x744>
 80053f4:	9b08      	ldr	r3, [sp, #32]
 80053f6:	1e5c      	subs	r4, r3, #1
 80053f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	bfb7      	itett	lt
 80053fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005400:	1b1c      	subge	r4, r3, r4
 8005402:	1ae2      	sublt	r2, r4, r3
 8005404:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005406:	bfbe      	ittt	lt
 8005408:	940a      	strlt	r4, [sp, #40]	; 0x28
 800540a:	189b      	addlt	r3, r3, r2
 800540c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800540e:	9b08      	ldr	r3, [sp, #32]
 8005410:	bfb8      	it	lt
 8005412:	2400      	movlt	r4, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	bfbb      	ittet	lt
 8005418:	9b06      	ldrlt	r3, [sp, #24]
 800541a:	9a08      	ldrlt	r2, [sp, #32]
 800541c:	9f06      	ldrge	r7, [sp, #24]
 800541e:	1a9f      	sublt	r7, r3, r2
 8005420:	bfac      	ite	ge
 8005422:	9b08      	ldrge	r3, [sp, #32]
 8005424:	2300      	movlt	r3, #0
 8005426:	e73f      	b.n	80052a8 <_dtoa_r+0x748>
 8005428:	3fe00000 	.word	0x3fe00000
 800542c:	40240000 	.word	0x40240000
 8005430:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005432:	9f06      	ldr	r7, [sp, #24]
 8005434:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005436:	e742      	b.n	80052be <_dtoa_r+0x75e>
 8005438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800543a:	e76b      	b.n	8005314 <_dtoa_r+0x7b4>
 800543c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800543e:	2b01      	cmp	r3, #1
 8005440:	dc19      	bgt.n	8005476 <_dtoa_r+0x916>
 8005442:	9b04      	ldr	r3, [sp, #16]
 8005444:	b9bb      	cbnz	r3, 8005476 <_dtoa_r+0x916>
 8005446:	9b05      	ldr	r3, [sp, #20]
 8005448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800544c:	b99b      	cbnz	r3, 8005476 <_dtoa_r+0x916>
 800544e:	9b05      	ldr	r3, [sp, #20]
 8005450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005454:	0d1b      	lsrs	r3, r3, #20
 8005456:	051b      	lsls	r3, r3, #20
 8005458:	b183      	cbz	r3, 800547c <_dtoa_r+0x91c>
 800545a:	f04f 0801 	mov.w	r8, #1
 800545e:	9b06      	ldr	r3, [sp, #24]
 8005460:	3301      	adds	r3, #1
 8005462:	9306      	str	r3, [sp, #24]
 8005464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005466:	3301      	adds	r3, #1
 8005468:	9309      	str	r3, [sp, #36]	; 0x24
 800546a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800546c:	2b00      	cmp	r3, #0
 800546e:	f47f af6a 	bne.w	8005346 <_dtoa_r+0x7e6>
 8005472:	2001      	movs	r0, #1
 8005474:	e76f      	b.n	8005356 <_dtoa_r+0x7f6>
 8005476:	f04f 0800 	mov.w	r8, #0
 800547a:	e7f6      	b.n	800546a <_dtoa_r+0x90a>
 800547c:	4698      	mov	r8, r3
 800547e:	e7f4      	b.n	800546a <_dtoa_r+0x90a>
 8005480:	f43f af7d 	beq.w	800537e <_dtoa_r+0x81e>
 8005484:	4618      	mov	r0, r3
 8005486:	301c      	adds	r0, #28
 8005488:	e772      	b.n	8005370 <_dtoa_r+0x810>
 800548a:	9b08      	ldr	r3, [sp, #32]
 800548c:	2b00      	cmp	r3, #0
 800548e:	dc36      	bgt.n	80054fe <_dtoa_r+0x99e>
 8005490:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005492:	2b02      	cmp	r3, #2
 8005494:	dd33      	ble.n	80054fe <_dtoa_r+0x99e>
 8005496:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800549a:	f1b9 0f00 	cmp.w	r9, #0
 800549e:	d10d      	bne.n	80054bc <_dtoa_r+0x95c>
 80054a0:	4621      	mov	r1, r4
 80054a2:	464b      	mov	r3, r9
 80054a4:	2205      	movs	r2, #5
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 fd4a 	bl	8005f40 <__multadd>
 80054ac:	4601      	mov	r1, r0
 80054ae:	4604      	mov	r4, r0
 80054b0:	4658      	mov	r0, fp
 80054b2:	f000 ffab 	bl	800640c <__mcmp>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	f73f adb8 	bgt.w	800502c <_dtoa_r+0x4cc>
 80054bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054be:	9f03      	ldr	r7, [sp, #12]
 80054c0:	ea6f 0a03 	mvn.w	sl, r3
 80054c4:	f04f 0800 	mov.w	r8, #0
 80054c8:	4621      	mov	r1, r4
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 fd16 	bl	8005efc <_Bfree>
 80054d0:	2e00      	cmp	r6, #0
 80054d2:	f43f aea7 	beq.w	8005224 <_dtoa_r+0x6c4>
 80054d6:	f1b8 0f00 	cmp.w	r8, #0
 80054da:	d005      	beq.n	80054e8 <_dtoa_r+0x988>
 80054dc:	45b0      	cmp	r8, r6
 80054de:	d003      	beq.n	80054e8 <_dtoa_r+0x988>
 80054e0:	4641      	mov	r1, r8
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 fd0a 	bl	8005efc <_Bfree>
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 fd06 	bl	8005efc <_Bfree>
 80054f0:	e698      	b.n	8005224 <_dtoa_r+0x6c4>
 80054f2:	2400      	movs	r4, #0
 80054f4:	4626      	mov	r6, r4
 80054f6:	e7e1      	b.n	80054bc <_dtoa_r+0x95c>
 80054f8:	46c2      	mov	sl, r8
 80054fa:	4626      	mov	r6, r4
 80054fc:	e596      	b.n	800502c <_dtoa_r+0x4cc>
 80054fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80fd 	beq.w	8005704 <_dtoa_r+0xba4>
 800550a:	2f00      	cmp	r7, #0
 800550c:	dd05      	ble.n	800551a <_dtoa_r+0x9ba>
 800550e:	4631      	mov	r1, r6
 8005510:	463a      	mov	r2, r7
 8005512:	4628      	mov	r0, r5
 8005514:	f000 ff0a 	bl	800632c <__lshift>
 8005518:	4606      	mov	r6, r0
 800551a:	f1b8 0f00 	cmp.w	r8, #0
 800551e:	d05c      	beq.n	80055da <_dtoa_r+0xa7a>
 8005520:	4628      	mov	r0, r5
 8005522:	6871      	ldr	r1, [r6, #4]
 8005524:	f000 fcaa 	bl	8005e7c <_Balloc>
 8005528:	4607      	mov	r7, r0
 800552a:	b928      	cbnz	r0, 8005538 <_dtoa_r+0x9d8>
 800552c:	4602      	mov	r2, r0
 800552e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005532:	4b7f      	ldr	r3, [pc, #508]	; (8005730 <_dtoa_r+0xbd0>)
 8005534:	f7ff bb28 	b.w	8004b88 <_dtoa_r+0x28>
 8005538:	6932      	ldr	r2, [r6, #16]
 800553a:	f106 010c 	add.w	r1, r6, #12
 800553e:	3202      	adds	r2, #2
 8005540:	0092      	lsls	r2, r2, #2
 8005542:	300c      	adds	r0, #12
 8005544:	f000 fc8c 	bl	8005e60 <memcpy>
 8005548:	2201      	movs	r2, #1
 800554a:	4639      	mov	r1, r7
 800554c:	4628      	mov	r0, r5
 800554e:	f000 feed 	bl	800632c <__lshift>
 8005552:	46b0      	mov	r8, r6
 8005554:	4606      	mov	r6, r0
 8005556:	9b03      	ldr	r3, [sp, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	9308      	str	r3, [sp, #32]
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	444b      	add	r3, r9
 8005560:	930a      	str	r3, [sp, #40]	; 0x28
 8005562:	9b04      	ldr	r3, [sp, #16]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	9309      	str	r3, [sp, #36]	; 0x24
 800556a:	9b08      	ldr	r3, [sp, #32]
 800556c:	4621      	mov	r1, r4
 800556e:	3b01      	subs	r3, #1
 8005570:	4658      	mov	r0, fp
 8005572:	9304      	str	r3, [sp, #16]
 8005574:	f7ff fa68 	bl	8004a48 <quorem>
 8005578:	4603      	mov	r3, r0
 800557a:	4641      	mov	r1, r8
 800557c:	3330      	adds	r3, #48	; 0x30
 800557e:	9006      	str	r0, [sp, #24]
 8005580:	4658      	mov	r0, fp
 8005582:	930b      	str	r3, [sp, #44]	; 0x2c
 8005584:	f000 ff42 	bl	800640c <__mcmp>
 8005588:	4632      	mov	r2, r6
 800558a:	4681      	mov	r9, r0
 800558c:	4621      	mov	r1, r4
 800558e:	4628      	mov	r0, r5
 8005590:	f000 ff58 	bl	8006444 <__mdiff>
 8005594:	68c2      	ldr	r2, [r0, #12]
 8005596:	4607      	mov	r7, r0
 8005598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800559a:	bb02      	cbnz	r2, 80055de <_dtoa_r+0xa7e>
 800559c:	4601      	mov	r1, r0
 800559e:	4658      	mov	r0, fp
 80055a0:	f000 ff34 	bl	800640c <__mcmp>
 80055a4:	4602      	mov	r2, r0
 80055a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055a8:	4639      	mov	r1, r7
 80055aa:	4628      	mov	r0, r5
 80055ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80055b0:	f000 fca4 	bl	8005efc <_Bfree>
 80055b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055b8:	9f08      	ldr	r7, [sp, #32]
 80055ba:	ea43 0102 	orr.w	r1, r3, r2
 80055be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c0:	430b      	orrs	r3, r1
 80055c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c4:	d10d      	bne.n	80055e2 <_dtoa_r+0xa82>
 80055c6:	2b39      	cmp	r3, #57	; 0x39
 80055c8:	d029      	beq.n	800561e <_dtoa_r+0xabe>
 80055ca:	f1b9 0f00 	cmp.w	r9, #0
 80055ce:	dd01      	ble.n	80055d4 <_dtoa_r+0xa74>
 80055d0:	9b06      	ldr	r3, [sp, #24]
 80055d2:	3331      	adds	r3, #49	; 0x31
 80055d4:	9a04      	ldr	r2, [sp, #16]
 80055d6:	7013      	strb	r3, [r2, #0]
 80055d8:	e776      	b.n	80054c8 <_dtoa_r+0x968>
 80055da:	4630      	mov	r0, r6
 80055dc:	e7b9      	b.n	8005552 <_dtoa_r+0x9f2>
 80055de:	2201      	movs	r2, #1
 80055e0:	e7e2      	b.n	80055a8 <_dtoa_r+0xa48>
 80055e2:	f1b9 0f00 	cmp.w	r9, #0
 80055e6:	db06      	blt.n	80055f6 <_dtoa_r+0xa96>
 80055e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80055ea:	ea41 0909 	orr.w	r9, r1, r9
 80055ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055f0:	ea59 0101 	orrs.w	r1, r9, r1
 80055f4:	d120      	bne.n	8005638 <_dtoa_r+0xad8>
 80055f6:	2a00      	cmp	r2, #0
 80055f8:	ddec      	ble.n	80055d4 <_dtoa_r+0xa74>
 80055fa:	4659      	mov	r1, fp
 80055fc:	2201      	movs	r2, #1
 80055fe:	4628      	mov	r0, r5
 8005600:	9308      	str	r3, [sp, #32]
 8005602:	f000 fe93 	bl	800632c <__lshift>
 8005606:	4621      	mov	r1, r4
 8005608:	4683      	mov	fp, r0
 800560a:	f000 feff 	bl	800640c <__mcmp>
 800560e:	2800      	cmp	r0, #0
 8005610:	9b08      	ldr	r3, [sp, #32]
 8005612:	dc02      	bgt.n	800561a <_dtoa_r+0xaba>
 8005614:	d1de      	bne.n	80055d4 <_dtoa_r+0xa74>
 8005616:	07da      	lsls	r2, r3, #31
 8005618:	d5dc      	bpl.n	80055d4 <_dtoa_r+0xa74>
 800561a:	2b39      	cmp	r3, #57	; 0x39
 800561c:	d1d8      	bne.n	80055d0 <_dtoa_r+0xa70>
 800561e:	2339      	movs	r3, #57	; 0x39
 8005620:	9a04      	ldr	r2, [sp, #16]
 8005622:	7013      	strb	r3, [r2, #0]
 8005624:	463b      	mov	r3, r7
 8005626:	461f      	mov	r7, r3
 8005628:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800562c:	3b01      	subs	r3, #1
 800562e:	2a39      	cmp	r2, #57	; 0x39
 8005630:	d050      	beq.n	80056d4 <_dtoa_r+0xb74>
 8005632:	3201      	adds	r2, #1
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	e747      	b.n	80054c8 <_dtoa_r+0x968>
 8005638:	2a00      	cmp	r2, #0
 800563a:	dd03      	ble.n	8005644 <_dtoa_r+0xae4>
 800563c:	2b39      	cmp	r3, #57	; 0x39
 800563e:	d0ee      	beq.n	800561e <_dtoa_r+0xabe>
 8005640:	3301      	adds	r3, #1
 8005642:	e7c7      	b.n	80055d4 <_dtoa_r+0xa74>
 8005644:	9a08      	ldr	r2, [sp, #32]
 8005646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005648:	f802 3c01 	strb.w	r3, [r2, #-1]
 800564c:	428a      	cmp	r2, r1
 800564e:	d02a      	beq.n	80056a6 <_dtoa_r+0xb46>
 8005650:	4659      	mov	r1, fp
 8005652:	2300      	movs	r3, #0
 8005654:	220a      	movs	r2, #10
 8005656:	4628      	mov	r0, r5
 8005658:	f000 fc72 	bl	8005f40 <__multadd>
 800565c:	45b0      	cmp	r8, r6
 800565e:	4683      	mov	fp, r0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	f04f 020a 	mov.w	r2, #10
 8005668:	4641      	mov	r1, r8
 800566a:	4628      	mov	r0, r5
 800566c:	d107      	bne.n	800567e <_dtoa_r+0xb1e>
 800566e:	f000 fc67 	bl	8005f40 <__multadd>
 8005672:	4680      	mov	r8, r0
 8005674:	4606      	mov	r6, r0
 8005676:	9b08      	ldr	r3, [sp, #32]
 8005678:	3301      	adds	r3, #1
 800567a:	9308      	str	r3, [sp, #32]
 800567c:	e775      	b.n	800556a <_dtoa_r+0xa0a>
 800567e:	f000 fc5f 	bl	8005f40 <__multadd>
 8005682:	4631      	mov	r1, r6
 8005684:	4680      	mov	r8, r0
 8005686:	2300      	movs	r3, #0
 8005688:	220a      	movs	r2, #10
 800568a:	4628      	mov	r0, r5
 800568c:	f000 fc58 	bl	8005f40 <__multadd>
 8005690:	4606      	mov	r6, r0
 8005692:	e7f0      	b.n	8005676 <_dtoa_r+0xb16>
 8005694:	f1b9 0f00 	cmp.w	r9, #0
 8005698:	bfcc      	ite	gt
 800569a:	464f      	movgt	r7, r9
 800569c:	2701      	movle	r7, #1
 800569e:	f04f 0800 	mov.w	r8, #0
 80056a2:	9a03      	ldr	r2, [sp, #12]
 80056a4:	4417      	add	r7, r2
 80056a6:	4659      	mov	r1, fp
 80056a8:	2201      	movs	r2, #1
 80056aa:	4628      	mov	r0, r5
 80056ac:	9308      	str	r3, [sp, #32]
 80056ae:	f000 fe3d 	bl	800632c <__lshift>
 80056b2:	4621      	mov	r1, r4
 80056b4:	4683      	mov	fp, r0
 80056b6:	f000 fea9 	bl	800640c <__mcmp>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	dcb2      	bgt.n	8005624 <_dtoa_r+0xac4>
 80056be:	d102      	bne.n	80056c6 <_dtoa_r+0xb66>
 80056c0:	9b08      	ldr	r3, [sp, #32]
 80056c2:	07db      	lsls	r3, r3, #31
 80056c4:	d4ae      	bmi.n	8005624 <_dtoa_r+0xac4>
 80056c6:	463b      	mov	r3, r7
 80056c8:	461f      	mov	r7, r3
 80056ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056ce:	2a30      	cmp	r2, #48	; 0x30
 80056d0:	d0fa      	beq.n	80056c8 <_dtoa_r+0xb68>
 80056d2:	e6f9      	b.n	80054c8 <_dtoa_r+0x968>
 80056d4:	9a03      	ldr	r2, [sp, #12]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d1a5      	bne.n	8005626 <_dtoa_r+0xac6>
 80056da:	2331      	movs	r3, #49	; 0x31
 80056dc:	f10a 0a01 	add.w	sl, sl, #1
 80056e0:	e779      	b.n	80055d6 <_dtoa_r+0xa76>
 80056e2:	4b14      	ldr	r3, [pc, #80]	; (8005734 <_dtoa_r+0xbd4>)
 80056e4:	f7ff baa8 	b.w	8004c38 <_dtoa_r+0xd8>
 80056e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f47f aa81 	bne.w	8004bf2 <_dtoa_r+0x92>
 80056f0:	4b11      	ldr	r3, [pc, #68]	; (8005738 <_dtoa_r+0xbd8>)
 80056f2:	f7ff baa1 	b.w	8004c38 <_dtoa_r+0xd8>
 80056f6:	f1b9 0f00 	cmp.w	r9, #0
 80056fa:	dc03      	bgt.n	8005704 <_dtoa_r+0xba4>
 80056fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056fe:	2b02      	cmp	r3, #2
 8005700:	f73f aecb 	bgt.w	800549a <_dtoa_r+0x93a>
 8005704:	9f03      	ldr	r7, [sp, #12]
 8005706:	4621      	mov	r1, r4
 8005708:	4658      	mov	r0, fp
 800570a:	f7ff f99d 	bl	8004a48 <quorem>
 800570e:	9a03      	ldr	r2, [sp, #12]
 8005710:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005714:	f807 3b01 	strb.w	r3, [r7], #1
 8005718:	1aba      	subs	r2, r7, r2
 800571a:	4591      	cmp	r9, r2
 800571c:	ddba      	ble.n	8005694 <_dtoa_r+0xb34>
 800571e:	4659      	mov	r1, fp
 8005720:	2300      	movs	r3, #0
 8005722:	220a      	movs	r2, #10
 8005724:	4628      	mov	r0, r5
 8005726:	f000 fc0b 	bl	8005f40 <__multadd>
 800572a:	4683      	mov	fp, r0
 800572c:	e7eb      	b.n	8005706 <_dtoa_r+0xba6>
 800572e:	bf00      	nop
 8005730:	08007ae8 	.word	0x08007ae8
 8005734:	080078ec 	.word	0x080078ec
 8005738:	08007a69 	.word	0x08007a69

0800573c <rshift>:
 800573c:	6903      	ldr	r3, [r0, #16]
 800573e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005742:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005746:	f100 0414 	add.w	r4, r0, #20
 800574a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800574e:	dd46      	ble.n	80057de <rshift+0xa2>
 8005750:	f011 011f 	ands.w	r1, r1, #31
 8005754:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005758:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800575c:	d10c      	bne.n	8005778 <rshift+0x3c>
 800575e:	4629      	mov	r1, r5
 8005760:	f100 0710 	add.w	r7, r0, #16
 8005764:	42b1      	cmp	r1, r6
 8005766:	d335      	bcc.n	80057d4 <rshift+0x98>
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	1eea      	subs	r2, r5, #3
 800576e:	4296      	cmp	r6, r2
 8005770:	bf38      	it	cc
 8005772:	2300      	movcc	r3, #0
 8005774:	4423      	add	r3, r4
 8005776:	e015      	b.n	80057a4 <rshift+0x68>
 8005778:	46a1      	mov	r9, r4
 800577a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800577e:	f1c1 0820 	rsb	r8, r1, #32
 8005782:	40cf      	lsrs	r7, r1
 8005784:	f105 0e04 	add.w	lr, r5, #4
 8005788:	4576      	cmp	r6, lr
 800578a:	46f4      	mov	ip, lr
 800578c:	d816      	bhi.n	80057bc <rshift+0x80>
 800578e:	1a9a      	subs	r2, r3, r2
 8005790:	0092      	lsls	r2, r2, #2
 8005792:	3a04      	subs	r2, #4
 8005794:	3501      	adds	r5, #1
 8005796:	42ae      	cmp	r6, r5
 8005798:	bf38      	it	cc
 800579a:	2200      	movcc	r2, #0
 800579c:	18a3      	adds	r3, r4, r2
 800579e:	50a7      	str	r7, [r4, r2]
 80057a0:	b107      	cbz	r7, 80057a4 <rshift+0x68>
 80057a2:	3304      	adds	r3, #4
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	eba3 0204 	sub.w	r2, r3, r4
 80057aa:	bf08      	it	eq
 80057ac:	2300      	moveq	r3, #0
 80057ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80057b2:	6102      	str	r2, [r0, #16]
 80057b4:	bf08      	it	eq
 80057b6:	6143      	streq	r3, [r0, #20]
 80057b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057bc:	f8dc c000 	ldr.w	ip, [ip]
 80057c0:	fa0c fc08 	lsl.w	ip, ip, r8
 80057c4:	ea4c 0707 	orr.w	r7, ip, r7
 80057c8:	f849 7b04 	str.w	r7, [r9], #4
 80057cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057d0:	40cf      	lsrs	r7, r1
 80057d2:	e7d9      	b.n	8005788 <rshift+0x4c>
 80057d4:	f851 cb04 	ldr.w	ip, [r1], #4
 80057d8:	f847 cf04 	str.w	ip, [r7, #4]!
 80057dc:	e7c2      	b.n	8005764 <rshift+0x28>
 80057de:	4623      	mov	r3, r4
 80057e0:	e7e0      	b.n	80057a4 <rshift+0x68>

080057e2 <__hexdig_fun>:
 80057e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80057e6:	2b09      	cmp	r3, #9
 80057e8:	d802      	bhi.n	80057f0 <__hexdig_fun+0xe>
 80057ea:	3820      	subs	r0, #32
 80057ec:	b2c0      	uxtb	r0, r0
 80057ee:	4770      	bx	lr
 80057f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80057f4:	2b05      	cmp	r3, #5
 80057f6:	d801      	bhi.n	80057fc <__hexdig_fun+0x1a>
 80057f8:	3847      	subs	r0, #71	; 0x47
 80057fa:	e7f7      	b.n	80057ec <__hexdig_fun+0xa>
 80057fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005800:	2b05      	cmp	r3, #5
 8005802:	d801      	bhi.n	8005808 <__hexdig_fun+0x26>
 8005804:	3827      	subs	r0, #39	; 0x27
 8005806:	e7f1      	b.n	80057ec <__hexdig_fun+0xa>
 8005808:	2000      	movs	r0, #0
 800580a:	4770      	bx	lr

0800580c <__gethex>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	b08b      	sub	sp, #44	; 0x2c
 8005812:	9305      	str	r3, [sp, #20]
 8005814:	4bb2      	ldr	r3, [pc, #712]	; (8005ae0 <__gethex+0x2d4>)
 8005816:	9002      	str	r0, [sp, #8]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	468b      	mov	fp, r1
 800581c:	4618      	mov	r0, r3
 800581e:	4690      	mov	r8, r2
 8005820:	9303      	str	r3, [sp, #12]
 8005822:	f7fa fc95 	bl	8000150 <strlen>
 8005826:	4682      	mov	sl, r0
 8005828:	9b03      	ldr	r3, [sp, #12]
 800582a:	f8db 2000 	ldr.w	r2, [fp]
 800582e:	4403      	add	r3, r0
 8005830:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005834:	9306      	str	r3, [sp, #24]
 8005836:	1c93      	adds	r3, r2, #2
 8005838:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800583c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005840:	32fe      	adds	r2, #254	; 0xfe
 8005842:	18d1      	adds	r1, r2, r3
 8005844:	461f      	mov	r7, r3
 8005846:	f813 0b01 	ldrb.w	r0, [r3], #1
 800584a:	9101      	str	r1, [sp, #4]
 800584c:	2830      	cmp	r0, #48	; 0x30
 800584e:	d0f8      	beq.n	8005842 <__gethex+0x36>
 8005850:	f7ff ffc7 	bl	80057e2 <__hexdig_fun>
 8005854:	4604      	mov	r4, r0
 8005856:	2800      	cmp	r0, #0
 8005858:	d13a      	bne.n	80058d0 <__gethex+0xc4>
 800585a:	4652      	mov	r2, sl
 800585c:	4638      	mov	r0, r7
 800585e:	9903      	ldr	r1, [sp, #12]
 8005860:	f001 fa26 	bl	8006cb0 <strncmp>
 8005864:	4605      	mov	r5, r0
 8005866:	2800      	cmp	r0, #0
 8005868:	d166      	bne.n	8005938 <__gethex+0x12c>
 800586a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800586e:	eb07 060a 	add.w	r6, r7, sl
 8005872:	f7ff ffb6 	bl	80057e2 <__hexdig_fun>
 8005876:	2800      	cmp	r0, #0
 8005878:	d060      	beq.n	800593c <__gethex+0x130>
 800587a:	4633      	mov	r3, r6
 800587c:	7818      	ldrb	r0, [r3, #0]
 800587e:	461f      	mov	r7, r3
 8005880:	2830      	cmp	r0, #48	; 0x30
 8005882:	f103 0301 	add.w	r3, r3, #1
 8005886:	d0f9      	beq.n	800587c <__gethex+0x70>
 8005888:	f7ff ffab 	bl	80057e2 <__hexdig_fun>
 800588c:	2301      	movs	r3, #1
 800588e:	fab0 f480 	clz	r4, r0
 8005892:	4635      	mov	r5, r6
 8005894:	0964      	lsrs	r4, r4, #5
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	463a      	mov	r2, r7
 800589a:	4616      	mov	r6, r2
 800589c:	7830      	ldrb	r0, [r6, #0]
 800589e:	3201      	adds	r2, #1
 80058a0:	f7ff ff9f 	bl	80057e2 <__hexdig_fun>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d1f8      	bne.n	800589a <__gethex+0x8e>
 80058a8:	4652      	mov	r2, sl
 80058aa:	4630      	mov	r0, r6
 80058ac:	9903      	ldr	r1, [sp, #12]
 80058ae:	f001 f9ff 	bl	8006cb0 <strncmp>
 80058b2:	b980      	cbnz	r0, 80058d6 <__gethex+0xca>
 80058b4:	b94d      	cbnz	r5, 80058ca <__gethex+0xbe>
 80058b6:	eb06 050a 	add.w	r5, r6, sl
 80058ba:	462a      	mov	r2, r5
 80058bc:	4616      	mov	r6, r2
 80058be:	7830      	ldrb	r0, [r6, #0]
 80058c0:	3201      	adds	r2, #1
 80058c2:	f7ff ff8e 	bl	80057e2 <__hexdig_fun>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	d1f8      	bne.n	80058bc <__gethex+0xb0>
 80058ca:	1bad      	subs	r5, r5, r6
 80058cc:	00ad      	lsls	r5, r5, #2
 80058ce:	e004      	b.n	80058da <__gethex+0xce>
 80058d0:	2400      	movs	r4, #0
 80058d2:	4625      	mov	r5, r4
 80058d4:	e7e0      	b.n	8005898 <__gethex+0x8c>
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	d1f7      	bne.n	80058ca <__gethex+0xbe>
 80058da:	7833      	ldrb	r3, [r6, #0]
 80058dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80058e0:	2b50      	cmp	r3, #80	; 0x50
 80058e2:	d139      	bne.n	8005958 <__gethex+0x14c>
 80058e4:	7873      	ldrb	r3, [r6, #1]
 80058e6:	2b2b      	cmp	r3, #43	; 0x2b
 80058e8:	d02a      	beq.n	8005940 <__gethex+0x134>
 80058ea:	2b2d      	cmp	r3, #45	; 0x2d
 80058ec:	d02c      	beq.n	8005948 <__gethex+0x13c>
 80058ee:	f04f 0900 	mov.w	r9, #0
 80058f2:	1c71      	adds	r1, r6, #1
 80058f4:	7808      	ldrb	r0, [r1, #0]
 80058f6:	f7ff ff74 	bl	80057e2 <__hexdig_fun>
 80058fa:	1e43      	subs	r3, r0, #1
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b18      	cmp	r3, #24
 8005900:	d82a      	bhi.n	8005958 <__gethex+0x14c>
 8005902:	f1a0 0210 	sub.w	r2, r0, #16
 8005906:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800590a:	f7ff ff6a 	bl	80057e2 <__hexdig_fun>
 800590e:	1e43      	subs	r3, r0, #1
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b18      	cmp	r3, #24
 8005914:	d91b      	bls.n	800594e <__gethex+0x142>
 8005916:	f1b9 0f00 	cmp.w	r9, #0
 800591a:	d000      	beq.n	800591e <__gethex+0x112>
 800591c:	4252      	negs	r2, r2
 800591e:	4415      	add	r5, r2
 8005920:	f8cb 1000 	str.w	r1, [fp]
 8005924:	b1d4      	cbz	r4, 800595c <__gethex+0x150>
 8005926:	9b01      	ldr	r3, [sp, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf14      	ite	ne
 800592c:	2700      	movne	r7, #0
 800592e:	2706      	moveq	r7, #6
 8005930:	4638      	mov	r0, r7
 8005932:	b00b      	add	sp, #44	; 0x2c
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005938:	463e      	mov	r6, r7
 800593a:	4625      	mov	r5, r4
 800593c:	2401      	movs	r4, #1
 800593e:	e7cc      	b.n	80058da <__gethex+0xce>
 8005940:	f04f 0900 	mov.w	r9, #0
 8005944:	1cb1      	adds	r1, r6, #2
 8005946:	e7d5      	b.n	80058f4 <__gethex+0xe8>
 8005948:	f04f 0901 	mov.w	r9, #1
 800594c:	e7fa      	b.n	8005944 <__gethex+0x138>
 800594e:	230a      	movs	r3, #10
 8005950:	fb03 0202 	mla	r2, r3, r2, r0
 8005954:	3a10      	subs	r2, #16
 8005956:	e7d6      	b.n	8005906 <__gethex+0xfa>
 8005958:	4631      	mov	r1, r6
 800595a:	e7e1      	b.n	8005920 <__gethex+0x114>
 800595c:	4621      	mov	r1, r4
 800595e:	1bf3      	subs	r3, r6, r7
 8005960:	3b01      	subs	r3, #1
 8005962:	2b07      	cmp	r3, #7
 8005964:	dc0a      	bgt.n	800597c <__gethex+0x170>
 8005966:	9802      	ldr	r0, [sp, #8]
 8005968:	f000 fa88 	bl	8005e7c <_Balloc>
 800596c:	4604      	mov	r4, r0
 800596e:	b940      	cbnz	r0, 8005982 <__gethex+0x176>
 8005970:	4602      	mov	r2, r0
 8005972:	21de      	movs	r1, #222	; 0xde
 8005974:	4b5b      	ldr	r3, [pc, #364]	; (8005ae4 <__gethex+0x2d8>)
 8005976:	485c      	ldr	r0, [pc, #368]	; (8005ae8 <__gethex+0x2dc>)
 8005978:	f001 f9bc 	bl	8006cf4 <__assert_func>
 800597c:	3101      	adds	r1, #1
 800597e:	105b      	asrs	r3, r3, #1
 8005980:	e7ef      	b.n	8005962 <__gethex+0x156>
 8005982:	f04f 0b00 	mov.w	fp, #0
 8005986:	f100 0914 	add.w	r9, r0, #20
 800598a:	f1ca 0301 	rsb	r3, sl, #1
 800598e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005992:	f8cd b004 	str.w	fp, [sp, #4]
 8005996:	9308      	str	r3, [sp, #32]
 8005998:	42b7      	cmp	r7, r6
 800599a:	d33f      	bcc.n	8005a1c <__gethex+0x210>
 800599c:	9f04      	ldr	r7, [sp, #16]
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	f847 3b04 	str.w	r3, [r7], #4
 80059a4:	eba7 0709 	sub.w	r7, r7, r9
 80059a8:	10bf      	asrs	r7, r7, #2
 80059aa:	6127      	str	r7, [r4, #16]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fb57 	bl	8006060 <__hi0bits>
 80059b2:	017f      	lsls	r7, r7, #5
 80059b4:	f8d8 6000 	ldr.w	r6, [r8]
 80059b8:	1a3f      	subs	r7, r7, r0
 80059ba:	42b7      	cmp	r7, r6
 80059bc:	dd62      	ble.n	8005a84 <__gethex+0x278>
 80059be:	1bbf      	subs	r7, r7, r6
 80059c0:	4639      	mov	r1, r7
 80059c2:	4620      	mov	r0, r4
 80059c4:	f000 fef1 	bl	80067aa <__any_on>
 80059c8:	4682      	mov	sl, r0
 80059ca:	b1a8      	cbz	r0, 80059f8 <__gethex+0x1ec>
 80059cc:	f04f 0a01 	mov.w	sl, #1
 80059d0:	1e7b      	subs	r3, r7, #1
 80059d2:	1159      	asrs	r1, r3, #5
 80059d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80059d8:	f003 021f 	and.w	r2, r3, #31
 80059dc:	fa0a f202 	lsl.w	r2, sl, r2
 80059e0:	420a      	tst	r2, r1
 80059e2:	d009      	beq.n	80059f8 <__gethex+0x1ec>
 80059e4:	4553      	cmp	r3, sl
 80059e6:	dd05      	ble.n	80059f4 <__gethex+0x1e8>
 80059e8:	4620      	mov	r0, r4
 80059ea:	1eb9      	subs	r1, r7, #2
 80059ec:	f000 fedd 	bl	80067aa <__any_on>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d144      	bne.n	8005a7e <__gethex+0x272>
 80059f4:	f04f 0a02 	mov.w	sl, #2
 80059f8:	4639      	mov	r1, r7
 80059fa:	4620      	mov	r0, r4
 80059fc:	f7ff fe9e 	bl	800573c <rshift>
 8005a00:	443d      	add	r5, r7
 8005a02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a06:	42ab      	cmp	r3, r5
 8005a08:	da4a      	bge.n	8005aa0 <__gethex+0x294>
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	9802      	ldr	r0, [sp, #8]
 8005a0e:	f000 fa75 	bl	8005efc <_Bfree>
 8005a12:	2300      	movs	r3, #0
 8005a14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a16:	27a3      	movs	r7, #163	; 0xa3
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e789      	b.n	8005930 <__gethex+0x124>
 8005a1c:	1e73      	subs	r3, r6, #1
 8005a1e:	9a06      	ldr	r2, [sp, #24]
 8005a20:	9307      	str	r3, [sp, #28]
 8005a22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d019      	beq.n	8005a5e <__gethex+0x252>
 8005a2a:	f1bb 0f20 	cmp.w	fp, #32
 8005a2e:	d107      	bne.n	8005a40 <__gethex+0x234>
 8005a30:	9b04      	ldr	r3, [sp, #16]
 8005a32:	9a01      	ldr	r2, [sp, #4]
 8005a34:	f843 2b04 	str.w	r2, [r3], #4
 8005a38:	9304      	str	r3, [sp, #16]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	469b      	mov	fp, r3
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005a44:	f7ff fecd 	bl	80057e2 <__hexdig_fun>
 8005a48:	9b01      	ldr	r3, [sp, #4]
 8005a4a:	f000 000f 	and.w	r0, r0, #15
 8005a4e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005a52:	4303      	orrs	r3, r0
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	f10b 0b04 	add.w	fp, fp, #4
 8005a5a:	9b07      	ldr	r3, [sp, #28]
 8005a5c:	e00d      	b.n	8005a7a <__gethex+0x26e>
 8005a5e:	9a08      	ldr	r2, [sp, #32]
 8005a60:	1e73      	subs	r3, r6, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	42bb      	cmp	r3, r7
 8005a66:	d3e0      	bcc.n	8005a2a <__gethex+0x21e>
 8005a68:	4618      	mov	r0, r3
 8005a6a:	4652      	mov	r2, sl
 8005a6c:	9903      	ldr	r1, [sp, #12]
 8005a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a70:	f001 f91e 	bl	8006cb0 <strncmp>
 8005a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d1d7      	bne.n	8005a2a <__gethex+0x21e>
 8005a7a:	461e      	mov	r6, r3
 8005a7c:	e78c      	b.n	8005998 <__gethex+0x18c>
 8005a7e:	f04f 0a03 	mov.w	sl, #3
 8005a82:	e7b9      	b.n	80059f8 <__gethex+0x1ec>
 8005a84:	da09      	bge.n	8005a9a <__gethex+0x28e>
 8005a86:	1bf7      	subs	r7, r6, r7
 8005a88:	4621      	mov	r1, r4
 8005a8a:	463a      	mov	r2, r7
 8005a8c:	9802      	ldr	r0, [sp, #8]
 8005a8e:	f000 fc4d 	bl	800632c <__lshift>
 8005a92:	4604      	mov	r4, r0
 8005a94:	1bed      	subs	r5, r5, r7
 8005a96:	f100 0914 	add.w	r9, r0, #20
 8005a9a:	f04f 0a00 	mov.w	sl, #0
 8005a9e:	e7b0      	b.n	8005a02 <__gethex+0x1f6>
 8005aa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005aa4:	42a8      	cmp	r0, r5
 8005aa6:	dd72      	ble.n	8005b8e <__gethex+0x382>
 8005aa8:	1b45      	subs	r5, r0, r5
 8005aaa:	42ae      	cmp	r6, r5
 8005aac:	dc35      	bgt.n	8005b1a <__gethex+0x30e>
 8005aae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d029      	beq.n	8005b0a <__gethex+0x2fe>
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d02b      	beq.n	8005b12 <__gethex+0x306>
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d11c      	bne.n	8005af8 <__gethex+0x2ec>
 8005abe:	42ae      	cmp	r6, r5
 8005ac0:	d11a      	bne.n	8005af8 <__gethex+0x2ec>
 8005ac2:	2e01      	cmp	r6, #1
 8005ac4:	d112      	bne.n	8005aec <__gethex+0x2e0>
 8005ac6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005aca:	9a05      	ldr	r2, [sp, #20]
 8005acc:	2762      	movs	r7, #98	; 0x62
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	f8c9 3000 	str.w	r3, [r9]
 8005ad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ada:	601c      	str	r4, [r3, #0]
 8005adc:	e728      	b.n	8005930 <__gethex+0x124>
 8005ade:	bf00      	nop
 8005ae0:	08007b60 	.word	0x08007b60
 8005ae4:	08007ae8 	.word	0x08007ae8
 8005ae8:	08007af9 	.word	0x08007af9
 8005aec:	4620      	mov	r0, r4
 8005aee:	1e71      	subs	r1, r6, #1
 8005af0:	f000 fe5b 	bl	80067aa <__any_on>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d1e6      	bne.n	8005ac6 <__gethex+0x2ba>
 8005af8:	4621      	mov	r1, r4
 8005afa:	9802      	ldr	r0, [sp, #8]
 8005afc:	f000 f9fe 	bl	8005efc <_Bfree>
 8005b00:	2300      	movs	r3, #0
 8005b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b04:	2750      	movs	r7, #80	; 0x50
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	e712      	b.n	8005930 <__gethex+0x124>
 8005b0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f3      	bne.n	8005af8 <__gethex+0x2ec>
 8005b10:	e7d9      	b.n	8005ac6 <__gethex+0x2ba>
 8005b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1d6      	bne.n	8005ac6 <__gethex+0x2ba>
 8005b18:	e7ee      	b.n	8005af8 <__gethex+0x2ec>
 8005b1a:	1e6f      	subs	r7, r5, #1
 8005b1c:	f1ba 0f00 	cmp.w	sl, #0
 8005b20:	d132      	bne.n	8005b88 <__gethex+0x37c>
 8005b22:	b127      	cbz	r7, 8005b2e <__gethex+0x322>
 8005b24:	4639      	mov	r1, r7
 8005b26:	4620      	mov	r0, r4
 8005b28:	f000 fe3f 	bl	80067aa <__any_on>
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	2101      	movs	r1, #1
 8005b30:	117b      	asrs	r3, r7, #5
 8005b32:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005b36:	f007 071f 	and.w	r7, r7, #31
 8005b3a:	fa01 f707 	lsl.w	r7, r1, r7
 8005b3e:	421f      	tst	r7, r3
 8005b40:	f04f 0702 	mov.w	r7, #2
 8005b44:	4629      	mov	r1, r5
 8005b46:	4620      	mov	r0, r4
 8005b48:	bf18      	it	ne
 8005b4a:	f04a 0a02 	orrne.w	sl, sl, #2
 8005b4e:	1b76      	subs	r6, r6, r5
 8005b50:	f7ff fdf4 	bl	800573c <rshift>
 8005b54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005b58:	f1ba 0f00 	cmp.w	sl, #0
 8005b5c:	d048      	beq.n	8005bf0 <__gethex+0x3e4>
 8005b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d015      	beq.n	8005b92 <__gethex+0x386>
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d017      	beq.n	8005b9a <__gethex+0x38e>
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d109      	bne.n	8005b82 <__gethex+0x376>
 8005b6e:	f01a 0f02 	tst.w	sl, #2
 8005b72:	d006      	beq.n	8005b82 <__gethex+0x376>
 8005b74:	f8d9 0000 	ldr.w	r0, [r9]
 8005b78:	ea4a 0a00 	orr.w	sl, sl, r0
 8005b7c:	f01a 0f01 	tst.w	sl, #1
 8005b80:	d10e      	bne.n	8005ba0 <__gethex+0x394>
 8005b82:	f047 0710 	orr.w	r7, r7, #16
 8005b86:	e033      	b.n	8005bf0 <__gethex+0x3e4>
 8005b88:	f04f 0a01 	mov.w	sl, #1
 8005b8c:	e7cf      	b.n	8005b2e <__gethex+0x322>
 8005b8e:	2701      	movs	r7, #1
 8005b90:	e7e2      	b.n	8005b58 <__gethex+0x34c>
 8005b92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b94:	f1c3 0301 	rsb	r3, r3, #1
 8005b98:	9315      	str	r3, [sp, #84]	; 0x54
 8005b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <__gethex+0x376>
 8005ba0:	f04f 0c00 	mov.w	ip, #0
 8005ba4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005ba8:	f104 0314 	add.w	r3, r4, #20
 8005bac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005bb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005bbe:	d01c      	beq.n	8005bfa <__gethex+0x3ee>
 8005bc0:	3201      	adds	r2, #1
 8005bc2:	6002      	str	r2, [r0, #0]
 8005bc4:	2f02      	cmp	r7, #2
 8005bc6:	f104 0314 	add.w	r3, r4, #20
 8005bca:	d13d      	bne.n	8005c48 <__gethex+0x43c>
 8005bcc:	f8d8 2000 	ldr.w	r2, [r8]
 8005bd0:	3a01      	subs	r2, #1
 8005bd2:	42b2      	cmp	r2, r6
 8005bd4:	d10a      	bne.n	8005bec <__gethex+0x3e0>
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	1171      	asrs	r1, r6, #5
 8005bda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005bde:	f006 061f 	and.w	r6, r6, #31
 8005be2:	fa02 f606 	lsl.w	r6, r2, r6
 8005be6:	421e      	tst	r6, r3
 8005be8:	bf18      	it	ne
 8005bea:	4617      	movne	r7, r2
 8005bec:	f047 0720 	orr.w	r7, r7, #32
 8005bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bf2:	601c      	str	r4, [r3, #0]
 8005bf4:	9b05      	ldr	r3, [sp, #20]
 8005bf6:	601d      	str	r5, [r3, #0]
 8005bf8:	e69a      	b.n	8005930 <__gethex+0x124>
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8005c00:	d8d8      	bhi.n	8005bb4 <__gethex+0x3a8>
 8005c02:	68a3      	ldr	r3, [r4, #8]
 8005c04:	459b      	cmp	fp, r3
 8005c06:	db17      	blt.n	8005c38 <__gethex+0x42c>
 8005c08:	6861      	ldr	r1, [r4, #4]
 8005c0a:	9802      	ldr	r0, [sp, #8]
 8005c0c:	3101      	adds	r1, #1
 8005c0e:	f000 f935 	bl	8005e7c <_Balloc>
 8005c12:	4681      	mov	r9, r0
 8005c14:	b918      	cbnz	r0, 8005c1e <__gethex+0x412>
 8005c16:	4602      	mov	r2, r0
 8005c18:	2184      	movs	r1, #132	; 0x84
 8005c1a:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <__gethex+0x474>)
 8005c1c:	e6ab      	b.n	8005976 <__gethex+0x16a>
 8005c1e:	6922      	ldr	r2, [r4, #16]
 8005c20:	f104 010c 	add.w	r1, r4, #12
 8005c24:	3202      	adds	r2, #2
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	300c      	adds	r0, #12
 8005c2a:	f000 f919 	bl	8005e60 <memcpy>
 8005c2e:	4621      	mov	r1, r4
 8005c30:	9802      	ldr	r0, [sp, #8]
 8005c32:	f000 f963 	bl	8005efc <_Bfree>
 8005c36:	464c      	mov	r4, r9
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	6122      	str	r2, [r4, #16]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c44:	615a      	str	r2, [r3, #20]
 8005c46:	e7bd      	b.n	8005bc4 <__gethex+0x3b8>
 8005c48:	6922      	ldr	r2, [r4, #16]
 8005c4a:	455a      	cmp	r2, fp
 8005c4c:	dd0b      	ble.n	8005c66 <__gethex+0x45a>
 8005c4e:	2101      	movs	r1, #1
 8005c50:	4620      	mov	r0, r4
 8005c52:	f7ff fd73 	bl	800573c <rshift>
 8005c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c5a:	3501      	adds	r5, #1
 8005c5c:	42ab      	cmp	r3, r5
 8005c5e:	f6ff aed4 	blt.w	8005a0a <__gethex+0x1fe>
 8005c62:	2701      	movs	r7, #1
 8005c64:	e7c2      	b.n	8005bec <__gethex+0x3e0>
 8005c66:	f016 061f 	ands.w	r6, r6, #31
 8005c6a:	d0fa      	beq.n	8005c62 <__gethex+0x456>
 8005c6c:	4453      	add	r3, sl
 8005c6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005c72:	f000 f9f5 	bl	8006060 <__hi0bits>
 8005c76:	f1c6 0620 	rsb	r6, r6, #32
 8005c7a:	42b0      	cmp	r0, r6
 8005c7c:	dbe7      	blt.n	8005c4e <__gethex+0x442>
 8005c7e:	e7f0      	b.n	8005c62 <__gethex+0x456>
 8005c80:	08007ae8 	.word	0x08007ae8

08005c84 <L_shift>:
 8005c84:	f1c2 0208 	rsb	r2, r2, #8
 8005c88:	0092      	lsls	r2, r2, #2
 8005c8a:	b570      	push	{r4, r5, r6, lr}
 8005c8c:	f1c2 0620 	rsb	r6, r2, #32
 8005c90:	6843      	ldr	r3, [r0, #4]
 8005c92:	6804      	ldr	r4, [r0, #0]
 8005c94:	fa03 f506 	lsl.w	r5, r3, r6
 8005c98:	432c      	orrs	r4, r5
 8005c9a:	40d3      	lsrs	r3, r2
 8005c9c:	6004      	str	r4, [r0, #0]
 8005c9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005ca2:	4288      	cmp	r0, r1
 8005ca4:	d3f4      	bcc.n	8005c90 <L_shift+0xc>
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}

08005ca8 <__match>:
 8005ca8:	b530      	push	{r4, r5, lr}
 8005caa:	6803      	ldr	r3, [r0, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb2:	b914      	cbnz	r4, 8005cba <__match+0x12>
 8005cb4:	6003      	str	r3, [r0, #0]
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	bd30      	pop	{r4, r5, pc}
 8005cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005cc2:	2d19      	cmp	r5, #25
 8005cc4:	bf98      	it	ls
 8005cc6:	3220      	addls	r2, #32
 8005cc8:	42a2      	cmp	r2, r4
 8005cca:	d0f0      	beq.n	8005cae <__match+0x6>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e7f3      	b.n	8005cb8 <__match+0x10>

08005cd0 <__hexnan>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	2500      	movs	r5, #0
 8005cd6:	680b      	ldr	r3, [r1, #0]
 8005cd8:	4682      	mov	sl, r0
 8005cda:	115e      	asrs	r6, r3, #5
 8005cdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005ce0:	f013 031f 	ands.w	r3, r3, #31
 8005ce4:	bf18      	it	ne
 8005ce6:	3604      	addne	r6, #4
 8005ce8:	1f37      	subs	r7, r6, #4
 8005cea:	46b9      	mov	r9, r7
 8005cec:	463c      	mov	r4, r7
 8005cee:	46ab      	mov	fp, r5
 8005cf0:	b087      	sub	sp, #28
 8005cf2:	4690      	mov	r8, r2
 8005cf4:	6802      	ldr	r2, [r0, #0]
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	f846 5c04 	str.w	r5, [r6, #-4]
 8005cfc:	9502      	str	r5, [sp, #8]
 8005cfe:	7851      	ldrb	r1, [r2, #1]
 8005d00:	1c53      	adds	r3, r2, #1
 8005d02:	9303      	str	r3, [sp, #12]
 8005d04:	b341      	cbz	r1, 8005d58 <__hexnan+0x88>
 8005d06:	4608      	mov	r0, r1
 8005d08:	9205      	str	r2, [sp, #20]
 8005d0a:	9104      	str	r1, [sp, #16]
 8005d0c:	f7ff fd69 	bl	80057e2 <__hexdig_fun>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d14f      	bne.n	8005db4 <__hexnan+0xe4>
 8005d14:	9904      	ldr	r1, [sp, #16]
 8005d16:	9a05      	ldr	r2, [sp, #20]
 8005d18:	2920      	cmp	r1, #32
 8005d1a:	d818      	bhi.n	8005d4e <__hexnan+0x7e>
 8005d1c:	9b02      	ldr	r3, [sp, #8]
 8005d1e:	459b      	cmp	fp, r3
 8005d20:	dd13      	ble.n	8005d4a <__hexnan+0x7a>
 8005d22:	454c      	cmp	r4, r9
 8005d24:	d206      	bcs.n	8005d34 <__hexnan+0x64>
 8005d26:	2d07      	cmp	r5, #7
 8005d28:	dc04      	bgt.n	8005d34 <__hexnan+0x64>
 8005d2a:	462a      	mov	r2, r5
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff ffa8 	bl	8005c84 <L_shift>
 8005d34:	4544      	cmp	r4, r8
 8005d36:	d950      	bls.n	8005dda <__hexnan+0x10a>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f1a4 0904 	sub.w	r9, r4, #4
 8005d3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d42:	461d      	mov	r5, r3
 8005d44:	464c      	mov	r4, r9
 8005d46:	f8cd b008 	str.w	fp, [sp, #8]
 8005d4a:	9a03      	ldr	r2, [sp, #12]
 8005d4c:	e7d7      	b.n	8005cfe <__hexnan+0x2e>
 8005d4e:	2929      	cmp	r1, #41	; 0x29
 8005d50:	d156      	bne.n	8005e00 <__hexnan+0x130>
 8005d52:	3202      	adds	r2, #2
 8005d54:	f8ca 2000 	str.w	r2, [sl]
 8005d58:	f1bb 0f00 	cmp.w	fp, #0
 8005d5c:	d050      	beq.n	8005e00 <__hexnan+0x130>
 8005d5e:	454c      	cmp	r4, r9
 8005d60:	d206      	bcs.n	8005d70 <__hexnan+0xa0>
 8005d62:	2d07      	cmp	r5, #7
 8005d64:	dc04      	bgt.n	8005d70 <__hexnan+0xa0>
 8005d66:	462a      	mov	r2, r5
 8005d68:	4649      	mov	r1, r9
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f7ff ff8a 	bl	8005c84 <L_shift>
 8005d70:	4544      	cmp	r4, r8
 8005d72:	d934      	bls.n	8005dde <__hexnan+0x10e>
 8005d74:	4623      	mov	r3, r4
 8005d76:	f1a8 0204 	sub.w	r2, r8, #4
 8005d7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8005d7e:	429f      	cmp	r7, r3
 8005d80:	f842 1f04 	str.w	r1, [r2, #4]!
 8005d84:	d2f9      	bcs.n	8005d7a <__hexnan+0xaa>
 8005d86:	1b3b      	subs	r3, r7, r4
 8005d88:	f023 0303 	bic.w	r3, r3, #3
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	3401      	adds	r4, #1
 8005d90:	3e03      	subs	r6, #3
 8005d92:	42b4      	cmp	r4, r6
 8005d94:	bf88      	it	hi
 8005d96:	2304      	movhi	r3, #4
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4443      	add	r3, r8
 8005d9c:	f843 2b04 	str.w	r2, [r3], #4
 8005da0:	429f      	cmp	r7, r3
 8005da2:	d2fb      	bcs.n	8005d9c <__hexnan+0xcc>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	b91b      	cbnz	r3, 8005db0 <__hexnan+0xe0>
 8005da8:	4547      	cmp	r7, r8
 8005daa:	d127      	bne.n	8005dfc <__hexnan+0x12c>
 8005dac:	2301      	movs	r3, #1
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	2005      	movs	r0, #5
 8005db2:	e026      	b.n	8005e02 <__hexnan+0x132>
 8005db4:	3501      	adds	r5, #1
 8005db6:	2d08      	cmp	r5, #8
 8005db8:	f10b 0b01 	add.w	fp, fp, #1
 8005dbc:	dd06      	ble.n	8005dcc <__hexnan+0xfc>
 8005dbe:	4544      	cmp	r4, r8
 8005dc0:	d9c3      	bls.n	8005d4a <__hexnan+0x7a>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2501      	movs	r5, #1
 8005dc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8005dca:	3c04      	subs	r4, #4
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	f000 000f 	and.w	r0, r0, #15
 8005dd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005dd6:	6022      	str	r2, [r4, #0]
 8005dd8:	e7b7      	b.n	8005d4a <__hexnan+0x7a>
 8005dda:	2508      	movs	r5, #8
 8005ddc:	e7b5      	b.n	8005d4a <__hexnan+0x7a>
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0df      	beq.n	8005da4 <__hexnan+0xd4>
 8005de4:	f04f 32ff 	mov.w	r2, #4294967295
 8005de8:	f1c3 0320 	rsb	r3, r3, #32
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
 8005df0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005df4:	401a      	ands	r2, r3
 8005df6:	f846 2c04 	str.w	r2, [r6, #-4]
 8005dfa:	e7d3      	b.n	8005da4 <__hexnan+0xd4>
 8005dfc:	3f04      	subs	r7, #4
 8005dfe:	e7d1      	b.n	8005da4 <__hexnan+0xd4>
 8005e00:	2004      	movs	r0, #4
 8005e02:	b007      	add	sp, #28
 8005e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e08 <_localeconv_r>:
 8005e08:	4800      	ldr	r0, [pc, #0]	; (8005e0c <_localeconv_r+0x4>)
 8005e0a:	4770      	bx	lr
 8005e0c:	2000016c 	.word	0x2000016c

08005e10 <malloc>:
 8005e10:	4b02      	ldr	r3, [pc, #8]	; (8005e1c <malloc+0xc>)
 8005e12:	4601      	mov	r1, r0
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f000 bd65 	b.w	80068e4 <_malloc_r>
 8005e1a:	bf00      	nop
 8005e1c:	20000014 	.word	0x20000014

08005e20 <__ascii_mbtowc>:
 8005e20:	b082      	sub	sp, #8
 8005e22:	b901      	cbnz	r1, 8005e26 <__ascii_mbtowc+0x6>
 8005e24:	a901      	add	r1, sp, #4
 8005e26:	b142      	cbz	r2, 8005e3a <__ascii_mbtowc+0x1a>
 8005e28:	b14b      	cbz	r3, 8005e3e <__ascii_mbtowc+0x1e>
 8005e2a:	7813      	ldrb	r3, [r2, #0]
 8005e2c:	600b      	str	r3, [r1, #0]
 8005e2e:	7812      	ldrb	r2, [r2, #0]
 8005e30:	1e10      	subs	r0, r2, #0
 8005e32:	bf18      	it	ne
 8005e34:	2001      	movne	r0, #1
 8005e36:	b002      	add	sp, #8
 8005e38:	4770      	bx	lr
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	e7fb      	b.n	8005e36 <__ascii_mbtowc+0x16>
 8005e3e:	f06f 0001 	mvn.w	r0, #1
 8005e42:	e7f8      	b.n	8005e36 <__ascii_mbtowc+0x16>

08005e44 <memchr>:
 8005e44:	4603      	mov	r3, r0
 8005e46:	b510      	push	{r4, lr}
 8005e48:	b2c9      	uxtb	r1, r1
 8005e4a:	4402      	add	r2, r0
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	d101      	bne.n	8005e56 <memchr+0x12>
 8005e52:	2000      	movs	r0, #0
 8005e54:	e003      	b.n	8005e5e <memchr+0x1a>
 8005e56:	7804      	ldrb	r4, [r0, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	428c      	cmp	r4, r1
 8005e5c:	d1f6      	bne.n	8005e4c <memchr+0x8>
 8005e5e:	bd10      	pop	{r4, pc}

08005e60 <memcpy>:
 8005e60:	440a      	add	r2, r1
 8005e62:	4291      	cmp	r1, r2
 8005e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e68:	d100      	bne.n	8005e6c <memcpy+0xc>
 8005e6a:	4770      	bx	lr
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e72:	4291      	cmp	r1, r2
 8005e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e78:	d1f9      	bne.n	8005e6e <memcpy+0xe>
 8005e7a:	bd10      	pop	{r4, pc}

08005e7c <_Balloc>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e80:	4604      	mov	r4, r0
 8005e82:	460d      	mov	r5, r1
 8005e84:	b976      	cbnz	r6, 8005ea4 <_Balloc+0x28>
 8005e86:	2010      	movs	r0, #16
 8005e88:	f7ff ffc2 	bl	8005e10 <malloc>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6260      	str	r0, [r4, #36]	; 0x24
 8005e90:	b920      	cbnz	r0, 8005e9c <_Balloc+0x20>
 8005e92:	2166      	movs	r1, #102	; 0x66
 8005e94:	4b17      	ldr	r3, [pc, #92]	; (8005ef4 <_Balloc+0x78>)
 8005e96:	4818      	ldr	r0, [pc, #96]	; (8005ef8 <_Balloc+0x7c>)
 8005e98:	f000 ff2c 	bl	8006cf4 <__assert_func>
 8005e9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ea0:	6006      	str	r6, [r0, #0]
 8005ea2:	60c6      	str	r6, [r0, #12]
 8005ea4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ea6:	68f3      	ldr	r3, [r6, #12]
 8005ea8:	b183      	cbz	r3, 8005ecc <_Balloc+0x50>
 8005eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005eb2:	b9b8      	cbnz	r0, 8005ee4 <_Balloc+0x68>
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	fa01 f605 	lsl.w	r6, r1, r5
 8005eba:	1d72      	adds	r2, r6, #5
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	0092      	lsls	r2, r2, #2
 8005ec0:	f000 fc94 	bl	80067ec <_calloc_r>
 8005ec4:	b160      	cbz	r0, 8005ee0 <_Balloc+0x64>
 8005ec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005eca:	e00e      	b.n	8005eea <_Balloc+0x6e>
 8005ecc:	2221      	movs	r2, #33	; 0x21
 8005ece:	2104      	movs	r1, #4
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fc8b 	bl	80067ec <_calloc_r>
 8005ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed8:	60f0      	str	r0, [r6, #12]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e4      	bne.n	8005eaa <_Balloc+0x2e>
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	6802      	ldr	r2, [r0, #0]
 8005ee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005eea:	2300      	movs	r3, #0
 8005eec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ef0:	e7f7      	b.n	8005ee2 <_Balloc+0x66>
 8005ef2:	bf00      	nop
 8005ef4:	08007a76 	.word	0x08007a76
 8005ef8:	08007b74 	.word	0x08007b74

08005efc <_Bfree>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f00:	4605      	mov	r5, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	b976      	cbnz	r6, 8005f24 <_Bfree+0x28>
 8005f06:	2010      	movs	r0, #16
 8005f08:	f7ff ff82 	bl	8005e10 <malloc>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6268      	str	r0, [r5, #36]	; 0x24
 8005f10:	b920      	cbnz	r0, 8005f1c <_Bfree+0x20>
 8005f12:	218a      	movs	r1, #138	; 0x8a
 8005f14:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <_Bfree+0x3c>)
 8005f16:	4809      	ldr	r0, [pc, #36]	; (8005f3c <_Bfree+0x40>)
 8005f18:	f000 feec 	bl	8006cf4 <__assert_func>
 8005f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f20:	6006      	str	r6, [r0, #0]
 8005f22:	60c6      	str	r6, [r0, #12]
 8005f24:	b13c      	cbz	r4, 8005f36 <_Bfree+0x3a>
 8005f26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f28:	6862      	ldr	r2, [r4, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f30:	6021      	str	r1, [r4, #0]
 8005f32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	08007a76 	.word	0x08007a76
 8005f3c:	08007b74 	.word	0x08007b74

08005f40 <__multadd>:
 8005f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f44:	4607      	mov	r7, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	461e      	mov	r6, r3
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	690d      	ldr	r5, [r1, #16]
 8005f4e:	f101 0c14 	add.w	ip, r1, #20
 8005f52:	f8dc 3000 	ldr.w	r3, [ip]
 8005f56:	3001      	adds	r0, #1
 8005f58:	b299      	uxth	r1, r3
 8005f5a:	fb02 6101 	mla	r1, r2, r1, r6
 8005f5e:	0c1e      	lsrs	r6, r3, #16
 8005f60:	0c0b      	lsrs	r3, r1, #16
 8005f62:	fb02 3306 	mla	r3, r2, r6, r3
 8005f66:	b289      	uxth	r1, r1
 8005f68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f6c:	4285      	cmp	r5, r0
 8005f6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f72:	f84c 1b04 	str.w	r1, [ip], #4
 8005f76:	dcec      	bgt.n	8005f52 <__multadd+0x12>
 8005f78:	b30e      	cbz	r6, 8005fbe <__multadd+0x7e>
 8005f7a:	68a3      	ldr	r3, [r4, #8]
 8005f7c:	42ab      	cmp	r3, r5
 8005f7e:	dc19      	bgt.n	8005fb4 <__multadd+0x74>
 8005f80:	6861      	ldr	r1, [r4, #4]
 8005f82:	4638      	mov	r0, r7
 8005f84:	3101      	adds	r1, #1
 8005f86:	f7ff ff79 	bl	8005e7c <_Balloc>
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	b928      	cbnz	r0, 8005f9a <__multadd+0x5a>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	21b5      	movs	r1, #181	; 0xb5
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <__multadd+0x84>)
 8005f94:	480c      	ldr	r0, [pc, #48]	; (8005fc8 <__multadd+0x88>)
 8005f96:	f000 fead 	bl	8006cf4 <__assert_func>
 8005f9a:	6922      	ldr	r2, [r4, #16]
 8005f9c:	f104 010c 	add.w	r1, r4, #12
 8005fa0:	3202      	adds	r2, #2
 8005fa2:	0092      	lsls	r2, r2, #2
 8005fa4:	300c      	adds	r0, #12
 8005fa6:	f7ff ff5b 	bl	8005e60 <memcpy>
 8005faa:	4621      	mov	r1, r4
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff ffa5 	bl	8005efc <_Bfree>
 8005fb2:	4644      	mov	r4, r8
 8005fb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fb8:	3501      	adds	r5, #1
 8005fba:	615e      	str	r6, [r3, #20]
 8005fbc:	6125      	str	r5, [r4, #16]
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc4:	08007ae8 	.word	0x08007ae8
 8005fc8:	08007b74 	.word	0x08007b74

08005fcc <__s2b>:
 8005fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd0:	4615      	mov	r5, r2
 8005fd2:	2209      	movs	r2, #9
 8005fd4:	461f      	mov	r7, r3
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	460c      	mov	r4, r1
 8005fda:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fde:	4606      	mov	r6, r0
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	db09      	blt.n	8005ffc <__s2b+0x30>
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff ff47 	bl	8005e7c <_Balloc>
 8005fee:	b940      	cbnz	r0, 8006002 <__s2b+0x36>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	21ce      	movs	r1, #206	; 0xce
 8005ff4:	4b18      	ldr	r3, [pc, #96]	; (8006058 <__s2b+0x8c>)
 8005ff6:	4819      	ldr	r0, [pc, #100]	; (800605c <__s2b+0x90>)
 8005ff8:	f000 fe7c 	bl	8006cf4 <__assert_func>
 8005ffc:	0052      	lsls	r2, r2, #1
 8005ffe:	3101      	adds	r1, #1
 8006000:	e7f0      	b.n	8005fe4 <__s2b+0x18>
 8006002:	9b08      	ldr	r3, [sp, #32]
 8006004:	2d09      	cmp	r5, #9
 8006006:	6143      	str	r3, [r0, #20]
 8006008:	f04f 0301 	mov.w	r3, #1
 800600c:	6103      	str	r3, [r0, #16]
 800600e:	dd16      	ble.n	800603e <__s2b+0x72>
 8006010:	f104 0909 	add.w	r9, r4, #9
 8006014:	46c8      	mov	r8, r9
 8006016:	442c      	add	r4, r5
 8006018:	f818 3b01 	ldrb.w	r3, [r8], #1
 800601c:	4601      	mov	r1, r0
 800601e:	220a      	movs	r2, #10
 8006020:	4630      	mov	r0, r6
 8006022:	3b30      	subs	r3, #48	; 0x30
 8006024:	f7ff ff8c 	bl	8005f40 <__multadd>
 8006028:	45a0      	cmp	r8, r4
 800602a:	d1f5      	bne.n	8006018 <__s2b+0x4c>
 800602c:	f1a5 0408 	sub.w	r4, r5, #8
 8006030:	444c      	add	r4, r9
 8006032:	1b2d      	subs	r5, r5, r4
 8006034:	1963      	adds	r3, r4, r5
 8006036:	42bb      	cmp	r3, r7
 8006038:	db04      	blt.n	8006044 <__s2b+0x78>
 800603a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800603e:	2509      	movs	r5, #9
 8006040:	340a      	adds	r4, #10
 8006042:	e7f6      	b.n	8006032 <__s2b+0x66>
 8006044:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006048:	4601      	mov	r1, r0
 800604a:	220a      	movs	r2, #10
 800604c:	4630      	mov	r0, r6
 800604e:	3b30      	subs	r3, #48	; 0x30
 8006050:	f7ff ff76 	bl	8005f40 <__multadd>
 8006054:	e7ee      	b.n	8006034 <__s2b+0x68>
 8006056:	bf00      	nop
 8006058:	08007ae8 	.word	0x08007ae8
 800605c:	08007b74 	.word	0x08007b74

08006060 <__hi0bits>:
 8006060:	0c02      	lsrs	r2, r0, #16
 8006062:	0412      	lsls	r2, r2, #16
 8006064:	4603      	mov	r3, r0
 8006066:	b9ca      	cbnz	r2, 800609c <__hi0bits+0x3c>
 8006068:	0403      	lsls	r3, r0, #16
 800606a:	2010      	movs	r0, #16
 800606c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006070:	bf04      	itt	eq
 8006072:	021b      	lsleq	r3, r3, #8
 8006074:	3008      	addeq	r0, #8
 8006076:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800607a:	bf04      	itt	eq
 800607c:	011b      	lsleq	r3, r3, #4
 800607e:	3004      	addeq	r0, #4
 8006080:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006084:	bf04      	itt	eq
 8006086:	009b      	lsleq	r3, r3, #2
 8006088:	3002      	addeq	r0, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	db05      	blt.n	800609a <__hi0bits+0x3a>
 800608e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006092:	f100 0001 	add.w	r0, r0, #1
 8006096:	bf08      	it	eq
 8006098:	2020      	moveq	r0, #32
 800609a:	4770      	bx	lr
 800609c:	2000      	movs	r0, #0
 800609e:	e7e5      	b.n	800606c <__hi0bits+0xc>

080060a0 <__lo0bits>:
 80060a0:	6803      	ldr	r3, [r0, #0]
 80060a2:	4602      	mov	r2, r0
 80060a4:	f013 0007 	ands.w	r0, r3, #7
 80060a8:	d00b      	beq.n	80060c2 <__lo0bits+0x22>
 80060aa:	07d9      	lsls	r1, r3, #31
 80060ac:	d421      	bmi.n	80060f2 <__lo0bits+0x52>
 80060ae:	0798      	lsls	r0, r3, #30
 80060b0:	bf49      	itett	mi
 80060b2:	085b      	lsrmi	r3, r3, #1
 80060b4:	089b      	lsrpl	r3, r3, #2
 80060b6:	2001      	movmi	r0, #1
 80060b8:	6013      	strmi	r3, [r2, #0]
 80060ba:	bf5c      	itt	pl
 80060bc:	2002      	movpl	r0, #2
 80060be:	6013      	strpl	r3, [r2, #0]
 80060c0:	4770      	bx	lr
 80060c2:	b299      	uxth	r1, r3
 80060c4:	b909      	cbnz	r1, 80060ca <__lo0bits+0x2a>
 80060c6:	2010      	movs	r0, #16
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	b2d9      	uxtb	r1, r3
 80060cc:	b909      	cbnz	r1, 80060d2 <__lo0bits+0x32>
 80060ce:	3008      	adds	r0, #8
 80060d0:	0a1b      	lsrs	r3, r3, #8
 80060d2:	0719      	lsls	r1, r3, #28
 80060d4:	bf04      	itt	eq
 80060d6:	091b      	lsreq	r3, r3, #4
 80060d8:	3004      	addeq	r0, #4
 80060da:	0799      	lsls	r1, r3, #30
 80060dc:	bf04      	itt	eq
 80060de:	089b      	lsreq	r3, r3, #2
 80060e0:	3002      	addeq	r0, #2
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	d403      	bmi.n	80060ee <__lo0bits+0x4e>
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	f100 0001 	add.w	r0, r0, #1
 80060ec:	d003      	beq.n	80060f6 <__lo0bits+0x56>
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4770      	bx	lr
 80060f2:	2000      	movs	r0, #0
 80060f4:	4770      	bx	lr
 80060f6:	2020      	movs	r0, #32
 80060f8:	4770      	bx	lr
	...

080060fc <__i2b>:
 80060fc:	b510      	push	{r4, lr}
 80060fe:	460c      	mov	r4, r1
 8006100:	2101      	movs	r1, #1
 8006102:	f7ff febb 	bl	8005e7c <_Balloc>
 8006106:	4602      	mov	r2, r0
 8006108:	b928      	cbnz	r0, 8006116 <__i2b+0x1a>
 800610a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800610e:	4b04      	ldr	r3, [pc, #16]	; (8006120 <__i2b+0x24>)
 8006110:	4804      	ldr	r0, [pc, #16]	; (8006124 <__i2b+0x28>)
 8006112:	f000 fdef 	bl	8006cf4 <__assert_func>
 8006116:	2301      	movs	r3, #1
 8006118:	6144      	str	r4, [r0, #20]
 800611a:	6103      	str	r3, [r0, #16]
 800611c:	bd10      	pop	{r4, pc}
 800611e:	bf00      	nop
 8006120:	08007ae8 	.word	0x08007ae8
 8006124:	08007b74 	.word	0x08007b74

08006128 <__multiply>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	4691      	mov	r9, r2
 800612e:	690a      	ldr	r2, [r1, #16]
 8006130:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006134:	460c      	mov	r4, r1
 8006136:	429a      	cmp	r2, r3
 8006138:	bfbe      	ittt	lt
 800613a:	460b      	movlt	r3, r1
 800613c:	464c      	movlt	r4, r9
 800613e:	4699      	movlt	r9, r3
 8006140:	6927      	ldr	r7, [r4, #16]
 8006142:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006146:	68a3      	ldr	r3, [r4, #8]
 8006148:	6861      	ldr	r1, [r4, #4]
 800614a:	eb07 060a 	add.w	r6, r7, sl
 800614e:	42b3      	cmp	r3, r6
 8006150:	b085      	sub	sp, #20
 8006152:	bfb8      	it	lt
 8006154:	3101      	addlt	r1, #1
 8006156:	f7ff fe91 	bl	8005e7c <_Balloc>
 800615a:	b930      	cbnz	r0, 800616a <__multiply+0x42>
 800615c:	4602      	mov	r2, r0
 800615e:	f240 115d 	movw	r1, #349	; 0x15d
 8006162:	4b43      	ldr	r3, [pc, #268]	; (8006270 <__multiply+0x148>)
 8006164:	4843      	ldr	r0, [pc, #268]	; (8006274 <__multiply+0x14c>)
 8006166:	f000 fdc5 	bl	8006cf4 <__assert_func>
 800616a:	f100 0514 	add.w	r5, r0, #20
 800616e:	462b      	mov	r3, r5
 8006170:	2200      	movs	r2, #0
 8006172:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006176:	4543      	cmp	r3, r8
 8006178:	d321      	bcc.n	80061be <__multiply+0x96>
 800617a:	f104 0314 	add.w	r3, r4, #20
 800617e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006182:	f109 0314 	add.w	r3, r9, #20
 8006186:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800618a:	9202      	str	r2, [sp, #8]
 800618c:	1b3a      	subs	r2, r7, r4
 800618e:	3a15      	subs	r2, #21
 8006190:	f022 0203 	bic.w	r2, r2, #3
 8006194:	3204      	adds	r2, #4
 8006196:	f104 0115 	add.w	r1, r4, #21
 800619a:	428f      	cmp	r7, r1
 800619c:	bf38      	it	cc
 800619e:	2204      	movcc	r2, #4
 80061a0:	9201      	str	r2, [sp, #4]
 80061a2:	9a02      	ldr	r2, [sp, #8]
 80061a4:	9303      	str	r3, [sp, #12]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d80c      	bhi.n	80061c4 <__multiply+0x9c>
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	dd03      	ble.n	80061b6 <__multiply+0x8e>
 80061ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d059      	beq.n	800626a <__multiply+0x142>
 80061b6:	6106      	str	r6, [r0, #16]
 80061b8:	b005      	add	sp, #20
 80061ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061be:	f843 2b04 	str.w	r2, [r3], #4
 80061c2:	e7d8      	b.n	8006176 <__multiply+0x4e>
 80061c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80061c8:	f1ba 0f00 	cmp.w	sl, #0
 80061cc:	d023      	beq.n	8006216 <__multiply+0xee>
 80061ce:	46a9      	mov	r9, r5
 80061d0:	f04f 0c00 	mov.w	ip, #0
 80061d4:	f104 0e14 	add.w	lr, r4, #20
 80061d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80061dc:	f8d9 1000 	ldr.w	r1, [r9]
 80061e0:	fa1f fb82 	uxth.w	fp, r2
 80061e4:	b289      	uxth	r1, r1
 80061e6:	fb0a 110b 	mla	r1, sl, fp, r1
 80061ea:	4461      	add	r1, ip
 80061ec:	f8d9 c000 	ldr.w	ip, [r9]
 80061f0:	0c12      	lsrs	r2, r2, #16
 80061f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80061f6:	fb0a c202 	mla	r2, sl, r2, ip
 80061fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80061fe:	b289      	uxth	r1, r1
 8006200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006204:	4577      	cmp	r7, lr
 8006206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800620a:	f849 1b04 	str.w	r1, [r9], #4
 800620e:	d8e3      	bhi.n	80061d8 <__multiply+0xb0>
 8006210:	9a01      	ldr	r2, [sp, #4]
 8006212:	f845 c002 	str.w	ip, [r5, r2]
 8006216:	9a03      	ldr	r2, [sp, #12]
 8006218:	3304      	adds	r3, #4
 800621a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800621e:	f1b9 0f00 	cmp.w	r9, #0
 8006222:	d020      	beq.n	8006266 <__multiply+0x13e>
 8006224:	46ae      	mov	lr, r5
 8006226:	f04f 0a00 	mov.w	sl, #0
 800622a:	6829      	ldr	r1, [r5, #0]
 800622c:	f104 0c14 	add.w	ip, r4, #20
 8006230:	f8bc b000 	ldrh.w	fp, [ip]
 8006234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006238:	b289      	uxth	r1, r1
 800623a:	fb09 220b 	mla	r2, r9, fp, r2
 800623e:	4492      	add	sl, r2
 8006240:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006244:	f84e 1b04 	str.w	r1, [lr], #4
 8006248:	f85c 2b04 	ldr.w	r2, [ip], #4
 800624c:	f8be 1000 	ldrh.w	r1, [lr]
 8006250:	0c12      	lsrs	r2, r2, #16
 8006252:	fb09 1102 	mla	r1, r9, r2, r1
 8006256:	4567      	cmp	r7, ip
 8006258:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800625c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006260:	d8e6      	bhi.n	8006230 <__multiply+0x108>
 8006262:	9a01      	ldr	r2, [sp, #4]
 8006264:	50a9      	str	r1, [r5, r2]
 8006266:	3504      	adds	r5, #4
 8006268:	e79b      	b.n	80061a2 <__multiply+0x7a>
 800626a:	3e01      	subs	r6, #1
 800626c:	e79d      	b.n	80061aa <__multiply+0x82>
 800626e:	bf00      	nop
 8006270:	08007ae8 	.word	0x08007ae8
 8006274:	08007b74 	.word	0x08007b74

08006278 <__pow5mult>:
 8006278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800627c:	4615      	mov	r5, r2
 800627e:	f012 0203 	ands.w	r2, r2, #3
 8006282:	4606      	mov	r6, r0
 8006284:	460f      	mov	r7, r1
 8006286:	d007      	beq.n	8006298 <__pow5mult+0x20>
 8006288:	4c25      	ldr	r4, [pc, #148]	; (8006320 <__pow5mult+0xa8>)
 800628a:	3a01      	subs	r2, #1
 800628c:	2300      	movs	r3, #0
 800628e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006292:	f7ff fe55 	bl	8005f40 <__multadd>
 8006296:	4607      	mov	r7, r0
 8006298:	10ad      	asrs	r5, r5, #2
 800629a:	d03d      	beq.n	8006318 <__pow5mult+0xa0>
 800629c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800629e:	b97c      	cbnz	r4, 80062c0 <__pow5mult+0x48>
 80062a0:	2010      	movs	r0, #16
 80062a2:	f7ff fdb5 	bl	8005e10 <malloc>
 80062a6:	4602      	mov	r2, r0
 80062a8:	6270      	str	r0, [r6, #36]	; 0x24
 80062aa:	b928      	cbnz	r0, 80062b8 <__pow5mult+0x40>
 80062ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80062b0:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <__pow5mult+0xac>)
 80062b2:	481d      	ldr	r0, [pc, #116]	; (8006328 <__pow5mult+0xb0>)
 80062b4:	f000 fd1e 	bl	8006cf4 <__assert_func>
 80062b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062bc:	6004      	str	r4, [r0, #0]
 80062be:	60c4      	str	r4, [r0, #12]
 80062c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062c8:	b94c      	cbnz	r4, 80062de <__pow5mult+0x66>
 80062ca:	f240 2171 	movw	r1, #625	; 0x271
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7ff ff14 	bl	80060fc <__i2b>
 80062d4:	2300      	movs	r3, #0
 80062d6:	4604      	mov	r4, r0
 80062d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80062dc:	6003      	str	r3, [r0, #0]
 80062de:	f04f 0900 	mov.w	r9, #0
 80062e2:	07eb      	lsls	r3, r5, #31
 80062e4:	d50a      	bpl.n	80062fc <__pow5mult+0x84>
 80062e6:	4639      	mov	r1, r7
 80062e8:	4622      	mov	r2, r4
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff ff1c 	bl	8006128 <__multiply>
 80062f0:	4680      	mov	r8, r0
 80062f2:	4639      	mov	r1, r7
 80062f4:	4630      	mov	r0, r6
 80062f6:	f7ff fe01 	bl	8005efc <_Bfree>
 80062fa:	4647      	mov	r7, r8
 80062fc:	106d      	asrs	r5, r5, #1
 80062fe:	d00b      	beq.n	8006318 <__pow5mult+0xa0>
 8006300:	6820      	ldr	r0, [r4, #0]
 8006302:	b938      	cbnz	r0, 8006314 <__pow5mult+0x9c>
 8006304:	4622      	mov	r2, r4
 8006306:	4621      	mov	r1, r4
 8006308:	4630      	mov	r0, r6
 800630a:	f7ff ff0d 	bl	8006128 <__multiply>
 800630e:	6020      	str	r0, [r4, #0]
 8006310:	f8c0 9000 	str.w	r9, [r0]
 8006314:	4604      	mov	r4, r0
 8006316:	e7e4      	b.n	80062e2 <__pow5mult+0x6a>
 8006318:	4638      	mov	r0, r7
 800631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631e:	bf00      	nop
 8006320:	08007cc0 	.word	0x08007cc0
 8006324:	08007a76 	.word	0x08007a76
 8006328:	08007b74 	.word	0x08007b74

0800632c <__lshift>:
 800632c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006330:	460c      	mov	r4, r1
 8006332:	4607      	mov	r7, r0
 8006334:	4691      	mov	r9, r2
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	6849      	ldr	r1, [r1, #4]
 800633a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800633e:	68a3      	ldr	r3, [r4, #8]
 8006340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006344:	f108 0601 	add.w	r6, r8, #1
 8006348:	42b3      	cmp	r3, r6
 800634a:	db0b      	blt.n	8006364 <__lshift+0x38>
 800634c:	4638      	mov	r0, r7
 800634e:	f7ff fd95 	bl	8005e7c <_Balloc>
 8006352:	4605      	mov	r5, r0
 8006354:	b948      	cbnz	r0, 800636a <__lshift+0x3e>
 8006356:	4602      	mov	r2, r0
 8006358:	f240 11d9 	movw	r1, #473	; 0x1d9
 800635c:	4b29      	ldr	r3, [pc, #164]	; (8006404 <__lshift+0xd8>)
 800635e:	482a      	ldr	r0, [pc, #168]	; (8006408 <__lshift+0xdc>)
 8006360:	f000 fcc8 	bl	8006cf4 <__assert_func>
 8006364:	3101      	adds	r1, #1
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	e7ee      	b.n	8006348 <__lshift+0x1c>
 800636a:	2300      	movs	r3, #0
 800636c:	f100 0114 	add.w	r1, r0, #20
 8006370:	f100 0210 	add.w	r2, r0, #16
 8006374:	4618      	mov	r0, r3
 8006376:	4553      	cmp	r3, sl
 8006378:	db37      	blt.n	80063ea <__lshift+0xbe>
 800637a:	6920      	ldr	r0, [r4, #16]
 800637c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006380:	f104 0314 	add.w	r3, r4, #20
 8006384:	f019 091f 	ands.w	r9, r9, #31
 8006388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800638c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006390:	d02f      	beq.n	80063f2 <__lshift+0xc6>
 8006392:	468a      	mov	sl, r1
 8006394:	f04f 0c00 	mov.w	ip, #0
 8006398:	f1c9 0e20 	rsb	lr, r9, #32
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	fa02 f209 	lsl.w	r2, r2, r9
 80063a2:	ea42 020c 	orr.w	r2, r2, ip
 80063a6:	f84a 2b04 	str.w	r2, [sl], #4
 80063aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ae:	4298      	cmp	r0, r3
 80063b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80063b4:	d8f2      	bhi.n	800639c <__lshift+0x70>
 80063b6:	1b03      	subs	r3, r0, r4
 80063b8:	3b15      	subs	r3, #21
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	3304      	adds	r3, #4
 80063c0:	f104 0215 	add.w	r2, r4, #21
 80063c4:	4290      	cmp	r0, r2
 80063c6:	bf38      	it	cc
 80063c8:	2304      	movcc	r3, #4
 80063ca:	f841 c003 	str.w	ip, [r1, r3]
 80063ce:	f1bc 0f00 	cmp.w	ip, #0
 80063d2:	d001      	beq.n	80063d8 <__lshift+0xac>
 80063d4:	f108 0602 	add.w	r6, r8, #2
 80063d8:	3e01      	subs	r6, #1
 80063da:	4638      	mov	r0, r7
 80063dc:	4621      	mov	r1, r4
 80063de:	612e      	str	r6, [r5, #16]
 80063e0:	f7ff fd8c 	bl	8005efc <_Bfree>
 80063e4:	4628      	mov	r0, r5
 80063e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80063ee:	3301      	adds	r3, #1
 80063f0:	e7c1      	b.n	8006376 <__lshift+0x4a>
 80063f2:	3904      	subs	r1, #4
 80063f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80063f8:	4298      	cmp	r0, r3
 80063fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80063fe:	d8f9      	bhi.n	80063f4 <__lshift+0xc8>
 8006400:	e7ea      	b.n	80063d8 <__lshift+0xac>
 8006402:	bf00      	nop
 8006404:	08007ae8 	.word	0x08007ae8
 8006408:	08007b74 	.word	0x08007b74

0800640c <__mcmp>:
 800640c:	4603      	mov	r3, r0
 800640e:	690a      	ldr	r2, [r1, #16]
 8006410:	6900      	ldr	r0, [r0, #16]
 8006412:	b530      	push	{r4, r5, lr}
 8006414:	1a80      	subs	r0, r0, r2
 8006416:	d10d      	bne.n	8006434 <__mcmp+0x28>
 8006418:	3314      	adds	r3, #20
 800641a:	3114      	adds	r1, #20
 800641c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006420:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006424:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006428:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800642c:	4295      	cmp	r5, r2
 800642e:	d002      	beq.n	8006436 <__mcmp+0x2a>
 8006430:	d304      	bcc.n	800643c <__mcmp+0x30>
 8006432:	2001      	movs	r0, #1
 8006434:	bd30      	pop	{r4, r5, pc}
 8006436:	42a3      	cmp	r3, r4
 8006438:	d3f4      	bcc.n	8006424 <__mcmp+0x18>
 800643a:	e7fb      	b.n	8006434 <__mcmp+0x28>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	e7f8      	b.n	8006434 <__mcmp+0x28>
	...

08006444 <__mdiff>:
 8006444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006448:	460d      	mov	r5, r1
 800644a:	4607      	mov	r7, r0
 800644c:	4611      	mov	r1, r2
 800644e:	4628      	mov	r0, r5
 8006450:	4614      	mov	r4, r2
 8006452:	f7ff ffdb 	bl	800640c <__mcmp>
 8006456:	1e06      	subs	r6, r0, #0
 8006458:	d111      	bne.n	800647e <__mdiff+0x3a>
 800645a:	4631      	mov	r1, r6
 800645c:	4638      	mov	r0, r7
 800645e:	f7ff fd0d 	bl	8005e7c <_Balloc>
 8006462:	4602      	mov	r2, r0
 8006464:	b928      	cbnz	r0, 8006472 <__mdiff+0x2e>
 8006466:	f240 2132 	movw	r1, #562	; 0x232
 800646a:	4b3a      	ldr	r3, [pc, #232]	; (8006554 <__mdiff+0x110>)
 800646c:	483a      	ldr	r0, [pc, #232]	; (8006558 <__mdiff+0x114>)
 800646e:	f000 fc41 	bl	8006cf4 <__assert_func>
 8006472:	2301      	movs	r3, #1
 8006474:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006478:	4610      	mov	r0, r2
 800647a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647e:	bfa4      	itt	ge
 8006480:	4623      	movge	r3, r4
 8006482:	462c      	movge	r4, r5
 8006484:	4638      	mov	r0, r7
 8006486:	6861      	ldr	r1, [r4, #4]
 8006488:	bfa6      	itte	ge
 800648a:	461d      	movge	r5, r3
 800648c:	2600      	movge	r6, #0
 800648e:	2601      	movlt	r6, #1
 8006490:	f7ff fcf4 	bl	8005e7c <_Balloc>
 8006494:	4602      	mov	r2, r0
 8006496:	b918      	cbnz	r0, 80064a0 <__mdiff+0x5c>
 8006498:	f44f 7110 	mov.w	r1, #576	; 0x240
 800649c:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <__mdiff+0x110>)
 800649e:	e7e5      	b.n	800646c <__mdiff+0x28>
 80064a0:	f102 0814 	add.w	r8, r2, #20
 80064a4:	46c2      	mov	sl, r8
 80064a6:	f04f 0c00 	mov.w	ip, #0
 80064aa:	6927      	ldr	r7, [r4, #16]
 80064ac:	60c6      	str	r6, [r0, #12]
 80064ae:	692e      	ldr	r6, [r5, #16]
 80064b0:	f104 0014 	add.w	r0, r4, #20
 80064b4:	f105 0914 	add.w	r9, r5, #20
 80064b8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80064bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064c0:	3410      	adds	r4, #16
 80064c2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80064c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80064ca:	fa1f f18b 	uxth.w	r1, fp
 80064ce:	448c      	add	ip, r1
 80064d0:	b299      	uxth	r1, r3
 80064d2:	0c1b      	lsrs	r3, r3, #16
 80064d4:	ebac 0101 	sub.w	r1, ip, r1
 80064d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064dc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80064e0:	b289      	uxth	r1, r1
 80064e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80064e6:	454e      	cmp	r6, r9
 80064e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80064ec:	f84a 3b04 	str.w	r3, [sl], #4
 80064f0:	d8e7      	bhi.n	80064c2 <__mdiff+0x7e>
 80064f2:	1b73      	subs	r3, r6, r5
 80064f4:	3b15      	subs	r3, #21
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	3515      	adds	r5, #21
 80064fc:	3304      	adds	r3, #4
 80064fe:	42ae      	cmp	r6, r5
 8006500:	bf38      	it	cc
 8006502:	2304      	movcc	r3, #4
 8006504:	4418      	add	r0, r3
 8006506:	4443      	add	r3, r8
 8006508:	461e      	mov	r6, r3
 800650a:	4605      	mov	r5, r0
 800650c:	4575      	cmp	r5, lr
 800650e:	d30e      	bcc.n	800652e <__mdiff+0xea>
 8006510:	f10e 0103 	add.w	r1, lr, #3
 8006514:	1a09      	subs	r1, r1, r0
 8006516:	f021 0103 	bic.w	r1, r1, #3
 800651a:	3803      	subs	r0, #3
 800651c:	4586      	cmp	lr, r0
 800651e:	bf38      	it	cc
 8006520:	2100      	movcc	r1, #0
 8006522:	4419      	add	r1, r3
 8006524:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006528:	b18b      	cbz	r3, 800654e <__mdiff+0x10a>
 800652a:	6117      	str	r7, [r2, #16]
 800652c:	e7a4      	b.n	8006478 <__mdiff+0x34>
 800652e:	f855 8b04 	ldr.w	r8, [r5], #4
 8006532:	fa1f f188 	uxth.w	r1, r8
 8006536:	4461      	add	r1, ip
 8006538:	140c      	asrs	r4, r1, #16
 800653a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800653e:	b289      	uxth	r1, r1
 8006540:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006544:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006548:	f846 1b04 	str.w	r1, [r6], #4
 800654c:	e7de      	b.n	800650c <__mdiff+0xc8>
 800654e:	3f01      	subs	r7, #1
 8006550:	e7e8      	b.n	8006524 <__mdiff+0xe0>
 8006552:	bf00      	nop
 8006554:	08007ae8 	.word	0x08007ae8
 8006558:	08007b74 	.word	0x08007b74

0800655c <__ulp>:
 800655c:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <__ulp+0x48>)
 800655e:	400b      	ands	r3, r1
 8006560:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006564:	2b00      	cmp	r3, #0
 8006566:	dd02      	ble.n	800656e <__ulp+0x12>
 8006568:	2000      	movs	r0, #0
 800656a:	4619      	mov	r1, r3
 800656c:	4770      	bx	lr
 800656e:	425b      	negs	r3, r3
 8006570:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006574:	f04f 0000 	mov.w	r0, #0
 8006578:	f04f 0100 	mov.w	r1, #0
 800657c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006580:	da04      	bge.n	800658c <__ulp+0x30>
 8006582:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006586:	fa43 f102 	asr.w	r1, r3, r2
 800658a:	4770      	bx	lr
 800658c:	f1a2 0314 	sub.w	r3, r2, #20
 8006590:	2b1e      	cmp	r3, #30
 8006592:	bfd6      	itet	le
 8006594:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006598:	2301      	movgt	r3, #1
 800659a:	fa22 f303 	lsrle.w	r3, r2, r3
 800659e:	4618      	mov	r0, r3
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	7ff00000 	.word	0x7ff00000

080065a8 <__b2d>:
 80065a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ac:	6907      	ldr	r7, [r0, #16]
 80065ae:	f100 0914 	add.w	r9, r0, #20
 80065b2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80065b6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80065ba:	f1a7 0804 	sub.w	r8, r7, #4
 80065be:	4630      	mov	r0, r6
 80065c0:	f7ff fd4e 	bl	8006060 <__hi0bits>
 80065c4:	f1c0 0320 	rsb	r3, r0, #32
 80065c8:	280a      	cmp	r0, #10
 80065ca:	600b      	str	r3, [r1, #0]
 80065cc:	491f      	ldr	r1, [pc, #124]	; (800664c <__b2d+0xa4>)
 80065ce:	dc17      	bgt.n	8006600 <__b2d+0x58>
 80065d0:	45c1      	cmp	r9, r8
 80065d2:	bf28      	it	cs
 80065d4:	2200      	movcs	r2, #0
 80065d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80065da:	fa26 f30c 	lsr.w	r3, r6, ip
 80065de:	bf38      	it	cc
 80065e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80065e4:	ea43 0501 	orr.w	r5, r3, r1
 80065e8:	f100 0315 	add.w	r3, r0, #21
 80065ec:	fa06 f303 	lsl.w	r3, r6, r3
 80065f0:	fa22 f20c 	lsr.w	r2, r2, ip
 80065f4:	ea43 0402 	orr.w	r4, r3, r2
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006600:	45c1      	cmp	r9, r8
 8006602:	bf2e      	itee	cs
 8006604:	2200      	movcs	r2, #0
 8006606:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800660a:	f1a7 0808 	subcc.w	r8, r7, #8
 800660e:	f1b0 030b 	subs.w	r3, r0, #11
 8006612:	d016      	beq.n	8006642 <__b2d+0x9a>
 8006614:	f1c3 0720 	rsb	r7, r3, #32
 8006618:	fa22 f107 	lsr.w	r1, r2, r7
 800661c:	45c8      	cmp	r8, r9
 800661e:	fa06 f603 	lsl.w	r6, r6, r3
 8006622:	ea46 0601 	orr.w	r6, r6, r1
 8006626:	bf94      	ite	ls
 8006628:	2100      	movls	r1, #0
 800662a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800662e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006632:	fa02 f003 	lsl.w	r0, r2, r3
 8006636:	40f9      	lsrs	r1, r7
 8006638:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800663c:	ea40 0401 	orr.w	r4, r0, r1
 8006640:	e7da      	b.n	80065f8 <__b2d+0x50>
 8006642:	4614      	mov	r4, r2
 8006644:	ea46 0501 	orr.w	r5, r6, r1
 8006648:	e7d6      	b.n	80065f8 <__b2d+0x50>
 800664a:	bf00      	nop
 800664c:	3ff00000 	.word	0x3ff00000

08006650 <__d2b>:
 8006650:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006654:	2101      	movs	r1, #1
 8006656:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800665a:	4690      	mov	r8, r2
 800665c:	461d      	mov	r5, r3
 800665e:	f7ff fc0d 	bl	8005e7c <_Balloc>
 8006662:	4604      	mov	r4, r0
 8006664:	b930      	cbnz	r0, 8006674 <__d2b+0x24>
 8006666:	4602      	mov	r2, r0
 8006668:	f240 310a 	movw	r1, #778	; 0x30a
 800666c:	4b24      	ldr	r3, [pc, #144]	; (8006700 <__d2b+0xb0>)
 800666e:	4825      	ldr	r0, [pc, #148]	; (8006704 <__d2b+0xb4>)
 8006670:	f000 fb40 	bl	8006cf4 <__assert_func>
 8006674:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006678:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800667c:	bb2d      	cbnz	r5, 80066ca <__d2b+0x7a>
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	f1b8 0300 	subs.w	r3, r8, #0
 8006684:	d026      	beq.n	80066d4 <__d2b+0x84>
 8006686:	4668      	mov	r0, sp
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	f7ff fd09 	bl	80060a0 <__lo0bits>
 800668e:	9900      	ldr	r1, [sp, #0]
 8006690:	b1f0      	cbz	r0, 80066d0 <__d2b+0x80>
 8006692:	9a01      	ldr	r2, [sp, #4]
 8006694:	f1c0 0320 	rsb	r3, r0, #32
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	430b      	orrs	r3, r1
 800669e:	40c2      	lsrs	r2, r0
 80066a0:	6163      	str	r3, [r4, #20]
 80066a2:	9201      	str	r2, [sp, #4]
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf14      	ite	ne
 80066aa:	2102      	movne	r1, #2
 80066ac:	2101      	moveq	r1, #1
 80066ae:	61a3      	str	r3, [r4, #24]
 80066b0:	6121      	str	r1, [r4, #16]
 80066b2:	b1c5      	cbz	r5, 80066e6 <__d2b+0x96>
 80066b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80066b8:	4405      	add	r5, r0
 80066ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066be:	603d      	str	r5, [r7, #0]
 80066c0:	6030      	str	r0, [r6, #0]
 80066c2:	4620      	mov	r0, r4
 80066c4:	b002      	add	sp, #8
 80066c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066ce:	e7d6      	b.n	800667e <__d2b+0x2e>
 80066d0:	6161      	str	r1, [r4, #20]
 80066d2:	e7e7      	b.n	80066a4 <__d2b+0x54>
 80066d4:	a801      	add	r0, sp, #4
 80066d6:	f7ff fce3 	bl	80060a0 <__lo0bits>
 80066da:	2101      	movs	r1, #1
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	6121      	str	r1, [r4, #16]
 80066e0:	6163      	str	r3, [r4, #20]
 80066e2:	3020      	adds	r0, #32
 80066e4:	e7e5      	b.n	80066b2 <__d2b+0x62>
 80066e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80066ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066ee:	6038      	str	r0, [r7, #0]
 80066f0:	6918      	ldr	r0, [r3, #16]
 80066f2:	f7ff fcb5 	bl	8006060 <__hi0bits>
 80066f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80066fa:	6031      	str	r1, [r6, #0]
 80066fc:	e7e1      	b.n	80066c2 <__d2b+0x72>
 80066fe:	bf00      	nop
 8006700:	08007ae8 	.word	0x08007ae8
 8006704:	08007b74 	.word	0x08007b74

08006708 <__ratio>:
 8006708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670c:	4688      	mov	r8, r1
 800670e:	4669      	mov	r1, sp
 8006710:	4681      	mov	r9, r0
 8006712:	f7ff ff49 	bl	80065a8 <__b2d>
 8006716:	460f      	mov	r7, r1
 8006718:	4604      	mov	r4, r0
 800671a:	460d      	mov	r5, r1
 800671c:	4640      	mov	r0, r8
 800671e:	a901      	add	r1, sp, #4
 8006720:	f7ff ff42 	bl	80065a8 <__b2d>
 8006724:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006728:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800672c:	468b      	mov	fp, r1
 800672e:	eba3 0c02 	sub.w	ip, r3, r2
 8006732:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006736:	1a9b      	subs	r3, r3, r2
 8006738:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800673c:	2b00      	cmp	r3, #0
 800673e:	bfd5      	itete	le
 8006740:	460a      	movle	r2, r1
 8006742:	462a      	movgt	r2, r5
 8006744:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006748:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800674c:	bfd8      	it	le
 800674e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006752:	465b      	mov	r3, fp
 8006754:	4602      	mov	r2, r0
 8006756:	4639      	mov	r1, r7
 8006758:	4620      	mov	r0, r4
 800675a:	f7f9 ffe7 	bl	800072c <__aeabi_ddiv>
 800675e:	b003      	add	sp, #12
 8006760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006764 <__copybits>:
 8006764:	3901      	subs	r1, #1
 8006766:	b570      	push	{r4, r5, r6, lr}
 8006768:	1149      	asrs	r1, r1, #5
 800676a:	6914      	ldr	r4, [r2, #16]
 800676c:	3101      	adds	r1, #1
 800676e:	f102 0314 	add.w	r3, r2, #20
 8006772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006776:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800677a:	1f05      	subs	r5, r0, #4
 800677c:	42a3      	cmp	r3, r4
 800677e:	d30c      	bcc.n	800679a <__copybits+0x36>
 8006780:	1aa3      	subs	r3, r4, r2
 8006782:	3b11      	subs	r3, #17
 8006784:	f023 0303 	bic.w	r3, r3, #3
 8006788:	3211      	adds	r2, #17
 800678a:	42a2      	cmp	r2, r4
 800678c:	bf88      	it	hi
 800678e:	2300      	movhi	r3, #0
 8006790:	4418      	add	r0, r3
 8006792:	2300      	movs	r3, #0
 8006794:	4288      	cmp	r0, r1
 8006796:	d305      	bcc.n	80067a4 <__copybits+0x40>
 8006798:	bd70      	pop	{r4, r5, r6, pc}
 800679a:	f853 6b04 	ldr.w	r6, [r3], #4
 800679e:	f845 6f04 	str.w	r6, [r5, #4]!
 80067a2:	e7eb      	b.n	800677c <__copybits+0x18>
 80067a4:	f840 3b04 	str.w	r3, [r0], #4
 80067a8:	e7f4      	b.n	8006794 <__copybits+0x30>

080067aa <__any_on>:
 80067aa:	f100 0214 	add.w	r2, r0, #20
 80067ae:	6900      	ldr	r0, [r0, #16]
 80067b0:	114b      	asrs	r3, r1, #5
 80067b2:	4298      	cmp	r0, r3
 80067b4:	b510      	push	{r4, lr}
 80067b6:	db11      	blt.n	80067dc <__any_on+0x32>
 80067b8:	dd0a      	ble.n	80067d0 <__any_on+0x26>
 80067ba:	f011 011f 	ands.w	r1, r1, #31
 80067be:	d007      	beq.n	80067d0 <__any_on+0x26>
 80067c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80067c4:	fa24 f001 	lsr.w	r0, r4, r1
 80067c8:	fa00 f101 	lsl.w	r1, r0, r1
 80067cc:	428c      	cmp	r4, r1
 80067ce:	d10b      	bne.n	80067e8 <__any_on+0x3e>
 80067d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d803      	bhi.n	80067e0 <__any_on+0x36>
 80067d8:	2000      	movs	r0, #0
 80067da:	bd10      	pop	{r4, pc}
 80067dc:	4603      	mov	r3, r0
 80067de:	e7f7      	b.n	80067d0 <__any_on+0x26>
 80067e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067e4:	2900      	cmp	r1, #0
 80067e6:	d0f5      	beq.n	80067d4 <__any_on+0x2a>
 80067e8:	2001      	movs	r0, #1
 80067ea:	e7f6      	b.n	80067da <__any_on+0x30>

080067ec <_calloc_r>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	fba1 5402 	umull	r5, r4, r1, r2
 80067f2:	b934      	cbnz	r4, 8006802 <_calloc_r+0x16>
 80067f4:	4629      	mov	r1, r5
 80067f6:	f000 f875 	bl	80068e4 <_malloc_r>
 80067fa:	4606      	mov	r6, r0
 80067fc:	b928      	cbnz	r0, 800680a <_calloc_r+0x1e>
 80067fe:	4630      	mov	r0, r6
 8006800:	bd70      	pop	{r4, r5, r6, pc}
 8006802:	220c      	movs	r2, #12
 8006804:	2600      	movs	r6, #0
 8006806:	6002      	str	r2, [r0, #0]
 8006808:	e7f9      	b.n	80067fe <_calloc_r+0x12>
 800680a:	462a      	mov	r2, r5
 800680c:	4621      	mov	r1, r4
 800680e:	f7fc fbf1 	bl	8002ff4 <memset>
 8006812:	e7f4      	b.n	80067fe <_calloc_r+0x12>

08006814 <_free_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4605      	mov	r5, r0
 8006818:	2900      	cmp	r1, #0
 800681a:	d040      	beq.n	800689e <_free_r+0x8a>
 800681c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006820:	1f0c      	subs	r4, r1, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	bfb8      	it	lt
 8006826:	18e4      	addlt	r4, r4, r3
 8006828:	f000 faae 	bl	8006d88 <__malloc_lock>
 800682c:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <_free_r+0x8c>)
 800682e:	6813      	ldr	r3, [r2, #0]
 8006830:	b933      	cbnz	r3, 8006840 <_free_r+0x2c>
 8006832:	6063      	str	r3, [r4, #4]
 8006834:	6014      	str	r4, [r2, #0]
 8006836:	4628      	mov	r0, r5
 8006838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800683c:	f000 baaa 	b.w	8006d94 <__malloc_unlock>
 8006840:	42a3      	cmp	r3, r4
 8006842:	d908      	bls.n	8006856 <_free_r+0x42>
 8006844:	6820      	ldr	r0, [r4, #0]
 8006846:	1821      	adds	r1, r4, r0
 8006848:	428b      	cmp	r3, r1
 800684a:	bf01      	itttt	eq
 800684c:	6819      	ldreq	r1, [r3, #0]
 800684e:	685b      	ldreq	r3, [r3, #4]
 8006850:	1809      	addeq	r1, r1, r0
 8006852:	6021      	streq	r1, [r4, #0]
 8006854:	e7ed      	b.n	8006832 <_free_r+0x1e>
 8006856:	461a      	mov	r2, r3
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	b10b      	cbz	r3, 8006860 <_free_r+0x4c>
 800685c:	42a3      	cmp	r3, r4
 800685e:	d9fa      	bls.n	8006856 <_free_r+0x42>
 8006860:	6811      	ldr	r1, [r2, #0]
 8006862:	1850      	adds	r0, r2, r1
 8006864:	42a0      	cmp	r0, r4
 8006866:	d10b      	bne.n	8006880 <_free_r+0x6c>
 8006868:	6820      	ldr	r0, [r4, #0]
 800686a:	4401      	add	r1, r0
 800686c:	1850      	adds	r0, r2, r1
 800686e:	4283      	cmp	r3, r0
 8006870:	6011      	str	r1, [r2, #0]
 8006872:	d1e0      	bne.n	8006836 <_free_r+0x22>
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4401      	add	r1, r0
 800687a:	6011      	str	r1, [r2, #0]
 800687c:	6053      	str	r3, [r2, #4]
 800687e:	e7da      	b.n	8006836 <_free_r+0x22>
 8006880:	d902      	bls.n	8006888 <_free_r+0x74>
 8006882:	230c      	movs	r3, #12
 8006884:	602b      	str	r3, [r5, #0]
 8006886:	e7d6      	b.n	8006836 <_free_r+0x22>
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	1821      	adds	r1, r4, r0
 800688c:	428b      	cmp	r3, r1
 800688e:	bf01      	itttt	eq
 8006890:	6819      	ldreq	r1, [r3, #0]
 8006892:	685b      	ldreq	r3, [r3, #4]
 8006894:	1809      	addeq	r1, r1, r0
 8006896:	6021      	streq	r1, [r4, #0]
 8006898:	6063      	str	r3, [r4, #4]
 800689a:	6054      	str	r4, [r2, #4]
 800689c:	e7cb      	b.n	8006836 <_free_r+0x22>
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	200002e4 	.word	0x200002e4

080068a4 <sbrk_aligned>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4e0e      	ldr	r6, [pc, #56]	; (80068e0 <sbrk_aligned+0x3c>)
 80068a8:	460c      	mov	r4, r1
 80068aa:	6831      	ldr	r1, [r6, #0]
 80068ac:	4605      	mov	r5, r0
 80068ae:	b911      	cbnz	r1, 80068b6 <sbrk_aligned+0x12>
 80068b0:	f000 f9ee 	bl	8006c90 <_sbrk_r>
 80068b4:	6030      	str	r0, [r6, #0]
 80068b6:	4621      	mov	r1, r4
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 f9e9 	bl	8006c90 <_sbrk_r>
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d00a      	beq.n	80068d8 <sbrk_aligned+0x34>
 80068c2:	1cc4      	adds	r4, r0, #3
 80068c4:	f024 0403 	bic.w	r4, r4, #3
 80068c8:	42a0      	cmp	r0, r4
 80068ca:	d007      	beq.n	80068dc <sbrk_aligned+0x38>
 80068cc:	1a21      	subs	r1, r4, r0
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 f9de 	bl	8006c90 <_sbrk_r>
 80068d4:	3001      	adds	r0, #1
 80068d6:	d101      	bne.n	80068dc <sbrk_aligned+0x38>
 80068d8:	f04f 34ff 	mov.w	r4, #4294967295
 80068dc:	4620      	mov	r0, r4
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	200002e8 	.word	0x200002e8

080068e4 <_malloc_r>:
 80068e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e8:	1ccd      	adds	r5, r1, #3
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	4607      	mov	r7, r0
 80068fa:	db01      	blt.n	8006900 <_malloc_r+0x1c>
 80068fc:	42a9      	cmp	r1, r5
 80068fe:	d905      	bls.n	800690c <_malloc_r+0x28>
 8006900:	230c      	movs	r3, #12
 8006902:	2600      	movs	r6, #0
 8006904:	603b      	str	r3, [r7, #0]
 8006906:	4630      	mov	r0, r6
 8006908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800690c:	4e2e      	ldr	r6, [pc, #184]	; (80069c8 <_malloc_r+0xe4>)
 800690e:	f000 fa3b 	bl	8006d88 <__malloc_lock>
 8006912:	6833      	ldr	r3, [r6, #0]
 8006914:	461c      	mov	r4, r3
 8006916:	bb34      	cbnz	r4, 8006966 <_malloc_r+0x82>
 8006918:	4629      	mov	r1, r5
 800691a:	4638      	mov	r0, r7
 800691c:	f7ff ffc2 	bl	80068a4 <sbrk_aligned>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	4604      	mov	r4, r0
 8006924:	d14d      	bne.n	80069c2 <_malloc_r+0xde>
 8006926:	6834      	ldr	r4, [r6, #0]
 8006928:	4626      	mov	r6, r4
 800692a:	2e00      	cmp	r6, #0
 800692c:	d140      	bne.n	80069b0 <_malloc_r+0xcc>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	4631      	mov	r1, r6
 8006932:	4638      	mov	r0, r7
 8006934:	eb04 0803 	add.w	r8, r4, r3
 8006938:	f000 f9aa 	bl	8006c90 <_sbrk_r>
 800693c:	4580      	cmp	r8, r0
 800693e:	d13a      	bne.n	80069b6 <_malloc_r+0xd2>
 8006940:	6821      	ldr	r1, [r4, #0]
 8006942:	3503      	adds	r5, #3
 8006944:	1a6d      	subs	r5, r5, r1
 8006946:	f025 0503 	bic.w	r5, r5, #3
 800694a:	3508      	adds	r5, #8
 800694c:	2d0c      	cmp	r5, #12
 800694e:	bf38      	it	cc
 8006950:	250c      	movcc	r5, #12
 8006952:	4638      	mov	r0, r7
 8006954:	4629      	mov	r1, r5
 8006956:	f7ff ffa5 	bl	80068a4 <sbrk_aligned>
 800695a:	3001      	adds	r0, #1
 800695c:	d02b      	beq.n	80069b6 <_malloc_r+0xd2>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	442b      	add	r3, r5
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	e00e      	b.n	8006984 <_malloc_r+0xa0>
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	1b52      	subs	r2, r2, r5
 800696a:	d41e      	bmi.n	80069aa <_malloc_r+0xc6>
 800696c:	2a0b      	cmp	r2, #11
 800696e:	d916      	bls.n	800699e <_malloc_r+0xba>
 8006970:	1961      	adds	r1, r4, r5
 8006972:	42a3      	cmp	r3, r4
 8006974:	6025      	str	r5, [r4, #0]
 8006976:	bf18      	it	ne
 8006978:	6059      	strne	r1, [r3, #4]
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	bf08      	it	eq
 800697e:	6031      	streq	r1, [r6, #0]
 8006980:	5162      	str	r2, [r4, r5]
 8006982:	604b      	str	r3, [r1, #4]
 8006984:	4638      	mov	r0, r7
 8006986:	f104 060b 	add.w	r6, r4, #11
 800698a:	f000 fa03 	bl	8006d94 <__malloc_unlock>
 800698e:	f026 0607 	bic.w	r6, r6, #7
 8006992:	1d23      	adds	r3, r4, #4
 8006994:	1af2      	subs	r2, r6, r3
 8006996:	d0b6      	beq.n	8006906 <_malloc_r+0x22>
 8006998:	1b9b      	subs	r3, r3, r6
 800699a:	50a3      	str	r3, [r4, r2]
 800699c:	e7b3      	b.n	8006906 <_malloc_r+0x22>
 800699e:	6862      	ldr	r2, [r4, #4]
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	bf0c      	ite	eq
 80069a4:	6032      	streq	r2, [r6, #0]
 80069a6:	605a      	strne	r2, [r3, #4]
 80069a8:	e7ec      	b.n	8006984 <_malloc_r+0xa0>
 80069aa:	4623      	mov	r3, r4
 80069ac:	6864      	ldr	r4, [r4, #4]
 80069ae:	e7b2      	b.n	8006916 <_malloc_r+0x32>
 80069b0:	4634      	mov	r4, r6
 80069b2:	6876      	ldr	r6, [r6, #4]
 80069b4:	e7b9      	b.n	800692a <_malloc_r+0x46>
 80069b6:	230c      	movs	r3, #12
 80069b8:	4638      	mov	r0, r7
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	f000 f9ea 	bl	8006d94 <__malloc_unlock>
 80069c0:	e7a1      	b.n	8006906 <_malloc_r+0x22>
 80069c2:	6025      	str	r5, [r4, #0]
 80069c4:	e7de      	b.n	8006984 <_malloc_r+0xa0>
 80069c6:	bf00      	nop
 80069c8:	200002e4 	.word	0x200002e4

080069cc <__ssputs_r>:
 80069cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d0:	688e      	ldr	r6, [r1, #8]
 80069d2:	4682      	mov	sl, r0
 80069d4:	429e      	cmp	r6, r3
 80069d6:	460c      	mov	r4, r1
 80069d8:	4690      	mov	r8, r2
 80069da:	461f      	mov	r7, r3
 80069dc:	d838      	bhi.n	8006a50 <__ssputs_r+0x84>
 80069de:	898a      	ldrh	r2, [r1, #12]
 80069e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069e4:	d032      	beq.n	8006a4c <__ssputs_r+0x80>
 80069e6:	6825      	ldr	r5, [r4, #0]
 80069e8:	6909      	ldr	r1, [r1, #16]
 80069ea:	3301      	adds	r3, #1
 80069ec:	eba5 0901 	sub.w	r9, r5, r1
 80069f0:	6965      	ldr	r5, [r4, #20]
 80069f2:	444b      	add	r3, r9
 80069f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069fc:	106d      	asrs	r5, r5, #1
 80069fe:	429d      	cmp	r5, r3
 8006a00:	bf38      	it	cc
 8006a02:	461d      	movcc	r5, r3
 8006a04:	0553      	lsls	r3, r2, #21
 8006a06:	d531      	bpl.n	8006a6c <__ssputs_r+0xa0>
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7ff ff6b 	bl	80068e4 <_malloc_r>
 8006a0e:	4606      	mov	r6, r0
 8006a10:	b950      	cbnz	r0, 8006a28 <__ssputs_r+0x5c>
 8006a12:	230c      	movs	r3, #12
 8006a14:	f04f 30ff 	mov.w	r0, #4294967295
 8006a18:	f8ca 3000 	str.w	r3, [sl]
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a22:	81a3      	strh	r3, [r4, #12]
 8006a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a28:	464a      	mov	r2, r9
 8006a2a:	6921      	ldr	r1, [r4, #16]
 8006a2c:	f7ff fa18 	bl	8005e60 <memcpy>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3a:	81a3      	strh	r3, [r4, #12]
 8006a3c:	6126      	str	r6, [r4, #16]
 8006a3e:	444e      	add	r6, r9
 8006a40:	6026      	str	r6, [r4, #0]
 8006a42:	463e      	mov	r6, r7
 8006a44:	6165      	str	r5, [r4, #20]
 8006a46:	eba5 0509 	sub.w	r5, r5, r9
 8006a4a:	60a5      	str	r5, [r4, #8]
 8006a4c:	42be      	cmp	r6, r7
 8006a4e:	d900      	bls.n	8006a52 <__ssputs_r+0x86>
 8006a50:	463e      	mov	r6, r7
 8006a52:	4632      	mov	r2, r6
 8006a54:	4641      	mov	r1, r8
 8006a56:	6820      	ldr	r0, [r4, #0]
 8006a58:	f000 f97c 	bl	8006d54 <memmove>
 8006a5c:	68a3      	ldr	r3, [r4, #8]
 8006a5e:	2000      	movs	r0, #0
 8006a60:	1b9b      	subs	r3, r3, r6
 8006a62:	60a3      	str	r3, [r4, #8]
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	4433      	add	r3, r6
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	e7db      	b.n	8006a24 <__ssputs_r+0x58>
 8006a6c:	462a      	mov	r2, r5
 8006a6e:	f000 f997 	bl	8006da0 <_realloc_r>
 8006a72:	4606      	mov	r6, r0
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d1e1      	bne.n	8006a3c <__ssputs_r+0x70>
 8006a78:	4650      	mov	r0, sl
 8006a7a:	6921      	ldr	r1, [r4, #16]
 8006a7c:	f7ff feca 	bl	8006814 <_free_r>
 8006a80:	e7c7      	b.n	8006a12 <__ssputs_r+0x46>
	...

08006a84 <_svfiprintf_r>:
 8006a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	4698      	mov	r8, r3
 8006a8a:	898b      	ldrh	r3, [r1, #12]
 8006a8c:	4607      	mov	r7, r0
 8006a8e:	061b      	lsls	r3, r3, #24
 8006a90:	460d      	mov	r5, r1
 8006a92:	4614      	mov	r4, r2
 8006a94:	b09d      	sub	sp, #116	; 0x74
 8006a96:	d50e      	bpl.n	8006ab6 <_svfiprintf_r+0x32>
 8006a98:	690b      	ldr	r3, [r1, #16]
 8006a9a:	b963      	cbnz	r3, 8006ab6 <_svfiprintf_r+0x32>
 8006a9c:	2140      	movs	r1, #64	; 0x40
 8006a9e:	f7ff ff21 	bl	80068e4 <_malloc_r>
 8006aa2:	6028      	str	r0, [r5, #0]
 8006aa4:	6128      	str	r0, [r5, #16]
 8006aa6:	b920      	cbnz	r0, 8006ab2 <_svfiprintf_r+0x2e>
 8006aa8:	230c      	movs	r3, #12
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	e0d1      	b.n	8006c56 <_svfiprintf_r+0x1d2>
 8006ab2:	2340      	movs	r3, #64	; 0x40
 8006ab4:	616b      	str	r3, [r5, #20]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aba:	2320      	movs	r3, #32
 8006abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ac0:	2330      	movs	r3, #48	; 0x30
 8006ac2:	f04f 0901 	mov.w	r9, #1
 8006ac6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c70 <_svfiprintf_r+0x1ec>
 8006ace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ad2:	4623      	mov	r3, r4
 8006ad4:	469a      	mov	sl, r3
 8006ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ada:	b10a      	cbz	r2, 8006ae0 <_svfiprintf_r+0x5c>
 8006adc:	2a25      	cmp	r2, #37	; 0x25
 8006ade:	d1f9      	bne.n	8006ad4 <_svfiprintf_r+0x50>
 8006ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ae4:	d00b      	beq.n	8006afe <_svfiprintf_r+0x7a>
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	4622      	mov	r2, r4
 8006aea:	4629      	mov	r1, r5
 8006aec:	4638      	mov	r0, r7
 8006aee:	f7ff ff6d 	bl	80069cc <__ssputs_r>
 8006af2:	3001      	adds	r0, #1
 8006af4:	f000 80aa 	beq.w	8006c4c <_svfiprintf_r+0x1c8>
 8006af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006afa:	445a      	add	r2, fp
 8006afc:	9209      	str	r2, [sp, #36]	; 0x24
 8006afe:	f89a 3000 	ldrb.w	r3, [sl]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80a2 	beq.w	8006c4c <_svfiprintf_r+0x1c8>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b12:	f10a 0a01 	add.w	sl, sl, #1
 8006b16:	9304      	str	r3, [sp, #16]
 8006b18:	9307      	str	r3, [sp, #28]
 8006b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b20:	4654      	mov	r4, sl
 8006b22:	2205      	movs	r2, #5
 8006b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b28:	4851      	ldr	r0, [pc, #324]	; (8006c70 <_svfiprintf_r+0x1ec>)
 8006b2a:	f7ff f98b 	bl	8005e44 <memchr>
 8006b2e:	9a04      	ldr	r2, [sp, #16]
 8006b30:	b9d8      	cbnz	r0, 8006b6a <_svfiprintf_r+0xe6>
 8006b32:	06d0      	lsls	r0, r2, #27
 8006b34:	bf44      	itt	mi
 8006b36:	2320      	movmi	r3, #32
 8006b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b3c:	0711      	lsls	r1, r2, #28
 8006b3e:	bf44      	itt	mi
 8006b40:	232b      	movmi	r3, #43	; 0x2b
 8006b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b46:	f89a 3000 	ldrb.w	r3, [sl]
 8006b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b4c:	d015      	beq.n	8006b7a <_svfiprintf_r+0xf6>
 8006b4e:	4654      	mov	r4, sl
 8006b50:	2000      	movs	r0, #0
 8006b52:	f04f 0c0a 	mov.w	ip, #10
 8006b56:	9a07      	ldr	r2, [sp, #28]
 8006b58:	4621      	mov	r1, r4
 8006b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b5e:	3b30      	subs	r3, #48	; 0x30
 8006b60:	2b09      	cmp	r3, #9
 8006b62:	d94e      	bls.n	8006c02 <_svfiprintf_r+0x17e>
 8006b64:	b1b0      	cbz	r0, 8006b94 <_svfiprintf_r+0x110>
 8006b66:	9207      	str	r2, [sp, #28]
 8006b68:	e014      	b.n	8006b94 <_svfiprintf_r+0x110>
 8006b6a:	eba0 0308 	sub.w	r3, r0, r8
 8006b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b72:	4313      	orrs	r3, r2
 8006b74:	46a2      	mov	sl, r4
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	e7d2      	b.n	8006b20 <_svfiprintf_r+0x9c>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	1d19      	adds	r1, r3, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	9103      	str	r1, [sp, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bfbb      	ittet	lt
 8006b86:	425b      	neglt	r3, r3
 8006b88:	f042 0202 	orrlt.w	r2, r2, #2
 8006b8c:	9307      	strge	r3, [sp, #28]
 8006b8e:	9307      	strlt	r3, [sp, #28]
 8006b90:	bfb8      	it	lt
 8006b92:	9204      	strlt	r2, [sp, #16]
 8006b94:	7823      	ldrb	r3, [r4, #0]
 8006b96:	2b2e      	cmp	r3, #46	; 0x2e
 8006b98:	d10c      	bne.n	8006bb4 <_svfiprintf_r+0x130>
 8006b9a:	7863      	ldrb	r3, [r4, #1]
 8006b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b9e:	d135      	bne.n	8006c0c <_svfiprintf_r+0x188>
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	3402      	adds	r4, #2
 8006ba4:	1d1a      	adds	r2, r3, #4
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	9203      	str	r2, [sp, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfb8      	it	lt
 8006bae:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bb2:	9305      	str	r3, [sp, #20]
 8006bb4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006c74 <_svfiprintf_r+0x1f0>
 8006bb8:	2203      	movs	r2, #3
 8006bba:	4650      	mov	r0, sl
 8006bbc:	7821      	ldrb	r1, [r4, #0]
 8006bbe:	f7ff f941 	bl	8005e44 <memchr>
 8006bc2:	b140      	cbz	r0, 8006bd6 <_svfiprintf_r+0x152>
 8006bc4:	2340      	movs	r3, #64	; 0x40
 8006bc6:	eba0 000a 	sub.w	r0, r0, sl
 8006bca:	fa03 f000 	lsl.w	r0, r3, r0
 8006bce:	9b04      	ldr	r3, [sp, #16]
 8006bd0:	3401      	adds	r4, #1
 8006bd2:	4303      	orrs	r3, r0
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bda:	2206      	movs	r2, #6
 8006bdc:	4826      	ldr	r0, [pc, #152]	; (8006c78 <_svfiprintf_r+0x1f4>)
 8006bde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006be2:	f7ff f92f 	bl	8005e44 <memchr>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d038      	beq.n	8006c5c <_svfiprintf_r+0x1d8>
 8006bea:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <_svfiprintf_r+0x1f8>)
 8006bec:	bb1b      	cbnz	r3, 8006c36 <_svfiprintf_r+0x1b2>
 8006bee:	9b03      	ldr	r3, [sp, #12]
 8006bf0:	3307      	adds	r3, #7
 8006bf2:	f023 0307 	bic.w	r3, r3, #7
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	9303      	str	r3, [sp, #12]
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	4433      	add	r3, r6
 8006bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006c00:	e767      	b.n	8006ad2 <_svfiprintf_r+0x4e>
 8006c02:	460c      	mov	r4, r1
 8006c04:	2001      	movs	r0, #1
 8006c06:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c0a:	e7a5      	b.n	8006b58 <_svfiprintf_r+0xd4>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f04f 0c0a 	mov.w	ip, #10
 8006c12:	4619      	mov	r1, r3
 8006c14:	3401      	adds	r4, #1
 8006c16:	9305      	str	r3, [sp, #20]
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c1e:	3a30      	subs	r2, #48	; 0x30
 8006c20:	2a09      	cmp	r2, #9
 8006c22:	d903      	bls.n	8006c2c <_svfiprintf_r+0x1a8>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0c5      	beq.n	8006bb4 <_svfiprintf_r+0x130>
 8006c28:	9105      	str	r1, [sp, #20]
 8006c2a:	e7c3      	b.n	8006bb4 <_svfiprintf_r+0x130>
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	2301      	movs	r3, #1
 8006c30:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c34:	e7f0      	b.n	8006c18 <_svfiprintf_r+0x194>
 8006c36:	ab03      	add	r3, sp, #12
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	462a      	mov	r2, r5
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <_svfiprintf_r+0x1fc>)
 8006c40:	a904      	add	r1, sp, #16
 8006c42:	f7fc fa7d 	bl	8003140 <_printf_float>
 8006c46:	1c42      	adds	r2, r0, #1
 8006c48:	4606      	mov	r6, r0
 8006c4a:	d1d6      	bne.n	8006bfa <_svfiprintf_r+0x176>
 8006c4c:	89ab      	ldrh	r3, [r5, #12]
 8006c4e:	065b      	lsls	r3, r3, #25
 8006c50:	f53f af2c 	bmi.w	8006aac <_svfiprintf_r+0x28>
 8006c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c56:	b01d      	add	sp, #116	; 0x74
 8006c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5c:	ab03      	add	r3, sp, #12
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	462a      	mov	r2, r5
 8006c62:	4638      	mov	r0, r7
 8006c64:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <_svfiprintf_r+0x1fc>)
 8006c66:	a904      	add	r1, sp, #16
 8006c68:	f7fc fd06 	bl	8003678 <_printf_i>
 8006c6c:	e7eb      	b.n	8006c46 <_svfiprintf_r+0x1c2>
 8006c6e:	bf00      	nop
 8006c70:	08007ccc 	.word	0x08007ccc
 8006c74:	08007cd2 	.word	0x08007cd2
 8006c78:	08007cd6 	.word	0x08007cd6
 8006c7c:	08003141 	.word	0x08003141
 8006c80:	080069cd 	.word	0x080069cd

08006c84 <nan>:
 8006c84:	2000      	movs	r0, #0
 8006c86:	4901      	ldr	r1, [pc, #4]	; (8006c8c <nan+0x8>)
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	7ff80000 	.word	0x7ff80000

08006c90 <_sbrk_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	2300      	movs	r3, #0
 8006c94:	4d05      	ldr	r5, [pc, #20]	; (8006cac <_sbrk_r+0x1c>)
 8006c96:	4604      	mov	r4, r0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	602b      	str	r3, [r5, #0]
 8006c9c:	f7fa fd60 	bl	8001760 <_sbrk>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_sbrk_r+0x1a>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_sbrk_r+0x1a>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	200002ec 	.word	0x200002ec

08006cb0 <strncmp>:
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	b172      	cbz	r2, 8006cd4 <strncmp+0x24>
 8006cb6:	3901      	subs	r1, #1
 8006cb8:	1884      	adds	r4, r0, r2
 8006cba:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006cbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006cc2:	4290      	cmp	r0, r2
 8006cc4:	d101      	bne.n	8006cca <strncmp+0x1a>
 8006cc6:	42a3      	cmp	r3, r4
 8006cc8:	d101      	bne.n	8006cce <strncmp+0x1e>
 8006cca:	1a80      	subs	r0, r0, r2
 8006ccc:	bd10      	pop	{r4, pc}
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d1f3      	bne.n	8006cba <strncmp+0xa>
 8006cd2:	e7fa      	b.n	8006cca <strncmp+0x1a>
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	e7f9      	b.n	8006ccc <strncmp+0x1c>

08006cd8 <__ascii_wctomb>:
 8006cd8:	4603      	mov	r3, r0
 8006cda:	4608      	mov	r0, r1
 8006cdc:	b141      	cbz	r1, 8006cf0 <__ascii_wctomb+0x18>
 8006cde:	2aff      	cmp	r2, #255	; 0xff
 8006ce0:	d904      	bls.n	8006cec <__ascii_wctomb+0x14>
 8006ce2:	228a      	movs	r2, #138	; 0x8a
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	4770      	bx	lr
 8006cec:	2001      	movs	r0, #1
 8006cee:	700a      	strb	r2, [r1, #0]
 8006cf0:	4770      	bx	lr
	...

08006cf4 <__assert_func>:
 8006cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cf6:	4614      	mov	r4, r2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <__assert_func+0x2c>)
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68d8      	ldr	r0, [r3, #12]
 8006d02:	b14c      	cbz	r4, 8006d18 <__assert_func+0x24>
 8006d04:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <__assert_func+0x30>)
 8006d06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d0a:	9100      	str	r1, [sp, #0]
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	4906      	ldr	r1, [pc, #24]	; (8006d28 <__assert_func+0x34>)
 8006d10:	f000 f80e 	bl	8006d30 <fiprintf>
 8006d14:	f000 fa8a 	bl	800722c <abort>
 8006d18:	4b04      	ldr	r3, [pc, #16]	; (8006d2c <__assert_func+0x38>)
 8006d1a:	461c      	mov	r4, r3
 8006d1c:	e7f3      	b.n	8006d06 <__assert_func+0x12>
 8006d1e:	bf00      	nop
 8006d20:	20000014 	.word	0x20000014
 8006d24:	08007cdd 	.word	0x08007cdd
 8006d28:	08007cea 	.word	0x08007cea
 8006d2c:	08007d18 	.word	0x08007d18

08006d30 <fiprintf>:
 8006d30:	b40e      	push	{r1, r2, r3}
 8006d32:	b503      	push	{r0, r1, lr}
 8006d34:	4601      	mov	r1, r0
 8006d36:	ab03      	add	r3, sp, #12
 8006d38:	4805      	ldr	r0, [pc, #20]	; (8006d50 <fiprintf+0x20>)
 8006d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3e:	6800      	ldr	r0, [r0, #0]
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	f000 f883 	bl	8006e4c <_vfiprintf_r>
 8006d46:	b002      	add	sp, #8
 8006d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d4c:	b003      	add	sp, #12
 8006d4e:	4770      	bx	lr
 8006d50:	20000014 	.word	0x20000014

08006d54 <memmove>:
 8006d54:	4288      	cmp	r0, r1
 8006d56:	b510      	push	{r4, lr}
 8006d58:	eb01 0402 	add.w	r4, r1, r2
 8006d5c:	d902      	bls.n	8006d64 <memmove+0x10>
 8006d5e:	4284      	cmp	r4, r0
 8006d60:	4623      	mov	r3, r4
 8006d62:	d807      	bhi.n	8006d74 <memmove+0x20>
 8006d64:	1e43      	subs	r3, r0, #1
 8006d66:	42a1      	cmp	r1, r4
 8006d68:	d008      	beq.n	8006d7c <memmove+0x28>
 8006d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d72:	e7f8      	b.n	8006d66 <memmove+0x12>
 8006d74:	4601      	mov	r1, r0
 8006d76:	4402      	add	r2, r0
 8006d78:	428a      	cmp	r2, r1
 8006d7a:	d100      	bne.n	8006d7e <memmove+0x2a>
 8006d7c:	bd10      	pop	{r4, pc}
 8006d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d86:	e7f7      	b.n	8006d78 <memmove+0x24>

08006d88 <__malloc_lock>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__malloc_lock+0x8>)
 8006d8a:	f000 bc0b 	b.w	80075a4 <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	200002f0 	.word	0x200002f0

08006d94 <__malloc_unlock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__malloc_unlock+0x8>)
 8006d96:	f000 bc06 	b.w	80075a6 <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	200002f0 	.word	0x200002f0

08006da0 <_realloc_r>:
 8006da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da4:	4680      	mov	r8, r0
 8006da6:	4614      	mov	r4, r2
 8006da8:	460e      	mov	r6, r1
 8006daa:	b921      	cbnz	r1, 8006db6 <_realloc_r+0x16>
 8006dac:	4611      	mov	r1, r2
 8006dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006db2:	f7ff bd97 	b.w	80068e4 <_malloc_r>
 8006db6:	b92a      	cbnz	r2, 8006dc4 <_realloc_r+0x24>
 8006db8:	f7ff fd2c 	bl	8006814 <_free_r>
 8006dbc:	4625      	mov	r5, r4
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc4:	f000 fc56 	bl	8007674 <_malloc_usable_size_r>
 8006dc8:	4284      	cmp	r4, r0
 8006dca:	4607      	mov	r7, r0
 8006dcc:	d802      	bhi.n	8006dd4 <_realloc_r+0x34>
 8006dce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dd2:	d812      	bhi.n	8006dfa <_realloc_r+0x5a>
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	f7ff fd84 	bl	80068e4 <_malloc_r>
 8006ddc:	4605      	mov	r5, r0
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d0ed      	beq.n	8006dbe <_realloc_r+0x1e>
 8006de2:	42bc      	cmp	r4, r7
 8006de4:	4622      	mov	r2, r4
 8006de6:	4631      	mov	r1, r6
 8006de8:	bf28      	it	cs
 8006dea:	463a      	movcs	r2, r7
 8006dec:	f7ff f838 	bl	8005e60 <memcpy>
 8006df0:	4631      	mov	r1, r6
 8006df2:	4640      	mov	r0, r8
 8006df4:	f7ff fd0e 	bl	8006814 <_free_r>
 8006df8:	e7e1      	b.n	8006dbe <_realloc_r+0x1e>
 8006dfa:	4635      	mov	r5, r6
 8006dfc:	e7df      	b.n	8006dbe <_realloc_r+0x1e>

08006dfe <__sfputc_r>:
 8006dfe:	6893      	ldr	r3, [r2, #8]
 8006e00:	b410      	push	{r4}
 8006e02:	3b01      	subs	r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	6093      	str	r3, [r2, #8]
 8006e08:	da07      	bge.n	8006e1a <__sfputc_r+0x1c>
 8006e0a:	6994      	ldr	r4, [r2, #24]
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	db01      	blt.n	8006e14 <__sfputc_r+0x16>
 8006e10:	290a      	cmp	r1, #10
 8006e12:	d102      	bne.n	8006e1a <__sfputc_r+0x1c>
 8006e14:	bc10      	pop	{r4}
 8006e16:	f000 b949 	b.w	80070ac <__swbuf_r>
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	1c58      	adds	r0, r3, #1
 8006e1e:	6010      	str	r0, [r2, #0]
 8006e20:	7019      	strb	r1, [r3, #0]
 8006e22:	4608      	mov	r0, r1
 8006e24:	bc10      	pop	{r4}
 8006e26:	4770      	bx	lr

08006e28 <__sfputs_r>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	4614      	mov	r4, r2
 8006e30:	18d5      	adds	r5, r2, r3
 8006e32:	42ac      	cmp	r4, r5
 8006e34:	d101      	bne.n	8006e3a <__sfputs_r+0x12>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e007      	b.n	8006e4a <__sfputs_r+0x22>
 8006e3a:	463a      	mov	r2, r7
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e42:	f7ff ffdc 	bl	8006dfe <__sfputc_r>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d1f3      	bne.n	8006e32 <__sfputs_r+0xa>
 8006e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e4c <_vfiprintf_r>:
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	460d      	mov	r5, r1
 8006e52:	4614      	mov	r4, r2
 8006e54:	4698      	mov	r8, r3
 8006e56:	4606      	mov	r6, r0
 8006e58:	b09d      	sub	sp, #116	; 0x74
 8006e5a:	b118      	cbz	r0, 8006e64 <_vfiprintf_r+0x18>
 8006e5c:	6983      	ldr	r3, [r0, #24]
 8006e5e:	b90b      	cbnz	r3, 8006e64 <_vfiprintf_r+0x18>
 8006e60:	f000 fb02 	bl	8007468 <__sinit>
 8006e64:	4b89      	ldr	r3, [pc, #548]	; (800708c <_vfiprintf_r+0x240>)
 8006e66:	429d      	cmp	r5, r3
 8006e68:	d11b      	bne.n	8006ea2 <_vfiprintf_r+0x56>
 8006e6a:	6875      	ldr	r5, [r6, #4]
 8006e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e6e:	07d9      	lsls	r1, r3, #31
 8006e70:	d405      	bmi.n	8006e7e <_vfiprintf_r+0x32>
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	059a      	lsls	r2, r3, #22
 8006e76:	d402      	bmi.n	8006e7e <_vfiprintf_r+0x32>
 8006e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e7a:	f000 fb93 	bl	80075a4 <__retarget_lock_acquire_recursive>
 8006e7e:	89ab      	ldrh	r3, [r5, #12]
 8006e80:	071b      	lsls	r3, r3, #28
 8006e82:	d501      	bpl.n	8006e88 <_vfiprintf_r+0x3c>
 8006e84:	692b      	ldr	r3, [r5, #16]
 8006e86:	b9eb      	cbnz	r3, 8006ec4 <_vfiprintf_r+0x78>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f000 f960 	bl	8007150 <__swsetup_r>
 8006e90:	b1c0      	cbz	r0, 8006ec4 <_vfiprintf_r+0x78>
 8006e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e94:	07dc      	lsls	r4, r3, #31
 8006e96:	d50e      	bpl.n	8006eb6 <_vfiprintf_r+0x6a>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	b01d      	add	sp, #116	; 0x74
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	4b7b      	ldr	r3, [pc, #492]	; (8007090 <_vfiprintf_r+0x244>)
 8006ea4:	429d      	cmp	r5, r3
 8006ea6:	d101      	bne.n	8006eac <_vfiprintf_r+0x60>
 8006ea8:	68b5      	ldr	r5, [r6, #8]
 8006eaa:	e7df      	b.n	8006e6c <_vfiprintf_r+0x20>
 8006eac:	4b79      	ldr	r3, [pc, #484]	; (8007094 <_vfiprintf_r+0x248>)
 8006eae:	429d      	cmp	r5, r3
 8006eb0:	bf08      	it	eq
 8006eb2:	68f5      	ldreq	r5, [r6, #12]
 8006eb4:	e7da      	b.n	8006e6c <_vfiprintf_r+0x20>
 8006eb6:	89ab      	ldrh	r3, [r5, #12]
 8006eb8:	0598      	lsls	r0, r3, #22
 8006eba:	d4ed      	bmi.n	8006e98 <_vfiprintf_r+0x4c>
 8006ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ebe:	f000 fb72 	bl	80075a6 <__retarget_lock_release_recursive>
 8006ec2:	e7e9      	b.n	8006e98 <_vfiprintf_r+0x4c>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec8:	2320      	movs	r3, #32
 8006eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ece:	2330      	movs	r3, #48	; 0x30
 8006ed0:	f04f 0901 	mov.w	r9, #1
 8006ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ed8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007098 <_vfiprintf_r+0x24c>
 8006edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ee0:	4623      	mov	r3, r4
 8006ee2:	469a      	mov	sl, r3
 8006ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ee8:	b10a      	cbz	r2, 8006eee <_vfiprintf_r+0xa2>
 8006eea:	2a25      	cmp	r2, #37	; 0x25
 8006eec:	d1f9      	bne.n	8006ee2 <_vfiprintf_r+0x96>
 8006eee:	ebba 0b04 	subs.w	fp, sl, r4
 8006ef2:	d00b      	beq.n	8006f0c <_vfiprintf_r+0xc0>
 8006ef4:	465b      	mov	r3, fp
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	4629      	mov	r1, r5
 8006efa:	4630      	mov	r0, r6
 8006efc:	f7ff ff94 	bl	8006e28 <__sfputs_r>
 8006f00:	3001      	adds	r0, #1
 8006f02:	f000 80aa 	beq.w	800705a <_vfiprintf_r+0x20e>
 8006f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f08:	445a      	add	r2, fp
 8006f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 80a2 	beq.w	800705a <_vfiprintf_r+0x20e>
 8006f16:	2300      	movs	r3, #0
 8006f18:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f20:	f10a 0a01 	add.w	sl, sl, #1
 8006f24:	9304      	str	r3, [sp, #16]
 8006f26:	9307      	str	r3, [sp, #28]
 8006f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f2e:	4654      	mov	r4, sl
 8006f30:	2205      	movs	r2, #5
 8006f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f36:	4858      	ldr	r0, [pc, #352]	; (8007098 <_vfiprintf_r+0x24c>)
 8006f38:	f7fe ff84 	bl	8005e44 <memchr>
 8006f3c:	9a04      	ldr	r2, [sp, #16]
 8006f3e:	b9d8      	cbnz	r0, 8006f78 <_vfiprintf_r+0x12c>
 8006f40:	06d1      	lsls	r1, r2, #27
 8006f42:	bf44      	itt	mi
 8006f44:	2320      	movmi	r3, #32
 8006f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f4a:	0713      	lsls	r3, r2, #28
 8006f4c:	bf44      	itt	mi
 8006f4e:	232b      	movmi	r3, #43	; 0x2b
 8006f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f54:	f89a 3000 	ldrb.w	r3, [sl]
 8006f58:	2b2a      	cmp	r3, #42	; 0x2a
 8006f5a:	d015      	beq.n	8006f88 <_vfiprintf_r+0x13c>
 8006f5c:	4654      	mov	r4, sl
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f04f 0c0a 	mov.w	ip, #10
 8006f64:	9a07      	ldr	r2, [sp, #28]
 8006f66:	4621      	mov	r1, r4
 8006f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f6c:	3b30      	subs	r3, #48	; 0x30
 8006f6e:	2b09      	cmp	r3, #9
 8006f70:	d94e      	bls.n	8007010 <_vfiprintf_r+0x1c4>
 8006f72:	b1b0      	cbz	r0, 8006fa2 <_vfiprintf_r+0x156>
 8006f74:	9207      	str	r2, [sp, #28]
 8006f76:	e014      	b.n	8006fa2 <_vfiprintf_r+0x156>
 8006f78:	eba0 0308 	sub.w	r3, r0, r8
 8006f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f80:	4313      	orrs	r3, r2
 8006f82:	46a2      	mov	sl, r4
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	e7d2      	b.n	8006f2e <_vfiprintf_r+0xe2>
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	1d19      	adds	r1, r3, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	9103      	str	r1, [sp, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bfbb      	ittet	lt
 8006f94:	425b      	neglt	r3, r3
 8006f96:	f042 0202 	orrlt.w	r2, r2, #2
 8006f9a:	9307      	strge	r3, [sp, #28]
 8006f9c:	9307      	strlt	r3, [sp, #28]
 8006f9e:	bfb8      	it	lt
 8006fa0:	9204      	strlt	r2, [sp, #16]
 8006fa2:	7823      	ldrb	r3, [r4, #0]
 8006fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8006fa6:	d10c      	bne.n	8006fc2 <_vfiprintf_r+0x176>
 8006fa8:	7863      	ldrb	r3, [r4, #1]
 8006faa:	2b2a      	cmp	r3, #42	; 0x2a
 8006fac:	d135      	bne.n	800701a <_vfiprintf_r+0x1ce>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	3402      	adds	r4, #2
 8006fb2:	1d1a      	adds	r2, r3, #4
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	9203      	str	r2, [sp, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bfb8      	it	lt
 8006fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fc0:	9305      	str	r3, [sp, #20]
 8006fc2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800709c <_vfiprintf_r+0x250>
 8006fc6:	2203      	movs	r2, #3
 8006fc8:	4650      	mov	r0, sl
 8006fca:	7821      	ldrb	r1, [r4, #0]
 8006fcc:	f7fe ff3a 	bl	8005e44 <memchr>
 8006fd0:	b140      	cbz	r0, 8006fe4 <_vfiprintf_r+0x198>
 8006fd2:	2340      	movs	r3, #64	; 0x40
 8006fd4:	eba0 000a 	sub.w	r0, r0, sl
 8006fd8:	fa03 f000 	lsl.w	r0, r3, r0
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	3401      	adds	r4, #1
 8006fe0:	4303      	orrs	r3, r0
 8006fe2:	9304      	str	r3, [sp, #16]
 8006fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fe8:	2206      	movs	r2, #6
 8006fea:	482d      	ldr	r0, [pc, #180]	; (80070a0 <_vfiprintf_r+0x254>)
 8006fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ff0:	f7fe ff28 	bl	8005e44 <memchr>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d03f      	beq.n	8007078 <_vfiprintf_r+0x22c>
 8006ff8:	4b2a      	ldr	r3, [pc, #168]	; (80070a4 <_vfiprintf_r+0x258>)
 8006ffa:	bb1b      	cbnz	r3, 8007044 <_vfiprintf_r+0x1f8>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	3307      	adds	r3, #7
 8007000:	f023 0307 	bic.w	r3, r3, #7
 8007004:	3308      	adds	r3, #8
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800700a:	443b      	add	r3, r7
 800700c:	9309      	str	r3, [sp, #36]	; 0x24
 800700e:	e767      	b.n	8006ee0 <_vfiprintf_r+0x94>
 8007010:	460c      	mov	r4, r1
 8007012:	2001      	movs	r0, #1
 8007014:	fb0c 3202 	mla	r2, ip, r2, r3
 8007018:	e7a5      	b.n	8006f66 <_vfiprintf_r+0x11a>
 800701a:	2300      	movs	r3, #0
 800701c:	f04f 0c0a 	mov.w	ip, #10
 8007020:	4619      	mov	r1, r3
 8007022:	3401      	adds	r4, #1
 8007024:	9305      	str	r3, [sp, #20]
 8007026:	4620      	mov	r0, r4
 8007028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800702c:	3a30      	subs	r2, #48	; 0x30
 800702e:	2a09      	cmp	r2, #9
 8007030:	d903      	bls.n	800703a <_vfiprintf_r+0x1ee>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0c5      	beq.n	8006fc2 <_vfiprintf_r+0x176>
 8007036:	9105      	str	r1, [sp, #20]
 8007038:	e7c3      	b.n	8006fc2 <_vfiprintf_r+0x176>
 800703a:	4604      	mov	r4, r0
 800703c:	2301      	movs	r3, #1
 800703e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007042:	e7f0      	b.n	8007026 <_vfiprintf_r+0x1da>
 8007044:	ab03      	add	r3, sp, #12
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	462a      	mov	r2, r5
 800704a:	4630      	mov	r0, r6
 800704c:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <_vfiprintf_r+0x25c>)
 800704e:	a904      	add	r1, sp, #16
 8007050:	f7fc f876 	bl	8003140 <_printf_float>
 8007054:	4607      	mov	r7, r0
 8007056:	1c78      	adds	r0, r7, #1
 8007058:	d1d6      	bne.n	8007008 <_vfiprintf_r+0x1bc>
 800705a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800705c:	07d9      	lsls	r1, r3, #31
 800705e:	d405      	bmi.n	800706c <_vfiprintf_r+0x220>
 8007060:	89ab      	ldrh	r3, [r5, #12]
 8007062:	059a      	lsls	r2, r3, #22
 8007064:	d402      	bmi.n	800706c <_vfiprintf_r+0x220>
 8007066:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007068:	f000 fa9d 	bl	80075a6 <__retarget_lock_release_recursive>
 800706c:	89ab      	ldrh	r3, [r5, #12]
 800706e:	065b      	lsls	r3, r3, #25
 8007070:	f53f af12 	bmi.w	8006e98 <_vfiprintf_r+0x4c>
 8007074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007076:	e711      	b.n	8006e9c <_vfiprintf_r+0x50>
 8007078:	ab03      	add	r3, sp, #12
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	462a      	mov	r2, r5
 800707e:	4630      	mov	r0, r6
 8007080:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <_vfiprintf_r+0x25c>)
 8007082:	a904      	add	r1, sp, #16
 8007084:	f7fc faf8 	bl	8003678 <_printf_i>
 8007088:	e7e4      	b.n	8007054 <_vfiprintf_r+0x208>
 800708a:	bf00      	nop
 800708c:	08007d3c 	.word	0x08007d3c
 8007090:	08007d5c 	.word	0x08007d5c
 8007094:	08007d1c 	.word	0x08007d1c
 8007098:	08007ccc 	.word	0x08007ccc
 800709c:	08007cd2 	.word	0x08007cd2
 80070a0:	08007cd6 	.word	0x08007cd6
 80070a4:	08003141 	.word	0x08003141
 80070a8:	08006e29 	.word	0x08006e29

080070ac <__swbuf_r>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	460e      	mov	r6, r1
 80070b0:	4614      	mov	r4, r2
 80070b2:	4605      	mov	r5, r0
 80070b4:	b118      	cbz	r0, 80070be <__swbuf_r+0x12>
 80070b6:	6983      	ldr	r3, [r0, #24]
 80070b8:	b90b      	cbnz	r3, 80070be <__swbuf_r+0x12>
 80070ba:	f000 f9d5 	bl	8007468 <__sinit>
 80070be:	4b21      	ldr	r3, [pc, #132]	; (8007144 <__swbuf_r+0x98>)
 80070c0:	429c      	cmp	r4, r3
 80070c2:	d12b      	bne.n	800711c <__swbuf_r+0x70>
 80070c4:	686c      	ldr	r4, [r5, #4]
 80070c6:	69a3      	ldr	r3, [r4, #24]
 80070c8:	60a3      	str	r3, [r4, #8]
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	071a      	lsls	r2, r3, #28
 80070ce:	d52f      	bpl.n	8007130 <__swbuf_r+0x84>
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	b36b      	cbz	r3, 8007130 <__swbuf_r+0x84>
 80070d4:	6923      	ldr	r3, [r4, #16]
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	b2f6      	uxtb	r6, r6
 80070da:	1ac0      	subs	r0, r0, r3
 80070dc:	6963      	ldr	r3, [r4, #20]
 80070de:	4637      	mov	r7, r6
 80070e0:	4283      	cmp	r3, r0
 80070e2:	dc04      	bgt.n	80070ee <__swbuf_r+0x42>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 f92a 	bl	8007340 <_fflush_r>
 80070ec:	bb30      	cbnz	r0, 800713c <__swbuf_r+0x90>
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	3001      	adds	r0, #1
 80070f2:	3b01      	subs	r3, #1
 80070f4:	60a3      	str	r3, [r4, #8]
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	6022      	str	r2, [r4, #0]
 80070fc:	701e      	strb	r6, [r3, #0]
 80070fe:	6963      	ldr	r3, [r4, #20]
 8007100:	4283      	cmp	r3, r0
 8007102:	d004      	beq.n	800710e <__swbuf_r+0x62>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	07db      	lsls	r3, r3, #31
 8007108:	d506      	bpl.n	8007118 <__swbuf_r+0x6c>
 800710a:	2e0a      	cmp	r6, #10
 800710c:	d104      	bne.n	8007118 <__swbuf_r+0x6c>
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f000 f915 	bl	8007340 <_fflush_r>
 8007116:	b988      	cbnz	r0, 800713c <__swbuf_r+0x90>
 8007118:	4638      	mov	r0, r7
 800711a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <__swbuf_r+0x9c>)
 800711e:	429c      	cmp	r4, r3
 8007120:	d101      	bne.n	8007126 <__swbuf_r+0x7a>
 8007122:	68ac      	ldr	r4, [r5, #8]
 8007124:	e7cf      	b.n	80070c6 <__swbuf_r+0x1a>
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <__swbuf_r+0xa0>)
 8007128:	429c      	cmp	r4, r3
 800712a:	bf08      	it	eq
 800712c:	68ec      	ldreq	r4, [r5, #12]
 800712e:	e7ca      	b.n	80070c6 <__swbuf_r+0x1a>
 8007130:	4621      	mov	r1, r4
 8007132:	4628      	mov	r0, r5
 8007134:	f000 f80c 	bl	8007150 <__swsetup_r>
 8007138:	2800      	cmp	r0, #0
 800713a:	d0cb      	beq.n	80070d4 <__swbuf_r+0x28>
 800713c:	f04f 37ff 	mov.w	r7, #4294967295
 8007140:	e7ea      	b.n	8007118 <__swbuf_r+0x6c>
 8007142:	bf00      	nop
 8007144:	08007d3c 	.word	0x08007d3c
 8007148:	08007d5c 	.word	0x08007d5c
 800714c:	08007d1c 	.word	0x08007d1c

08007150 <__swsetup_r>:
 8007150:	4b32      	ldr	r3, [pc, #200]	; (800721c <__swsetup_r+0xcc>)
 8007152:	b570      	push	{r4, r5, r6, lr}
 8007154:	681d      	ldr	r5, [r3, #0]
 8007156:	4606      	mov	r6, r0
 8007158:	460c      	mov	r4, r1
 800715a:	b125      	cbz	r5, 8007166 <__swsetup_r+0x16>
 800715c:	69ab      	ldr	r3, [r5, #24]
 800715e:	b913      	cbnz	r3, 8007166 <__swsetup_r+0x16>
 8007160:	4628      	mov	r0, r5
 8007162:	f000 f981 	bl	8007468 <__sinit>
 8007166:	4b2e      	ldr	r3, [pc, #184]	; (8007220 <__swsetup_r+0xd0>)
 8007168:	429c      	cmp	r4, r3
 800716a:	d10f      	bne.n	800718c <__swsetup_r+0x3c>
 800716c:	686c      	ldr	r4, [r5, #4]
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007174:	0719      	lsls	r1, r3, #28
 8007176:	d42c      	bmi.n	80071d2 <__swsetup_r+0x82>
 8007178:	06dd      	lsls	r5, r3, #27
 800717a:	d411      	bmi.n	80071a0 <__swsetup_r+0x50>
 800717c:	2309      	movs	r3, #9
 800717e:	6033      	str	r3, [r6, #0]
 8007180:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	e03e      	b.n	800720a <__swsetup_r+0xba>
 800718c:	4b25      	ldr	r3, [pc, #148]	; (8007224 <__swsetup_r+0xd4>)
 800718e:	429c      	cmp	r4, r3
 8007190:	d101      	bne.n	8007196 <__swsetup_r+0x46>
 8007192:	68ac      	ldr	r4, [r5, #8]
 8007194:	e7eb      	b.n	800716e <__swsetup_r+0x1e>
 8007196:	4b24      	ldr	r3, [pc, #144]	; (8007228 <__swsetup_r+0xd8>)
 8007198:	429c      	cmp	r4, r3
 800719a:	bf08      	it	eq
 800719c:	68ec      	ldreq	r4, [r5, #12]
 800719e:	e7e6      	b.n	800716e <__swsetup_r+0x1e>
 80071a0:	0758      	lsls	r0, r3, #29
 80071a2:	d512      	bpl.n	80071ca <__swsetup_r+0x7a>
 80071a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071a6:	b141      	cbz	r1, 80071ba <__swsetup_r+0x6a>
 80071a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ac:	4299      	cmp	r1, r3
 80071ae:	d002      	beq.n	80071b6 <__swsetup_r+0x66>
 80071b0:	4630      	mov	r0, r6
 80071b2:	f7ff fb2f 	bl	8006814 <_free_r>
 80071b6:	2300      	movs	r3, #0
 80071b8:	6363      	str	r3, [r4, #52]	; 0x34
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	2300      	movs	r3, #0
 80071c4:	6063      	str	r3, [r4, #4]
 80071c6:	6923      	ldr	r3, [r4, #16]
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	f043 0308 	orr.w	r3, r3, #8
 80071d0:	81a3      	strh	r3, [r4, #12]
 80071d2:	6923      	ldr	r3, [r4, #16]
 80071d4:	b94b      	cbnz	r3, 80071ea <__swsetup_r+0x9a>
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e0:	d003      	beq.n	80071ea <__swsetup_r+0x9a>
 80071e2:	4621      	mov	r1, r4
 80071e4:	4630      	mov	r0, r6
 80071e6:	f000 fa05 	bl	80075f4 <__smakebuf_r>
 80071ea:	89a0      	ldrh	r0, [r4, #12]
 80071ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071f0:	f010 0301 	ands.w	r3, r0, #1
 80071f4:	d00a      	beq.n	800720c <__swsetup_r+0xbc>
 80071f6:	2300      	movs	r3, #0
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	6963      	ldr	r3, [r4, #20]
 80071fc:	425b      	negs	r3, r3
 80071fe:	61a3      	str	r3, [r4, #24]
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	b943      	cbnz	r3, 8007216 <__swsetup_r+0xc6>
 8007204:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007208:	d1ba      	bne.n	8007180 <__swsetup_r+0x30>
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	0781      	lsls	r1, r0, #30
 800720e:	bf58      	it	pl
 8007210:	6963      	ldrpl	r3, [r4, #20]
 8007212:	60a3      	str	r3, [r4, #8]
 8007214:	e7f4      	b.n	8007200 <__swsetup_r+0xb0>
 8007216:	2000      	movs	r0, #0
 8007218:	e7f7      	b.n	800720a <__swsetup_r+0xba>
 800721a:	bf00      	nop
 800721c:	20000014 	.word	0x20000014
 8007220:	08007d3c 	.word	0x08007d3c
 8007224:	08007d5c 	.word	0x08007d5c
 8007228:	08007d1c 	.word	0x08007d1c

0800722c <abort>:
 800722c:	2006      	movs	r0, #6
 800722e:	b508      	push	{r3, lr}
 8007230:	f000 fa50 	bl	80076d4 <raise>
 8007234:	2001      	movs	r0, #1
 8007236:	f7fa fa1f 	bl	8001678 <_exit>
	...

0800723c <__sflush_r>:
 800723c:	898a      	ldrh	r2, [r1, #12]
 800723e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007240:	4605      	mov	r5, r0
 8007242:	0710      	lsls	r0, r2, #28
 8007244:	460c      	mov	r4, r1
 8007246:	d457      	bmi.n	80072f8 <__sflush_r+0xbc>
 8007248:	684b      	ldr	r3, [r1, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	dc04      	bgt.n	8007258 <__sflush_r+0x1c>
 800724e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	dc01      	bgt.n	8007258 <__sflush_r+0x1c>
 8007254:	2000      	movs	r0, #0
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800725a:	2e00      	cmp	r6, #0
 800725c:	d0fa      	beq.n	8007254 <__sflush_r+0x18>
 800725e:	2300      	movs	r3, #0
 8007260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007264:	682f      	ldr	r7, [r5, #0]
 8007266:	602b      	str	r3, [r5, #0]
 8007268:	d032      	beq.n	80072d0 <__sflush_r+0x94>
 800726a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	075a      	lsls	r2, r3, #29
 8007270:	d505      	bpl.n	800727e <__sflush_r+0x42>
 8007272:	6863      	ldr	r3, [r4, #4]
 8007274:	1ac0      	subs	r0, r0, r3
 8007276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007278:	b10b      	cbz	r3, 800727e <__sflush_r+0x42>
 800727a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800727c:	1ac0      	subs	r0, r0, r3
 800727e:	2300      	movs	r3, #0
 8007280:	4602      	mov	r2, r0
 8007282:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007284:	4628      	mov	r0, r5
 8007286:	6a21      	ldr	r1, [r4, #32]
 8007288:	47b0      	blx	r6
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	d106      	bne.n	800729e <__sflush_r+0x62>
 8007290:	6829      	ldr	r1, [r5, #0]
 8007292:	291d      	cmp	r1, #29
 8007294:	d82c      	bhi.n	80072f0 <__sflush_r+0xb4>
 8007296:	4a29      	ldr	r2, [pc, #164]	; (800733c <__sflush_r+0x100>)
 8007298:	40ca      	lsrs	r2, r1
 800729a:	07d6      	lsls	r6, r2, #31
 800729c:	d528      	bpl.n	80072f0 <__sflush_r+0xb4>
 800729e:	2200      	movs	r2, #0
 80072a0:	6062      	str	r2, [r4, #4]
 80072a2:	6922      	ldr	r2, [r4, #16]
 80072a4:	04d9      	lsls	r1, r3, #19
 80072a6:	6022      	str	r2, [r4, #0]
 80072a8:	d504      	bpl.n	80072b4 <__sflush_r+0x78>
 80072aa:	1c42      	adds	r2, r0, #1
 80072ac:	d101      	bne.n	80072b2 <__sflush_r+0x76>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b903      	cbnz	r3, 80072b4 <__sflush_r+0x78>
 80072b2:	6560      	str	r0, [r4, #84]	; 0x54
 80072b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072b6:	602f      	str	r7, [r5, #0]
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d0cb      	beq.n	8007254 <__sflush_r+0x18>
 80072bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072c0:	4299      	cmp	r1, r3
 80072c2:	d002      	beq.n	80072ca <__sflush_r+0x8e>
 80072c4:	4628      	mov	r0, r5
 80072c6:	f7ff faa5 	bl	8006814 <_free_r>
 80072ca:	2000      	movs	r0, #0
 80072cc:	6360      	str	r0, [r4, #52]	; 0x34
 80072ce:	e7c2      	b.n	8007256 <__sflush_r+0x1a>
 80072d0:	6a21      	ldr	r1, [r4, #32]
 80072d2:	2301      	movs	r3, #1
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b0      	blx	r6
 80072d8:	1c41      	adds	r1, r0, #1
 80072da:	d1c7      	bne.n	800726c <__sflush_r+0x30>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0c4      	beq.n	800726c <__sflush_r+0x30>
 80072e2:	2b1d      	cmp	r3, #29
 80072e4:	d001      	beq.n	80072ea <__sflush_r+0xae>
 80072e6:	2b16      	cmp	r3, #22
 80072e8:	d101      	bne.n	80072ee <__sflush_r+0xb2>
 80072ea:	602f      	str	r7, [r5, #0]
 80072ec:	e7b2      	b.n	8007254 <__sflush_r+0x18>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	e7ae      	b.n	8007256 <__sflush_r+0x1a>
 80072f8:	690f      	ldr	r7, [r1, #16]
 80072fa:	2f00      	cmp	r7, #0
 80072fc:	d0aa      	beq.n	8007254 <__sflush_r+0x18>
 80072fe:	0793      	lsls	r3, r2, #30
 8007300:	bf18      	it	ne
 8007302:	2300      	movne	r3, #0
 8007304:	680e      	ldr	r6, [r1, #0]
 8007306:	bf08      	it	eq
 8007308:	694b      	ldreq	r3, [r1, #20]
 800730a:	1bf6      	subs	r6, r6, r7
 800730c:	600f      	str	r7, [r1, #0]
 800730e:	608b      	str	r3, [r1, #8]
 8007310:	2e00      	cmp	r6, #0
 8007312:	dd9f      	ble.n	8007254 <__sflush_r+0x18>
 8007314:	4633      	mov	r3, r6
 8007316:	463a      	mov	r2, r7
 8007318:	4628      	mov	r0, r5
 800731a:	6a21      	ldr	r1, [r4, #32]
 800731c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007320:	47e0      	blx	ip
 8007322:	2800      	cmp	r0, #0
 8007324:	dc06      	bgt.n	8007334 <__sflush_r+0xf8>
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	e790      	b.n	8007256 <__sflush_r+0x1a>
 8007334:	4407      	add	r7, r0
 8007336:	1a36      	subs	r6, r6, r0
 8007338:	e7ea      	b.n	8007310 <__sflush_r+0xd4>
 800733a:	bf00      	nop
 800733c:	20400001 	.word	0x20400001

08007340 <_fflush_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	690b      	ldr	r3, [r1, #16]
 8007344:	4605      	mov	r5, r0
 8007346:	460c      	mov	r4, r1
 8007348:	b913      	cbnz	r3, 8007350 <_fflush_r+0x10>
 800734a:	2500      	movs	r5, #0
 800734c:	4628      	mov	r0, r5
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	b118      	cbz	r0, 800735a <_fflush_r+0x1a>
 8007352:	6983      	ldr	r3, [r0, #24]
 8007354:	b90b      	cbnz	r3, 800735a <_fflush_r+0x1a>
 8007356:	f000 f887 	bl	8007468 <__sinit>
 800735a:	4b14      	ldr	r3, [pc, #80]	; (80073ac <_fflush_r+0x6c>)
 800735c:	429c      	cmp	r4, r3
 800735e:	d11b      	bne.n	8007398 <_fflush_r+0x58>
 8007360:	686c      	ldr	r4, [r5, #4]
 8007362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0ef      	beq.n	800734a <_fflush_r+0xa>
 800736a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800736c:	07d0      	lsls	r0, r2, #31
 800736e:	d404      	bmi.n	800737a <_fflush_r+0x3a>
 8007370:	0599      	lsls	r1, r3, #22
 8007372:	d402      	bmi.n	800737a <_fflush_r+0x3a>
 8007374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007376:	f000 f915 	bl	80075a4 <__retarget_lock_acquire_recursive>
 800737a:	4628      	mov	r0, r5
 800737c:	4621      	mov	r1, r4
 800737e:	f7ff ff5d 	bl	800723c <__sflush_r>
 8007382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007384:	4605      	mov	r5, r0
 8007386:	07da      	lsls	r2, r3, #31
 8007388:	d4e0      	bmi.n	800734c <_fflush_r+0xc>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	059b      	lsls	r3, r3, #22
 800738e:	d4dd      	bmi.n	800734c <_fflush_r+0xc>
 8007390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007392:	f000 f908 	bl	80075a6 <__retarget_lock_release_recursive>
 8007396:	e7d9      	b.n	800734c <_fflush_r+0xc>
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <_fflush_r+0x70>)
 800739a:	429c      	cmp	r4, r3
 800739c:	d101      	bne.n	80073a2 <_fflush_r+0x62>
 800739e:	68ac      	ldr	r4, [r5, #8]
 80073a0:	e7df      	b.n	8007362 <_fflush_r+0x22>
 80073a2:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <_fflush_r+0x74>)
 80073a4:	429c      	cmp	r4, r3
 80073a6:	bf08      	it	eq
 80073a8:	68ec      	ldreq	r4, [r5, #12]
 80073aa:	e7da      	b.n	8007362 <_fflush_r+0x22>
 80073ac:	08007d3c 	.word	0x08007d3c
 80073b0:	08007d5c 	.word	0x08007d5c
 80073b4:	08007d1c 	.word	0x08007d1c

080073b8 <std>:
 80073b8:	2300      	movs	r3, #0
 80073ba:	b510      	push	{r4, lr}
 80073bc:	4604      	mov	r4, r0
 80073be:	e9c0 3300 	strd	r3, r3, [r0]
 80073c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073c6:	6083      	str	r3, [r0, #8]
 80073c8:	8181      	strh	r1, [r0, #12]
 80073ca:	6643      	str	r3, [r0, #100]	; 0x64
 80073cc:	81c2      	strh	r2, [r0, #14]
 80073ce:	6183      	str	r3, [r0, #24]
 80073d0:	4619      	mov	r1, r3
 80073d2:	2208      	movs	r2, #8
 80073d4:	305c      	adds	r0, #92	; 0x5c
 80073d6:	f7fb fe0d 	bl	8002ff4 <memset>
 80073da:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <std+0x38>)
 80073dc:	6224      	str	r4, [r4, #32]
 80073de:	6263      	str	r3, [r4, #36]	; 0x24
 80073e0:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <std+0x3c>)
 80073e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80073e4:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <std+0x40>)
 80073e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <std+0x44>)
 80073ea:	6323      	str	r3, [r4, #48]	; 0x30
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	bf00      	nop
 80073f0:	0800770d 	.word	0x0800770d
 80073f4:	0800772f 	.word	0x0800772f
 80073f8:	08007767 	.word	0x08007767
 80073fc:	0800778b 	.word	0x0800778b

08007400 <_cleanup_r>:
 8007400:	4901      	ldr	r1, [pc, #4]	; (8007408 <_cleanup_r+0x8>)
 8007402:	f000 b8af 	b.w	8007564 <_fwalk_reent>
 8007406:	bf00      	nop
 8007408:	08007341 	.word	0x08007341

0800740c <__sfmoreglue>:
 800740c:	2268      	movs	r2, #104	; 0x68
 800740e:	b570      	push	{r4, r5, r6, lr}
 8007410:	1e4d      	subs	r5, r1, #1
 8007412:	4355      	muls	r5, r2
 8007414:	460e      	mov	r6, r1
 8007416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800741a:	f7ff fa63 	bl	80068e4 <_malloc_r>
 800741e:	4604      	mov	r4, r0
 8007420:	b140      	cbz	r0, 8007434 <__sfmoreglue+0x28>
 8007422:	2100      	movs	r1, #0
 8007424:	e9c0 1600 	strd	r1, r6, [r0]
 8007428:	300c      	adds	r0, #12
 800742a:	60a0      	str	r0, [r4, #8]
 800742c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007430:	f7fb fde0 	bl	8002ff4 <memset>
 8007434:	4620      	mov	r0, r4
 8007436:	bd70      	pop	{r4, r5, r6, pc}

08007438 <__sfp_lock_acquire>:
 8007438:	4801      	ldr	r0, [pc, #4]	; (8007440 <__sfp_lock_acquire+0x8>)
 800743a:	f000 b8b3 	b.w	80075a4 <__retarget_lock_acquire_recursive>
 800743e:	bf00      	nop
 8007440:	200002f1 	.word	0x200002f1

08007444 <__sfp_lock_release>:
 8007444:	4801      	ldr	r0, [pc, #4]	; (800744c <__sfp_lock_release+0x8>)
 8007446:	f000 b8ae 	b.w	80075a6 <__retarget_lock_release_recursive>
 800744a:	bf00      	nop
 800744c:	200002f1 	.word	0x200002f1

08007450 <__sinit_lock_acquire>:
 8007450:	4801      	ldr	r0, [pc, #4]	; (8007458 <__sinit_lock_acquire+0x8>)
 8007452:	f000 b8a7 	b.w	80075a4 <__retarget_lock_acquire_recursive>
 8007456:	bf00      	nop
 8007458:	200002f2 	.word	0x200002f2

0800745c <__sinit_lock_release>:
 800745c:	4801      	ldr	r0, [pc, #4]	; (8007464 <__sinit_lock_release+0x8>)
 800745e:	f000 b8a2 	b.w	80075a6 <__retarget_lock_release_recursive>
 8007462:	bf00      	nop
 8007464:	200002f2 	.word	0x200002f2

08007468 <__sinit>:
 8007468:	b510      	push	{r4, lr}
 800746a:	4604      	mov	r4, r0
 800746c:	f7ff fff0 	bl	8007450 <__sinit_lock_acquire>
 8007470:	69a3      	ldr	r3, [r4, #24]
 8007472:	b11b      	cbz	r3, 800747c <__sinit+0x14>
 8007474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007478:	f7ff bff0 	b.w	800745c <__sinit_lock_release>
 800747c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007480:	6523      	str	r3, [r4, #80]	; 0x50
 8007482:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <__sinit+0x68>)
 8007484:	4a13      	ldr	r2, [pc, #76]	; (80074d4 <__sinit+0x6c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	62a2      	str	r2, [r4, #40]	; 0x28
 800748a:	42a3      	cmp	r3, r4
 800748c:	bf08      	it	eq
 800748e:	2301      	moveq	r3, #1
 8007490:	4620      	mov	r0, r4
 8007492:	bf08      	it	eq
 8007494:	61a3      	streq	r3, [r4, #24]
 8007496:	f000 f81f 	bl	80074d8 <__sfp>
 800749a:	6060      	str	r0, [r4, #4]
 800749c:	4620      	mov	r0, r4
 800749e:	f000 f81b 	bl	80074d8 <__sfp>
 80074a2:	60a0      	str	r0, [r4, #8]
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f817 	bl	80074d8 <__sfp>
 80074aa:	2200      	movs	r2, #0
 80074ac:	2104      	movs	r1, #4
 80074ae:	60e0      	str	r0, [r4, #12]
 80074b0:	6860      	ldr	r0, [r4, #4]
 80074b2:	f7ff ff81 	bl	80073b8 <std>
 80074b6:	2201      	movs	r2, #1
 80074b8:	2109      	movs	r1, #9
 80074ba:	68a0      	ldr	r0, [r4, #8]
 80074bc:	f7ff ff7c 	bl	80073b8 <std>
 80074c0:	2202      	movs	r2, #2
 80074c2:	2112      	movs	r1, #18
 80074c4:	68e0      	ldr	r0, [r4, #12]
 80074c6:	f7ff ff77 	bl	80073b8 <std>
 80074ca:	2301      	movs	r3, #1
 80074cc:	61a3      	str	r3, [r4, #24]
 80074ce:	e7d1      	b.n	8007474 <__sinit+0xc>
 80074d0:	080078d8 	.word	0x080078d8
 80074d4:	08007401 	.word	0x08007401

080074d8 <__sfp>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	4607      	mov	r7, r0
 80074dc:	f7ff ffac 	bl	8007438 <__sfp_lock_acquire>
 80074e0:	4b1e      	ldr	r3, [pc, #120]	; (800755c <__sfp+0x84>)
 80074e2:	681e      	ldr	r6, [r3, #0]
 80074e4:	69b3      	ldr	r3, [r6, #24]
 80074e6:	b913      	cbnz	r3, 80074ee <__sfp+0x16>
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff ffbd 	bl	8007468 <__sinit>
 80074ee:	3648      	adds	r6, #72	; 0x48
 80074f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	d503      	bpl.n	8007500 <__sfp+0x28>
 80074f8:	6833      	ldr	r3, [r6, #0]
 80074fa:	b30b      	cbz	r3, 8007540 <__sfp+0x68>
 80074fc:	6836      	ldr	r6, [r6, #0]
 80074fe:	e7f7      	b.n	80074f0 <__sfp+0x18>
 8007500:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007504:	b9d5      	cbnz	r5, 800753c <__sfp+0x64>
 8007506:	4b16      	ldr	r3, [pc, #88]	; (8007560 <__sfp+0x88>)
 8007508:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800750c:	60e3      	str	r3, [r4, #12]
 800750e:	6665      	str	r5, [r4, #100]	; 0x64
 8007510:	f000 f847 	bl	80075a2 <__retarget_lock_init_recursive>
 8007514:	f7ff ff96 	bl	8007444 <__sfp_lock_release>
 8007518:	2208      	movs	r2, #8
 800751a:	4629      	mov	r1, r5
 800751c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007520:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007524:	6025      	str	r5, [r4, #0]
 8007526:	61a5      	str	r5, [r4, #24]
 8007528:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800752c:	f7fb fd62 	bl	8002ff4 <memset>
 8007530:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007534:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007538:	4620      	mov	r0, r4
 800753a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800753c:	3468      	adds	r4, #104	; 0x68
 800753e:	e7d9      	b.n	80074f4 <__sfp+0x1c>
 8007540:	2104      	movs	r1, #4
 8007542:	4638      	mov	r0, r7
 8007544:	f7ff ff62 	bl	800740c <__sfmoreglue>
 8007548:	4604      	mov	r4, r0
 800754a:	6030      	str	r0, [r6, #0]
 800754c:	2800      	cmp	r0, #0
 800754e:	d1d5      	bne.n	80074fc <__sfp+0x24>
 8007550:	f7ff ff78 	bl	8007444 <__sfp_lock_release>
 8007554:	230c      	movs	r3, #12
 8007556:	603b      	str	r3, [r7, #0]
 8007558:	e7ee      	b.n	8007538 <__sfp+0x60>
 800755a:	bf00      	nop
 800755c:	080078d8 	.word	0x080078d8
 8007560:	ffff0001 	.word	0xffff0001

08007564 <_fwalk_reent>:
 8007564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007568:	4606      	mov	r6, r0
 800756a:	4688      	mov	r8, r1
 800756c:	2700      	movs	r7, #0
 800756e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007576:	f1b9 0901 	subs.w	r9, r9, #1
 800757a:	d505      	bpl.n	8007588 <_fwalk_reent+0x24>
 800757c:	6824      	ldr	r4, [r4, #0]
 800757e:	2c00      	cmp	r4, #0
 8007580:	d1f7      	bne.n	8007572 <_fwalk_reent+0xe>
 8007582:	4638      	mov	r0, r7
 8007584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007588:	89ab      	ldrh	r3, [r5, #12]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d907      	bls.n	800759e <_fwalk_reent+0x3a>
 800758e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007592:	3301      	adds	r3, #1
 8007594:	d003      	beq.n	800759e <_fwalk_reent+0x3a>
 8007596:	4629      	mov	r1, r5
 8007598:	4630      	mov	r0, r6
 800759a:	47c0      	blx	r8
 800759c:	4307      	orrs	r7, r0
 800759e:	3568      	adds	r5, #104	; 0x68
 80075a0:	e7e9      	b.n	8007576 <_fwalk_reent+0x12>

080075a2 <__retarget_lock_init_recursive>:
 80075a2:	4770      	bx	lr

080075a4 <__retarget_lock_acquire_recursive>:
 80075a4:	4770      	bx	lr

080075a6 <__retarget_lock_release_recursive>:
 80075a6:	4770      	bx	lr

080075a8 <__swhatbuf_r>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	460e      	mov	r6, r1
 80075ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b0:	4614      	mov	r4, r2
 80075b2:	2900      	cmp	r1, #0
 80075b4:	461d      	mov	r5, r3
 80075b6:	b096      	sub	sp, #88	; 0x58
 80075b8:	da08      	bge.n	80075cc <__swhatbuf_r+0x24>
 80075ba:	2200      	movs	r2, #0
 80075bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075c0:	602a      	str	r2, [r5, #0]
 80075c2:	061a      	lsls	r2, r3, #24
 80075c4:	d410      	bmi.n	80075e8 <__swhatbuf_r+0x40>
 80075c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ca:	e00e      	b.n	80075ea <__swhatbuf_r+0x42>
 80075cc:	466a      	mov	r2, sp
 80075ce:	f000 f903 	bl	80077d8 <_fstat_r>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	dbf1      	blt.n	80075ba <__swhatbuf_r+0x12>
 80075d6:	9a01      	ldr	r2, [sp, #4]
 80075d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075e0:	425a      	negs	r2, r3
 80075e2:	415a      	adcs	r2, r3
 80075e4:	602a      	str	r2, [r5, #0]
 80075e6:	e7ee      	b.n	80075c6 <__swhatbuf_r+0x1e>
 80075e8:	2340      	movs	r3, #64	; 0x40
 80075ea:	2000      	movs	r0, #0
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	b016      	add	sp, #88	; 0x58
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080075f4 <__smakebuf_r>:
 80075f4:	898b      	ldrh	r3, [r1, #12]
 80075f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075f8:	079d      	lsls	r5, r3, #30
 80075fa:	4606      	mov	r6, r0
 80075fc:	460c      	mov	r4, r1
 80075fe:	d507      	bpl.n	8007610 <__smakebuf_r+0x1c>
 8007600:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	6123      	str	r3, [r4, #16]
 8007608:	2301      	movs	r3, #1
 800760a:	6163      	str	r3, [r4, #20]
 800760c:	b002      	add	sp, #8
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	466a      	mov	r2, sp
 8007612:	ab01      	add	r3, sp, #4
 8007614:	f7ff ffc8 	bl	80075a8 <__swhatbuf_r>
 8007618:	9900      	ldr	r1, [sp, #0]
 800761a:	4605      	mov	r5, r0
 800761c:	4630      	mov	r0, r6
 800761e:	f7ff f961 	bl	80068e4 <_malloc_r>
 8007622:	b948      	cbnz	r0, 8007638 <__smakebuf_r+0x44>
 8007624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007628:	059a      	lsls	r2, r3, #22
 800762a:	d4ef      	bmi.n	800760c <__smakebuf_r+0x18>
 800762c:	f023 0303 	bic.w	r3, r3, #3
 8007630:	f043 0302 	orr.w	r3, r3, #2
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	e7e3      	b.n	8007600 <__smakebuf_r+0xc>
 8007638:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <__smakebuf_r+0x7c>)
 800763a:	62b3      	str	r3, [r6, #40]	; 0x28
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	6020      	str	r0, [r4, #0]
 8007640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	9b00      	ldr	r3, [sp, #0]
 8007648:	6120      	str	r0, [r4, #16]
 800764a:	6163      	str	r3, [r4, #20]
 800764c:	9b01      	ldr	r3, [sp, #4]
 800764e:	b15b      	cbz	r3, 8007668 <__smakebuf_r+0x74>
 8007650:	4630      	mov	r0, r6
 8007652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007656:	f000 f8d1 	bl	80077fc <_isatty_r>
 800765a:	b128      	cbz	r0, 8007668 <__smakebuf_r+0x74>
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	f023 0303 	bic.w	r3, r3, #3
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	81a3      	strh	r3, [r4, #12]
 8007668:	89a0      	ldrh	r0, [r4, #12]
 800766a:	4305      	orrs	r5, r0
 800766c:	81a5      	strh	r5, [r4, #12]
 800766e:	e7cd      	b.n	800760c <__smakebuf_r+0x18>
 8007670:	08007401 	.word	0x08007401

08007674 <_malloc_usable_size_r>:
 8007674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007678:	1f18      	subs	r0, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	bfbc      	itt	lt
 800767e:	580b      	ldrlt	r3, [r1, r0]
 8007680:	18c0      	addlt	r0, r0, r3
 8007682:	4770      	bx	lr

08007684 <_raise_r>:
 8007684:	291f      	cmp	r1, #31
 8007686:	b538      	push	{r3, r4, r5, lr}
 8007688:	4604      	mov	r4, r0
 800768a:	460d      	mov	r5, r1
 800768c:	d904      	bls.n	8007698 <_raise_r+0x14>
 800768e:	2316      	movs	r3, #22
 8007690:	6003      	str	r3, [r0, #0]
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800769a:	b112      	cbz	r2, 80076a2 <_raise_r+0x1e>
 800769c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076a0:	b94b      	cbnz	r3, 80076b6 <_raise_r+0x32>
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 f830 	bl	8007708 <_getpid_r>
 80076a8:	462a      	mov	r2, r5
 80076aa:	4601      	mov	r1, r0
 80076ac:	4620      	mov	r0, r4
 80076ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076b2:	f000 b817 	b.w	80076e4 <_kill_r>
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d00a      	beq.n	80076d0 <_raise_r+0x4c>
 80076ba:	1c59      	adds	r1, r3, #1
 80076bc:	d103      	bne.n	80076c6 <_raise_r+0x42>
 80076be:	2316      	movs	r3, #22
 80076c0:	6003      	str	r3, [r0, #0]
 80076c2:	2001      	movs	r0, #1
 80076c4:	e7e7      	b.n	8007696 <_raise_r+0x12>
 80076c6:	2400      	movs	r4, #0
 80076c8:	4628      	mov	r0, r5
 80076ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076ce:	4798      	blx	r3
 80076d0:	2000      	movs	r0, #0
 80076d2:	e7e0      	b.n	8007696 <_raise_r+0x12>

080076d4 <raise>:
 80076d4:	4b02      	ldr	r3, [pc, #8]	; (80076e0 <raise+0xc>)
 80076d6:	4601      	mov	r1, r0
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	f7ff bfd3 	b.w	8007684 <_raise_r>
 80076de:	bf00      	nop
 80076e0:	20000014 	.word	0x20000014

080076e4 <_kill_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	2300      	movs	r3, #0
 80076e8:	4d06      	ldr	r5, [pc, #24]	; (8007704 <_kill_r+0x20>)
 80076ea:	4604      	mov	r4, r0
 80076ec:	4608      	mov	r0, r1
 80076ee:	4611      	mov	r1, r2
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	f7f9 ffb1 	bl	8001658 <_kill>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	d102      	bne.n	8007700 <_kill_r+0x1c>
 80076fa:	682b      	ldr	r3, [r5, #0]
 80076fc:	b103      	cbz	r3, 8007700 <_kill_r+0x1c>
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	bd38      	pop	{r3, r4, r5, pc}
 8007702:	bf00      	nop
 8007704:	200002ec 	.word	0x200002ec

08007708 <_getpid_r>:
 8007708:	f7f9 bf9f 	b.w	800164a <_getpid>

0800770c <__sread>:
 800770c:	b510      	push	{r4, lr}
 800770e:	460c      	mov	r4, r1
 8007710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007714:	f000 f894 	bl	8007840 <_read_r>
 8007718:	2800      	cmp	r0, #0
 800771a:	bfab      	itete	ge
 800771c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800771e:	89a3      	ldrhlt	r3, [r4, #12]
 8007720:	181b      	addge	r3, r3, r0
 8007722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007726:	bfac      	ite	ge
 8007728:	6563      	strge	r3, [r4, #84]	; 0x54
 800772a:	81a3      	strhlt	r3, [r4, #12]
 800772c:	bd10      	pop	{r4, pc}

0800772e <__swrite>:
 800772e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007732:	461f      	mov	r7, r3
 8007734:	898b      	ldrh	r3, [r1, #12]
 8007736:	4605      	mov	r5, r0
 8007738:	05db      	lsls	r3, r3, #23
 800773a:	460c      	mov	r4, r1
 800773c:	4616      	mov	r6, r2
 800773e:	d505      	bpl.n	800774c <__swrite+0x1e>
 8007740:	2302      	movs	r3, #2
 8007742:	2200      	movs	r2, #0
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	f000 f868 	bl	800781c <_lseek_r>
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	4632      	mov	r2, r6
 8007750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	4628      	mov	r0, r5
 8007758:	463b      	mov	r3, r7
 800775a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800775e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007762:	f000 b817 	b.w	8007794 <_write_r>

08007766 <__sseek>:
 8007766:	b510      	push	{r4, lr}
 8007768:	460c      	mov	r4, r1
 800776a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776e:	f000 f855 	bl	800781c <_lseek_r>
 8007772:	1c43      	adds	r3, r0, #1
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	bf15      	itete	ne
 8007778:	6560      	strne	r0, [r4, #84]	; 0x54
 800777a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800777e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007782:	81a3      	strheq	r3, [r4, #12]
 8007784:	bf18      	it	ne
 8007786:	81a3      	strhne	r3, [r4, #12]
 8007788:	bd10      	pop	{r4, pc}

0800778a <__sclose>:
 800778a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778e:	f000 b813 	b.w	80077b8 <_close_r>
	...

08007794 <_write_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4604      	mov	r4, r0
 8007798:	4608      	mov	r0, r1
 800779a:	4611      	mov	r1, r2
 800779c:	2200      	movs	r2, #0
 800779e:	4d05      	ldr	r5, [pc, #20]	; (80077b4 <_write_r+0x20>)
 80077a0:	602a      	str	r2, [r5, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f7f9 ff8f 	bl	80016c6 <_write>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d102      	bne.n	80077b2 <_write_r+0x1e>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	b103      	cbz	r3, 80077b2 <_write_r+0x1e>
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	200002ec 	.word	0x200002ec

080077b8 <_close_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	2300      	movs	r3, #0
 80077bc:	4d05      	ldr	r5, [pc, #20]	; (80077d4 <_close_r+0x1c>)
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	f7f9 ff9b 	bl	80016fe <_close>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_close_r+0x1a>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_close_r+0x1a>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	200002ec 	.word	0x200002ec

080077d8 <_fstat_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	2300      	movs	r3, #0
 80077dc:	4d06      	ldr	r5, [pc, #24]	; (80077f8 <_fstat_r+0x20>)
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	4611      	mov	r1, r2
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	f7f9 ff95 	bl	8001714 <_fstat>
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	d102      	bne.n	80077f4 <_fstat_r+0x1c>
 80077ee:	682b      	ldr	r3, [r5, #0]
 80077f0:	b103      	cbz	r3, 80077f4 <_fstat_r+0x1c>
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	bd38      	pop	{r3, r4, r5, pc}
 80077f6:	bf00      	nop
 80077f8:	200002ec 	.word	0x200002ec

080077fc <_isatty_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	2300      	movs	r3, #0
 8007800:	4d05      	ldr	r5, [pc, #20]	; (8007818 <_isatty_r+0x1c>)
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7f9 ff93 	bl	8001732 <_isatty>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_isatty_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_isatty_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	200002ec 	.word	0x200002ec

0800781c <_lseek_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	4608      	mov	r0, r1
 8007822:	4611      	mov	r1, r2
 8007824:	2200      	movs	r2, #0
 8007826:	4d05      	ldr	r5, [pc, #20]	; (800783c <_lseek_r+0x20>)
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7f9 ff8b 	bl	8001746 <_lseek>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_lseek_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_lseek_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	200002ec 	.word	0x200002ec

08007840 <_read_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4604      	mov	r4, r0
 8007844:	4608      	mov	r0, r1
 8007846:	4611      	mov	r1, r2
 8007848:	2200      	movs	r2, #0
 800784a:	4d05      	ldr	r5, [pc, #20]	; (8007860 <_read_r+0x20>)
 800784c:	602a      	str	r2, [r5, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	f7f9 ff1c 	bl	800168c <_read>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_read_r+0x1e>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_read_r+0x1e>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	200002ec 	.word	0x200002ec

08007864 <_init>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr

08007870 <_fini>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr
