
SPI_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  080077d8  080077d8  000177d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd4  08007cd4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007cd4  08007cd4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cd4  08007cd4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001e8  08007ec4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08007ec4  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ee8  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001900  00000000  00000000  000280f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00029a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eeb  00000000  00000000  0002ac18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009812  00000000  00000000  00042b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ab1  00000000  00000000  0004c315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1dc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  000d1e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080077bc 	.word	0x080077bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080077bc 	.word	0x080077bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fde9 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f85b 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 f8f5 	bl	8000dd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bea:	f000 f8c9 	bl	8000d80 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000bee:	f000 f891 	bl	8000d14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000bf2:	f000 fba8 	bl	8001346 <MFRC522_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (MFRC522_Check(CardID) == MI_OK) {
 8000bf6:	4822      	ldr	r0, [pc, #136]	; (8000c80 <main+0xa8>)
 8000bf8:	f000 f9ba 	bl	8000f70 <MFRC522_Check>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d13a      	bne.n	8000c78 <main+0xa0>
			sprintf(buffer,"0x%X 0x%X 0x%X 0x%X 0x%X \n",CardID[0],CardID[1],CardID[2],CardID[3],CardID[4]);
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <main+0xa8>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <main+0xa8>)
 8000c0a:	785b      	ldrb	r3, [r3, #1]
 8000c0c:	461c      	mov	r4, r3
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <main+0xa8>)
 8000c10:	789b      	ldrb	r3, [r3, #2]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <main+0xa8>)
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <main+0xa8>)
 8000c1c:	791b      	ldrb	r3, [r3, #4]
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	9101      	str	r1, [sp, #4]
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	4623      	mov	r3, r4
 8000c26:	4602      	mov	r2, r0
 8000c28:	4916      	ldr	r1, [pc, #88]	; (8000c84 <main+0xac>)
 8000c2a:	4817      	ldr	r0, [pc, #92]	; (8000c88 <main+0xb0>)
 8000c2c:	f003 f80a 	bl	8003c44 <siprintf>
			HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8000c30:	4815      	ldr	r0, [pc, #84]	; (8000c88 <main+0xb0>)
 8000c32:	f7ff fa8d 	bl	8000150 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	4912      	ldr	r1, [pc, #72]	; (8000c88 <main+0xb0>)
 8000c40:	4812      	ldr	r0, [pc, #72]	; (8000c8c <main+0xb4>)
 8000c42:	f001 fff0 	bl	8002c26 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000c46:	2064      	movs	r0, #100	; 0x64
 8000c48:	f000 fe16 	bl	8001878 <HAL_Delay>
			if (MFRC522_Compare(CardID, MyID) == MI_OK) {
 8000c4c:	4910      	ldr	r1, [pc, #64]	; (8000c90 <main+0xb8>)
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <main+0xa8>)
 8000c50:	f000 f9a7 	bl	8000fa2 <MFRC522_Compare>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d107      	bne.n	8000c6a <main+0x92>
				HAL_UART_Transmit(&huart2, (uint8_t*) "\n correct\n", 11, 1000);
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	220b      	movs	r2, #11
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <main+0xbc>)
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <main+0xb4>)
 8000c64:	f001 ffdf 	bl	8002c26 <HAL_UART_Transmit>
 8000c68:	e006      	b.n	8000c78 <main+0xa0>
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t*) " wrong\n", 9, 1000);
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	2209      	movs	r2, #9
 8000c70:	4909      	ldr	r1, [pc, #36]	; (8000c98 <main+0xc0>)
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <main+0xb4>)
 8000c74:	f001 ffd7 	bl	8002c26 <HAL_UART_Transmit>
			}
		}
		HAL_Delay(100);
 8000c78:	2064      	movs	r0, #100	; 0x64
 8000c7a:	f000 fdfd 	bl	8001878 <HAL_Delay>
		if (MFRC522_Check(CardID) == MI_OK) {
 8000c7e:	e7ba      	b.n	8000bf6 <main+0x1e>
 8000c80:	200002a0 	.word	0x200002a0
 8000c84:	080077d8 	.word	0x080077d8
 8000c88:	200002a8 	.word	0x200002a8
 8000c8c:	2000025c 	.word	0x2000025c
 8000c90:	20000000 	.word	0x20000000
 8000c94:	080077f4 	.word	0x080077f4
 8000c98:	08007800 	.word	0x08007800

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	; 0x40
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2228      	movs	r2, #40	; 0x28
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 f950 	bl	8002f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	f107 0318 	add.w	r3, r7, #24
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f874 	bl	8001dc0 <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cde:	f000 f8b7 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fae2 	bl	80022c4 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f8a3 	bl	8000e50 <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3740      	adds	r7, #64	; 0x40
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d1a:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <MX_SPI1_Init+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d60:	220a      	movs	r2, #10
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d66:	f001 fc45 	bl	80025f4 <HAL_SPI_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d70:	f000 f86e 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000204 	.word	0x20000204
 8000d7c:	40013000 	.word	0x40013000

08000d80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_USART2_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db8:	f001 fee8 	bl	8002b8c <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f000 f845 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000025c 	.word	0x2000025c
 8000dd0:	40004400 	.word	0x40004400

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_GPIO_Init+0x74>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <MX_GPIO_Init+0x74>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_GPIO_Init+0x74>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_GPIO_Init+0x74>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <MX_GPIO_Init+0x74>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_GPIO_Init+0x74>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <MX_GPIO_Init+0x78>)
 8000e1e:	f000 ffb7 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e22:	2301      	movs	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_GPIO_Init+0x78>)
 8000e3a:	f000 fe25 	bl	8001a88 <HAL_GPIO_Init>

}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000e6a:	f107 0208 	add.w	r2, r7, #8
 8000e6e:	f107 010c 	add.w	r1, r7, #12
 8000e72:	230a      	movs	r3, #10
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <SPI1SendByte+0x2c>)
 8000e7a:	f001 fc3f 	bl	80026fc <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000e7e:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000204 	.word	0x20000204

08000e8c <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	460a      	mov	r2, r1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <SPI1_WriteReg+0x3c>)
 8000ea2:	f000 ff75 	bl	8001d90 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffd7 	bl	8000e5c <SPI1SendByte>
	SPI1SendByte(value);
 8000eae:	79bb      	ldrb	r3, [r7, #6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ffd3 	bl	8000e5c <SPI1SendByte>
	cs_set();
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <SPI1_WriteReg+0x3c>)
 8000ebc:	f000 ff68 	bl	8001d90 <HAL_GPIO_WritePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2101      	movs	r1, #1
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <SPI1_ReadReg+0x3c>)
 8000edc:	f000 ff58 	bl	8001d90 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffba 	bl	8000e5c <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ffb7 	bl	8000e5c <SPI1SendByte>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <SPI1_ReadReg+0x3c>)
 8000ef8:	f000 ff4a 	bl	8001d90 <HAL_GPIO_WritePin>
	return val;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f26:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000f28:	79ba      	ldrb	r2, [r7, #6]
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ffac 	bl	8000e8c <SPI1_WriteReg>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffb5 	bl	8000ecc <SPI1_ReadReg>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]
	return val;	
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	2026      	movs	r0, #38	; 0x26
 8000f7c:	f000 f869 	bl	8001052 <MFRC522_Request>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d104      	bne.n	8000f94 <MFRC522_Check+0x24>
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f955 	bl	800123a <MFRC522_Anticoll>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 8000f94:	f000 fa18 	bl	80013c8 <MFRC522_Halt>
	return status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <MFRC522_Compare>:

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e00e      	b.n	8000fd0 <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) return MI_ERR;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d001      	beq.n	8000fca <MFRC522_Compare+0x28>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e006      	b.n	8000fd8 <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d9ed      	bls.n	8000fb2 <MFRC522_Compare+0x10>
	}
	return MI_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	460a      	mov	r2, r1
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffa1 	bl	8000f3c <MFRC522_ReadRegister>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	4313      	orrs	r3, r2
 8001002:	b2da      	uxtb	r2, r3
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff7f 	bl	8000f0c <MFRC522_WriteRegister>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	460a      	mov	r2, r1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	4613      	mov	r3, r2
 8001024:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff87 	bl	8000f3c <MFRC522_ReadRegister>
 800102e:	4603      	mov	r3, r0
 8001030:	b25a      	sxtb	r2, r3
 8001032:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001036:	43db      	mvns	r3, r3
 8001038:	b25b      	sxtb	r3, r3
 800103a:	4013      	ands	r3, r2
 800103c:	b25b      	sxtb	r3, r3
 800103e:	b2da      	uxtb	r2, r3
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff61 	bl	8000f0c <MFRC522_WriteRegister>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af02      	add	r7, sp, #8
 8001058:	4603      	mov	r3, r0
 800105a:	6039      	str	r1, [r7, #0]
 800105c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800105e:	2107      	movs	r1, #7
 8001060:	200d      	movs	r0, #13
 8001062:	f7ff ff53 	bl	8000f0c <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2201      	movs	r2, #1
 8001076:	6839      	ldr	r1, [r7, #0]
 8001078:	200c      	movs	r0, #12
 800107a:	f000 f80f 	bl	800109c <MFRC522_ToCard>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <MFRC522_Request+0x3c>
 8001088:	89bb      	ldrh	r3, [r7, #12]
 800108a:	2b10      	cmp	r3, #16
 800108c:	d001      	beq.n	8001092 <MFRC522_Request+0x40>
 800108e:	2302      	movs	r3, #2
 8001090:	73fb      	strb	r3, [r7, #15]
	return status;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	4613      	mov	r3, r2
 80010ac:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80010ae:	2302      	movs	r3, #2
 80010b0:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	2b0c      	cmp	r3, #12
 80010be:	d006      	beq.n	80010ce <MFRC522_ToCard+0x32>
 80010c0:	2b0e      	cmp	r3, #14
 80010c2:	d109      	bne.n	80010d8 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80010c4:	2312      	movs	r3, #18
 80010c6:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80010c8:	2310      	movs	r3, #16
 80010ca:	757b      	strb	r3, [r7, #21]
			break;
 80010cc:	e005      	b.n	80010da <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80010ce:	2377      	movs	r3, #119	; 0x77
 80010d0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80010d2:	2330      	movs	r3, #48	; 0x30
 80010d4:	757b      	strb	r3, [r7, #21]
			break;
 80010d6:	e000      	b.n	80010da <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 80010d8:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4619      	mov	r1, r3
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff ff11 	bl	8000f0c <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	2004      	movs	r0, #4
 80010ee:	f7ff ff92 	bl	8001016 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	200a      	movs	r0, #10
 80010f6:	f7ff ff74 	bl	8000fe2 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80010fa:	2100      	movs	r1, #0
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff ff05 	bl	8000f0c <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001102:	2300      	movs	r3, #0
 8001104:	827b      	strh	r3, [r7, #18]
 8001106:	e00a      	b.n	800111e <MFRC522_ToCard+0x82>
 8001108:	8a7b      	ldrh	r3, [r7, #18]
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	2009      	movs	r0, #9
 8001114:	f7ff fefa 	bl	8000f0c <MFRC522_WriteRegister>
 8001118:	8a7b      	ldrh	r3, [r7, #18]
 800111a:	3301      	adds	r3, #1
 800111c:	827b      	strh	r3, [r7, #18]
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	b29b      	uxth	r3, r3
 8001122:	8a7a      	ldrh	r2, [r7, #18]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3ef      	bcc.n	8001108 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	4619      	mov	r1, r3
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff feed 	bl	8000f0c <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2b0c      	cmp	r3, #12
 8001136:	d103      	bne.n	8001140 <MFRC522_ToCard+0xa4>
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	200d      	movs	r0, #13
 800113c:	f7ff ff51 	bl	8000fe2 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001140:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001144:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001146:	2004      	movs	r0, #4
 8001148:	f7ff fef8 	bl	8000f3c <MFRC522_ReadRegister>
 800114c:	4603      	mov	r3, r0
 800114e:	753b      	strb	r3, [r7, #20]
		i--;
 8001150:	8a7b      	ldrh	r3, [r7, #18]
 8001152:	3b01      	subs	r3, #1
 8001154:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001156:	8a7b      	ldrh	r3, [r7, #18]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00a      	beq.n	8001172 <MFRC522_ToCard+0xd6>
 800115c:	7d3b      	ldrb	r3, [r7, #20]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d105      	bne.n	8001172 <MFRC522_ToCard+0xd6>
 8001166:	7d3a      	ldrb	r2, [r7, #20]
 8001168:	7d7b      	ldrb	r3, [r7, #21]
 800116a:	4013      	ands	r3, r2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0e9      	beq.n	8001146 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	200d      	movs	r0, #13
 8001176:	f7ff ff4e 	bl	8001016 <MFRC522_ClearBitMask>

	if (i != 0)  {
 800117a:	8a7b      	ldrh	r3, [r7, #18]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d057      	beq.n	8001230 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001180:	2006      	movs	r0, #6
 8001182:	f7ff fedb 	bl	8000f3c <MFRC522_ReadRegister>
 8001186:	4603      	mov	r3, r0
 8001188:	f003 031b 	and.w	r3, r3, #27
 800118c:	2b00      	cmp	r3, #0
 800118e:	d14d      	bne.n	800122c <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001194:	7d3a      	ldrb	r2, [r7, #20]
 8001196:	7dbb      	ldrb	r3, [r7, #22]
 8001198:	4013      	ands	r3, r2
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MFRC522_ToCard+0x10c>
 80011a4:	2301      	movs	r3, #1
 80011a6:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b0c      	cmp	r3, #12
 80011ac:	d140      	bne.n	8001230 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80011ae:	200a      	movs	r0, #10
 80011b0:	f7ff fec4 	bl	8000f3c <MFRC522_ReadRegister>
 80011b4:	4603      	mov	r3, r0
 80011b6:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80011b8:	200c      	movs	r0, #12
 80011ba:	f7ff febf 	bl	8000f3c <MFRC522_ReadRegister>
 80011be:	4603      	mov	r3, r0
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 80011c6:	7c7b      	ldrb	r3, [r7, #17]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <MFRC522_ToCard+0x148>
 80011cc:	7d3b      	ldrb	r3, [r7, #20]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	7c7b      	ldrb	r3, [r7, #17]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4413      	add	r3, r2
 80011dc:	b29a      	uxth	r2, r3
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	e005      	b.n	80011f0 <MFRC522_ToCard+0x154>
 80011e4:	7d3b      	ldrb	r3, [r7, #20]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 80011f0:	7d3b      	ldrb	r3, [r7, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <MFRC522_ToCard+0x15e>
 80011f6:	2301      	movs	r3, #1
 80011f8:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 80011fa:	7d3b      	ldrb	r3, [r7, #20]
 80011fc:	2b10      	cmp	r3, #16
 80011fe:	d901      	bls.n	8001204 <MFRC522_ToCard+0x168>
 8001200:	2310      	movs	r3, #16
 8001202:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001204:	2300      	movs	r3, #0
 8001206:	827b      	strh	r3, [r7, #18]
 8001208:	e00a      	b.n	8001220 <MFRC522_ToCard+0x184>
 800120a:	8a7b      	ldrh	r3, [r7, #18]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	18d4      	adds	r4, r2, r3
 8001210:	2009      	movs	r0, #9
 8001212:	f7ff fe93 	bl	8000f3c <MFRC522_ReadRegister>
 8001216:	4603      	mov	r3, r0
 8001218:	7023      	strb	r3, [r4, #0]
 800121a:	8a7b      	ldrh	r3, [r7, #18]
 800121c:	3301      	adds	r3, #1
 800121e:	827b      	strh	r3, [r7, #18]
 8001220:	7d3b      	ldrb	r3, [r7, #20]
 8001222:	b29b      	uxth	r3, r3
 8001224:	8a7a      	ldrh	r2, [r7, #18]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3ef      	bcc.n	800120a <MFRC522_ToCard+0x16e>
 800122a:	e001      	b.n	8001230 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800122c:	2302      	movs	r3, #2
 800122e:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001230:	7dfb      	ldrb	r3, [r7, #23]
}
 8001232:	4618      	mov	r0, r3
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}

0800123a <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af02      	add	r7, sp, #8
 8001240:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001246:	2100      	movs	r1, #0
 8001248:	200d      	movs	r0, #13
 800124a:	f7ff fe5f 	bl	8000f0c <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2293      	movs	r2, #147	; 0x93
 8001252:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3301      	adds	r3, #1
 8001258:	2220      	movs	r2, #32
 800125a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800125c:	f107 030a 	add.w	r3, r7, #10
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2202      	movs	r2, #2
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	200c      	movs	r0, #12
 800126a:	f7ff ff17 	bl	800109c <MFRC522_ToCard>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d118      	bne.n	80012aa <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001278:	2300      	movs	r3, #0
 800127a:	73bb      	strb	r3, [r7, #14]
 800127c:	e009      	b.n	8001292 <MFRC522_Anticoll+0x58>
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	7b7b      	ldrb	r3, [r7, #13]
 8001288:	4053      	eors	r3, r2
 800128a:	737b      	strb	r3, [r7, #13]
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	3301      	adds	r3, #1
 8001290:	73bb      	strb	r3, [r7, #14]
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d9f2      	bls.n	800127e <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	7b7a      	ldrb	r2, [r7, #13]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d001      	beq.n	80012aa <MFRC522_Anticoll+0x70>
 80012a6:	2302      	movs	r3, #2
 80012a8:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
} 
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	460b      	mov	r3, r1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 80012c2:	2104      	movs	r1, #4
 80012c4:	2005      	movs	r0, #5
 80012c6:	f7ff fea6 	bl	8001016 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	200a      	movs	r0, #10
 80012ce:	f7ff fe88 	bl	8000fe2 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e00a      	b.n	80012ee <MFRC522_CalculateCRC+0x3a>
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	2009      	movs	r0, #9
 80012e4:	f7ff fe12 	bl	8000f0c <MFRC522_WriteRegister>
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	3301      	adds	r3, #1
 80012ec:	75fb      	strb	r3, [r7, #23]
 80012ee:	7dfa      	ldrb	r2, [r7, #23]
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d3f0      	bcc.n	80012d8 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80012f6:	2103      	movs	r1, #3
 80012f8:	2001      	movs	r0, #1
 80012fa:	f7ff fe07 	bl	8000f0c <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 80012fe:	23ff      	movs	r3, #255	; 0xff
 8001300:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001302:	2005      	movs	r0, #5
 8001304:	f7ff fe1a 	bl	8000f3c <MFRC522_ReadRegister>
 8001308:	4603      	mov	r3, r0
 800130a:	75bb      	strb	r3, [r7, #22]
		i--;
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	3b01      	subs	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <MFRC522_CalculateCRC+0x6e>
 8001318:	7dbb      	ldrb	r3, [r7, #22]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0ef      	beq.n	8001302 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001322:	2022      	movs	r0, #34	; 0x22
 8001324:	f7ff fe0a 	bl	8000f3c <MFRC522_ReadRegister>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	1c5c      	adds	r4, r3, #1
 8001334:	2021      	movs	r0, #33	; 0x21
 8001336:	f7ff fe01 	bl	8000f3c <MFRC522_ReadRegister>
 800133a:	4603      	mov	r3, r0
 800133c:	7023      	strb	r3, [r4, #0]
}
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}

08001346 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800134a:	f000 f820 	bl	800138e <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800134e:	218d      	movs	r1, #141	; 0x8d
 8001350:	202a      	movs	r0, #42	; 0x2a
 8001352:	f7ff fddb 	bl	8000f0c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001356:	213e      	movs	r1, #62	; 0x3e
 8001358:	202b      	movs	r0, #43	; 0x2b
 800135a:	f7ff fdd7 	bl	8000f0c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800135e:	211e      	movs	r1, #30
 8001360:	202d      	movs	r0, #45	; 0x2d
 8001362:	f7ff fdd3 	bl	8000f0c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001366:	2100      	movs	r1, #0
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff fdcf 	bl	8000f0c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 800136e:	2170      	movs	r1, #112	; 0x70
 8001370:	2026      	movs	r0, #38	; 0x26
 8001372:	f7ff fdcb 	bl	8000f0c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001376:	2140      	movs	r1, #64	; 0x40
 8001378:	2015      	movs	r0, #21
 800137a:	f7ff fdc7 	bl	8000f0c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800137e:	213d      	movs	r1, #61	; 0x3d
 8001380:	2011      	movs	r0, #17
 8001382:	f7ff fdc3 	bl	8000f0c <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8001386:	f000 f80a 	bl	800139e <MFRC522_AntennaOn>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}

0800138e <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001392:	210f      	movs	r1, #15
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fdb9 	bl	8000f0c <MFRC522_WriteRegister>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}

0800139e <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80013a4:	2014      	movs	r0, #20
 80013a6:	f7ff fdc9 	bl	8000f3c <MFRC522_ReadRegister>
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d103      	bne.n	80013c0 <MFRC522_AntennaOn+0x22>
 80013b8:	2103      	movs	r1, #3
 80013ba:	2014      	movs	r0, #20
 80013bc:	f7ff fe11 	bl	8000fe2 <MFRC522_SetBitMask>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 80013ce:	2350      	movs	r3, #80	; 0x50
 80013d0:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80013d6:	463b      	mov	r3, r7
 80013d8:	1c9a      	adds	r2, r3, #2
 80013da:	463b      	mov	r3, r7
 80013dc:	2102      	movs	r1, #2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff68 	bl	80012b4 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80013e4:	463a      	mov	r2, r7
 80013e6:	4639      	mov	r1, r7
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4613      	mov	r3, r2
 80013ee:	2204      	movs	r2, #4
 80013f0:	200c      	movs	r0, #12
 80013f2:	f7ff fe53 	bl	800109c <MFRC522_ToCard>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_MspInit+0x5c>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	4a14      	ldr	r2, [pc, #80]	; (800145c <HAL_MspInit+0x5c>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6193      	str	r3, [r2, #24]
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_MspInit+0x5c>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x5c>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_MspInit+0x5c>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_MspInit+0x5c>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_MspInit+0x60>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_MspInit+0x60>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000

08001464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <HAL_SPI_MspInit+0x88>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d12f      	bne.n	80014e4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_SPI_MspInit+0x8c>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_SPI_MspInit+0x8c>)
 800148a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_SPI_MspInit+0x8c>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_SPI_MspInit+0x8c>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <HAL_SPI_MspInit+0x8c>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_SPI_MspInit+0x8c>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014b4:	23a0      	movs	r3, #160	; 0xa0
 80014b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	480b      	ldr	r0, [pc, #44]	; (80014f4 <HAL_SPI_MspInit+0x90>)
 80014c8:	f000 fade 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014cc:	2340      	movs	r3, #64	; 0x40
 80014ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <HAL_SPI_MspInit+0x90>)
 80014e0:	f000 fad2 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40013000 	.word	0x40013000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <HAL_UART_MspInit+0x88>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d12f      	bne.n	8001578 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_UART_MspInit+0x8c>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_UART_MspInit+0x8c>)
 800151e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001522:	61d3      	str	r3, [r2, #28]
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_UART_MspInit+0x8c>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_MspInit+0x8c>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_UART_MspInit+0x8c>)
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_UART_MspInit+0x8c>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001548:	2304      	movs	r3, #4
 800154a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4619      	mov	r1, r3
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <HAL_UART_MspInit+0x90>)
 800155c:	f000 fa94 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001560:	2308      	movs	r3, #8
 8001562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4619      	mov	r1, r3
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_UART_MspInit+0x90>)
 8001574:	f000 fa88 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40004400 	.word	0x40004400
 8001584:	40021000 	.word	0x40021000
 8001588:	40010800 	.word	0x40010800

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d2:	f000 f935 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}

080015da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
	return 1;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <_kill>:

int _kill(int pid, int sig)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015f2:	f001 fc83 	bl	8002efc <__errno>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2216      	movs	r2, #22
 80015fa:	601a      	str	r2, [r3, #0]
	return -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_exit>:

void _exit (int status)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ffe7 	bl	80015e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800161a:	e7fe      	b.n	800161a <_exit+0x12>

0800161c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e00a      	b.n	8001644 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800162e:	f3af 8000 	nop.w
 8001632:	4601      	mov	r1, r0
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	60ba      	str	r2, [r7, #8]
 800163a:	b2ca      	uxtb	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf0      	blt.n	800162e <_read+0x12>
	}

return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e009      	b.n	800167c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf1      	blt.n	8001668 <_write+0x12>
	}
	return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_close>:

int _close(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	return -1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b4:	605a      	str	r2, [r3, #4]
	return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <_isatty>:

int _isatty(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	return 1;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
	return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
	...

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f001 fbec 	bl	8002efc <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20005000 	.word	0x20005000
 8001750:	00000400 	.word	0x00000400
 8001754:	200002dc 	.word	0x200002dc
 8001758:	200002f8 	.word	0x200002f8

0800175c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001780:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800178e:	f7ff ffe5 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001792:	f001 fbb9 	bl	8002f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001796:	f7ff fa1f 	bl	8000bd8 <main>
  bx lr
 800179a:	4770      	bx	lr
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80017a4:	08007cdc 	.word	0x08007cdc
  ldr r2, =_sbss
 80017a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80017ac:	200002f4 	.word	0x200002f4

080017b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC1_2_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x28>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x28>)
 80017be:	f043 0310 	orr.w	r3, r3, #16
 80017c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f92b 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe16 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f935 	bl	8001a6e <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f90b 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000008 	.word	0x20000008
 8001838:	20000010 	.word	0x20000010
 800183c:	2000000c 	.word	0x2000000c

08001840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_IncTick+0x1c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_IncTick+0x20>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a03      	ldr	r2, [pc, #12]	; (8001860 <HAL_IncTick+0x20>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000010 	.word	0x20000010
 8001860:	200002e0 	.word	0x200002e0

08001864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b02      	ldr	r3, [pc, #8]	; (8001874 <HAL_GetTick+0x10>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	200002e0 	.word	0x200002e0

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff fff0 	bl	8001864 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffe0 	bl	8001864 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000010 	.word	0x20000010

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff90 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff49 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff5e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff90 	bl	8001978 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5f 	bl	8001924 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffb0 	bl	80019dc <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b08b      	sub	sp, #44	; 0x2c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9a:	e169      	b.n	8001d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f040 8158 	bne.w	8001d6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4a9a      	ldr	r2, [pc, #616]	; (8001d28 <HAL_GPIO_Init+0x2a0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d05e      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a98      	ldr	r2, [pc, #608]	; (8001d28 <HAL_GPIO_Init+0x2a0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d875      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001aca:	4a98      	ldr	r2, [pc, #608]	; (8001d2c <HAL_GPIO_Init+0x2a4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d058      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001ad0:	4a96      	ldr	r2, [pc, #600]	; (8001d2c <HAL_GPIO_Init+0x2a4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d86f      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001ad6:	4a96      	ldr	r2, [pc, #600]	; (8001d30 <HAL_GPIO_Init+0x2a8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d052      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001adc:	4a94      	ldr	r2, [pc, #592]	; (8001d30 <HAL_GPIO_Init+0x2a8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d869      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001ae2:	4a94      	ldr	r2, [pc, #592]	; (8001d34 <HAL_GPIO_Init+0x2ac>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d04c      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001ae8:	4a92      	ldr	r2, [pc, #584]	; (8001d34 <HAL_GPIO_Init+0x2ac>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d863      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001aee:	4a92      	ldr	r2, [pc, #584]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d046      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001af4:	4a90      	ldr	r2, [pc, #576]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d85d      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	d82a      	bhi.n	8001b54 <HAL_GPIO_Init+0xcc>
 8001afe:	2b12      	cmp	r3, #18
 8001b00:	d859      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001b02:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <HAL_GPIO_Init+0x80>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b83 	.word	0x08001b83
 8001b0c:	08001b5d 	.word	0x08001b5d
 8001b10:	08001b6f 	.word	0x08001b6f
 8001b14:	08001bb1 	.word	0x08001bb1
 8001b18:	08001bb7 	.word	0x08001bb7
 8001b1c:	08001bb7 	.word	0x08001bb7
 8001b20:	08001bb7 	.word	0x08001bb7
 8001b24:	08001bb7 	.word	0x08001bb7
 8001b28:	08001bb7 	.word	0x08001bb7
 8001b2c:	08001bb7 	.word	0x08001bb7
 8001b30:	08001bb7 	.word	0x08001bb7
 8001b34:	08001bb7 	.word	0x08001bb7
 8001b38:	08001bb7 	.word	0x08001bb7
 8001b3c:	08001bb7 	.word	0x08001bb7
 8001b40:	08001bb7 	.word	0x08001bb7
 8001b44:	08001bb7 	.word	0x08001bb7
 8001b48:	08001bb7 	.word	0x08001bb7
 8001b4c:	08001b65 	.word	0x08001b65
 8001b50:	08001b79 	.word	0x08001b79
 8001b54:	4a79      	ldr	r2, [pc, #484]	; (8001d3c <HAL_GPIO_Init+0x2b4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b5a:	e02c      	b.n	8001bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e029      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e024      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	3308      	adds	r3, #8
 8001b74:	623b      	str	r3, [r7, #32]
          break;
 8001b76:	e01f      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e01a      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e013      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	611a      	str	r2, [r3, #16]
          break;
 8001ba2:	e009      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	615a      	str	r2, [r3, #20]
          break;
 8001bae:	e003      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
          break;
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          break;
 8001bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d801      	bhi.n	8001bc2 <HAL_GPIO_Init+0x13a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	e001      	b.n	8001bc6 <HAL_GPIO_Init+0x13e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d802      	bhi.n	8001bd4 <HAL_GPIO_Init+0x14c>
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	e002      	b.n	8001bda <HAL_GPIO_Init+0x152>
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	3b08      	subs	r3, #8
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	210f      	movs	r1, #15
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	401a      	ands	r2, r3
 8001bec:	6a39      	ldr	r1, [r7, #32]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80b1 	beq.w	8001d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c08:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c20:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_GPIO_Init+0x2bc>)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <HAL_GPIO_Init+0x2c0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d013      	beq.n	8001c74 <HAL_GPIO_Init+0x1ec>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a3f      	ldr	r2, [pc, #252]	; (8001d4c <HAL_GPIO_Init+0x2c4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00d      	beq.n	8001c70 <HAL_GPIO_Init+0x1e8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a3e      	ldr	r2, [pc, #248]	; (8001d50 <HAL_GPIO_Init+0x2c8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d007      	beq.n	8001c6c <HAL_GPIO_Init+0x1e4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a3d      	ldr	r2, [pc, #244]	; (8001d54 <HAL_GPIO_Init+0x2cc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_GPIO_Init+0x1e0>
 8001c64:	2303      	movs	r3, #3
 8001c66:	e006      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e004      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c74:	2300      	movs	r3, #0
 8001c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c78:	f002 0203 	and.w	r2, r2, #3
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c86:	492f      	ldr	r1, [pc, #188]	; (8001d44 <HAL_GPIO_Init+0x2bc>)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	492c      	ldr	r1, [pc, #176]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	4928      	ldr	r1, [pc, #160]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4922      	ldr	r1, [pc, #136]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	491e      	ldr	r1, [pc, #120]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	4918      	ldr	r1, [pc, #96]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	4914      	ldr	r1, [pc, #80]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d021      	beq.n	8001d5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60cb      	str	r3, [r1, #12]
 8001d24:	e021      	b.n	8001d6a <HAL_GPIO_Init+0x2e2>
 8001d26:	bf00      	nop
 8001d28:	10320000 	.word	0x10320000
 8001d2c:	10310000 	.word	0x10310000
 8001d30:	10220000 	.word	0x10220000
 8001d34:	10210000 	.word	0x10210000
 8001d38:	10120000 	.word	0x10120000
 8001d3c:	10110000 	.word	0x10110000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	40010c00 	.word	0x40010c00
 8001d50:	40011000 	.word	0x40011000
 8001d54:	40011400 	.word	0x40011400
 8001d58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	4909      	ldr	r1, [pc, #36]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f47f ae8e 	bne.w	8001a9c <HAL_GPIO_Init+0x14>
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	372c      	adds	r7, #44	; 0x2c
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e272      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8087 	beq.w	8001eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de0:	4b92      	ldr	r3, [pc, #584]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d00c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dec:	4b8f      	ldr	r3, [pc, #572]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d112      	bne.n	8001e1e <HAL_RCC_OscConfig+0x5e>
 8001df8:	4b8c      	ldr	r3, [pc, #560]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d10b      	bne.n	8001e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	4b89      	ldr	r3, [pc, #548]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d06c      	beq.n	8001eec <HAL_RCC_OscConfig+0x12c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d168      	bne.n	8001eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e24c      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x76>
 8001e28:	4b80      	ldr	r3, [pc, #512]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a7f      	ldr	r2, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e02e      	b.n	8001e94 <HAL_RCC_OscConfig+0xd4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x98>
 8001e3e:	4b7b      	ldr	r3, [pc, #492]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7a      	ldr	r2, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b78      	ldr	r3, [pc, #480]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a77      	ldr	r2, [pc, #476]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0xd4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0xbc>
 8001e62:	4b72      	ldr	r3, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a71      	ldr	r2, [pc, #452]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6e      	ldr	r2, [pc, #440]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xd4>
 8001e7c:	4b6b      	ldr	r3, [pc, #428]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a6a      	ldr	r2, [pc, #424]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b68      	ldr	r3, [pc, #416]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a67      	ldr	r2, [pc, #412]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fce2 	bl	8001864 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fcde 	bl	8001864 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e200      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe4>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fcce 	bl	8001864 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fcca 	bl	8001864 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1ec      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x10c>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d063      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efa:	4b4c      	ldr	r3, [pc, #304]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f06:	4b49      	ldr	r3, [pc, #292]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d11c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x18c>
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d116      	bne.n	8001f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	4b43      	ldr	r3, [pc, #268]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x176>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1c0      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4939      	ldr	r1, [pc, #228]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	e03a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f54:	4b36      	ldr	r3, [pc, #216]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fc83 	bl	8001864 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f62:	f7ff fc7f 	bl	8001864 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1a1      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4927      	ldr	r1, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fc62 	bl	8001864 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fc5e 	bl	8001864 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e180      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03a      	beq.n	8002044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d019      	beq.n	800200a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fc42 	bl	8001864 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fc3e 	bl	8001864 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e160      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002002:	2001      	movs	r0, #1
 8002004:	f000 fad8 	bl	80025b8 <RCC_Delay>
 8002008:	e01c      	b.n	8002044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff fc28 	bl	8001864 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002016:	e00f      	b.n	8002038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002018:	f7ff fc24 	bl	8001864 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d908      	bls.n	8002038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e146      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	42420000 	.word	0x42420000
 8002034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	4b92      	ldr	r3, [pc, #584]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e9      	bne.n	8002018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80a6 	beq.w	800219e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b8b      	ldr	r3, [pc, #556]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10d      	bne.n	800207e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b88      	ldr	r3, [pc, #544]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a87      	ldr	r2, [pc, #540]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b85      	ldr	r3, [pc, #532]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	4b82      	ldr	r3, [pc, #520]	; (8002288 <HAL_RCC_OscConfig+0x4c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d118      	bne.n	80020bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208a:	4b7f      	ldr	r3, [pc, #508]	; (8002288 <HAL_RCC_OscConfig+0x4c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7e      	ldr	r2, [pc, #504]	; (8002288 <HAL_RCC_OscConfig+0x4c8>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002096:	f7ff fbe5 	bl	8001864 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209e:	f7ff fbe1 	bl	8001864 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b64      	cmp	r3, #100	; 0x64
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e103      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	4b75      	ldr	r3, [pc, #468]	; (8002288 <HAL_RCC_OscConfig+0x4c8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x312>
 80020c4:	4b6f      	ldr	r3, [pc, #444]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a6e      	ldr	r2, [pc, #440]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	e02d      	b.n	800212e <HAL_RCC_OscConfig+0x36e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x334>
 80020da:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a69      	ldr	r2, [pc, #420]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	4b67      	ldr	r3, [pc, #412]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4a66      	ldr	r2, [pc, #408]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6213      	str	r3, [r2, #32]
 80020f2:	e01c      	b.n	800212e <HAL_RCC_OscConfig+0x36e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d10c      	bne.n	8002116 <HAL_RCC_OscConfig+0x356>
 80020fc:	4b61      	ldr	r3, [pc, #388]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a60      	ldr	r2, [pc, #384]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	4b5e      	ldr	r3, [pc, #376]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4a5d      	ldr	r2, [pc, #372]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	e00b      	b.n	800212e <HAL_RCC_OscConfig+0x36e>
 8002116:	4b5b      	ldr	r3, [pc, #364]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a5a      	ldr	r2, [pc, #360]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4b58      	ldr	r3, [pc, #352]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a57      	ldr	r2, [pc, #348]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d015      	beq.n	8002162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002136:	f7ff fb95 	bl	8001864 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff fb91 	bl	8001864 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	; 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0b1      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ee      	beq.n	800213e <HAL_RCC_OscConfig+0x37e>
 8002160:	e014      	b.n	800218c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7ff fb7f 	bl	8001864 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7ff fb7b 	bl	8001864 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e09b      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002180:	4b40      	ldr	r3, [pc, #256]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ee      	bne.n	800216a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d105      	bne.n	800219e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002192:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a3b      	ldr	r2, [pc, #236]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8087 	beq.w	80022b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d061      	beq.n	8002278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d146      	bne.n	800224a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <HAL_RCC_OscConfig+0x4cc>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff fb4f 	bl	8001864 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff fb4b 	bl	8001864 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e06d      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f0      	bne.n	80021ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f0:	d108      	bne.n	8002204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4921      	ldr	r1, [pc, #132]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a19      	ldr	r1, [r3, #32]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	430b      	orrs	r3, r1
 8002216:	491b      	ldr	r1, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x4cc>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff fb1f 	bl	8001864 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff fb1b 	bl	8001864 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e03d      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x46a>
 8002248:	e035      	b.n	80022b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_RCC_OscConfig+0x4cc>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff fb08 	bl	8001864 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7ff fb04 	bl	8001864 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e026      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x498>
 8002276:	e01e      	b.n	80022b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d107      	bne.n	8002290 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e019      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
 8002284:	40021000 	.word	0x40021000
 8002288:	40007000 	.word	0x40007000
 800228c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x500>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0d0      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d910      	bls.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b67      	ldr	r3, [pc, #412]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0207 	bic.w	r2, r3, #7
 80022ee:	4965      	ldr	r1, [pc, #404]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0b8      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002320:	4b59      	ldr	r3, [pc, #356]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800232a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002338:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a52      	ldr	r2, [pc, #328]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	494d      	ldr	r1, [pc, #308]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d040      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d115      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e07f      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002382:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e073      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06b      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4936      	ldr	r1, [pc, #216]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b4:	f7ff fa56 	bl	8001864 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7ff fa52 	bl	8001864 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e053      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 020c 	and.w	r2, r3, #12
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1eb      	bne.n	80023bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d210      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4922      	ldr	r1, [pc, #136]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e032      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4916      	ldr	r1, [pc, #88]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	490e      	ldr	r1, [pc, #56]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002452:	f000 f821 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8002456:	4602      	mov	r2, r0
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	490a      	ldr	r1, [pc, #40]	; (800248c <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	5ccb      	ldrb	r3, [r1, r3]
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1cc>)
 800246c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1d0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f9b4 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000
 8002488:	40021000 	.word	0x40021000
 800248c:	08007818 	.word	0x08007818
 8002490:	20000008 	.word	0x20000008
 8002494:	2000000c 	.word	0x2000000c

08002498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b490      	push	{r4, r7}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800249e:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_RCC_GetSysClockFreq+0xac>)
 80024a0:	1d3c      	adds	r4, r7, #4
 80024a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024a8:	f240 2301 	movw	r3, #513	; 0x201
 80024ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x40>
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x46>
 80024d6:	e02b      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_RCC_GetSysClockFreq+0xb4>)
 80024da:	623b      	str	r3, [r7, #32]
      break;
 80024dc:	e02b      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3328      	adds	r3, #40	; 0x28
 80024e8:	443b      	add	r3, r7
 80024ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d012      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0c5b      	lsrs	r3, r3, #17
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	3328      	adds	r3, #40	; 0x28
 8002506:	443b      	add	r3, r7
 8002508:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800250c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	4a0e      	ldr	r2, [pc, #56]	; (800254c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002512:	fb03 f202 	mul.w	r2, r3, r2
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
 800251e:	e004      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	623b      	str	r3, [r7, #32]
      break;
 800252e:	e002      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002532:	623b      	str	r3, [r7, #32]
      break;
 8002534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002536:	6a3b      	ldr	r3, [r7, #32]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3728      	adds	r7, #40	; 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bc90      	pop	{r4, r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	08007808 	.word	0x08007808
 8002548:	40021000 	.word	0x40021000
 800254c:	007a1200 	.word	0x007a1200
 8002550:	003d0900 	.word	0x003d0900

08002554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002558:	4b02      	ldr	r3, [pc, #8]	; (8002564 <HAL_RCC_GetHCLKFreq+0x10>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000008 	.word	0x20000008

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800256c:	f7ff fff2 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	08007828 	.word	0x08007828

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffde 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0adb      	lsrs	r3, r3, #11
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08007828 	.word	0x08007828

080025b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <RCC_Delay+0x34>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <RCC_Delay+0x38>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a5b      	lsrs	r3, r3, #9
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025d4:	bf00      	nop
  }
  while (Delay --);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	60fa      	str	r2, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <RCC_Delay+0x1c>
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000008 	.word	0x20000008
 80025f0:	10624dd3 	.word	0x10624dd3

080025f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e076      	b.n	80026f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d108      	bne.n	8002620 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002616:	d009      	beq.n	800262c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
 800261e:	e005      	b.n	800262c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe ff0c 	bl	8001464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002662:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	ea42 0103 	orr.w	r1, r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	0c1a      	lsrs	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f002 0204 	and.w	r2, r2, #4
 80026d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800270a:	2301      	movs	r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x26>
 800271e:	2302      	movs	r3, #2
 8002720:	e18a      	b.n	8002a38 <HAL_SPI_TransmitReceive+0x33c>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800272a:	f7ff f89b 	bl	8001864 <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002748:	2b01      	cmp	r3, #1
 800274a:	d00f      	beq.n	800276c <HAL_SPI_TransmitReceive+0x70>
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002752:	d107      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x68>
 800275c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002760:	2b04      	cmp	r3, #4
 8002762:	d003      	beq.n	800276c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002764:	2302      	movs	r3, #2
 8002766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800276a:	e15b      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_SPI_TransmitReceive+0x82>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_SPI_TransmitReceive+0x82>
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002784:	e14e      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b04      	cmp	r3, #4
 8002790:	d003      	beq.n	800279a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2205      	movs	r2, #5
 8002796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	887a      	ldrh	r2, [r7, #2]
 80027aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	887a      	ldrh	r2, [r7, #2]
 80027c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d007      	beq.n	80027ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f6:	d178      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <HAL_SPI_TransmitReceive+0x10a>
 8002800:	8b7b      	ldrh	r3, [r7, #26]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d166      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	881a      	ldrh	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	1c9a      	adds	r2, r3, #2
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282a:	e053      	b.n	80028d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d11b      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x176>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d016      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x176>
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d113      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	1c9a      	adds	r2, r3, #2
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d119      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x1b8>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d014      	beq.n	80028b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	b292      	uxth	r2, r2
 8002896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	1c9a      	adds	r2, r3, #2
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028b0:	2301      	movs	r3, #1
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028b4:	f7fe ffd6 	bl	8001864 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d807      	bhi.n	80028d4 <HAL_SPI_TransmitReceive+0x1d8>
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d003      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028d2:	e0a7      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1a6      	bne.n	800282c <HAL_SPI_TransmitReceive+0x130>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1a1      	bne.n	800282c <HAL_SPI_TransmitReceive+0x130>
 80028e8:	e07c      	b.n	80029e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x1fc>
 80028f2:	8b7b      	ldrh	r3, [r7, #26]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d16b      	bne.n	80029d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800291e:	e057      	b.n	80029d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	d11c      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x26c>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x26c>
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d114      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d119      	bne.n	80029aa <HAL_SPI_TransmitReceive+0x2ae>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d014      	beq.n	80029aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029a6:	2301      	movs	r3, #1
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029aa:	f7fe ff5b 	bl	8001864 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d803      	bhi.n	80029c2 <HAL_SPI_TransmitReceive+0x2c6>
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d102      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x2cc>
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029ce:	e029      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1a2      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x224>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d19d      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f8b1 	bl	8002b50 <SPI_EndRxTxTransaction>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a00:	e010      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	e000      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	; 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a50:	f7fe ff08 	bl	8001864 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a60:	f7fe ff00 	bl	8001864 <HAL_GetTick>
 8002a64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a66:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	015b      	lsls	r3, r3, #5
 8002a6c:	0d1b      	lsrs	r3, r3, #20
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a76:	e054      	b.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d050      	beq.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a80:	f7fe fef0 	bl	8001864 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d902      	bls.n	8002a96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d13d      	bne.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002aa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aae:	d111      	bne.n	8002ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab8:	d004      	beq.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac2:	d107      	bne.n	8002ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002adc:	d10f      	bne.n	8002afe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002afc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e017      	b.n	8002b42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d19b      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000008 	.word	0x20000008

08002b50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff ff6a 	bl	8002a40 <SPI_WaitFlagStateUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e000      	b.n	8002b84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e03f      	b.n	8002c1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe fca0 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f905 	bl	8002de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08a      	sub	sp, #40	; 0x28
 8002c2a:	af02      	add	r7, sp, #8
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d17c      	bne.n	8002d40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_UART_Transmit+0x2c>
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e075      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_UART_Transmit+0x3e>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e06e      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2221      	movs	r2, #33	; 0x21
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c7a:	f7fe fdf3 	bl	8001864 <HAL_GetTick>
 8002c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c94:	d108      	bne.n	8002ca8 <HAL_UART_Transmit+0x82>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e003      	b.n	8002cb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cb8:	e02a      	b.n	8002d10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f840 	bl	8002d4a <UART_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e036      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	3302      	adds	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	e007      	b.n	8002d02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1cf      	bne.n	8002cba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2200      	movs	r2, #0
 8002d22:	2140      	movs	r1, #64	; 0x40
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f810 	bl	8002d4a <UART_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e006      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5a:	e02c      	b.n	8002db6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d028      	beq.n	8002db6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d6a:	f7fe fd7b 	bl	8001864 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d21d      	bcs.n	8002db6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e00f      	b.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d0c3      	beq.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e1a:	f023 030c 	bic.w	r3, r3, #12
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <UART_SetConfig+0x114>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d103      	bne.n	8002e50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e48:	f7ff fba2 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	e002      	b.n	8002e56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e50:	f7ff fb8a 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8002e54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009a      	lsls	r2, r3, #2
 8002e60:	441a      	add	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <UART_SetConfig+0x118>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	0119      	lsls	r1, r3, #4
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <UART_SetConfig+0x118>)
 8002e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2064      	movs	r0, #100	; 0x64
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	3332      	adds	r3, #50	; 0x32
 8002ea0:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <UART_SetConfig+0x118>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eac:	4419      	add	r1, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <UART_SetConfig+0x118>)
 8002ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2064      	movs	r0, #100	; 0x64
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	3332      	adds	r3, #50	; 0x32
 8002ed8:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <UART_SetConfig+0x118>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	440a      	add	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40013800 	.word	0x40013800
 8002ef8:	51eb851f 	.word	0x51eb851f

08002efc <__errno>:
 8002efc:	4b01      	ldr	r3, [pc, #4]	; (8002f04 <__errno+0x8>)
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000014 	.word	0x20000014

08002f08 <__libc_init_array>:
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	2600      	movs	r6, #0
 8002f0c:	4d0c      	ldr	r5, [pc, #48]	; (8002f40 <__libc_init_array+0x38>)
 8002f0e:	4c0d      	ldr	r4, [pc, #52]	; (8002f44 <__libc_init_array+0x3c>)
 8002f10:	1b64      	subs	r4, r4, r5
 8002f12:	10a4      	asrs	r4, r4, #2
 8002f14:	42a6      	cmp	r6, r4
 8002f16:	d109      	bne.n	8002f2c <__libc_init_array+0x24>
 8002f18:	f004 fc50 	bl	80077bc <_init>
 8002f1c:	2600      	movs	r6, #0
 8002f1e:	4d0a      	ldr	r5, [pc, #40]	; (8002f48 <__libc_init_array+0x40>)
 8002f20:	4c0a      	ldr	r4, [pc, #40]	; (8002f4c <__libc_init_array+0x44>)
 8002f22:	1b64      	subs	r4, r4, r5
 8002f24:	10a4      	asrs	r4, r4, #2
 8002f26:	42a6      	cmp	r6, r4
 8002f28:	d105      	bne.n	8002f36 <__libc_init_array+0x2e>
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f30:	4798      	blx	r3
 8002f32:	3601      	adds	r6, #1
 8002f34:	e7ee      	b.n	8002f14 <__libc_init_array+0xc>
 8002f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f3a:	4798      	blx	r3
 8002f3c:	3601      	adds	r6, #1
 8002f3e:	e7f2      	b.n	8002f26 <__libc_init_array+0x1e>
 8002f40:	08007cd4 	.word	0x08007cd4
 8002f44:	08007cd4 	.word	0x08007cd4
 8002f48:	08007cd4 	.word	0x08007cd4
 8002f4c:	08007cd8 	.word	0x08007cd8

08002f50 <memset>:
 8002f50:	4603      	mov	r3, r0
 8002f52:	4402      	add	r2, r0
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d100      	bne.n	8002f5a <memset+0xa>
 8002f58:	4770      	bx	lr
 8002f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f5e:	e7f9      	b.n	8002f54 <memset+0x4>

08002f60 <__cvt>:
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f66:	461f      	mov	r7, r3
 8002f68:	bfbb      	ittet	lt
 8002f6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002f6e:	461f      	movlt	r7, r3
 8002f70:	2300      	movge	r3, #0
 8002f72:	232d      	movlt	r3, #45	; 0x2d
 8002f74:	b088      	sub	sp, #32
 8002f76:	4614      	mov	r4, r2
 8002f78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002f7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002f7c:	7013      	strb	r3, [r2, #0]
 8002f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002f80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002f84:	f023 0820 	bic.w	r8, r3, #32
 8002f88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f8c:	d005      	beq.n	8002f9a <__cvt+0x3a>
 8002f8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002f92:	d100      	bne.n	8002f96 <__cvt+0x36>
 8002f94:	3501      	adds	r5, #1
 8002f96:	2302      	movs	r3, #2
 8002f98:	e000      	b.n	8002f9c <__cvt+0x3c>
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	aa07      	add	r2, sp, #28
 8002f9e:	9204      	str	r2, [sp, #16]
 8002fa0:	aa06      	add	r2, sp, #24
 8002fa2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002fa6:	e9cd 3500 	strd	r3, r5, [sp]
 8002faa:	4622      	mov	r2, r4
 8002fac:	463b      	mov	r3, r7
 8002fae:	f001 fd83 	bl	8004ab8 <_dtoa_r>
 8002fb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002fb6:	4606      	mov	r6, r0
 8002fb8:	d102      	bne.n	8002fc0 <__cvt+0x60>
 8002fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fbc:	07db      	lsls	r3, r3, #31
 8002fbe:	d522      	bpl.n	8003006 <__cvt+0xa6>
 8002fc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002fc4:	eb06 0905 	add.w	r9, r6, r5
 8002fc8:	d110      	bne.n	8002fec <__cvt+0x8c>
 8002fca:	7833      	ldrb	r3, [r6, #0]
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d10a      	bne.n	8002fe6 <__cvt+0x86>
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	4639      	mov	r1, r7
 8002fd8:	f7fd fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8002fdc:	b918      	cbnz	r0, 8002fe6 <__cvt+0x86>
 8002fde:	f1c5 0501 	rsb	r5, r5, #1
 8002fe2:	f8ca 5000 	str.w	r5, [sl]
 8002fe6:	f8da 3000 	ldr.w	r3, [sl]
 8002fea:	4499      	add	r9, r3
 8002fec:	2200      	movs	r2, #0
 8002fee:	2300      	movs	r3, #0
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	4639      	mov	r1, r7
 8002ff4:	f7fd fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8002ff8:	b108      	cbz	r0, 8002ffe <__cvt+0x9e>
 8002ffa:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ffe:	2230      	movs	r2, #48	; 0x30
 8003000:	9b07      	ldr	r3, [sp, #28]
 8003002:	454b      	cmp	r3, r9
 8003004:	d307      	bcc.n	8003016 <__cvt+0xb6>
 8003006:	4630      	mov	r0, r6
 8003008:	9b07      	ldr	r3, [sp, #28]
 800300a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800300c:	1b9b      	subs	r3, r3, r6
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	b008      	add	sp, #32
 8003012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	9107      	str	r1, [sp, #28]
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e7f0      	b.n	8003000 <__cvt+0xa0>

0800301e <__exponent>:
 800301e:	4603      	mov	r3, r0
 8003020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003022:	2900      	cmp	r1, #0
 8003024:	f803 2b02 	strb.w	r2, [r3], #2
 8003028:	bfb6      	itet	lt
 800302a:	222d      	movlt	r2, #45	; 0x2d
 800302c:	222b      	movge	r2, #43	; 0x2b
 800302e:	4249      	neglt	r1, r1
 8003030:	2909      	cmp	r1, #9
 8003032:	7042      	strb	r2, [r0, #1]
 8003034:	dd2b      	ble.n	800308e <__exponent+0x70>
 8003036:	f10d 0407 	add.w	r4, sp, #7
 800303a:	46a4      	mov	ip, r4
 800303c:	270a      	movs	r7, #10
 800303e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003042:	460a      	mov	r2, r1
 8003044:	46a6      	mov	lr, r4
 8003046:	fb07 1516 	mls	r5, r7, r6, r1
 800304a:	2a63      	cmp	r2, #99	; 0x63
 800304c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003050:	4631      	mov	r1, r6
 8003052:	f104 34ff 	add.w	r4, r4, #4294967295
 8003056:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800305a:	dcf0      	bgt.n	800303e <__exponent+0x20>
 800305c:	3130      	adds	r1, #48	; 0x30
 800305e:	f1ae 0502 	sub.w	r5, lr, #2
 8003062:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003066:	4629      	mov	r1, r5
 8003068:	1c44      	adds	r4, r0, #1
 800306a:	4561      	cmp	r1, ip
 800306c:	d30a      	bcc.n	8003084 <__exponent+0x66>
 800306e:	f10d 0209 	add.w	r2, sp, #9
 8003072:	eba2 020e 	sub.w	r2, r2, lr
 8003076:	4565      	cmp	r5, ip
 8003078:	bf88      	it	hi
 800307a:	2200      	movhi	r2, #0
 800307c:	4413      	add	r3, r2
 800307e:	1a18      	subs	r0, r3, r0
 8003080:	b003      	add	sp, #12
 8003082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003084:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003088:	f804 2f01 	strb.w	r2, [r4, #1]!
 800308c:	e7ed      	b.n	800306a <__exponent+0x4c>
 800308e:	2330      	movs	r3, #48	; 0x30
 8003090:	3130      	adds	r1, #48	; 0x30
 8003092:	7083      	strb	r3, [r0, #2]
 8003094:	70c1      	strb	r1, [r0, #3]
 8003096:	1d03      	adds	r3, r0, #4
 8003098:	e7f1      	b.n	800307e <__exponent+0x60>
	...

0800309c <_printf_float>:
 800309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a0:	b091      	sub	sp, #68	; 0x44
 80030a2:	460c      	mov	r4, r1
 80030a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80030a8:	4616      	mov	r6, r2
 80030aa:	461f      	mov	r7, r3
 80030ac:	4605      	mov	r5, r0
 80030ae:	f002 fe57 	bl	8005d60 <_localeconv_r>
 80030b2:	6803      	ldr	r3, [r0, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	9309      	str	r3, [sp, #36]	; 0x24
 80030b8:	f7fd f84a 	bl	8000150 <strlen>
 80030bc:	2300      	movs	r3, #0
 80030be:	930e      	str	r3, [sp, #56]	; 0x38
 80030c0:	f8d8 3000 	ldr.w	r3, [r8]
 80030c4:	900a      	str	r0, [sp, #40]	; 0x28
 80030c6:	3307      	adds	r3, #7
 80030c8:	f023 0307 	bic.w	r3, r3, #7
 80030cc:	f103 0208 	add.w	r2, r3, #8
 80030d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80030d4:	f8d4 b000 	ldr.w	fp, [r4]
 80030d8:	f8c8 2000 	str.w	r2, [r8]
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80030e4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80030e8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80030ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80030ee:	f04f 32ff 	mov.w	r2, #4294967295
 80030f2:	4640      	mov	r0, r8
 80030f4:	4b9c      	ldr	r3, [pc, #624]	; (8003368 <_printf_float+0x2cc>)
 80030f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030f8:	f7fd fc88 	bl	8000a0c <__aeabi_dcmpun>
 80030fc:	bb70      	cbnz	r0, 800315c <_printf_float+0xc0>
 80030fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003102:	4640      	mov	r0, r8
 8003104:	4b98      	ldr	r3, [pc, #608]	; (8003368 <_printf_float+0x2cc>)
 8003106:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003108:	f7fd fc62 	bl	80009d0 <__aeabi_dcmple>
 800310c:	bb30      	cbnz	r0, 800315c <_printf_float+0xc0>
 800310e:	2200      	movs	r2, #0
 8003110:	2300      	movs	r3, #0
 8003112:	4640      	mov	r0, r8
 8003114:	4651      	mov	r1, sl
 8003116:	f7fd fc51 	bl	80009bc <__aeabi_dcmplt>
 800311a:	b110      	cbz	r0, 8003122 <_printf_float+0x86>
 800311c:	232d      	movs	r3, #45	; 0x2d
 800311e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003122:	4b92      	ldr	r3, [pc, #584]	; (800336c <_printf_float+0x2d0>)
 8003124:	4892      	ldr	r0, [pc, #584]	; (8003370 <_printf_float+0x2d4>)
 8003126:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800312a:	bf94      	ite	ls
 800312c:	4698      	movls	r8, r3
 800312e:	4680      	movhi	r8, r0
 8003130:	2303      	movs	r3, #3
 8003132:	f04f 0a00 	mov.w	sl, #0
 8003136:	6123      	str	r3, [r4, #16]
 8003138:	f02b 0304 	bic.w	r3, fp, #4
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	4633      	mov	r3, r6
 8003140:	4621      	mov	r1, r4
 8003142:	4628      	mov	r0, r5
 8003144:	9700      	str	r7, [sp, #0]
 8003146:	aa0f      	add	r2, sp, #60	; 0x3c
 8003148:	f000 f9d4 	bl	80034f4 <_printf_common>
 800314c:	3001      	adds	r0, #1
 800314e:	f040 8090 	bne.w	8003272 <_printf_float+0x1d6>
 8003152:	f04f 30ff 	mov.w	r0, #4294967295
 8003156:	b011      	add	sp, #68	; 0x44
 8003158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800315c:	4642      	mov	r2, r8
 800315e:	4653      	mov	r3, sl
 8003160:	4640      	mov	r0, r8
 8003162:	4651      	mov	r1, sl
 8003164:	f7fd fc52 	bl	8000a0c <__aeabi_dcmpun>
 8003168:	b148      	cbz	r0, 800317e <_printf_float+0xe2>
 800316a:	f1ba 0f00 	cmp.w	sl, #0
 800316e:	bfb8      	it	lt
 8003170:	232d      	movlt	r3, #45	; 0x2d
 8003172:	4880      	ldr	r0, [pc, #512]	; (8003374 <_printf_float+0x2d8>)
 8003174:	bfb8      	it	lt
 8003176:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800317a:	4b7f      	ldr	r3, [pc, #508]	; (8003378 <_printf_float+0x2dc>)
 800317c:	e7d3      	b.n	8003126 <_printf_float+0x8a>
 800317e:	6863      	ldr	r3, [r4, #4]
 8003180:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	d142      	bne.n	800320e <_printf_float+0x172>
 8003188:	2306      	movs	r3, #6
 800318a:	6063      	str	r3, [r4, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	9206      	str	r2, [sp, #24]
 8003190:	aa0e      	add	r2, sp, #56	; 0x38
 8003192:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003196:	aa0d      	add	r2, sp, #52	; 0x34
 8003198:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800319c:	9203      	str	r2, [sp, #12]
 800319e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80031a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80031a6:	6023      	str	r3, [r4, #0]
 80031a8:	6863      	ldr	r3, [r4, #4]
 80031aa:	4642      	mov	r2, r8
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	4628      	mov	r0, r5
 80031b0:	4653      	mov	r3, sl
 80031b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80031b4:	f7ff fed4 	bl	8002f60 <__cvt>
 80031b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031ba:	4680      	mov	r8, r0
 80031bc:	2947      	cmp	r1, #71	; 0x47
 80031be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80031c0:	d108      	bne.n	80031d4 <_printf_float+0x138>
 80031c2:	1cc8      	adds	r0, r1, #3
 80031c4:	db02      	blt.n	80031cc <_printf_float+0x130>
 80031c6:	6863      	ldr	r3, [r4, #4]
 80031c8:	4299      	cmp	r1, r3
 80031ca:	dd40      	ble.n	800324e <_printf_float+0x1b2>
 80031cc:	f1a9 0902 	sub.w	r9, r9, #2
 80031d0:	fa5f f989 	uxtb.w	r9, r9
 80031d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80031d8:	d81f      	bhi.n	800321a <_printf_float+0x17e>
 80031da:	464a      	mov	r2, r9
 80031dc:	3901      	subs	r1, #1
 80031de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80031e2:	910d      	str	r1, [sp, #52]	; 0x34
 80031e4:	f7ff ff1b 	bl	800301e <__exponent>
 80031e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031ea:	4682      	mov	sl, r0
 80031ec:	1813      	adds	r3, r2, r0
 80031ee:	2a01      	cmp	r2, #1
 80031f0:	6123      	str	r3, [r4, #16]
 80031f2:	dc02      	bgt.n	80031fa <_printf_float+0x15e>
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	07d2      	lsls	r2, r2, #31
 80031f8:	d501      	bpl.n	80031fe <_printf_float+0x162>
 80031fa:	3301      	adds	r3, #1
 80031fc:	6123      	str	r3, [r4, #16]
 80031fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003202:	2b00      	cmp	r3, #0
 8003204:	d09b      	beq.n	800313e <_printf_float+0xa2>
 8003206:	232d      	movs	r3, #45	; 0x2d
 8003208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800320c:	e797      	b.n	800313e <_printf_float+0xa2>
 800320e:	2947      	cmp	r1, #71	; 0x47
 8003210:	d1bc      	bne.n	800318c <_printf_float+0xf0>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ba      	bne.n	800318c <_printf_float+0xf0>
 8003216:	2301      	movs	r3, #1
 8003218:	e7b7      	b.n	800318a <_printf_float+0xee>
 800321a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800321e:	d118      	bne.n	8003252 <_printf_float+0x1b6>
 8003220:	2900      	cmp	r1, #0
 8003222:	6863      	ldr	r3, [r4, #4]
 8003224:	dd0b      	ble.n	800323e <_printf_float+0x1a2>
 8003226:	6121      	str	r1, [r4, #16]
 8003228:	b913      	cbnz	r3, 8003230 <_printf_float+0x194>
 800322a:	6822      	ldr	r2, [r4, #0]
 800322c:	07d0      	lsls	r0, r2, #31
 800322e:	d502      	bpl.n	8003236 <_printf_float+0x19a>
 8003230:	3301      	adds	r3, #1
 8003232:	440b      	add	r3, r1
 8003234:	6123      	str	r3, [r4, #16]
 8003236:	f04f 0a00 	mov.w	sl, #0
 800323a:	65a1      	str	r1, [r4, #88]	; 0x58
 800323c:	e7df      	b.n	80031fe <_printf_float+0x162>
 800323e:	b913      	cbnz	r3, 8003246 <_printf_float+0x1aa>
 8003240:	6822      	ldr	r2, [r4, #0]
 8003242:	07d2      	lsls	r2, r2, #31
 8003244:	d501      	bpl.n	800324a <_printf_float+0x1ae>
 8003246:	3302      	adds	r3, #2
 8003248:	e7f4      	b.n	8003234 <_printf_float+0x198>
 800324a:	2301      	movs	r3, #1
 800324c:	e7f2      	b.n	8003234 <_printf_float+0x198>
 800324e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003254:	4299      	cmp	r1, r3
 8003256:	db05      	blt.n	8003264 <_printf_float+0x1c8>
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	6121      	str	r1, [r4, #16]
 800325c:	07d8      	lsls	r0, r3, #31
 800325e:	d5ea      	bpl.n	8003236 <_printf_float+0x19a>
 8003260:	1c4b      	adds	r3, r1, #1
 8003262:	e7e7      	b.n	8003234 <_printf_float+0x198>
 8003264:	2900      	cmp	r1, #0
 8003266:	bfcc      	ite	gt
 8003268:	2201      	movgt	r2, #1
 800326a:	f1c1 0202 	rsble	r2, r1, #2
 800326e:	4413      	add	r3, r2
 8003270:	e7e0      	b.n	8003234 <_printf_float+0x198>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	055a      	lsls	r2, r3, #21
 8003276:	d407      	bmi.n	8003288 <_printf_float+0x1ec>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	4642      	mov	r2, r8
 800327c:	4631      	mov	r1, r6
 800327e:	4628      	mov	r0, r5
 8003280:	47b8      	blx	r7
 8003282:	3001      	adds	r0, #1
 8003284:	d12b      	bne.n	80032de <_printf_float+0x242>
 8003286:	e764      	b.n	8003152 <_printf_float+0xb6>
 8003288:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800328c:	f240 80dd 	bls.w	800344a <_printf_float+0x3ae>
 8003290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003294:	2200      	movs	r2, #0
 8003296:	2300      	movs	r3, #0
 8003298:	f7fd fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800329c:	2800      	cmp	r0, #0
 800329e:	d033      	beq.n	8003308 <_printf_float+0x26c>
 80032a0:	2301      	movs	r3, #1
 80032a2:	4631      	mov	r1, r6
 80032a4:	4628      	mov	r0, r5
 80032a6:	4a35      	ldr	r2, [pc, #212]	; (800337c <_printf_float+0x2e0>)
 80032a8:	47b8      	blx	r7
 80032aa:	3001      	adds	r0, #1
 80032ac:	f43f af51 	beq.w	8003152 <_printf_float+0xb6>
 80032b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032b4:	429a      	cmp	r2, r3
 80032b6:	db02      	blt.n	80032be <_printf_float+0x222>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	07d8      	lsls	r0, r3, #31
 80032bc:	d50f      	bpl.n	80032de <_printf_float+0x242>
 80032be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032c2:	4631      	mov	r1, r6
 80032c4:	4628      	mov	r0, r5
 80032c6:	47b8      	blx	r7
 80032c8:	3001      	adds	r0, #1
 80032ca:	f43f af42 	beq.w	8003152 <_printf_float+0xb6>
 80032ce:	f04f 0800 	mov.w	r8, #0
 80032d2:	f104 091a 	add.w	r9, r4, #26
 80032d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032d8:	3b01      	subs	r3, #1
 80032da:	4543      	cmp	r3, r8
 80032dc:	dc09      	bgt.n	80032f2 <_printf_float+0x256>
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	079b      	lsls	r3, r3, #30
 80032e2:	f100 8102 	bmi.w	80034ea <_printf_float+0x44e>
 80032e6:	68e0      	ldr	r0, [r4, #12]
 80032e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80032ea:	4298      	cmp	r0, r3
 80032ec:	bfb8      	it	lt
 80032ee:	4618      	movlt	r0, r3
 80032f0:	e731      	b.n	8003156 <_printf_float+0xba>
 80032f2:	2301      	movs	r3, #1
 80032f4:	464a      	mov	r2, r9
 80032f6:	4631      	mov	r1, r6
 80032f8:	4628      	mov	r0, r5
 80032fa:	47b8      	blx	r7
 80032fc:	3001      	adds	r0, #1
 80032fe:	f43f af28 	beq.w	8003152 <_printf_float+0xb6>
 8003302:	f108 0801 	add.w	r8, r8, #1
 8003306:	e7e6      	b.n	80032d6 <_printf_float+0x23a>
 8003308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800330a:	2b00      	cmp	r3, #0
 800330c:	dc38      	bgt.n	8003380 <_printf_float+0x2e4>
 800330e:	2301      	movs	r3, #1
 8003310:	4631      	mov	r1, r6
 8003312:	4628      	mov	r0, r5
 8003314:	4a19      	ldr	r2, [pc, #100]	; (800337c <_printf_float+0x2e0>)
 8003316:	47b8      	blx	r7
 8003318:	3001      	adds	r0, #1
 800331a:	f43f af1a 	beq.w	8003152 <_printf_float+0xb6>
 800331e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003322:	4313      	orrs	r3, r2
 8003324:	d102      	bne.n	800332c <_printf_float+0x290>
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	07d9      	lsls	r1, r3, #31
 800332a:	d5d8      	bpl.n	80032de <_printf_float+0x242>
 800332c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003330:	4631      	mov	r1, r6
 8003332:	4628      	mov	r0, r5
 8003334:	47b8      	blx	r7
 8003336:	3001      	adds	r0, #1
 8003338:	f43f af0b 	beq.w	8003152 <_printf_float+0xb6>
 800333c:	f04f 0900 	mov.w	r9, #0
 8003340:	f104 0a1a 	add.w	sl, r4, #26
 8003344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003346:	425b      	negs	r3, r3
 8003348:	454b      	cmp	r3, r9
 800334a:	dc01      	bgt.n	8003350 <_printf_float+0x2b4>
 800334c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800334e:	e794      	b.n	800327a <_printf_float+0x1de>
 8003350:	2301      	movs	r3, #1
 8003352:	4652      	mov	r2, sl
 8003354:	4631      	mov	r1, r6
 8003356:	4628      	mov	r0, r5
 8003358:	47b8      	blx	r7
 800335a:	3001      	adds	r0, #1
 800335c:	f43f aef9 	beq.w	8003152 <_printf_float+0xb6>
 8003360:	f109 0901 	add.w	r9, r9, #1
 8003364:	e7ee      	b.n	8003344 <_printf_float+0x2a8>
 8003366:	bf00      	nop
 8003368:	7fefffff 	.word	0x7fefffff
 800336c:	08007834 	.word	0x08007834
 8003370:	08007838 	.word	0x08007838
 8003374:	08007840 	.word	0x08007840
 8003378:	0800783c 	.word	0x0800783c
 800337c:	08007844 	.word	0x08007844
 8003380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003384:	429a      	cmp	r2, r3
 8003386:	bfa8      	it	ge
 8003388:	461a      	movge	r2, r3
 800338a:	2a00      	cmp	r2, #0
 800338c:	4691      	mov	r9, r2
 800338e:	dc37      	bgt.n	8003400 <_printf_float+0x364>
 8003390:	f04f 0b00 	mov.w	fp, #0
 8003394:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003398:	f104 021a 	add.w	r2, r4, #26
 800339c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80033a0:	ebaa 0309 	sub.w	r3, sl, r9
 80033a4:	455b      	cmp	r3, fp
 80033a6:	dc33      	bgt.n	8003410 <_printf_float+0x374>
 80033a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033ac:	429a      	cmp	r2, r3
 80033ae:	db3b      	blt.n	8003428 <_printf_float+0x38c>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	07da      	lsls	r2, r3, #31
 80033b4:	d438      	bmi.n	8003428 <_printf_float+0x38c>
 80033b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033ba:	eba3 020a 	sub.w	r2, r3, sl
 80033be:	eba3 0901 	sub.w	r9, r3, r1
 80033c2:	4591      	cmp	r9, r2
 80033c4:	bfa8      	it	ge
 80033c6:	4691      	movge	r9, r2
 80033c8:	f1b9 0f00 	cmp.w	r9, #0
 80033cc:	dc34      	bgt.n	8003438 <_printf_float+0x39c>
 80033ce:	f04f 0800 	mov.w	r8, #0
 80033d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033d6:	f104 0a1a 	add.w	sl, r4, #26
 80033da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	eba3 0309 	sub.w	r3, r3, r9
 80033e4:	4543      	cmp	r3, r8
 80033e6:	f77f af7a 	ble.w	80032de <_printf_float+0x242>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4652      	mov	r2, sl
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	47b8      	blx	r7
 80033f4:	3001      	adds	r0, #1
 80033f6:	f43f aeac 	beq.w	8003152 <_printf_float+0xb6>
 80033fa:	f108 0801 	add.w	r8, r8, #1
 80033fe:	e7ec      	b.n	80033da <_printf_float+0x33e>
 8003400:	4613      	mov	r3, r2
 8003402:	4631      	mov	r1, r6
 8003404:	4642      	mov	r2, r8
 8003406:	4628      	mov	r0, r5
 8003408:	47b8      	blx	r7
 800340a:	3001      	adds	r0, #1
 800340c:	d1c0      	bne.n	8003390 <_printf_float+0x2f4>
 800340e:	e6a0      	b.n	8003152 <_printf_float+0xb6>
 8003410:	2301      	movs	r3, #1
 8003412:	4631      	mov	r1, r6
 8003414:	4628      	mov	r0, r5
 8003416:	920b      	str	r2, [sp, #44]	; 0x2c
 8003418:	47b8      	blx	r7
 800341a:	3001      	adds	r0, #1
 800341c:	f43f ae99 	beq.w	8003152 <_printf_float+0xb6>
 8003420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003422:	f10b 0b01 	add.w	fp, fp, #1
 8003426:	e7b9      	b.n	800339c <_printf_float+0x300>
 8003428:	4631      	mov	r1, r6
 800342a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800342e:	4628      	mov	r0, r5
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	d1bf      	bne.n	80033b6 <_printf_float+0x31a>
 8003436:	e68c      	b.n	8003152 <_printf_float+0xb6>
 8003438:	464b      	mov	r3, r9
 800343a:	4631      	mov	r1, r6
 800343c:	4628      	mov	r0, r5
 800343e:	eb08 020a 	add.w	r2, r8, sl
 8003442:	47b8      	blx	r7
 8003444:	3001      	adds	r0, #1
 8003446:	d1c2      	bne.n	80033ce <_printf_float+0x332>
 8003448:	e683      	b.n	8003152 <_printf_float+0xb6>
 800344a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800344c:	2a01      	cmp	r2, #1
 800344e:	dc01      	bgt.n	8003454 <_printf_float+0x3b8>
 8003450:	07db      	lsls	r3, r3, #31
 8003452:	d537      	bpl.n	80034c4 <_printf_float+0x428>
 8003454:	2301      	movs	r3, #1
 8003456:	4642      	mov	r2, r8
 8003458:	4631      	mov	r1, r6
 800345a:	4628      	mov	r0, r5
 800345c:	47b8      	blx	r7
 800345e:	3001      	adds	r0, #1
 8003460:	f43f ae77 	beq.w	8003152 <_printf_float+0xb6>
 8003464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003468:	4631      	mov	r1, r6
 800346a:	4628      	mov	r0, r5
 800346c:	47b8      	blx	r7
 800346e:	3001      	adds	r0, #1
 8003470:	f43f ae6f 	beq.w	8003152 <_printf_float+0xb6>
 8003474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003478:	2200      	movs	r2, #0
 800347a:	2300      	movs	r3, #0
 800347c:	f7fd fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8003480:	b9d8      	cbnz	r0, 80034ba <_printf_float+0x41e>
 8003482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003484:	f108 0201 	add.w	r2, r8, #1
 8003488:	3b01      	subs	r3, #1
 800348a:	4631      	mov	r1, r6
 800348c:	4628      	mov	r0, r5
 800348e:	47b8      	blx	r7
 8003490:	3001      	adds	r0, #1
 8003492:	d10e      	bne.n	80034b2 <_printf_float+0x416>
 8003494:	e65d      	b.n	8003152 <_printf_float+0xb6>
 8003496:	2301      	movs	r3, #1
 8003498:	464a      	mov	r2, r9
 800349a:	4631      	mov	r1, r6
 800349c:	4628      	mov	r0, r5
 800349e:	47b8      	blx	r7
 80034a0:	3001      	adds	r0, #1
 80034a2:	f43f ae56 	beq.w	8003152 <_printf_float+0xb6>
 80034a6:	f108 0801 	add.w	r8, r8, #1
 80034aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ac:	3b01      	subs	r3, #1
 80034ae:	4543      	cmp	r3, r8
 80034b0:	dcf1      	bgt.n	8003496 <_printf_float+0x3fa>
 80034b2:	4653      	mov	r3, sl
 80034b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80034b8:	e6e0      	b.n	800327c <_printf_float+0x1e0>
 80034ba:	f04f 0800 	mov.w	r8, #0
 80034be:	f104 091a 	add.w	r9, r4, #26
 80034c2:	e7f2      	b.n	80034aa <_printf_float+0x40e>
 80034c4:	2301      	movs	r3, #1
 80034c6:	4642      	mov	r2, r8
 80034c8:	e7df      	b.n	800348a <_printf_float+0x3ee>
 80034ca:	2301      	movs	r3, #1
 80034cc:	464a      	mov	r2, r9
 80034ce:	4631      	mov	r1, r6
 80034d0:	4628      	mov	r0, r5
 80034d2:	47b8      	blx	r7
 80034d4:	3001      	adds	r0, #1
 80034d6:	f43f ae3c 	beq.w	8003152 <_printf_float+0xb6>
 80034da:	f108 0801 	add.w	r8, r8, #1
 80034de:	68e3      	ldr	r3, [r4, #12]
 80034e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80034e2:	1a5b      	subs	r3, r3, r1
 80034e4:	4543      	cmp	r3, r8
 80034e6:	dcf0      	bgt.n	80034ca <_printf_float+0x42e>
 80034e8:	e6fd      	b.n	80032e6 <_printf_float+0x24a>
 80034ea:	f04f 0800 	mov.w	r8, #0
 80034ee:	f104 0919 	add.w	r9, r4, #25
 80034f2:	e7f4      	b.n	80034de <_printf_float+0x442>

080034f4 <_printf_common>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	4616      	mov	r6, r2
 80034fa:	4699      	mov	r9, r3
 80034fc:	688a      	ldr	r2, [r1, #8]
 80034fe:	690b      	ldr	r3, [r1, #16]
 8003500:	4607      	mov	r7, r0
 8003502:	4293      	cmp	r3, r2
 8003504:	bfb8      	it	lt
 8003506:	4613      	movlt	r3, r2
 8003508:	6033      	str	r3, [r6, #0]
 800350a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800350e:	460c      	mov	r4, r1
 8003510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003514:	b10a      	cbz	r2, 800351a <_printf_common+0x26>
 8003516:	3301      	adds	r3, #1
 8003518:	6033      	str	r3, [r6, #0]
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	0699      	lsls	r1, r3, #26
 800351e:	bf42      	ittt	mi
 8003520:	6833      	ldrmi	r3, [r6, #0]
 8003522:	3302      	addmi	r3, #2
 8003524:	6033      	strmi	r3, [r6, #0]
 8003526:	6825      	ldr	r5, [r4, #0]
 8003528:	f015 0506 	ands.w	r5, r5, #6
 800352c:	d106      	bne.n	800353c <_printf_common+0x48>
 800352e:	f104 0a19 	add.w	sl, r4, #25
 8003532:	68e3      	ldr	r3, [r4, #12]
 8003534:	6832      	ldr	r2, [r6, #0]
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	42ab      	cmp	r3, r5
 800353a:	dc28      	bgt.n	800358e <_printf_common+0x9a>
 800353c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003540:	1e13      	subs	r3, r2, #0
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	bf18      	it	ne
 8003546:	2301      	movne	r3, #1
 8003548:	0692      	lsls	r2, r2, #26
 800354a:	d42d      	bmi.n	80035a8 <_printf_common+0xb4>
 800354c:	4649      	mov	r1, r9
 800354e:	4638      	mov	r0, r7
 8003550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003554:	47c0      	blx	r8
 8003556:	3001      	adds	r0, #1
 8003558:	d020      	beq.n	800359c <_printf_common+0xa8>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	68e5      	ldr	r5, [r4, #12]
 800355e:	f003 0306 	and.w	r3, r3, #6
 8003562:	2b04      	cmp	r3, #4
 8003564:	bf18      	it	ne
 8003566:	2500      	movne	r5, #0
 8003568:	6832      	ldr	r2, [r6, #0]
 800356a:	f04f 0600 	mov.w	r6, #0
 800356e:	68a3      	ldr	r3, [r4, #8]
 8003570:	bf08      	it	eq
 8003572:	1aad      	subeq	r5, r5, r2
 8003574:	6922      	ldr	r2, [r4, #16]
 8003576:	bf08      	it	eq
 8003578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800357c:	4293      	cmp	r3, r2
 800357e:	bfc4      	itt	gt
 8003580:	1a9b      	subgt	r3, r3, r2
 8003582:	18ed      	addgt	r5, r5, r3
 8003584:	341a      	adds	r4, #26
 8003586:	42b5      	cmp	r5, r6
 8003588:	d11a      	bne.n	80035c0 <_printf_common+0xcc>
 800358a:	2000      	movs	r0, #0
 800358c:	e008      	b.n	80035a0 <_printf_common+0xac>
 800358e:	2301      	movs	r3, #1
 8003590:	4652      	mov	r2, sl
 8003592:	4649      	mov	r1, r9
 8003594:	4638      	mov	r0, r7
 8003596:	47c0      	blx	r8
 8003598:	3001      	adds	r0, #1
 800359a:	d103      	bne.n	80035a4 <_printf_common+0xb0>
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a4:	3501      	adds	r5, #1
 80035a6:	e7c4      	b.n	8003532 <_printf_common+0x3e>
 80035a8:	2030      	movs	r0, #48	; 0x30
 80035aa:	18e1      	adds	r1, r4, r3
 80035ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035b6:	4422      	add	r2, r4
 80035b8:	3302      	adds	r3, #2
 80035ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035be:	e7c5      	b.n	800354c <_printf_common+0x58>
 80035c0:	2301      	movs	r3, #1
 80035c2:	4622      	mov	r2, r4
 80035c4:	4649      	mov	r1, r9
 80035c6:	4638      	mov	r0, r7
 80035c8:	47c0      	blx	r8
 80035ca:	3001      	adds	r0, #1
 80035cc:	d0e6      	beq.n	800359c <_printf_common+0xa8>
 80035ce:	3601      	adds	r6, #1
 80035d0:	e7d9      	b.n	8003586 <_printf_common+0x92>
	...

080035d4 <_printf_i>:
 80035d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035d8:	7e0f      	ldrb	r7, [r1, #24]
 80035da:	4691      	mov	r9, r2
 80035dc:	2f78      	cmp	r7, #120	; 0x78
 80035de:	4680      	mov	r8, r0
 80035e0:	460c      	mov	r4, r1
 80035e2:	469a      	mov	sl, r3
 80035e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035ea:	d807      	bhi.n	80035fc <_printf_i+0x28>
 80035ec:	2f62      	cmp	r7, #98	; 0x62
 80035ee:	d80a      	bhi.n	8003606 <_printf_i+0x32>
 80035f0:	2f00      	cmp	r7, #0
 80035f2:	f000 80d9 	beq.w	80037a8 <_printf_i+0x1d4>
 80035f6:	2f58      	cmp	r7, #88	; 0x58
 80035f8:	f000 80a4 	beq.w	8003744 <_printf_i+0x170>
 80035fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003604:	e03a      	b.n	800367c <_printf_i+0xa8>
 8003606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800360a:	2b15      	cmp	r3, #21
 800360c:	d8f6      	bhi.n	80035fc <_printf_i+0x28>
 800360e:	a101      	add	r1, pc, #4	; (adr r1, 8003614 <_printf_i+0x40>)
 8003610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003614:	0800366d 	.word	0x0800366d
 8003618:	08003681 	.word	0x08003681
 800361c:	080035fd 	.word	0x080035fd
 8003620:	080035fd 	.word	0x080035fd
 8003624:	080035fd 	.word	0x080035fd
 8003628:	080035fd 	.word	0x080035fd
 800362c:	08003681 	.word	0x08003681
 8003630:	080035fd 	.word	0x080035fd
 8003634:	080035fd 	.word	0x080035fd
 8003638:	080035fd 	.word	0x080035fd
 800363c:	080035fd 	.word	0x080035fd
 8003640:	0800378f 	.word	0x0800378f
 8003644:	080036b1 	.word	0x080036b1
 8003648:	08003771 	.word	0x08003771
 800364c:	080035fd 	.word	0x080035fd
 8003650:	080035fd 	.word	0x080035fd
 8003654:	080037b1 	.word	0x080037b1
 8003658:	080035fd 	.word	0x080035fd
 800365c:	080036b1 	.word	0x080036b1
 8003660:	080035fd 	.word	0x080035fd
 8003664:	080035fd 	.word	0x080035fd
 8003668:	08003779 	.word	0x08003779
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	602a      	str	r2, [r5, #0]
 8003674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800367c:	2301      	movs	r3, #1
 800367e:	e0a4      	b.n	80037ca <_printf_i+0x1f6>
 8003680:	6820      	ldr	r0, [r4, #0]
 8003682:	6829      	ldr	r1, [r5, #0]
 8003684:	0606      	lsls	r6, r0, #24
 8003686:	f101 0304 	add.w	r3, r1, #4
 800368a:	d50a      	bpl.n	80036a2 <_printf_i+0xce>
 800368c:	680e      	ldr	r6, [r1, #0]
 800368e:	602b      	str	r3, [r5, #0]
 8003690:	2e00      	cmp	r6, #0
 8003692:	da03      	bge.n	800369c <_printf_i+0xc8>
 8003694:	232d      	movs	r3, #45	; 0x2d
 8003696:	4276      	negs	r6, r6
 8003698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800369c:	230a      	movs	r3, #10
 800369e:	485e      	ldr	r0, [pc, #376]	; (8003818 <_printf_i+0x244>)
 80036a0:	e019      	b.n	80036d6 <_printf_i+0x102>
 80036a2:	680e      	ldr	r6, [r1, #0]
 80036a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036a8:	602b      	str	r3, [r5, #0]
 80036aa:	bf18      	it	ne
 80036ac:	b236      	sxthne	r6, r6
 80036ae:	e7ef      	b.n	8003690 <_printf_i+0xbc>
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	1d19      	adds	r1, r3, #4
 80036b6:	6029      	str	r1, [r5, #0]
 80036b8:	0601      	lsls	r1, r0, #24
 80036ba:	d501      	bpl.n	80036c0 <_printf_i+0xec>
 80036bc:	681e      	ldr	r6, [r3, #0]
 80036be:	e002      	b.n	80036c6 <_printf_i+0xf2>
 80036c0:	0646      	lsls	r6, r0, #25
 80036c2:	d5fb      	bpl.n	80036bc <_printf_i+0xe8>
 80036c4:	881e      	ldrh	r6, [r3, #0]
 80036c6:	2f6f      	cmp	r7, #111	; 0x6f
 80036c8:	bf0c      	ite	eq
 80036ca:	2308      	moveq	r3, #8
 80036cc:	230a      	movne	r3, #10
 80036ce:	4852      	ldr	r0, [pc, #328]	; (8003818 <_printf_i+0x244>)
 80036d0:	2100      	movs	r1, #0
 80036d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036d6:	6865      	ldr	r5, [r4, #4]
 80036d8:	2d00      	cmp	r5, #0
 80036da:	bfa8      	it	ge
 80036dc:	6821      	ldrge	r1, [r4, #0]
 80036de:	60a5      	str	r5, [r4, #8]
 80036e0:	bfa4      	itt	ge
 80036e2:	f021 0104 	bicge.w	r1, r1, #4
 80036e6:	6021      	strge	r1, [r4, #0]
 80036e8:	b90e      	cbnz	r6, 80036ee <_printf_i+0x11a>
 80036ea:	2d00      	cmp	r5, #0
 80036ec:	d04d      	beq.n	800378a <_printf_i+0x1b6>
 80036ee:	4615      	mov	r5, r2
 80036f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80036f4:	fb03 6711 	mls	r7, r3, r1, r6
 80036f8:	5dc7      	ldrb	r7, [r0, r7]
 80036fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036fe:	4637      	mov	r7, r6
 8003700:	42bb      	cmp	r3, r7
 8003702:	460e      	mov	r6, r1
 8003704:	d9f4      	bls.n	80036f0 <_printf_i+0x11c>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d10b      	bne.n	8003722 <_printf_i+0x14e>
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	07de      	lsls	r6, r3, #31
 800370e:	d508      	bpl.n	8003722 <_printf_i+0x14e>
 8003710:	6923      	ldr	r3, [r4, #16]
 8003712:	6861      	ldr	r1, [r4, #4]
 8003714:	4299      	cmp	r1, r3
 8003716:	bfde      	ittt	le
 8003718:	2330      	movle	r3, #48	; 0x30
 800371a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800371e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003722:	1b52      	subs	r2, r2, r5
 8003724:	6122      	str	r2, [r4, #16]
 8003726:	464b      	mov	r3, r9
 8003728:	4621      	mov	r1, r4
 800372a:	4640      	mov	r0, r8
 800372c:	f8cd a000 	str.w	sl, [sp]
 8003730:	aa03      	add	r2, sp, #12
 8003732:	f7ff fedf 	bl	80034f4 <_printf_common>
 8003736:	3001      	adds	r0, #1
 8003738:	d14c      	bne.n	80037d4 <_printf_i+0x200>
 800373a:	f04f 30ff 	mov.w	r0, #4294967295
 800373e:	b004      	add	sp, #16
 8003740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003744:	4834      	ldr	r0, [pc, #208]	; (8003818 <_printf_i+0x244>)
 8003746:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800374a:	6829      	ldr	r1, [r5, #0]
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003752:	6029      	str	r1, [r5, #0]
 8003754:	061d      	lsls	r5, r3, #24
 8003756:	d514      	bpl.n	8003782 <_printf_i+0x1ae>
 8003758:	07df      	lsls	r7, r3, #31
 800375a:	bf44      	itt	mi
 800375c:	f043 0320 	orrmi.w	r3, r3, #32
 8003760:	6023      	strmi	r3, [r4, #0]
 8003762:	b91e      	cbnz	r6, 800376c <_printf_i+0x198>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	f023 0320 	bic.w	r3, r3, #32
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	2310      	movs	r3, #16
 800376e:	e7af      	b.n	80036d0 <_printf_i+0xfc>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	f043 0320 	orr.w	r3, r3, #32
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	2378      	movs	r3, #120	; 0x78
 800377a:	4828      	ldr	r0, [pc, #160]	; (800381c <_printf_i+0x248>)
 800377c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003780:	e7e3      	b.n	800374a <_printf_i+0x176>
 8003782:	0659      	lsls	r1, r3, #25
 8003784:	bf48      	it	mi
 8003786:	b2b6      	uxthmi	r6, r6
 8003788:	e7e6      	b.n	8003758 <_printf_i+0x184>
 800378a:	4615      	mov	r5, r2
 800378c:	e7bb      	b.n	8003706 <_printf_i+0x132>
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	6826      	ldr	r6, [r4, #0]
 8003792:	1d18      	adds	r0, r3, #4
 8003794:	6961      	ldr	r1, [r4, #20]
 8003796:	6028      	str	r0, [r5, #0]
 8003798:	0635      	lsls	r5, r6, #24
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	d501      	bpl.n	80037a2 <_printf_i+0x1ce>
 800379e:	6019      	str	r1, [r3, #0]
 80037a0:	e002      	b.n	80037a8 <_printf_i+0x1d4>
 80037a2:	0670      	lsls	r0, r6, #25
 80037a4:	d5fb      	bpl.n	800379e <_printf_i+0x1ca>
 80037a6:	8019      	strh	r1, [r3, #0]
 80037a8:	2300      	movs	r3, #0
 80037aa:	4615      	mov	r5, r2
 80037ac:	6123      	str	r3, [r4, #16]
 80037ae:	e7ba      	b.n	8003726 <_printf_i+0x152>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	2100      	movs	r1, #0
 80037b4:	1d1a      	adds	r2, r3, #4
 80037b6:	602a      	str	r2, [r5, #0]
 80037b8:	681d      	ldr	r5, [r3, #0]
 80037ba:	6862      	ldr	r2, [r4, #4]
 80037bc:	4628      	mov	r0, r5
 80037be:	f002 faed 	bl	8005d9c <memchr>
 80037c2:	b108      	cbz	r0, 80037c8 <_printf_i+0x1f4>
 80037c4:	1b40      	subs	r0, r0, r5
 80037c6:	6060      	str	r0, [r4, #4]
 80037c8:	6863      	ldr	r3, [r4, #4]
 80037ca:	6123      	str	r3, [r4, #16]
 80037cc:	2300      	movs	r3, #0
 80037ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037d2:	e7a8      	b.n	8003726 <_printf_i+0x152>
 80037d4:	462a      	mov	r2, r5
 80037d6:	4649      	mov	r1, r9
 80037d8:	4640      	mov	r0, r8
 80037da:	6923      	ldr	r3, [r4, #16]
 80037dc:	47d0      	blx	sl
 80037de:	3001      	adds	r0, #1
 80037e0:	d0ab      	beq.n	800373a <_printf_i+0x166>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	079b      	lsls	r3, r3, #30
 80037e6:	d413      	bmi.n	8003810 <_printf_i+0x23c>
 80037e8:	68e0      	ldr	r0, [r4, #12]
 80037ea:	9b03      	ldr	r3, [sp, #12]
 80037ec:	4298      	cmp	r0, r3
 80037ee:	bfb8      	it	lt
 80037f0:	4618      	movlt	r0, r3
 80037f2:	e7a4      	b.n	800373e <_printf_i+0x16a>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4632      	mov	r2, r6
 80037f8:	4649      	mov	r1, r9
 80037fa:	4640      	mov	r0, r8
 80037fc:	47d0      	blx	sl
 80037fe:	3001      	adds	r0, #1
 8003800:	d09b      	beq.n	800373a <_printf_i+0x166>
 8003802:	3501      	adds	r5, #1
 8003804:	68e3      	ldr	r3, [r4, #12]
 8003806:	9903      	ldr	r1, [sp, #12]
 8003808:	1a5b      	subs	r3, r3, r1
 800380a:	42ab      	cmp	r3, r5
 800380c:	dcf2      	bgt.n	80037f4 <_printf_i+0x220>
 800380e:	e7eb      	b.n	80037e8 <_printf_i+0x214>
 8003810:	2500      	movs	r5, #0
 8003812:	f104 0619 	add.w	r6, r4, #25
 8003816:	e7f5      	b.n	8003804 <_printf_i+0x230>
 8003818:	08007846 	.word	0x08007846
 800381c:	08007857 	.word	0x08007857

08003820 <_scanf_float>:
 8003820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	b087      	sub	sp, #28
 8003826:	9303      	str	r3, [sp, #12]
 8003828:	688b      	ldr	r3, [r1, #8]
 800382a:	4617      	mov	r7, r2
 800382c:	1e5a      	subs	r2, r3, #1
 800382e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003832:	bf85      	ittet	hi
 8003834:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003838:	195b      	addhi	r3, r3, r5
 800383a:	2300      	movls	r3, #0
 800383c:	9302      	strhi	r3, [sp, #8]
 800383e:	bf88      	it	hi
 8003840:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003844:	468b      	mov	fp, r1
 8003846:	f04f 0500 	mov.w	r5, #0
 800384a:	bf8c      	ite	hi
 800384c:	608b      	strhi	r3, [r1, #8]
 800384e:	9302      	strls	r3, [sp, #8]
 8003850:	680b      	ldr	r3, [r1, #0]
 8003852:	4680      	mov	r8, r0
 8003854:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003858:	f84b 3b1c 	str.w	r3, [fp], #28
 800385c:	460c      	mov	r4, r1
 800385e:	465e      	mov	r6, fp
 8003860:	46aa      	mov	sl, r5
 8003862:	46a9      	mov	r9, r5
 8003864:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003868:	9501      	str	r5, [sp, #4]
 800386a:	68a2      	ldr	r2, [r4, #8]
 800386c:	b152      	cbz	r2, 8003884 <_scanf_float+0x64>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b4e      	cmp	r3, #78	; 0x4e
 8003874:	d864      	bhi.n	8003940 <_scanf_float+0x120>
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d83c      	bhi.n	80038f4 <_scanf_float+0xd4>
 800387a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800387e:	b2c8      	uxtb	r0, r1
 8003880:	280e      	cmp	r0, #14
 8003882:	d93a      	bls.n	80038fa <_scanf_float+0xda>
 8003884:	f1b9 0f00 	cmp.w	r9, #0
 8003888:	d003      	beq.n	8003892 <_scanf_float+0x72>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003896:	f1ba 0f01 	cmp.w	sl, #1
 800389a:	f200 8113 	bhi.w	8003ac4 <_scanf_float+0x2a4>
 800389e:	455e      	cmp	r6, fp
 80038a0:	f200 8105 	bhi.w	8003aae <_scanf_float+0x28e>
 80038a4:	2501      	movs	r5, #1
 80038a6:	4628      	mov	r0, r5
 80038a8:	b007      	add	sp, #28
 80038aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80038b2:	2a0d      	cmp	r2, #13
 80038b4:	d8e6      	bhi.n	8003884 <_scanf_float+0x64>
 80038b6:	a101      	add	r1, pc, #4	; (adr r1, 80038bc <_scanf_float+0x9c>)
 80038b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80038bc:	080039fb 	.word	0x080039fb
 80038c0:	08003885 	.word	0x08003885
 80038c4:	08003885 	.word	0x08003885
 80038c8:	08003885 	.word	0x08003885
 80038cc:	08003a5b 	.word	0x08003a5b
 80038d0:	08003a33 	.word	0x08003a33
 80038d4:	08003885 	.word	0x08003885
 80038d8:	08003885 	.word	0x08003885
 80038dc:	08003a09 	.word	0x08003a09
 80038e0:	08003885 	.word	0x08003885
 80038e4:	08003885 	.word	0x08003885
 80038e8:	08003885 	.word	0x08003885
 80038ec:	08003885 	.word	0x08003885
 80038f0:	080039c1 	.word	0x080039c1
 80038f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80038f8:	e7db      	b.n	80038b2 <_scanf_float+0x92>
 80038fa:	290e      	cmp	r1, #14
 80038fc:	d8c2      	bhi.n	8003884 <_scanf_float+0x64>
 80038fe:	a001      	add	r0, pc, #4	; (adr r0, 8003904 <_scanf_float+0xe4>)
 8003900:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003904:	080039b3 	.word	0x080039b3
 8003908:	08003885 	.word	0x08003885
 800390c:	080039b3 	.word	0x080039b3
 8003910:	08003a47 	.word	0x08003a47
 8003914:	08003885 	.word	0x08003885
 8003918:	08003961 	.word	0x08003961
 800391c:	0800399d 	.word	0x0800399d
 8003920:	0800399d 	.word	0x0800399d
 8003924:	0800399d 	.word	0x0800399d
 8003928:	0800399d 	.word	0x0800399d
 800392c:	0800399d 	.word	0x0800399d
 8003930:	0800399d 	.word	0x0800399d
 8003934:	0800399d 	.word	0x0800399d
 8003938:	0800399d 	.word	0x0800399d
 800393c:	0800399d 	.word	0x0800399d
 8003940:	2b6e      	cmp	r3, #110	; 0x6e
 8003942:	d809      	bhi.n	8003958 <_scanf_float+0x138>
 8003944:	2b60      	cmp	r3, #96	; 0x60
 8003946:	d8b2      	bhi.n	80038ae <_scanf_float+0x8e>
 8003948:	2b54      	cmp	r3, #84	; 0x54
 800394a:	d077      	beq.n	8003a3c <_scanf_float+0x21c>
 800394c:	2b59      	cmp	r3, #89	; 0x59
 800394e:	d199      	bne.n	8003884 <_scanf_float+0x64>
 8003950:	2d07      	cmp	r5, #7
 8003952:	d197      	bne.n	8003884 <_scanf_float+0x64>
 8003954:	2508      	movs	r5, #8
 8003956:	e029      	b.n	80039ac <_scanf_float+0x18c>
 8003958:	2b74      	cmp	r3, #116	; 0x74
 800395a:	d06f      	beq.n	8003a3c <_scanf_float+0x21c>
 800395c:	2b79      	cmp	r3, #121	; 0x79
 800395e:	e7f6      	b.n	800394e <_scanf_float+0x12e>
 8003960:	6821      	ldr	r1, [r4, #0]
 8003962:	05c8      	lsls	r0, r1, #23
 8003964:	d51a      	bpl.n	800399c <_scanf_float+0x17c>
 8003966:	9b02      	ldr	r3, [sp, #8]
 8003968:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800396c:	6021      	str	r1, [r4, #0]
 800396e:	f109 0901 	add.w	r9, r9, #1
 8003972:	b11b      	cbz	r3, 800397c <_scanf_float+0x15c>
 8003974:	3b01      	subs	r3, #1
 8003976:	3201      	adds	r2, #1
 8003978:	9302      	str	r3, [sp, #8]
 800397a:	60a2      	str	r2, [r4, #8]
 800397c:	68a3      	ldr	r3, [r4, #8]
 800397e:	3b01      	subs	r3, #1
 8003980:	60a3      	str	r3, [r4, #8]
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	3301      	adds	r3, #1
 8003986:	6123      	str	r3, [r4, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	f340 8084 	ble.w	8003a9c <_scanf_float+0x27c>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	e766      	b.n	800386a <_scanf_float+0x4a>
 800399c:	eb1a 0f05 	cmn.w	sl, r5
 80039a0:	f47f af70 	bne.w	8003884 <_scanf_float+0x64>
 80039a4:	6822      	ldr	r2, [r4, #0]
 80039a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80039aa:	6022      	str	r2, [r4, #0]
 80039ac:	f806 3b01 	strb.w	r3, [r6], #1
 80039b0:	e7e4      	b.n	800397c <_scanf_float+0x15c>
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	0610      	lsls	r0, r2, #24
 80039b6:	f57f af65 	bpl.w	8003884 <_scanf_float+0x64>
 80039ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039be:	e7f4      	b.n	80039aa <_scanf_float+0x18a>
 80039c0:	f1ba 0f00 	cmp.w	sl, #0
 80039c4:	d10e      	bne.n	80039e4 <_scanf_float+0x1c4>
 80039c6:	f1b9 0f00 	cmp.w	r9, #0
 80039ca:	d10e      	bne.n	80039ea <_scanf_float+0x1ca>
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80039d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80039d6:	d108      	bne.n	80039ea <_scanf_float+0x1ca>
 80039d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80039dc:	f04f 0a01 	mov.w	sl, #1
 80039e0:	6022      	str	r2, [r4, #0]
 80039e2:	e7e3      	b.n	80039ac <_scanf_float+0x18c>
 80039e4:	f1ba 0f02 	cmp.w	sl, #2
 80039e8:	d055      	beq.n	8003a96 <_scanf_float+0x276>
 80039ea:	2d01      	cmp	r5, #1
 80039ec:	d002      	beq.n	80039f4 <_scanf_float+0x1d4>
 80039ee:	2d04      	cmp	r5, #4
 80039f0:	f47f af48 	bne.w	8003884 <_scanf_float+0x64>
 80039f4:	3501      	adds	r5, #1
 80039f6:	b2ed      	uxtb	r5, r5
 80039f8:	e7d8      	b.n	80039ac <_scanf_float+0x18c>
 80039fa:	f1ba 0f01 	cmp.w	sl, #1
 80039fe:	f47f af41 	bne.w	8003884 <_scanf_float+0x64>
 8003a02:	f04f 0a02 	mov.w	sl, #2
 8003a06:	e7d1      	b.n	80039ac <_scanf_float+0x18c>
 8003a08:	b97d      	cbnz	r5, 8003a2a <_scanf_float+0x20a>
 8003a0a:	f1b9 0f00 	cmp.w	r9, #0
 8003a0e:	f47f af3c 	bne.w	800388a <_scanf_float+0x6a>
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003a18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003a1c:	f47f af39 	bne.w	8003892 <_scanf_float+0x72>
 8003a20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003a24:	2501      	movs	r5, #1
 8003a26:	6022      	str	r2, [r4, #0]
 8003a28:	e7c0      	b.n	80039ac <_scanf_float+0x18c>
 8003a2a:	2d03      	cmp	r5, #3
 8003a2c:	d0e2      	beq.n	80039f4 <_scanf_float+0x1d4>
 8003a2e:	2d05      	cmp	r5, #5
 8003a30:	e7de      	b.n	80039f0 <_scanf_float+0x1d0>
 8003a32:	2d02      	cmp	r5, #2
 8003a34:	f47f af26 	bne.w	8003884 <_scanf_float+0x64>
 8003a38:	2503      	movs	r5, #3
 8003a3a:	e7b7      	b.n	80039ac <_scanf_float+0x18c>
 8003a3c:	2d06      	cmp	r5, #6
 8003a3e:	f47f af21 	bne.w	8003884 <_scanf_float+0x64>
 8003a42:	2507      	movs	r5, #7
 8003a44:	e7b2      	b.n	80039ac <_scanf_float+0x18c>
 8003a46:	6822      	ldr	r2, [r4, #0]
 8003a48:	0591      	lsls	r1, r2, #22
 8003a4a:	f57f af1b 	bpl.w	8003884 <_scanf_float+0x64>
 8003a4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003a52:	6022      	str	r2, [r4, #0]
 8003a54:	f8cd 9004 	str.w	r9, [sp, #4]
 8003a58:	e7a8      	b.n	80039ac <_scanf_float+0x18c>
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003a60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003a64:	d006      	beq.n	8003a74 <_scanf_float+0x254>
 8003a66:	0550      	lsls	r0, r2, #21
 8003a68:	f57f af0c 	bpl.w	8003884 <_scanf_float+0x64>
 8003a6c:	f1b9 0f00 	cmp.w	r9, #0
 8003a70:	f43f af0f 	beq.w	8003892 <_scanf_float+0x72>
 8003a74:	0591      	lsls	r1, r2, #22
 8003a76:	bf58      	it	pl
 8003a78:	9901      	ldrpl	r1, [sp, #4]
 8003a7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003a7e:	bf58      	it	pl
 8003a80:	eba9 0101 	subpl.w	r1, r9, r1
 8003a84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003a88:	f04f 0900 	mov.w	r9, #0
 8003a8c:	bf58      	it	pl
 8003a8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	e78a      	b.n	80039ac <_scanf_float+0x18c>
 8003a96:	f04f 0a03 	mov.w	sl, #3
 8003a9a:	e787      	b.n	80039ac <_scanf_float+0x18c>
 8003a9c:	4639      	mov	r1, r7
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003aa4:	4798      	blx	r3
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	f43f aedf 	beq.w	800386a <_scanf_float+0x4a>
 8003aac:	e6ea      	b.n	8003884 <_scanf_float+0x64>
 8003aae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ab2:	463a      	mov	r2, r7
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003aba:	4798      	blx	r3
 8003abc:	6923      	ldr	r3, [r4, #16]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	6123      	str	r3, [r4, #16]
 8003ac2:	e6ec      	b.n	800389e <_scanf_float+0x7e>
 8003ac4:	1e6b      	subs	r3, r5, #1
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d825      	bhi.n	8003b16 <_scanf_float+0x2f6>
 8003aca:	2d02      	cmp	r5, #2
 8003acc:	d836      	bhi.n	8003b3c <_scanf_float+0x31c>
 8003ace:	455e      	cmp	r6, fp
 8003ad0:	f67f aee8 	bls.w	80038a4 <_scanf_float+0x84>
 8003ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ad8:	463a      	mov	r2, r7
 8003ada:	4640      	mov	r0, r8
 8003adc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ae0:	4798      	blx	r3
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	e7f1      	b.n	8003ace <_scanf_float+0x2ae>
 8003aea:	9802      	ldr	r0, [sp, #8]
 8003aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003af0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003af4:	463a      	mov	r2, r7
 8003af6:	9002      	str	r0, [sp, #8]
 8003af8:	4640      	mov	r0, r8
 8003afa:	4798      	blx	r3
 8003afc:	6923      	ldr	r3, [r4, #16]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	6123      	str	r3, [r4, #16]
 8003b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b06:	fa5f fa8a 	uxtb.w	sl, sl
 8003b0a:	f1ba 0f02 	cmp.w	sl, #2
 8003b0e:	d1ec      	bne.n	8003aea <_scanf_float+0x2ca>
 8003b10:	3d03      	subs	r5, #3
 8003b12:	b2ed      	uxtb	r5, r5
 8003b14:	1b76      	subs	r6, r6, r5
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	05da      	lsls	r2, r3, #23
 8003b1a:	d52f      	bpl.n	8003b7c <_scanf_float+0x35c>
 8003b1c:	055b      	lsls	r3, r3, #21
 8003b1e:	d510      	bpl.n	8003b42 <_scanf_float+0x322>
 8003b20:	455e      	cmp	r6, fp
 8003b22:	f67f aebf 	bls.w	80038a4 <_scanf_float+0x84>
 8003b26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b2a:	463a      	mov	r2, r7
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b32:	4798      	blx	r3
 8003b34:	6923      	ldr	r3, [r4, #16]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	6123      	str	r3, [r4, #16]
 8003b3a:	e7f1      	b.n	8003b20 <_scanf_float+0x300>
 8003b3c:	46aa      	mov	sl, r5
 8003b3e:	9602      	str	r6, [sp, #8]
 8003b40:	e7df      	b.n	8003b02 <_scanf_float+0x2e2>
 8003b42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	2965      	cmp	r1, #101	; 0x65
 8003b4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b4e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003b52:	6123      	str	r3, [r4, #16]
 8003b54:	d00c      	beq.n	8003b70 <_scanf_float+0x350>
 8003b56:	2945      	cmp	r1, #69	; 0x45
 8003b58:	d00a      	beq.n	8003b70 <_scanf_float+0x350>
 8003b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b5e:	463a      	mov	r2, r7
 8003b60:	4640      	mov	r0, r8
 8003b62:	4798      	blx	r3
 8003b64:	6923      	ldr	r3, [r4, #16]
 8003b66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	1eb5      	subs	r5, r6, #2
 8003b6e:	6123      	str	r3, [r4, #16]
 8003b70:	463a      	mov	r2, r7
 8003b72:	4640      	mov	r0, r8
 8003b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b78:	4798      	blx	r3
 8003b7a:	462e      	mov	r6, r5
 8003b7c:	6825      	ldr	r5, [r4, #0]
 8003b7e:	f015 0510 	ands.w	r5, r5, #16
 8003b82:	d155      	bne.n	8003c30 <_scanf_float+0x410>
 8003b84:	7035      	strb	r5, [r6, #0]
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b90:	d11b      	bne.n	8003bca <_scanf_float+0x3aa>
 8003b92:	9b01      	ldr	r3, [sp, #4]
 8003b94:	454b      	cmp	r3, r9
 8003b96:	eba3 0209 	sub.w	r2, r3, r9
 8003b9a:	d123      	bne.n	8003be4 <_scanf_float+0x3c4>
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	4659      	mov	r1, fp
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	f000 fe79 	bl	8004898 <_strtod_r>
 8003ba6:	6822      	ldr	r2, [r4, #0]
 8003ba8:	9b03      	ldr	r3, [sp, #12]
 8003baa:	f012 0f02 	tst.w	r2, #2
 8003bae:	4606      	mov	r6, r0
 8003bb0:	460f      	mov	r7, r1
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	d021      	beq.n	8003bfa <_scanf_float+0x3da>
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	9903      	ldr	r1, [sp, #12]
 8003bba:	600a      	str	r2, [r1, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	e9c3 6700 	strd	r6, r7, [r3]
 8003bc2:	68e3      	ldr	r3, [r4, #12]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	60e3      	str	r3, [r4, #12]
 8003bc8:	e66d      	b.n	80038a6 <_scanf_float+0x86>
 8003bca:	9b04      	ldr	r3, [sp, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0e5      	beq.n	8003b9c <_scanf_float+0x37c>
 8003bd0:	9905      	ldr	r1, [sp, #20]
 8003bd2:	230a      	movs	r3, #10
 8003bd4:	462a      	mov	r2, r5
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	3101      	adds	r1, #1
 8003bda:	f000 fedf 	bl	800499c <_strtol_r>
 8003bde:	9b04      	ldr	r3, [sp, #16]
 8003be0:	9e05      	ldr	r6, [sp, #20]
 8003be2:	1ac2      	subs	r2, r0, r3
 8003be4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003be8:	429e      	cmp	r6, r3
 8003bea:	bf28      	it	cs
 8003bec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	4910      	ldr	r1, [pc, #64]	; (8003c34 <_scanf_float+0x414>)
 8003bf4:	f000 f826 	bl	8003c44 <siprintf>
 8003bf8:	e7d0      	b.n	8003b9c <_scanf_float+0x37c>
 8003bfa:	f012 0f04 	tst.w	r2, #4
 8003bfe:	f103 0204 	add.w	r2, r3, #4
 8003c02:	d1d9      	bne.n	8003bb8 <_scanf_float+0x398>
 8003c04:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003c08:	f8cc 2000 	str.w	r2, [ip]
 8003c0c:	f8d3 8000 	ldr.w	r8, [r3]
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	f7fc fefa 	bl	8000a0c <__aeabi_dcmpun>
 8003c18:	b128      	cbz	r0, 8003c26 <_scanf_float+0x406>
 8003c1a:	4807      	ldr	r0, [pc, #28]	; (8003c38 <_scanf_float+0x418>)
 8003c1c:	f000 f80e 	bl	8003c3c <nanf>
 8003c20:	f8c8 0000 	str.w	r0, [r8]
 8003c24:	e7cd      	b.n	8003bc2 <_scanf_float+0x3a2>
 8003c26:	4630      	mov	r0, r6
 8003c28:	4639      	mov	r1, r7
 8003c2a:	f7fc ff4d 	bl	8000ac8 <__aeabi_d2f>
 8003c2e:	e7f7      	b.n	8003c20 <_scanf_float+0x400>
 8003c30:	2500      	movs	r5, #0
 8003c32:	e638      	b.n	80038a6 <_scanf_float+0x86>
 8003c34:	08007868 	.word	0x08007868
 8003c38:	08007c70 	.word	0x08007c70

08003c3c <nanf>:
 8003c3c:	4800      	ldr	r0, [pc, #0]	; (8003c40 <nanf+0x4>)
 8003c3e:	4770      	bx	lr
 8003c40:	7fc00000 	.word	0x7fc00000

08003c44 <siprintf>:
 8003c44:	b40e      	push	{r1, r2, r3}
 8003c46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c4a:	b500      	push	{lr}
 8003c4c:	b09c      	sub	sp, #112	; 0x70
 8003c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c50:	9002      	str	r0, [sp, #8]
 8003c52:	9006      	str	r0, [sp, #24]
 8003c54:	9107      	str	r1, [sp, #28]
 8003c56:	9104      	str	r1, [sp, #16]
 8003c58:	4808      	ldr	r0, [pc, #32]	; (8003c7c <siprintf+0x38>)
 8003c5a:	4909      	ldr	r1, [pc, #36]	; (8003c80 <siprintf+0x3c>)
 8003c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c60:	9105      	str	r1, [sp, #20]
 8003c62:	6800      	ldr	r0, [r0, #0]
 8003c64:	a902      	add	r1, sp, #8
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	f002 feb8 	bl	80069dc <_svfiprintf_r>
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	9b02      	ldr	r3, [sp, #8]
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	b01c      	add	sp, #112	; 0x70
 8003c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c78:	b003      	add	sp, #12
 8003c7a:	4770      	bx	lr
 8003c7c:	20000014 	.word	0x20000014
 8003c80:	ffff0208 	.word	0xffff0208

08003c84 <sulp>:
 8003c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c88:	460f      	mov	r7, r1
 8003c8a:	4690      	mov	r8, r2
 8003c8c:	f002 fc12 	bl	80064b4 <__ulp>
 8003c90:	4604      	mov	r4, r0
 8003c92:	460d      	mov	r5, r1
 8003c94:	f1b8 0f00 	cmp.w	r8, #0
 8003c98:	d011      	beq.n	8003cbe <sulp+0x3a>
 8003c9a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003c9e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dd0b      	ble.n	8003cbe <sulp+0x3a>
 8003ca6:	2400      	movs	r4, #0
 8003ca8:	051b      	lsls	r3, r3, #20
 8003caa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003cae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	f7fc fc0f 	bl	80004d8 <__aeabi_dmul>
 8003cba:	4604      	mov	r4, r0
 8003cbc:	460d      	mov	r5, r1
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003cc8 <_strtod_l>:
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	469b      	mov	fp, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	b09f      	sub	sp, #124	; 0x7c
 8003cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8003cd4:	4b9e      	ldr	r3, [pc, #632]	; (8003f50 <_strtod_l+0x288>)
 8003cd6:	4682      	mov	sl, r0
 8003cd8:	681f      	ldr	r7, [r3, #0]
 8003cda:	460e      	mov	r6, r1
 8003cdc:	4638      	mov	r0, r7
 8003cde:	9215      	str	r2, [sp, #84]	; 0x54
 8003ce0:	f7fc fa36 	bl	8000150 <strlen>
 8003ce4:	f04f 0800 	mov.w	r8, #0
 8003ce8:	4604      	mov	r4, r0
 8003cea:	f04f 0900 	mov.w	r9, #0
 8003cee:	9619      	str	r6, [sp, #100]	; 0x64
 8003cf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cf2:	781a      	ldrb	r2, [r3, #0]
 8003cf4:	2a2b      	cmp	r2, #43	; 0x2b
 8003cf6:	d04c      	beq.n	8003d92 <_strtod_l+0xca>
 8003cf8:	d83a      	bhi.n	8003d70 <_strtod_l+0xa8>
 8003cfa:	2a0d      	cmp	r2, #13
 8003cfc:	d833      	bhi.n	8003d66 <_strtod_l+0x9e>
 8003cfe:	2a08      	cmp	r2, #8
 8003d00:	d833      	bhi.n	8003d6a <_strtod_l+0xa2>
 8003d02:	2a00      	cmp	r2, #0
 8003d04:	d03d      	beq.n	8003d82 <_strtod_l+0xba>
 8003d06:	2300      	movs	r3, #0
 8003d08:	930a      	str	r3, [sp, #40]	; 0x28
 8003d0a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003d0c:	782b      	ldrb	r3, [r5, #0]
 8003d0e:	2b30      	cmp	r3, #48	; 0x30
 8003d10:	f040 80aa 	bne.w	8003e68 <_strtod_l+0x1a0>
 8003d14:	786b      	ldrb	r3, [r5, #1]
 8003d16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003d1a:	2b58      	cmp	r3, #88	; 0x58
 8003d1c:	d166      	bne.n	8003dec <_strtod_l+0x124>
 8003d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d20:	4650      	mov	r0, sl
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	ab1a      	add	r3, sp, #104	; 0x68
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	4a8a      	ldr	r2, [pc, #552]	; (8003f54 <_strtod_l+0x28c>)
 8003d2a:	f8cd b008 	str.w	fp, [sp, #8]
 8003d2e:	ab1b      	add	r3, sp, #108	; 0x6c
 8003d30:	a919      	add	r1, sp, #100	; 0x64
 8003d32:	f001 fd17 	bl	8005764 <__gethex>
 8003d36:	f010 0607 	ands.w	r6, r0, #7
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	d005      	beq.n	8003d4a <_strtod_l+0x82>
 8003d3e:	2e06      	cmp	r6, #6
 8003d40:	d129      	bne.n	8003d96 <_strtod_l+0xce>
 8003d42:	2300      	movs	r3, #0
 8003d44:	3501      	adds	r5, #1
 8003d46:	9519      	str	r5, [sp, #100]	; 0x64
 8003d48:	930a      	str	r3, [sp, #40]	; 0x28
 8003d4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f040 858a 	bne.w	8004866 <_strtod_l+0xb9e>
 8003d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d54:	b1d3      	cbz	r3, 8003d8c <_strtod_l+0xc4>
 8003d56:	4642      	mov	r2, r8
 8003d58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	b01f      	add	sp, #124	; 0x7c
 8003d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d66:	2a20      	cmp	r2, #32
 8003d68:	d1cd      	bne.n	8003d06 <_strtod_l+0x3e>
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	9319      	str	r3, [sp, #100]	; 0x64
 8003d6e:	e7bf      	b.n	8003cf0 <_strtod_l+0x28>
 8003d70:	2a2d      	cmp	r2, #45	; 0x2d
 8003d72:	d1c8      	bne.n	8003d06 <_strtod_l+0x3e>
 8003d74:	2201      	movs	r2, #1
 8003d76:	920a      	str	r2, [sp, #40]	; 0x28
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	9219      	str	r2, [sp, #100]	; 0x64
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1c3      	bne.n	8003d0a <_strtod_l+0x42>
 8003d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003d84:	9619      	str	r6, [sp, #100]	; 0x64
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 856b 	bne.w	8004862 <_strtod_l+0xb9a>
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	e7e4      	b.n	8003d5c <_strtod_l+0x94>
 8003d92:	2200      	movs	r2, #0
 8003d94:	e7ef      	b.n	8003d76 <_strtod_l+0xae>
 8003d96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003d98:	b13a      	cbz	r2, 8003daa <_strtod_l+0xe2>
 8003d9a:	2135      	movs	r1, #53	; 0x35
 8003d9c:	a81c      	add	r0, sp, #112	; 0x70
 8003d9e:	f002 fc8d 	bl	80066bc <__copybits>
 8003da2:	4650      	mov	r0, sl
 8003da4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003da6:	f002 f855 	bl	8005e54 <_Bfree>
 8003daa:	3e01      	subs	r6, #1
 8003dac:	2e04      	cmp	r6, #4
 8003dae:	d806      	bhi.n	8003dbe <_strtod_l+0xf6>
 8003db0:	e8df f006 	tbb	[pc, r6]
 8003db4:	1714030a 	.word	0x1714030a
 8003db8:	0a          	.byte	0x0a
 8003db9:	00          	.byte	0x00
 8003dba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003dbe:	0721      	lsls	r1, r4, #28
 8003dc0:	d5c3      	bpl.n	8003d4a <_strtod_l+0x82>
 8003dc2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003dc6:	e7c0      	b.n	8003d4a <_strtod_l+0x82>
 8003dc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003dca:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003dce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003dd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003dd6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003dda:	e7f0      	b.n	8003dbe <_strtod_l+0xf6>
 8003ddc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003f58 <_strtod_l+0x290>
 8003de0:	e7ed      	b.n	8003dbe <_strtod_l+0xf6>
 8003de2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003de6:	f04f 38ff 	mov.w	r8, #4294967295
 8003dea:	e7e8      	b.n	8003dbe <_strtod_l+0xf6>
 8003dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	9219      	str	r2, [sp, #100]	; 0x64
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	2b30      	cmp	r3, #48	; 0x30
 8003df6:	d0f9      	beq.n	8003dec <_strtod_l+0x124>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0a6      	beq.n	8003d4a <_strtod_l+0x82>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	9307      	str	r3, [sp, #28]
 8003e00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e02:	220a      	movs	r2, #10
 8003e04:	9308      	str	r3, [sp, #32]
 8003e06:	2300      	movs	r3, #0
 8003e08:	469b      	mov	fp, r3
 8003e0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003e0e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003e10:	7805      	ldrb	r5, [r0, #0]
 8003e12:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003e16:	b2d9      	uxtb	r1, r3
 8003e18:	2909      	cmp	r1, #9
 8003e1a:	d927      	bls.n	8003e6c <_strtod_l+0x1a4>
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	4639      	mov	r1, r7
 8003e20:	f002 fef2 	bl	8006c08 <strncmp>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	d033      	beq.n	8003e90 <_strtod_l+0x1c8>
 8003e28:	2000      	movs	r0, #0
 8003e2a:	462a      	mov	r2, r5
 8003e2c:	465c      	mov	r4, fp
 8003e2e:	4603      	mov	r3, r0
 8003e30:	9004      	str	r0, [sp, #16]
 8003e32:	2a65      	cmp	r2, #101	; 0x65
 8003e34:	d001      	beq.n	8003e3a <_strtod_l+0x172>
 8003e36:	2a45      	cmp	r2, #69	; 0x45
 8003e38:	d114      	bne.n	8003e64 <_strtod_l+0x19c>
 8003e3a:	b91c      	cbnz	r4, 8003e44 <_strtod_l+0x17c>
 8003e3c:	9a07      	ldr	r2, [sp, #28]
 8003e3e:	4302      	orrs	r2, r0
 8003e40:	d09f      	beq.n	8003d82 <_strtod_l+0xba>
 8003e42:	2400      	movs	r4, #0
 8003e44:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003e46:	1c72      	adds	r2, r6, #1
 8003e48:	9219      	str	r2, [sp, #100]	; 0x64
 8003e4a:	7872      	ldrb	r2, [r6, #1]
 8003e4c:	2a2b      	cmp	r2, #43	; 0x2b
 8003e4e:	d079      	beq.n	8003f44 <_strtod_l+0x27c>
 8003e50:	2a2d      	cmp	r2, #45	; 0x2d
 8003e52:	f000 8083 	beq.w	8003f5c <_strtod_l+0x294>
 8003e56:	2700      	movs	r7, #0
 8003e58:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003e5c:	2909      	cmp	r1, #9
 8003e5e:	f240 8083 	bls.w	8003f68 <_strtod_l+0x2a0>
 8003e62:	9619      	str	r6, [sp, #100]	; 0x64
 8003e64:	2500      	movs	r5, #0
 8003e66:	e09f      	b.n	8003fa8 <_strtod_l+0x2e0>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e7c8      	b.n	8003dfe <_strtod_l+0x136>
 8003e6c:	f1bb 0f08 	cmp.w	fp, #8
 8003e70:	bfd5      	itete	le
 8003e72:	9906      	ldrle	r1, [sp, #24]
 8003e74:	9905      	ldrgt	r1, [sp, #20]
 8003e76:	fb02 3301 	mlale	r3, r2, r1, r3
 8003e7a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003e7e:	f100 0001 	add.w	r0, r0, #1
 8003e82:	bfd4      	ite	le
 8003e84:	9306      	strle	r3, [sp, #24]
 8003e86:	9305      	strgt	r3, [sp, #20]
 8003e88:	f10b 0b01 	add.w	fp, fp, #1
 8003e8c:	9019      	str	r0, [sp, #100]	; 0x64
 8003e8e:	e7be      	b.n	8003e0e <_strtod_l+0x146>
 8003e90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e92:	191a      	adds	r2, r3, r4
 8003e94:	9219      	str	r2, [sp, #100]	; 0x64
 8003e96:	5d1a      	ldrb	r2, [r3, r4]
 8003e98:	f1bb 0f00 	cmp.w	fp, #0
 8003e9c:	d036      	beq.n	8003f0c <_strtod_l+0x244>
 8003e9e:	465c      	mov	r4, fp
 8003ea0:	9004      	str	r0, [sp, #16]
 8003ea2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003ea6:	2b09      	cmp	r3, #9
 8003ea8:	d912      	bls.n	8003ed0 <_strtod_l+0x208>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e7c1      	b.n	8003e32 <_strtod_l+0x16a>
 8003eae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	9219      	str	r2, [sp, #100]	; 0x64
 8003eb6:	785a      	ldrb	r2, [r3, #1]
 8003eb8:	2a30      	cmp	r2, #48	; 0x30
 8003eba:	d0f8      	beq.n	8003eae <_strtod_l+0x1e6>
 8003ebc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	f200 84d5 	bhi.w	8004870 <_strtod_l+0xba8>
 8003ec6:	9004      	str	r0, [sp, #16]
 8003ec8:	2000      	movs	r0, #0
 8003eca:	4604      	mov	r4, r0
 8003ecc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ece:	9308      	str	r3, [sp, #32]
 8003ed0:	3a30      	subs	r2, #48	; 0x30
 8003ed2:	f100 0301 	add.w	r3, r0, #1
 8003ed6:	d013      	beq.n	8003f00 <_strtod_l+0x238>
 8003ed8:	9904      	ldr	r1, [sp, #16]
 8003eda:	1905      	adds	r5, r0, r4
 8003edc:	4419      	add	r1, r3
 8003ede:	9104      	str	r1, [sp, #16]
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	210a      	movs	r1, #10
 8003ee4:	42ab      	cmp	r3, r5
 8003ee6:	d113      	bne.n	8003f10 <_strtod_l+0x248>
 8003ee8:	1823      	adds	r3, r4, r0
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	f104 0401 	add.w	r4, r4, #1
 8003ef0:	4404      	add	r4, r0
 8003ef2:	dc1b      	bgt.n	8003f2c <_strtod_l+0x264>
 8003ef4:	230a      	movs	r3, #10
 8003ef6:	9906      	ldr	r1, [sp, #24]
 8003ef8:	fb03 2301 	mla	r3, r3, r1, r2
 8003efc:	9306      	str	r3, [sp, #24]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003f02:	4618      	mov	r0, r3
 8003f04:	1c51      	adds	r1, r2, #1
 8003f06:	9119      	str	r1, [sp, #100]	; 0x64
 8003f08:	7852      	ldrb	r2, [r2, #1]
 8003f0a:	e7ca      	b.n	8003ea2 <_strtod_l+0x1da>
 8003f0c:	4658      	mov	r0, fp
 8003f0e:	e7d3      	b.n	8003eb8 <_strtod_l+0x1f0>
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	dc04      	bgt.n	8003f1e <_strtod_l+0x256>
 8003f14:	9f06      	ldr	r7, [sp, #24]
 8003f16:	434f      	muls	r7, r1
 8003f18:	9706      	str	r7, [sp, #24]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	e7e2      	b.n	8003ee4 <_strtod_l+0x21c>
 8003f1e:	1c5f      	adds	r7, r3, #1
 8003f20:	2f10      	cmp	r7, #16
 8003f22:	bfde      	ittt	le
 8003f24:	9f05      	ldrle	r7, [sp, #20]
 8003f26:	434f      	mulle	r7, r1
 8003f28:	9705      	strle	r7, [sp, #20]
 8003f2a:	e7f6      	b.n	8003f1a <_strtod_l+0x252>
 8003f2c:	2c10      	cmp	r4, #16
 8003f2e:	bfdf      	itttt	le
 8003f30:	230a      	movle	r3, #10
 8003f32:	9905      	ldrle	r1, [sp, #20]
 8003f34:	fb03 2301 	mlale	r3, r3, r1, r2
 8003f38:	9305      	strle	r3, [sp, #20]
 8003f3a:	e7e0      	b.n	8003efe <_strtod_l+0x236>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	2301      	movs	r3, #1
 8003f42:	e77b      	b.n	8003e3c <_strtod_l+0x174>
 8003f44:	2700      	movs	r7, #0
 8003f46:	1cb2      	adds	r2, r6, #2
 8003f48:	9219      	str	r2, [sp, #100]	; 0x64
 8003f4a:	78b2      	ldrb	r2, [r6, #2]
 8003f4c:	e784      	b.n	8003e58 <_strtod_l+0x190>
 8003f4e:	bf00      	nop
 8003f50:	08007ab8 	.word	0x08007ab8
 8003f54:	08007870 	.word	0x08007870
 8003f58:	7ff00000 	.word	0x7ff00000
 8003f5c:	2701      	movs	r7, #1
 8003f5e:	e7f2      	b.n	8003f46 <_strtod_l+0x27e>
 8003f60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003f62:	1c51      	adds	r1, r2, #1
 8003f64:	9119      	str	r1, [sp, #100]	; 0x64
 8003f66:	7852      	ldrb	r2, [r2, #1]
 8003f68:	2a30      	cmp	r2, #48	; 0x30
 8003f6a:	d0f9      	beq.n	8003f60 <_strtod_l+0x298>
 8003f6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003f70:	2908      	cmp	r1, #8
 8003f72:	f63f af77 	bhi.w	8003e64 <_strtod_l+0x19c>
 8003f76:	f04f 0e0a 	mov.w	lr, #10
 8003f7a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003f7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003f80:	9209      	str	r2, [sp, #36]	; 0x24
 8003f82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003f84:	1c51      	adds	r1, r2, #1
 8003f86:	9119      	str	r1, [sp, #100]	; 0x64
 8003f88:	7852      	ldrb	r2, [r2, #1]
 8003f8a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003f8e:	2d09      	cmp	r5, #9
 8003f90:	d935      	bls.n	8003ffe <_strtod_l+0x336>
 8003f92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003f94:	1b49      	subs	r1, r1, r5
 8003f96:	2908      	cmp	r1, #8
 8003f98:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003f9c:	dc02      	bgt.n	8003fa4 <_strtod_l+0x2dc>
 8003f9e:	4565      	cmp	r5, ip
 8003fa0:	bfa8      	it	ge
 8003fa2:	4665      	movge	r5, ip
 8003fa4:	b107      	cbz	r7, 8003fa8 <_strtod_l+0x2e0>
 8003fa6:	426d      	negs	r5, r5
 8003fa8:	2c00      	cmp	r4, #0
 8003faa:	d14c      	bne.n	8004046 <_strtod_l+0x37e>
 8003fac:	9907      	ldr	r1, [sp, #28]
 8003fae:	4301      	orrs	r1, r0
 8003fb0:	f47f aecb 	bne.w	8003d4a <_strtod_l+0x82>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f aee4 	bne.w	8003d82 <_strtod_l+0xba>
 8003fba:	2a69      	cmp	r2, #105	; 0x69
 8003fbc:	d026      	beq.n	800400c <_strtod_l+0x344>
 8003fbe:	dc23      	bgt.n	8004008 <_strtod_l+0x340>
 8003fc0:	2a49      	cmp	r2, #73	; 0x49
 8003fc2:	d023      	beq.n	800400c <_strtod_l+0x344>
 8003fc4:	2a4e      	cmp	r2, #78	; 0x4e
 8003fc6:	f47f aedc 	bne.w	8003d82 <_strtod_l+0xba>
 8003fca:	499d      	ldr	r1, [pc, #628]	; (8004240 <_strtod_l+0x578>)
 8003fcc:	a819      	add	r0, sp, #100	; 0x64
 8003fce:	f001 fe17 	bl	8005c00 <__match>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	f43f aed5 	beq.w	8003d82 <_strtod_l+0xba>
 8003fd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b28      	cmp	r3, #40	; 0x28
 8003fde:	d12c      	bne.n	800403a <_strtod_l+0x372>
 8003fe0:	4998      	ldr	r1, [pc, #608]	; (8004244 <_strtod_l+0x57c>)
 8003fe2:	aa1c      	add	r2, sp, #112	; 0x70
 8003fe4:	a819      	add	r0, sp, #100	; 0x64
 8003fe6:	f001 fe1f 	bl	8005c28 <__hexnan>
 8003fea:	2805      	cmp	r0, #5
 8003fec:	d125      	bne.n	800403a <_strtod_l+0x372>
 8003fee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ff0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003ff4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003ff8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003ffc:	e6a5      	b.n	8003d4a <_strtod_l+0x82>
 8003ffe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004002:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004006:	e7bc      	b.n	8003f82 <_strtod_l+0x2ba>
 8004008:	2a6e      	cmp	r2, #110	; 0x6e
 800400a:	e7dc      	b.n	8003fc6 <_strtod_l+0x2fe>
 800400c:	498e      	ldr	r1, [pc, #568]	; (8004248 <_strtod_l+0x580>)
 800400e:	a819      	add	r0, sp, #100	; 0x64
 8004010:	f001 fdf6 	bl	8005c00 <__match>
 8004014:	2800      	cmp	r0, #0
 8004016:	f43f aeb4 	beq.w	8003d82 <_strtod_l+0xba>
 800401a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800401c:	498b      	ldr	r1, [pc, #556]	; (800424c <_strtod_l+0x584>)
 800401e:	3b01      	subs	r3, #1
 8004020:	a819      	add	r0, sp, #100	; 0x64
 8004022:	9319      	str	r3, [sp, #100]	; 0x64
 8004024:	f001 fdec 	bl	8005c00 <__match>
 8004028:	b910      	cbnz	r0, 8004030 <_strtod_l+0x368>
 800402a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800402c:	3301      	adds	r3, #1
 800402e:	9319      	str	r3, [sp, #100]	; 0x64
 8004030:	f04f 0800 	mov.w	r8, #0
 8004034:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004250 <_strtod_l+0x588>
 8004038:	e687      	b.n	8003d4a <_strtod_l+0x82>
 800403a:	4886      	ldr	r0, [pc, #536]	; (8004254 <_strtod_l+0x58c>)
 800403c:	f002 fdce 	bl	8006bdc <nan>
 8004040:	4680      	mov	r8, r0
 8004042:	4689      	mov	r9, r1
 8004044:	e681      	b.n	8003d4a <_strtod_l+0x82>
 8004046:	9b04      	ldr	r3, [sp, #16]
 8004048:	f1bb 0f00 	cmp.w	fp, #0
 800404c:	bf08      	it	eq
 800404e:	46a3      	moveq	fp, r4
 8004050:	1aeb      	subs	r3, r5, r3
 8004052:	2c10      	cmp	r4, #16
 8004054:	9806      	ldr	r0, [sp, #24]
 8004056:	4626      	mov	r6, r4
 8004058:	9307      	str	r3, [sp, #28]
 800405a:	bfa8      	it	ge
 800405c:	2610      	movge	r6, #16
 800405e:	f7fc f9c1 	bl	80003e4 <__aeabi_ui2d>
 8004062:	2c09      	cmp	r4, #9
 8004064:	4680      	mov	r8, r0
 8004066:	4689      	mov	r9, r1
 8004068:	dd13      	ble.n	8004092 <_strtod_l+0x3ca>
 800406a:	4b7b      	ldr	r3, [pc, #492]	; (8004258 <_strtod_l+0x590>)
 800406c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004070:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004074:	f7fc fa30 	bl	80004d8 <__aeabi_dmul>
 8004078:	4680      	mov	r8, r0
 800407a:	9805      	ldr	r0, [sp, #20]
 800407c:	4689      	mov	r9, r1
 800407e:	f7fc f9b1 	bl	80003e4 <__aeabi_ui2d>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4640      	mov	r0, r8
 8004088:	4649      	mov	r1, r9
 800408a:	f7fc f86f 	bl	800016c <__adddf3>
 800408e:	4680      	mov	r8, r0
 8004090:	4689      	mov	r9, r1
 8004092:	2c0f      	cmp	r4, #15
 8004094:	dc36      	bgt.n	8004104 <_strtod_l+0x43c>
 8004096:	9b07      	ldr	r3, [sp, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f43f ae56 	beq.w	8003d4a <_strtod_l+0x82>
 800409e:	dd22      	ble.n	80040e6 <_strtod_l+0x41e>
 80040a0:	2b16      	cmp	r3, #22
 80040a2:	dc09      	bgt.n	80040b8 <_strtod_l+0x3f0>
 80040a4:	496c      	ldr	r1, [pc, #432]	; (8004258 <_strtod_l+0x590>)
 80040a6:	4642      	mov	r2, r8
 80040a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80040ac:	464b      	mov	r3, r9
 80040ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040b2:	f7fc fa11 	bl	80004d8 <__aeabi_dmul>
 80040b6:	e7c3      	b.n	8004040 <_strtod_l+0x378>
 80040b8:	9a07      	ldr	r2, [sp, #28]
 80040ba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80040be:	4293      	cmp	r3, r2
 80040c0:	db20      	blt.n	8004104 <_strtod_l+0x43c>
 80040c2:	4d65      	ldr	r5, [pc, #404]	; (8004258 <_strtod_l+0x590>)
 80040c4:	f1c4 040f 	rsb	r4, r4, #15
 80040c8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80040cc:	4642      	mov	r2, r8
 80040ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040d2:	464b      	mov	r3, r9
 80040d4:	f7fc fa00 	bl	80004d8 <__aeabi_dmul>
 80040d8:	9b07      	ldr	r3, [sp, #28]
 80040da:	1b1c      	subs	r4, r3, r4
 80040dc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80040e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040e4:	e7e5      	b.n	80040b2 <_strtod_l+0x3ea>
 80040e6:	9b07      	ldr	r3, [sp, #28]
 80040e8:	3316      	adds	r3, #22
 80040ea:	db0b      	blt.n	8004104 <_strtod_l+0x43c>
 80040ec:	9b04      	ldr	r3, [sp, #16]
 80040ee:	4640      	mov	r0, r8
 80040f0:	1b5d      	subs	r5, r3, r5
 80040f2:	4b59      	ldr	r3, [pc, #356]	; (8004258 <_strtod_l+0x590>)
 80040f4:	4649      	mov	r1, r9
 80040f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80040fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040fe:	f7fc fb15 	bl	800072c <__aeabi_ddiv>
 8004102:	e79d      	b.n	8004040 <_strtod_l+0x378>
 8004104:	9b07      	ldr	r3, [sp, #28]
 8004106:	1ba6      	subs	r6, r4, r6
 8004108:	441e      	add	r6, r3
 800410a:	2e00      	cmp	r6, #0
 800410c:	dd74      	ble.n	80041f8 <_strtod_l+0x530>
 800410e:	f016 030f 	ands.w	r3, r6, #15
 8004112:	d00a      	beq.n	800412a <_strtod_l+0x462>
 8004114:	4950      	ldr	r1, [pc, #320]	; (8004258 <_strtod_l+0x590>)
 8004116:	4642      	mov	r2, r8
 8004118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800411c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004120:	464b      	mov	r3, r9
 8004122:	f7fc f9d9 	bl	80004d8 <__aeabi_dmul>
 8004126:	4680      	mov	r8, r0
 8004128:	4689      	mov	r9, r1
 800412a:	f036 060f 	bics.w	r6, r6, #15
 800412e:	d052      	beq.n	80041d6 <_strtod_l+0x50e>
 8004130:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004134:	dd27      	ble.n	8004186 <_strtod_l+0x4be>
 8004136:	f04f 0b00 	mov.w	fp, #0
 800413a:	f8cd b010 	str.w	fp, [sp, #16]
 800413e:	f8cd b020 	str.w	fp, [sp, #32]
 8004142:	f8cd b018 	str.w	fp, [sp, #24]
 8004146:	2322      	movs	r3, #34	; 0x22
 8004148:	f04f 0800 	mov.w	r8, #0
 800414c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004250 <_strtod_l+0x588>
 8004150:	f8ca 3000 	str.w	r3, [sl]
 8004154:	9b08      	ldr	r3, [sp, #32]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f43f adf7 	beq.w	8003d4a <_strtod_l+0x82>
 800415c:	4650      	mov	r0, sl
 800415e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004160:	f001 fe78 	bl	8005e54 <_Bfree>
 8004164:	4650      	mov	r0, sl
 8004166:	9906      	ldr	r1, [sp, #24]
 8004168:	f001 fe74 	bl	8005e54 <_Bfree>
 800416c:	4650      	mov	r0, sl
 800416e:	9904      	ldr	r1, [sp, #16]
 8004170:	f001 fe70 	bl	8005e54 <_Bfree>
 8004174:	4650      	mov	r0, sl
 8004176:	9908      	ldr	r1, [sp, #32]
 8004178:	f001 fe6c 	bl	8005e54 <_Bfree>
 800417c:	4659      	mov	r1, fp
 800417e:	4650      	mov	r0, sl
 8004180:	f001 fe68 	bl	8005e54 <_Bfree>
 8004184:	e5e1      	b.n	8003d4a <_strtod_l+0x82>
 8004186:	4b35      	ldr	r3, [pc, #212]	; (800425c <_strtod_l+0x594>)
 8004188:	4640      	mov	r0, r8
 800418a:	9305      	str	r3, [sp, #20]
 800418c:	2300      	movs	r3, #0
 800418e:	4649      	mov	r1, r9
 8004190:	461f      	mov	r7, r3
 8004192:	1136      	asrs	r6, r6, #4
 8004194:	2e01      	cmp	r6, #1
 8004196:	dc21      	bgt.n	80041dc <_strtod_l+0x514>
 8004198:	b10b      	cbz	r3, 800419e <_strtod_l+0x4d6>
 800419a:	4680      	mov	r8, r0
 800419c:	4689      	mov	r9, r1
 800419e:	4b2f      	ldr	r3, [pc, #188]	; (800425c <_strtod_l+0x594>)
 80041a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80041a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80041a8:	4642      	mov	r2, r8
 80041aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041ae:	464b      	mov	r3, r9
 80041b0:	f7fc f992 	bl	80004d8 <__aeabi_dmul>
 80041b4:	4b26      	ldr	r3, [pc, #152]	; (8004250 <_strtod_l+0x588>)
 80041b6:	460a      	mov	r2, r1
 80041b8:	400b      	ands	r3, r1
 80041ba:	4929      	ldr	r1, [pc, #164]	; (8004260 <_strtod_l+0x598>)
 80041bc:	4680      	mov	r8, r0
 80041be:	428b      	cmp	r3, r1
 80041c0:	d8b9      	bhi.n	8004136 <_strtod_l+0x46e>
 80041c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80041c6:	428b      	cmp	r3, r1
 80041c8:	bf86      	itte	hi
 80041ca:	f04f 38ff 	movhi.w	r8, #4294967295
 80041ce:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004264 <_strtod_l+0x59c>
 80041d2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80041d6:	2300      	movs	r3, #0
 80041d8:	9305      	str	r3, [sp, #20]
 80041da:	e07f      	b.n	80042dc <_strtod_l+0x614>
 80041dc:	07f2      	lsls	r2, r6, #31
 80041de:	d505      	bpl.n	80041ec <_strtod_l+0x524>
 80041e0:	9b05      	ldr	r3, [sp, #20]
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f7fc f977 	bl	80004d8 <__aeabi_dmul>
 80041ea:	2301      	movs	r3, #1
 80041ec:	9a05      	ldr	r2, [sp, #20]
 80041ee:	3701      	adds	r7, #1
 80041f0:	3208      	adds	r2, #8
 80041f2:	1076      	asrs	r6, r6, #1
 80041f4:	9205      	str	r2, [sp, #20]
 80041f6:	e7cd      	b.n	8004194 <_strtod_l+0x4cc>
 80041f8:	d0ed      	beq.n	80041d6 <_strtod_l+0x50e>
 80041fa:	4276      	negs	r6, r6
 80041fc:	f016 020f 	ands.w	r2, r6, #15
 8004200:	d00a      	beq.n	8004218 <_strtod_l+0x550>
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <_strtod_l+0x590>)
 8004204:	4640      	mov	r0, r8
 8004206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800420a:	4649      	mov	r1, r9
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f7fc fa8c 	bl	800072c <__aeabi_ddiv>
 8004214:	4680      	mov	r8, r0
 8004216:	4689      	mov	r9, r1
 8004218:	1136      	asrs	r6, r6, #4
 800421a:	d0dc      	beq.n	80041d6 <_strtod_l+0x50e>
 800421c:	2e1f      	cmp	r6, #31
 800421e:	dd23      	ble.n	8004268 <_strtod_l+0x5a0>
 8004220:	f04f 0b00 	mov.w	fp, #0
 8004224:	f8cd b010 	str.w	fp, [sp, #16]
 8004228:	f8cd b020 	str.w	fp, [sp, #32]
 800422c:	f8cd b018 	str.w	fp, [sp, #24]
 8004230:	2322      	movs	r3, #34	; 0x22
 8004232:	f04f 0800 	mov.w	r8, #0
 8004236:	f04f 0900 	mov.w	r9, #0
 800423a:	f8ca 3000 	str.w	r3, [sl]
 800423e:	e789      	b.n	8004154 <_strtod_l+0x48c>
 8004240:	08007841 	.word	0x08007841
 8004244:	08007884 	.word	0x08007884
 8004248:	08007839 	.word	0x08007839
 800424c:	080079c4 	.word	0x080079c4
 8004250:	7ff00000 	.word	0x7ff00000
 8004254:	08007c70 	.word	0x08007c70
 8004258:	08007b50 	.word	0x08007b50
 800425c:	08007b28 	.word	0x08007b28
 8004260:	7ca00000 	.word	0x7ca00000
 8004264:	7fefffff 	.word	0x7fefffff
 8004268:	f016 0310 	ands.w	r3, r6, #16
 800426c:	bf18      	it	ne
 800426e:	236a      	movne	r3, #106	; 0x6a
 8004270:	4640      	mov	r0, r8
 8004272:	9305      	str	r3, [sp, #20]
 8004274:	4649      	mov	r1, r9
 8004276:	2300      	movs	r3, #0
 8004278:	4fb0      	ldr	r7, [pc, #704]	; (800453c <_strtod_l+0x874>)
 800427a:	07f2      	lsls	r2, r6, #31
 800427c:	d504      	bpl.n	8004288 <_strtod_l+0x5c0>
 800427e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004282:	f7fc f929 	bl	80004d8 <__aeabi_dmul>
 8004286:	2301      	movs	r3, #1
 8004288:	1076      	asrs	r6, r6, #1
 800428a:	f107 0708 	add.w	r7, r7, #8
 800428e:	d1f4      	bne.n	800427a <_strtod_l+0x5b2>
 8004290:	b10b      	cbz	r3, 8004296 <_strtod_l+0x5ce>
 8004292:	4680      	mov	r8, r0
 8004294:	4689      	mov	r9, r1
 8004296:	9b05      	ldr	r3, [sp, #20]
 8004298:	b1c3      	cbz	r3, 80042cc <_strtod_l+0x604>
 800429a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800429e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	4649      	mov	r1, r9
 80042a6:	dd11      	ble.n	80042cc <_strtod_l+0x604>
 80042a8:	2b1f      	cmp	r3, #31
 80042aa:	f340 8127 	ble.w	80044fc <_strtod_l+0x834>
 80042ae:	2b34      	cmp	r3, #52	; 0x34
 80042b0:	bfd8      	it	le
 80042b2:	f04f 33ff 	movle.w	r3, #4294967295
 80042b6:	f04f 0800 	mov.w	r8, #0
 80042ba:	bfcf      	iteee	gt
 80042bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80042c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80042c4:	fa03 f202 	lslle.w	r2, r3, r2
 80042c8:	ea02 0901 	andle.w	r9, r2, r1
 80042cc:	2200      	movs	r2, #0
 80042ce:	2300      	movs	r3, #0
 80042d0:	4640      	mov	r0, r8
 80042d2:	4649      	mov	r1, r9
 80042d4:	f7fc fb68 	bl	80009a8 <__aeabi_dcmpeq>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d1a1      	bne.n	8004220 <_strtod_l+0x558>
 80042dc:	9b06      	ldr	r3, [sp, #24]
 80042de:	465a      	mov	r2, fp
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	4650      	mov	r0, sl
 80042e4:	4623      	mov	r3, r4
 80042e6:	9908      	ldr	r1, [sp, #32]
 80042e8:	f001 fe1c 	bl	8005f24 <__s2b>
 80042ec:	9008      	str	r0, [sp, #32]
 80042ee:	2800      	cmp	r0, #0
 80042f0:	f43f af21 	beq.w	8004136 <_strtod_l+0x46e>
 80042f4:	9b04      	ldr	r3, [sp, #16]
 80042f6:	f04f 0b00 	mov.w	fp, #0
 80042fa:	1b5d      	subs	r5, r3, r5
 80042fc:	9b07      	ldr	r3, [sp, #28]
 80042fe:	f8cd b010 	str.w	fp, [sp, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfb4      	ite	lt
 8004306:	462b      	movlt	r3, r5
 8004308:	2300      	movge	r3, #0
 800430a:	930e      	str	r3, [sp, #56]	; 0x38
 800430c:	9b07      	ldr	r3, [sp, #28]
 800430e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004312:	9314      	str	r3, [sp, #80]	; 0x50
 8004314:	9b08      	ldr	r3, [sp, #32]
 8004316:	4650      	mov	r0, sl
 8004318:	6859      	ldr	r1, [r3, #4]
 800431a:	f001 fd5b 	bl	8005dd4 <_Balloc>
 800431e:	9006      	str	r0, [sp, #24]
 8004320:	2800      	cmp	r0, #0
 8004322:	f43f af10 	beq.w	8004146 <_strtod_l+0x47e>
 8004326:	9b08      	ldr	r3, [sp, #32]
 8004328:	300c      	adds	r0, #12
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	f103 010c 	add.w	r1, r3, #12
 8004330:	3202      	adds	r2, #2
 8004332:	0092      	lsls	r2, r2, #2
 8004334:	f001 fd40 	bl	8005db8 <memcpy>
 8004338:	ab1c      	add	r3, sp, #112	; 0x70
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	ab1b      	add	r3, sp, #108	; 0x6c
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	4650      	mov	r0, sl
 8004346:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800434a:	f002 f92d 	bl	80065a8 <__d2b>
 800434e:	901a      	str	r0, [sp, #104]	; 0x68
 8004350:	2800      	cmp	r0, #0
 8004352:	f43f aef8 	beq.w	8004146 <_strtod_l+0x47e>
 8004356:	2101      	movs	r1, #1
 8004358:	4650      	mov	r0, sl
 800435a:	f001 fe7b 	bl	8006054 <__i2b>
 800435e:	4603      	mov	r3, r0
 8004360:	9004      	str	r0, [sp, #16]
 8004362:	2800      	cmp	r0, #0
 8004364:	f43f aeef 	beq.w	8004146 <_strtod_l+0x47e>
 8004368:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800436a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800436c:	2d00      	cmp	r5, #0
 800436e:	bfab      	itete	ge
 8004370:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004372:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004374:	18ee      	addge	r6, r5, r3
 8004376:	1b5c      	sublt	r4, r3, r5
 8004378:	9b05      	ldr	r3, [sp, #20]
 800437a:	bfa8      	it	ge
 800437c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800437e:	eba5 0503 	sub.w	r5, r5, r3
 8004382:	4415      	add	r5, r2
 8004384:	4b6e      	ldr	r3, [pc, #440]	; (8004540 <_strtod_l+0x878>)
 8004386:	f105 35ff 	add.w	r5, r5, #4294967295
 800438a:	bfb8      	it	lt
 800438c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800438e:	429d      	cmp	r5, r3
 8004390:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004394:	f280 80c4 	bge.w	8004520 <_strtod_l+0x858>
 8004398:	1b5b      	subs	r3, r3, r5
 800439a:	2b1f      	cmp	r3, #31
 800439c:	f04f 0701 	mov.w	r7, #1
 80043a0:	eba2 0203 	sub.w	r2, r2, r3
 80043a4:	f300 80b1 	bgt.w	800450a <_strtod_l+0x842>
 80043a8:	2500      	movs	r5, #0
 80043aa:	fa07 f303 	lsl.w	r3, r7, r3
 80043ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80043b0:	18b7      	adds	r7, r6, r2
 80043b2:	9b05      	ldr	r3, [sp, #20]
 80043b4:	42be      	cmp	r6, r7
 80043b6:	4414      	add	r4, r2
 80043b8:	441c      	add	r4, r3
 80043ba:	4633      	mov	r3, r6
 80043bc:	bfa8      	it	ge
 80043be:	463b      	movge	r3, r7
 80043c0:	42a3      	cmp	r3, r4
 80043c2:	bfa8      	it	ge
 80043c4:	4623      	movge	r3, r4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bfc2      	ittt	gt
 80043ca:	1aff      	subgt	r7, r7, r3
 80043cc:	1ae4      	subgt	r4, r4, r3
 80043ce:	1af6      	subgt	r6, r6, r3
 80043d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	dd17      	ble.n	8004406 <_strtod_l+0x73e>
 80043d6:	461a      	mov	r2, r3
 80043d8:	4650      	mov	r0, sl
 80043da:	9904      	ldr	r1, [sp, #16]
 80043dc:	f001 fef8 	bl	80061d0 <__pow5mult>
 80043e0:	9004      	str	r0, [sp, #16]
 80043e2:	2800      	cmp	r0, #0
 80043e4:	f43f aeaf 	beq.w	8004146 <_strtod_l+0x47e>
 80043e8:	4601      	mov	r1, r0
 80043ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80043ec:	4650      	mov	r0, sl
 80043ee:	f001 fe47 	bl	8006080 <__multiply>
 80043f2:	9009      	str	r0, [sp, #36]	; 0x24
 80043f4:	2800      	cmp	r0, #0
 80043f6:	f43f aea6 	beq.w	8004146 <_strtod_l+0x47e>
 80043fa:	4650      	mov	r0, sl
 80043fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80043fe:	f001 fd29 	bl	8005e54 <_Bfree>
 8004402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004404:	931a      	str	r3, [sp, #104]	; 0x68
 8004406:	2f00      	cmp	r7, #0
 8004408:	f300 808e 	bgt.w	8004528 <_strtod_l+0x860>
 800440c:	9b07      	ldr	r3, [sp, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	dd08      	ble.n	8004424 <_strtod_l+0x75c>
 8004412:	4650      	mov	r0, sl
 8004414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004416:	9906      	ldr	r1, [sp, #24]
 8004418:	f001 feda 	bl	80061d0 <__pow5mult>
 800441c:	9006      	str	r0, [sp, #24]
 800441e:	2800      	cmp	r0, #0
 8004420:	f43f ae91 	beq.w	8004146 <_strtod_l+0x47e>
 8004424:	2c00      	cmp	r4, #0
 8004426:	dd08      	ble.n	800443a <_strtod_l+0x772>
 8004428:	4622      	mov	r2, r4
 800442a:	4650      	mov	r0, sl
 800442c:	9906      	ldr	r1, [sp, #24]
 800442e:	f001 ff29 	bl	8006284 <__lshift>
 8004432:	9006      	str	r0, [sp, #24]
 8004434:	2800      	cmp	r0, #0
 8004436:	f43f ae86 	beq.w	8004146 <_strtod_l+0x47e>
 800443a:	2e00      	cmp	r6, #0
 800443c:	dd08      	ble.n	8004450 <_strtod_l+0x788>
 800443e:	4632      	mov	r2, r6
 8004440:	4650      	mov	r0, sl
 8004442:	9904      	ldr	r1, [sp, #16]
 8004444:	f001 ff1e 	bl	8006284 <__lshift>
 8004448:	9004      	str	r0, [sp, #16]
 800444a:	2800      	cmp	r0, #0
 800444c:	f43f ae7b 	beq.w	8004146 <_strtod_l+0x47e>
 8004450:	4650      	mov	r0, sl
 8004452:	9a06      	ldr	r2, [sp, #24]
 8004454:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004456:	f001 ffa1 	bl	800639c <__mdiff>
 800445a:	4683      	mov	fp, r0
 800445c:	2800      	cmp	r0, #0
 800445e:	f43f ae72 	beq.w	8004146 <_strtod_l+0x47e>
 8004462:	2400      	movs	r4, #0
 8004464:	68c3      	ldr	r3, [r0, #12]
 8004466:	9904      	ldr	r1, [sp, #16]
 8004468:	60c4      	str	r4, [r0, #12]
 800446a:	930b      	str	r3, [sp, #44]	; 0x2c
 800446c:	f001 ff7a 	bl	8006364 <__mcmp>
 8004470:	42a0      	cmp	r0, r4
 8004472:	da6b      	bge.n	800454c <_strtod_l+0x884>
 8004474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004476:	ea53 0308 	orrs.w	r3, r3, r8
 800447a:	f040 8091 	bne.w	80045a0 <_strtod_l+0x8d8>
 800447e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004482:	2b00      	cmp	r3, #0
 8004484:	f040 808c 	bne.w	80045a0 <_strtod_l+0x8d8>
 8004488:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800448c:	0d1b      	lsrs	r3, r3, #20
 800448e:	051b      	lsls	r3, r3, #20
 8004490:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004494:	f240 8084 	bls.w	80045a0 <_strtod_l+0x8d8>
 8004498:	f8db 3014 	ldr.w	r3, [fp, #20]
 800449c:	b91b      	cbnz	r3, 80044a6 <_strtod_l+0x7de>
 800449e:	f8db 3010 	ldr.w	r3, [fp, #16]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	dd7c      	ble.n	80045a0 <_strtod_l+0x8d8>
 80044a6:	4659      	mov	r1, fp
 80044a8:	2201      	movs	r2, #1
 80044aa:	4650      	mov	r0, sl
 80044ac:	f001 feea 	bl	8006284 <__lshift>
 80044b0:	9904      	ldr	r1, [sp, #16]
 80044b2:	4683      	mov	fp, r0
 80044b4:	f001 ff56 	bl	8006364 <__mcmp>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	dd71      	ble.n	80045a0 <_strtod_l+0x8d8>
 80044bc:	9905      	ldr	r1, [sp, #20]
 80044be:	464b      	mov	r3, r9
 80044c0:	4a20      	ldr	r2, [pc, #128]	; (8004544 <_strtod_l+0x87c>)
 80044c2:	2900      	cmp	r1, #0
 80044c4:	f000 808c 	beq.w	80045e0 <_strtod_l+0x918>
 80044c8:	ea02 0109 	and.w	r1, r2, r9
 80044cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80044d0:	f300 8086 	bgt.w	80045e0 <_strtod_l+0x918>
 80044d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80044d8:	f77f aeaa 	ble.w	8004230 <_strtod_l+0x568>
 80044dc:	4640      	mov	r0, r8
 80044de:	4649      	mov	r1, r9
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <_strtod_l+0x880>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	f7fb fff8 	bl	80004d8 <__aeabi_dmul>
 80044e8:	460b      	mov	r3, r1
 80044ea:	4303      	orrs	r3, r0
 80044ec:	bf08      	it	eq
 80044ee:	2322      	moveq	r3, #34	; 0x22
 80044f0:	4680      	mov	r8, r0
 80044f2:	4689      	mov	r9, r1
 80044f4:	bf08      	it	eq
 80044f6:	f8ca 3000 	streq.w	r3, [sl]
 80044fa:	e62f      	b.n	800415c <_strtod_l+0x494>
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	ea03 0808 	and.w	r8, r3, r8
 8004508:	e6e0      	b.n	80042cc <_strtod_l+0x604>
 800450a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800450e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004512:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004516:	35e2      	adds	r5, #226	; 0xe2
 8004518:	fa07 f505 	lsl.w	r5, r7, r5
 800451c:	970f      	str	r7, [sp, #60]	; 0x3c
 800451e:	e747      	b.n	80043b0 <_strtod_l+0x6e8>
 8004520:	2301      	movs	r3, #1
 8004522:	2500      	movs	r5, #0
 8004524:	930f      	str	r3, [sp, #60]	; 0x3c
 8004526:	e743      	b.n	80043b0 <_strtod_l+0x6e8>
 8004528:	463a      	mov	r2, r7
 800452a:	4650      	mov	r0, sl
 800452c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800452e:	f001 fea9 	bl	8006284 <__lshift>
 8004532:	901a      	str	r0, [sp, #104]	; 0x68
 8004534:	2800      	cmp	r0, #0
 8004536:	f47f af69 	bne.w	800440c <_strtod_l+0x744>
 800453a:	e604      	b.n	8004146 <_strtod_l+0x47e>
 800453c:	08007898 	.word	0x08007898
 8004540:	fffffc02 	.word	0xfffffc02
 8004544:	7ff00000 	.word	0x7ff00000
 8004548:	39500000 	.word	0x39500000
 800454c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004550:	d165      	bne.n	800461e <_strtod_l+0x956>
 8004552:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004554:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004558:	b35a      	cbz	r2, 80045b2 <_strtod_l+0x8ea>
 800455a:	4a99      	ldr	r2, [pc, #612]	; (80047c0 <_strtod_l+0xaf8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d12b      	bne.n	80045b8 <_strtod_l+0x8f0>
 8004560:	9b05      	ldr	r3, [sp, #20]
 8004562:	4641      	mov	r1, r8
 8004564:	b303      	cbz	r3, 80045a8 <_strtod_l+0x8e0>
 8004566:	464a      	mov	r2, r9
 8004568:	4b96      	ldr	r3, [pc, #600]	; (80047c4 <_strtod_l+0xafc>)
 800456a:	4013      	ands	r3, r2
 800456c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	d81b      	bhi.n	80045ae <_strtod_l+0x8e6>
 8004576:	0d1b      	lsrs	r3, r3, #20
 8004578:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	4299      	cmp	r1, r3
 8004582:	d119      	bne.n	80045b8 <_strtod_l+0x8f0>
 8004584:	4b90      	ldr	r3, [pc, #576]	; (80047c8 <_strtod_l+0xb00>)
 8004586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004588:	429a      	cmp	r2, r3
 800458a:	d102      	bne.n	8004592 <_strtod_l+0x8ca>
 800458c:	3101      	adds	r1, #1
 800458e:	f43f adda 	beq.w	8004146 <_strtod_l+0x47e>
 8004592:	f04f 0800 	mov.w	r8, #0
 8004596:	4b8b      	ldr	r3, [pc, #556]	; (80047c4 <_strtod_l+0xafc>)
 8004598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800459a:	401a      	ands	r2, r3
 800459c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80045a0:	9b05      	ldr	r3, [sp, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d19a      	bne.n	80044dc <_strtod_l+0x814>
 80045a6:	e5d9      	b.n	800415c <_strtod_l+0x494>
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ac:	e7e8      	b.n	8004580 <_strtod_l+0x8b8>
 80045ae:	4613      	mov	r3, r2
 80045b0:	e7e6      	b.n	8004580 <_strtod_l+0x8b8>
 80045b2:	ea53 0308 	orrs.w	r3, r3, r8
 80045b6:	d081      	beq.n	80044bc <_strtod_l+0x7f4>
 80045b8:	b1e5      	cbz	r5, 80045f4 <_strtod_l+0x92c>
 80045ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045bc:	421d      	tst	r5, r3
 80045be:	d0ef      	beq.n	80045a0 <_strtod_l+0x8d8>
 80045c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045c2:	4640      	mov	r0, r8
 80045c4:	4649      	mov	r1, r9
 80045c6:	9a05      	ldr	r2, [sp, #20]
 80045c8:	b1c3      	cbz	r3, 80045fc <_strtod_l+0x934>
 80045ca:	f7ff fb5b 	bl	8003c84 <sulp>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045d6:	f7fb fdc9 	bl	800016c <__adddf3>
 80045da:	4680      	mov	r8, r0
 80045dc:	4689      	mov	r9, r1
 80045de:	e7df      	b.n	80045a0 <_strtod_l+0x8d8>
 80045e0:	4013      	ands	r3, r2
 80045e2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80045e6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80045ea:	f04f 38ff 	mov.w	r8, #4294967295
 80045ee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80045f2:	e7d5      	b.n	80045a0 <_strtod_l+0x8d8>
 80045f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045f6:	ea13 0f08 	tst.w	r3, r8
 80045fa:	e7e0      	b.n	80045be <_strtod_l+0x8f6>
 80045fc:	f7ff fb42 	bl	8003c84 <sulp>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004608:	f7fb fdae 	bl	8000168 <__aeabi_dsub>
 800460c:	2200      	movs	r2, #0
 800460e:	2300      	movs	r3, #0
 8004610:	4680      	mov	r8, r0
 8004612:	4689      	mov	r9, r1
 8004614:	f7fc f9c8 	bl	80009a8 <__aeabi_dcmpeq>
 8004618:	2800      	cmp	r0, #0
 800461a:	d0c1      	beq.n	80045a0 <_strtod_l+0x8d8>
 800461c:	e608      	b.n	8004230 <_strtod_l+0x568>
 800461e:	4658      	mov	r0, fp
 8004620:	9904      	ldr	r1, [sp, #16]
 8004622:	f002 f81d 	bl	8006660 <__ratio>
 8004626:	2200      	movs	r2, #0
 8004628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800462c:	4606      	mov	r6, r0
 800462e:	460f      	mov	r7, r1
 8004630:	f7fc f9ce 	bl	80009d0 <__aeabi_dcmple>
 8004634:	2800      	cmp	r0, #0
 8004636:	d070      	beq.n	800471a <_strtod_l+0xa52>
 8004638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d042      	beq.n	80046c4 <_strtod_l+0x9fc>
 800463e:	2600      	movs	r6, #0
 8004640:	4f62      	ldr	r7, [pc, #392]	; (80047cc <_strtod_l+0xb04>)
 8004642:	4d62      	ldr	r5, [pc, #392]	; (80047cc <_strtod_l+0xb04>)
 8004644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800464a:	0d1b      	lsrs	r3, r3, #20
 800464c:	051b      	lsls	r3, r3, #20
 800464e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004652:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <_strtod_l+0xb08>)
 8004654:	429a      	cmp	r2, r3
 8004656:	f040 80c3 	bne.w	80047e0 <_strtod_l+0xb18>
 800465a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465c:	4640      	mov	r0, r8
 800465e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004662:	4649      	mov	r1, r9
 8004664:	f001 ff26 	bl	80064b4 <__ulp>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4630      	mov	r0, r6
 800466e:	4639      	mov	r1, r7
 8004670:	f7fb ff32 	bl	80004d8 <__aeabi_dmul>
 8004674:	4642      	mov	r2, r8
 8004676:	464b      	mov	r3, r9
 8004678:	f7fb fd78 	bl	800016c <__adddf3>
 800467c:	460b      	mov	r3, r1
 800467e:	4951      	ldr	r1, [pc, #324]	; (80047c4 <_strtod_l+0xafc>)
 8004680:	4a54      	ldr	r2, [pc, #336]	; (80047d4 <_strtod_l+0xb0c>)
 8004682:	4019      	ands	r1, r3
 8004684:	4291      	cmp	r1, r2
 8004686:	4680      	mov	r8, r0
 8004688:	d95d      	bls.n	8004746 <_strtod_l+0xa7e>
 800468a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800468c:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <_strtod_l+0xb00>)
 800468e:	429a      	cmp	r2, r3
 8004690:	d103      	bne.n	800469a <_strtod_l+0x9d2>
 8004692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004694:	3301      	adds	r3, #1
 8004696:	f43f ad56 	beq.w	8004146 <_strtod_l+0x47e>
 800469a:	f04f 38ff 	mov.w	r8, #4294967295
 800469e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80047c8 <_strtod_l+0xb00>
 80046a2:	4650      	mov	r0, sl
 80046a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80046a6:	f001 fbd5 	bl	8005e54 <_Bfree>
 80046aa:	4650      	mov	r0, sl
 80046ac:	9906      	ldr	r1, [sp, #24]
 80046ae:	f001 fbd1 	bl	8005e54 <_Bfree>
 80046b2:	4650      	mov	r0, sl
 80046b4:	9904      	ldr	r1, [sp, #16]
 80046b6:	f001 fbcd 	bl	8005e54 <_Bfree>
 80046ba:	4659      	mov	r1, fp
 80046bc:	4650      	mov	r0, sl
 80046be:	f001 fbc9 	bl	8005e54 <_Bfree>
 80046c2:	e627      	b.n	8004314 <_strtod_l+0x64c>
 80046c4:	f1b8 0f00 	cmp.w	r8, #0
 80046c8:	d119      	bne.n	80046fe <_strtod_l+0xa36>
 80046ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d0:	b9e3      	cbnz	r3, 800470c <_strtod_l+0xa44>
 80046d2:	2200      	movs	r2, #0
 80046d4:	4630      	mov	r0, r6
 80046d6:	4639      	mov	r1, r7
 80046d8:	4b3c      	ldr	r3, [pc, #240]	; (80047cc <_strtod_l+0xb04>)
 80046da:	f7fc f96f 	bl	80009bc <__aeabi_dcmplt>
 80046de:	b9c8      	cbnz	r0, 8004714 <_strtod_l+0xa4c>
 80046e0:	2200      	movs	r2, #0
 80046e2:	4630      	mov	r0, r6
 80046e4:	4639      	mov	r1, r7
 80046e6:	4b3c      	ldr	r3, [pc, #240]	; (80047d8 <_strtod_l+0xb10>)
 80046e8:	f7fb fef6 	bl	80004d8 <__aeabi_dmul>
 80046ec:	4604      	mov	r4, r0
 80046ee:	460d      	mov	r5, r1
 80046f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80046f4:	9416      	str	r4, [sp, #88]	; 0x58
 80046f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80046f8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80046fc:	e7a2      	b.n	8004644 <_strtod_l+0x97c>
 80046fe:	f1b8 0f01 	cmp.w	r8, #1
 8004702:	d103      	bne.n	800470c <_strtod_l+0xa44>
 8004704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	f43f ad92 	beq.w	8004230 <_strtod_l+0x568>
 800470c:	2600      	movs	r6, #0
 800470e:	2400      	movs	r4, #0
 8004710:	4f32      	ldr	r7, [pc, #200]	; (80047dc <_strtod_l+0xb14>)
 8004712:	e796      	b.n	8004642 <_strtod_l+0x97a>
 8004714:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004716:	4d30      	ldr	r5, [pc, #192]	; (80047d8 <_strtod_l+0xb10>)
 8004718:	e7ea      	b.n	80046f0 <_strtod_l+0xa28>
 800471a:	4b2f      	ldr	r3, [pc, #188]	; (80047d8 <_strtod_l+0xb10>)
 800471c:	2200      	movs	r2, #0
 800471e:	4630      	mov	r0, r6
 8004720:	4639      	mov	r1, r7
 8004722:	f7fb fed9 	bl	80004d8 <__aeabi_dmul>
 8004726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004728:	4604      	mov	r4, r0
 800472a:	460d      	mov	r5, r1
 800472c:	b933      	cbnz	r3, 800473c <_strtod_l+0xa74>
 800472e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004732:	9010      	str	r0, [sp, #64]	; 0x40
 8004734:	9311      	str	r3, [sp, #68]	; 0x44
 8004736:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800473a:	e783      	b.n	8004644 <_strtod_l+0x97c>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004744:	e7f7      	b.n	8004736 <_strtod_l+0xa6e>
 8004746:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800474a:	9b05      	ldr	r3, [sp, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1a8      	bne.n	80046a2 <_strtod_l+0x9da>
 8004750:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004756:	0d1b      	lsrs	r3, r3, #20
 8004758:	051b      	lsls	r3, r3, #20
 800475a:	429a      	cmp	r2, r3
 800475c:	d1a1      	bne.n	80046a2 <_strtod_l+0x9da>
 800475e:	4620      	mov	r0, r4
 8004760:	4629      	mov	r1, r5
 8004762:	f7fc fa01 	bl	8000b68 <__aeabi_d2lz>
 8004766:	f7fb fe89 	bl	800047c <__aeabi_l2d>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4620      	mov	r0, r4
 8004770:	4629      	mov	r1, r5
 8004772:	f7fb fcf9 	bl	8000168 <__aeabi_dsub>
 8004776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800477c:	ea43 0308 	orr.w	r3, r3, r8
 8004780:	4313      	orrs	r3, r2
 8004782:	4604      	mov	r4, r0
 8004784:	460d      	mov	r5, r1
 8004786:	d066      	beq.n	8004856 <_strtod_l+0xb8e>
 8004788:	a309      	add	r3, pc, #36	; (adr r3, 80047b0 <_strtod_l+0xae8>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fc f915 	bl	80009bc <__aeabi_dcmplt>
 8004792:	2800      	cmp	r0, #0
 8004794:	f47f ace2 	bne.w	800415c <_strtod_l+0x494>
 8004798:	a307      	add	r3, pc, #28	; (adr r3, 80047b8 <_strtod_l+0xaf0>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	4620      	mov	r0, r4
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7fc f929 	bl	80009f8 <__aeabi_dcmpgt>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	f43f af7b 	beq.w	80046a2 <_strtod_l+0x9da>
 80047ac:	e4d6      	b.n	800415c <_strtod_l+0x494>
 80047ae:	bf00      	nop
 80047b0:	94a03595 	.word	0x94a03595
 80047b4:	3fdfffff 	.word	0x3fdfffff
 80047b8:	35afe535 	.word	0x35afe535
 80047bc:	3fe00000 	.word	0x3fe00000
 80047c0:	000fffff 	.word	0x000fffff
 80047c4:	7ff00000 	.word	0x7ff00000
 80047c8:	7fefffff 	.word	0x7fefffff
 80047cc:	3ff00000 	.word	0x3ff00000
 80047d0:	7fe00000 	.word	0x7fe00000
 80047d4:	7c9fffff 	.word	0x7c9fffff
 80047d8:	3fe00000 	.word	0x3fe00000
 80047dc:	bff00000 	.word	0xbff00000
 80047e0:	9b05      	ldr	r3, [sp, #20]
 80047e2:	b313      	cbz	r3, 800482a <_strtod_l+0xb62>
 80047e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80047ea:	d81e      	bhi.n	800482a <_strtod_l+0xb62>
 80047ec:	a326      	add	r3, pc, #152	; (adr r3, 8004888 <_strtod_l+0xbc0>)
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	4620      	mov	r0, r4
 80047f4:	4629      	mov	r1, r5
 80047f6:	f7fc f8eb 	bl	80009d0 <__aeabi_dcmple>
 80047fa:	b190      	cbz	r0, 8004822 <_strtod_l+0xb5a>
 80047fc:	4629      	mov	r1, r5
 80047fe:	4620      	mov	r0, r4
 8004800:	f7fc f942 	bl	8000a88 <__aeabi_d2uiz>
 8004804:	2801      	cmp	r0, #1
 8004806:	bf38      	it	cc
 8004808:	2001      	movcc	r0, #1
 800480a:	f7fb fdeb 	bl	80003e4 <__aeabi_ui2d>
 800480e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004810:	4604      	mov	r4, r0
 8004812:	460d      	mov	r5, r1
 8004814:	b9d3      	cbnz	r3, 800484c <_strtod_l+0xb84>
 8004816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800481a:	9012      	str	r0, [sp, #72]	; 0x48
 800481c:	9313      	str	r3, [sp, #76]	; 0x4c
 800481e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004822:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004824:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004828:	1a9f      	subs	r7, r3, r2
 800482a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800482e:	f001 fe41 	bl	80064b4 <__ulp>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4630      	mov	r0, r6
 8004838:	4639      	mov	r1, r7
 800483a:	f7fb fe4d 	bl	80004d8 <__aeabi_dmul>
 800483e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004842:	f7fb fc93 	bl	800016c <__adddf3>
 8004846:	4680      	mov	r8, r0
 8004848:	4689      	mov	r9, r1
 800484a:	e77e      	b.n	800474a <_strtod_l+0xa82>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004854:	e7e3      	b.n	800481e <_strtod_l+0xb56>
 8004856:	a30e      	add	r3, pc, #56	; (adr r3, 8004890 <_strtod_l+0xbc8>)
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f7fc f8ae 	bl	80009bc <__aeabi_dcmplt>
 8004860:	e7a1      	b.n	80047a6 <_strtod_l+0xade>
 8004862:	2300      	movs	r3, #0
 8004864:	930a      	str	r3, [sp, #40]	; 0x28
 8004866:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004868:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	f7ff ba71 	b.w	8003d52 <_strtod_l+0x8a>
 8004870:	2a65      	cmp	r2, #101	; 0x65
 8004872:	f43f ab63 	beq.w	8003f3c <_strtod_l+0x274>
 8004876:	2a45      	cmp	r2, #69	; 0x45
 8004878:	f43f ab60 	beq.w	8003f3c <_strtod_l+0x274>
 800487c:	2301      	movs	r3, #1
 800487e:	f7ff bb95 	b.w	8003fac <_strtod_l+0x2e4>
 8004882:	bf00      	nop
 8004884:	f3af 8000 	nop.w
 8004888:	ffc00000 	.word	0xffc00000
 800488c:	41dfffff 	.word	0x41dfffff
 8004890:	94a03595 	.word	0x94a03595
 8004894:	3fcfffff 	.word	0x3fcfffff

08004898 <_strtod_r>:
 8004898:	4b01      	ldr	r3, [pc, #4]	; (80048a0 <_strtod_r+0x8>)
 800489a:	f7ff ba15 	b.w	8003cc8 <_strtod_l>
 800489e:	bf00      	nop
 80048a0:	2000007c 	.word	0x2000007c

080048a4 <_strtol_l.constprop.0>:
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048aa:	4680      	mov	r8, r0
 80048ac:	d001      	beq.n	80048b2 <_strtol_l.constprop.0+0xe>
 80048ae:	2b24      	cmp	r3, #36	; 0x24
 80048b0:	d906      	bls.n	80048c0 <_strtol_l.constprop.0+0x1c>
 80048b2:	f7fe fb23 	bl	8002efc <__errno>
 80048b6:	2316      	movs	r3, #22
 80048b8:	6003      	str	r3, [r0, #0]
 80048ba:	2000      	movs	r0, #0
 80048bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c0:	460d      	mov	r5, r1
 80048c2:	4f35      	ldr	r7, [pc, #212]	; (8004998 <_strtol_l.constprop.0+0xf4>)
 80048c4:	4628      	mov	r0, r5
 80048c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048ca:	5de6      	ldrb	r6, [r4, r7]
 80048cc:	f016 0608 	ands.w	r6, r6, #8
 80048d0:	d1f8      	bne.n	80048c4 <_strtol_l.constprop.0+0x20>
 80048d2:	2c2d      	cmp	r4, #45	; 0x2d
 80048d4:	d12f      	bne.n	8004936 <_strtol_l.constprop.0+0x92>
 80048d6:	2601      	movs	r6, #1
 80048d8:	782c      	ldrb	r4, [r5, #0]
 80048da:	1c85      	adds	r5, r0, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d057      	beq.n	8004990 <_strtol_l.constprop.0+0xec>
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d109      	bne.n	80048f8 <_strtol_l.constprop.0+0x54>
 80048e4:	2c30      	cmp	r4, #48	; 0x30
 80048e6:	d107      	bne.n	80048f8 <_strtol_l.constprop.0+0x54>
 80048e8:	7828      	ldrb	r0, [r5, #0]
 80048ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80048ee:	2858      	cmp	r0, #88	; 0x58
 80048f0:	d149      	bne.n	8004986 <_strtol_l.constprop.0+0xe2>
 80048f2:	2310      	movs	r3, #16
 80048f4:	786c      	ldrb	r4, [r5, #1]
 80048f6:	3502      	adds	r5, #2
 80048f8:	2700      	movs	r7, #0
 80048fa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80048fe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004902:	fbbe f9f3 	udiv	r9, lr, r3
 8004906:	4638      	mov	r0, r7
 8004908:	fb03 ea19 	mls	sl, r3, r9, lr
 800490c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004910:	f1bc 0f09 	cmp.w	ip, #9
 8004914:	d814      	bhi.n	8004940 <_strtol_l.constprop.0+0x9c>
 8004916:	4664      	mov	r4, ip
 8004918:	42a3      	cmp	r3, r4
 800491a:	dd22      	ble.n	8004962 <_strtol_l.constprop.0+0xbe>
 800491c:	2f00      	cmp	r7, #0
 800491e:	db1d      	blt.n	800495c <_strtol_l.constprop.0+0xb8>
 8004920:	4581      	cmp	r9, r0
 8004922:	d31b      	bcc.n	800495c <_strtol_l.constprop.0+0xb8>
 8004924:	d101      	bne.n	800492a <_strtol_l.constprop.0+0x86>
 8004926:	45a2      	cmp	sl, r4
 8004928:	db18      	blt.n	800495c <_strtol_l.constprop.0+0xb8>
 800492a:	2701      	movs	r7, #1
 800492c:	fb00 4003 	mla	r0, r0, r3, r4
 8004930:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004934:	e7ea      	b.n	800490c <_strtol_l.constprop.0+0x68>
 8004936:	2c2b      	cmp	r4, #43	; 0x2b
 8004938:	bf04      	itt	eq
 800493a:	782c      	ldrbeq	r4, [r5, #0]
 800493c:	1c85      	addeq	r5, r0, #2
 800493e:	e7cd      	b.n	80048dc <_strtol_l.constprop.0+0x38>
 8004940:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004944:	f1bc 0f19 	cmp.w	ip, #25
 8004948:	d801      	bhi.n	800494e <_strtol_l.constprop.0+0xaa>
 800494a:	3c37      	subs	r4, #55	; 0x37
 800494c:	e7e4      	b.n	8004918 <_strtol_l.constprop.0+0x74>
 800494e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004952:	f1bc 0f19 	cmp.w	ip, #25
 8004956:	d804      	bhi.n	8004962 <_strtol_l.constprop.0+0xbe>
 8004958:	3c57      	subs	r4, #87	; 0x57
 800495a:	e7dd      	b.n	8004918 <_strtol_l.constprop.0+0x74>
 800495c:	f04f 37ff 	mov.w	r7, #4294967295
 8004960:	e7e6      	b.n	8004930 <_strtol_l.constprop.0+0x8c>
 8004962:	2f00      	cmp	r7, #0
 8004964:	da07      	bge.n	8004976 <_strtol_l.constprop.0+0xd2>
 8004966:	2322      	movs	r3, #34	; 0x22
 8004968:	4670      	mov	r0, lr
 800496a:	f8c8 3000 	str.w	r3, [r8]
 800496e:	2a00      	cmp	r2, #0
 8004970:	d0a4      	beq.n	80048bc <_strtol_l.constprop.0+0x18>
 8004972:	1e69      	subs	r1, r5, #1
 8004974:	e005      	b.n	8004982 <_strtol_l.constprop.0+0xde>
 8004976:	b106      	cbz	r6, 800497a <_strtol_l.constprop.0+0xd6>
 8004978:	4240      	negs	r0, r0
 800497a:	2a00      	cmp	r2, #0
 800497c:	d09e      	beq.n	80048bc <_strtol_l.constprop.0+0x18>
 800497e:	2f00      	cmp	r7, #0
 8004980:	d1f7      	bne.n	8004972 <_strtol_l.constprop.0+0xce>
 8004982:	6011      	str	r1, [r2, #0]
 8004984:	e79a      	b.n	80048bc <_strtol_l.constprop.0+0x18>
 8004986:	2430      	movs	r4, #48	; 0x30
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1b5      	bne.n	80048f8 <_strtol_l.constprop.0+0x54>
 800498c:	2308      	movs	r3, #8
 800498e:	e7b3      	b.n	80048f8 <_strtol_l.constprop.0+0x54>
 8004990:	2c30      	cmp	r4, #48	; 0x30
 8004992:	d0a9      	beq.n	80048e8 <_strtol_l.constprop.0+0x44>
 8004994:	230a      	movs	r3, #10
 8004996:	e7af      	b.n	80048f8 <_strtol_l.constprop.0+0x54>
 8004998:	080078c1 	.word	0x080078c1

0800499c <_strtol_r>:
 800499c:	f7ff bf82 	b.w	80048a4 <_strtol_l.constprop.0>

080049a0 <quorem>:
 80049a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	6903      	ldr	r3, [r0, #16]
 80049a6:	690c      	ldr	r4, [r1, #16]
 80049a8:	4607      	mov	r7, r0
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	f2c0 8082 	blt.w	8004ab4 <quorem+0x114>
 80049b0:	3c01      	subs	r4, #1
 80049b2:	f100 0514 	add.w	r5, r0, #20
 80049b6:	f101 0814 	add.w	r8, r1, #20
 80049ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049c8:	3301      	adds	r3, #1
 80049ca:	429a      	cmp	r2, r3
 80049cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80049d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049d8:	d331      	bcc.n	8004a3e <quorem+0x9e>
 80049da:	f04f 0e00 	mov.w	lr, #0
 80049de:	4640      	mov	r0, r8
 80049e0:	46ac      	mov	ip, r5
 80049e2:	46f2      	mov	sl, lr
 80049e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80049e8:	b293      	uxth	r3, r2
 80049ea:	fb06 e303 	mla	r3, r6, r3, lr
 80049ee:	0c12      	lsrs	r2, r2, #16
 80049f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	fb06 e202 	mla	r2, r6, r2, lr
 80049fa:	ebaa 0303 	sub.w	r3, sl, r3
 80049fe:	f8dc a000 	ldr.w	sl, [ip]
 8004a02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a06:	fa1f fa8a 	uxth.w	sl, sl
 8004a0a:	4453      	add	r3, sl
 8004a0c:	f8dc a000 	ldr.w	sl, [ip]
 8004a10:	b292      	uxth	r2, r2
 8004a12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a20:	4581      	cmp	r9, r0
 8004a22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a26:	f84c 3b04 	str.w	r3, [ip], #4
 8004a2a:	d2db      	bcs.n	80049e4 <quorem+0x44>
 8004a2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a30:	b92b      	cbnz	r3, 8004a3e <quorem+0x9e>
 8004a32:	9b01      	ldr	r3, [sp, #4]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	429d      	cmp	r5, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	d32f      	bcc.n	8004a9c <quorem+0xfc>
 8004a3c:	613c      	str	r4, [r7, #16]
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f001 fc90 	bl	8006364 <__mcmp>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	db25      	blt.n	8004a94 <quorem+0xf4>
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f04f 0c00 	mov.w	ip, #0
 8004a4e:	3601      	adds	r6, #1
 8004a50:	f858 1b04 	ldr.w	r1, [r8], #4
 8004a54:	f8d0 e000 	ldr.w	lr, [r0]
 8004a58:	b28b      	uxth	r3, r1
 8004a5a:	ebac 0303 	sub.w	r3, ip, r3
 8004a5e:	fa1f f28e 	uxth.w	r2, lr
 8004a62:	4413      	add	r3, r2
 8004a64:	0c0a      	lsrs	r2, r1, #16
 8004a66:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a74:	45c1      	cmp	r9, r8
 8004a76:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a7a:	f840 3b04 	str.w	r3, [r0], #4
 8004a7e:	d2e7      	bcs.n	8004a50 <quorem+0xb0>
 8004a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a88:	b922      	cbnz	r2, 8004a94 <quorem+0xf4>
 8004a8a:	3b04      	subs	r3, #4
 8004a8c:	429d      	cmp	r5, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	d30a      	bcc.n	8004aa8 <quorem+0x108>
 8004a92:	613c      	str	r4, [r7, #16]
 8004a94:	4630      	mov	r0, r6
 8004a96:	b003      	add	sp, #12
 8004a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	2a00      	cmp	r2, #0
 8004aa2:	d1cb      	bne.n	8004a3c <quorem+0x9c>
 8004aa4:	3c01      	subs	r4, #1
 8004aa6:	e7c6      	b.n	8004a36 <quorem+0x96>
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	3b04      	subs	r3, #4
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	d1f0      	bne.n	8004a92 <quorem+0xf2>
 8004ab0:	3c01      	subs	r4, #1
 8004ab2:	e7eb      	b.n	8004a8c <quorem+0xec>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e7ee      	b.n	8004a96 <quorem+0xf6>

08004ab8 <_dtoa_r>:
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	4616      	mov	r6, r2
 8004abe:	461f      	mov	r7, r3
 8004ac0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ac2:	b099      	sub	sp, #100	; 0x64
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004aca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ace:	b974      	cbnz	r4, 8004aee <_dtoa_r+0x36>
 8004ad0:	2010      	movs	r0, #16
 8004ad2:	f001 f949 	bl	8005d68 <malloc>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6268      	str	r0, [r5, #36]	; 0x24
 8004ada:	b920      	cbnz	r0, 8004ae6 <_dtoa_r+0x2e>
 8004adc:	21ea      	movs	r1, #234	; 0xea
 8004ade:	4ba8      	ldr	r3, [pc, #672]	; (8004d80 <_dtoa_r+0x2c8>)
 8004ae0:	48a8      	ldr	r0, [pc, #672]	; (8004d84 <_dtoa_r+0x2cc>)
 8004ae2:	f002 f8b3 	bl	8006c4c <__assert_func>
 8004ae6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004aea:	6004      	str	r4, [r0, #0]
 8004aec:	60c4      	str	r4, [r0, #12]
 8004aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004af0:	6819      	ldr	r1, [r3, #0]
 8004af2:	b151      	cbz	r1, 8004b0a <_dtoa_r+0x52>
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	2301      	movs	r3, #1
 8004af8:	4093      	lsls	r3, r2
 8004afa:	604a      	str	r2, [r1, #4]
 8004afc:	608b      	str	r3, [r1, #8]
 8004afe:	4628      	mov	r0, r5
 8004b00:	f001 f9a8 	bl	8005e54 <_Bfree>
 8004b04:	2200      	movs	r2, #0
 8004b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	1e3b      	subs	r3, r7, #0
 8004b0c:	bfaf      	iteee	ge
 8004b0e:	2300      	movge	r3, #0
 8004b10:	2201      	movlt	r2, #1
 8004b12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b16:	9305      	strlt	r3, [sp, #20]
 8004b18:	bfa8      	it	ge
 8004b1a:	f8c8 3000 	strge.w	r3, [r8]
 8004b1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004b22:	4b99      	ldr	r3, [pc, #612]	; (8004d88 <_dtoa_r+0x2d0>)
 8004b24:	bfb8      	it	lt
 8004b26:	f8c8 2000 	strlt.w	r2, [r8]
 8004b2a:	ea33 0309 	bics.w	r3, r3, r9
 8004b2e:	d119      	bne.n	8004b64 <_dtoa_r+0xac>
 8004b30:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b3c:	4333      	orrs	r3, r6
 8004b3e:	f000 857f 	beq.w	8005640 <_dtoa_r+0xb88>
 8004b42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b44:	b953      	cbnz	r3, 8004b5c <_dtoa_r+0xa4>
 8004b46:	4b91      	ldr	r3, [pc, #580]	; (8004d8c <_dtoa_r+0x2d4>)
 8004b48:	e022      	b.n	8004b90 <_dtoa_r+0xd8>
 8004b4a:	4b91      	ldr	r3, [pc, #580]	; (8004d90 <_dtoa_r+0x2d8>)
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	9803      	ldr	r0, [sp, #12]
 8004b56:	b019      	add	sp, #100	; 0x64
 8004b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5c:	4b8b      	ldr	r3, [pc, #556]	; (8004d8c <_dtoa_r+0x2d4>)
 8004b5e:	9303      	str	r3, [sp, #12]
 8004b60:	3303      	adds	r3, #3
 8004b62:	e7f5      	b.n	8004b50 <_dtoa_r+0x98>
 8004b64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b68:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b70:	2200      	movs	r2, #0
 8004b72:	2300      	movs	r3, #0
 8004b74:	f7fb ff18 	bl	80009a8 <__aeabi_dcmpeq>
 8004b78:	4680      	mov	r8, r0
 8004b7a:	b158      	cbz	r0, 8004b94 <_dtoa_r+0xdc>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8558 	beq.w	800563a <_dtoa_r+0xb82>
 8004b8a:	4882      	ldr	r0, [pc, #520]	; (8004d94 <_dtoa_r+0x2dc>)
 8004b8c:	6018      	str	r0, [r3, #0]
 8004b8e:	1e43      	subs	r3, r0, #1
 8004b90:	9303      	str	r3, [sp, #12]
 8004b92:	e7df      	b.n	8004b54 <_dtoa_r+0x9c>
 8004b94:	ab16      	add	r3, sp, #88	; 0x58
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	ab17      	add	r3, sp, #92	; 0x5c
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ba2:	f001 fd01 	bl	80065a8 <__d2b>
 8004ba6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004baa:	4683      	mov	fp, r0
 8004bac:	2c00      	cmp	r4, #0
 8004bae:	d07f      	beq.n	8004cb0 <_dtoa_r+0x1f8>
 8004bb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bb6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bbe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004bc2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004bc6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4b72      	ldr	r3, [pc, #456]	; (8004d98 <_dtoa_r+0x2e0>)
 8004bce:	f7fb facb 	bl	8000168 <__aeabi_dsub>
 8004bd2:	a365      	add	r3, pc, #404	; (adr r3, 8004d68 <_dtoa_r+0x2b0>)
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f7fb fc7e 	bl	80004d8 <__aeabi_dmul>
 8004bdc:	a364      	add	r3, pc, #400	; (adr r3, 8004d70 <_dtoa_r+0x2b8>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	f7fb fac3 	bl	800016c <__adddf3>
 8004be6:	4606      	mov	r6, r0
 8004be8:	4620      	mov	r0, r4
 8004bea:	460f      	mov	r7, r1
 8004bec:	f7fb fc0a 	bl	8000404 <__aeabi_i2d>
 8004bf0:	a361      	add	r3, pc, #388	; (adr r3, 8004d78 <_dtoa_r+0x2c0>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f7fb fc6f 	bl	80004d8 <__aeabi_dmul>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4630      	mov	r0, r6
 8004c00:	4639      	mov	r1, r7
 8004c02:	f7fb fab3 	bl	800016c <__adddf3>
 8004c06:	4606      	mov	r6, r0
 8004c08:	460f      	mov	r7, r1
 8004c0a:	f7fb ff15 	bl	8000a38 <__aeabi_d2iz>
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4682      	mov	sl, r0
 8004c12:	2300      	movs	r3, #0
 8004c14:	4630      	mov	r0, r6
 8004c16:	4639      	mov	r1, r7
 8004c18:	f7fb fed0 	bl	80009bc <__aeabi_dcmplt>
 8004c1c:	b148      	cbz	r0, 8004c32 <_dtoa_r+0x17a>
 8004c1e:	4650      	mov	r0, sl
 8004c20:	f7fb fbf0 	bl	8000404 <__aeabi_i2d>
 8004c24:	4632      	mov	r2, r6
 8004c26:	463b      	mov	r3, r7
 8004c28:	f7fb febe 	bl	80009a8 <__aeabi_dcmpeq>
 8004c2c:	b908      	cbnz	r0, 8004c32 <_dtoa_r+0x17a>
 8004c2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c32:	f1ba 0f16 	cmp.w	sl, #22
 8004c36:	d858      	bhi.n	8004cea <_dtoa_r+0x232>
 8004c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c3c:	4b57      	ldr	r3, [pc, #348]	; (8004d9c <_dtoa_r+0x2e4>)
 8004c3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	f7fb feb9 	bl	80009bc <__aeabi_dcmplt>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d04f      	beq.n	8004cee <_dtoa_r+0x236>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c58:	1b1c      	subs	r4, r3, r4
 8004c5a:	1e63      	subs	r3, r4, #1
 8004c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c5e:	bf49      	itett	mi
 8004c60:	f1c4 0301 	rsbmi	r3, r4, #1
 8004c64:	2300      	movpl	r3, #0
 8004c66:	9306      	strmi	r3, [sp, #24]
 8004c68:	2300      	movmi	r3, #0
 8004c6a:	bf54      	ite	pl
 8004c6c:	9306      	strpl	r3, [sp, #24]
 8004c6e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004c70:	f1ba 0f00 	cmp.w	sl, #0
 8004c74:	db3d      	blt.n	8004cf2 <_dtoa_r+0x23a>
 8004c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c78:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004c7c:	4453      	add	r3, sl
 8004c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c80:	2300      	movs	r3, #0
 8004c82:	930a      	str	r3, [sp, #40]	; 0x28
 8004c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c86:	2b09      	cmp	r3, #9
 8004c88:	f200 808c 	bhi.w	8004da4 <_dtoa_r+0x2ec>
 8004c8c:	2b05      	cmp	r3, #5
 8004c8e:	bfc4      	itt	gt
 8004c90:	3b04      	subgt	r3, #4
 8004c92:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c96:	bfc8      	it	gt
 8004c98:	2400      	movgt	r4, #0
 8004c9a:	f1a3 0302 	sub.w	r3, r3, #2
 8004c9e:	bfd8      	it	le
 8004ca0:	2401      	movle	r4, #1
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	f200 808a 	bhi.w	8004dbc <_dtoa_r+0x304>
 8004ca8:	e8df f003 	tbb	[pc, r3]
 8004cac:	5b4d4f2d 	.word	0x5b4d4f2d
 8004cb0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004cb4:	441c      	add	r4, r3
 8004cb6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	bfc3      	ittte	gt
 8004cbe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cc2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004cc6:	fa09 f303 	lslgt.w	r3, r9, r3
 8004cca:	f1c3 0320 	rsble	r3, r3, #32
 8004cce:	bfc6      	itte	gt
 8004cd0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004cd4:	4318      	orrgt	r0, r3
 8004cd6:	fa06 f003 	lslle.w	r0, r6, r3
 8004cda:	f7fb fb83 	bl	80003e4 <__aeabi_ui2d>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004ce4:	3c01      	subs	r4, #1
 8004ce6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ce8:	e76f      	b.n	8004bca <_dtoa_r+0x112>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e7b2      	b.n	8004c54 <_dtoa_r+0x19c>
 8004cee:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cf0:	e7b1      	b.n	8004c56 <_dtoa_r+0x19e>
 8004cf2:	9b06      	ldr	r3, [sp, #24]
 8004cf4:	eba3 030a 	sub.w	r3, r3, sl
 8004cf8:	9306      	str	r3, [sp, #24]
 8004cfa:	f1ca 0300 	rsb	r3, sl, #0
 8004cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8004d00:	2300      	movs	r3, #0
 8004d02:	930e      	str	r3, [sp, #56]	; 0x38
 8004d04:	e7be      	b.n	8004c84 <_dtoa_r+0x1cc>
 8004d06:	2300      	movs	r3, #0
 8004d08:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dc58      	bgt.n	8004dc2 <_dtoa_r+0x30a>
 8004d10:	f04f 0901 	mov.w	r9, #1
 8004d14:	464b      	mov	r3, r9
 8004d16:	f8cd 9020 	str.w	r9, [sp, #32]
 8004d1a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004d1e:	2200      	movs	r2, #0
 8004d20:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004d22:	6042      	str	r2, [r0, #4]
 8004d24:	2204      	movs	r2, #4
 8004d26:	f102 0614 	add.w	r6, r2, #20
 8004d2a:	429e      	cmp	r6, r3
 8004d2c:	6841      	ldr	r1, [r0, #4]
 8004d2e:	d94e      	bls.n	8004dce <_dtoa_r+0x316>
 8004d30:	4628      	mov	r0, r5
 8004d32:	f001 f84f 	bl	8005dd4 <_Balloc>
 8004d36:	9003      	str	r0, [sp, #12]
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d14c      	bne.n	8004dd6 <_dtoa_r+0x31e>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d42:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <_dtoa_r+0x2e8>)
 8004d44:	e6cc      	b.n	8004ae0 <_dtoa_r+0x28>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e7de      	b.n	8004d08 <_dtoa_r+0x250>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d50:	eb0a 0903 	add.w	r9, sl, r3
 8004d54:	f109 0301 	add.w	r3, r9, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	9308      	str	r3, [sp, #32]
 8004d5c:	bfb8      	it	lt
 8004d5e:	2301      	movlt	r3, #1
 8004d60:	e7dd      	b.n	8004d1e <_dtoa_r+0x266>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e7f2      	b.n	8004d4c <_dtoa_r+0x294>
 8004d66:	bf00      	nop
 8004d68:	636f4361 	.word	0x636f4361
 8004d6c:	3fd287a7 	.word	0x3fd287a7
 8004d70:	8b60c8b3 	.word	0x8b60c8b3
 8004d74:	3fc68a28 	.word	0x3fc68a28
 8004d78:	509f79fb 	.word	0x509f79fb
 8004d7c:	3fd34413 	.word	0x3fd34413
 8004d80:	080079ce 	.word	0x080079ce
 8004d84:	080079e5 	.word	0x080079e5
 8004d88:	7ff00000 	.word	0x7ff00000
 8004d8c:	080079ca 	.word	0x080079ca
 8004d90:	080079c1 	.word	0x080079c1
 8004d94:	08007845 	.word	0x08007845
 8004d98:	3ff80000 	.word	0x3ff80000
 8004d9c:	08007b50 	.word	0x08007b50
 8004da0:	08007a40 	.word	0x08007a40
 8004da4:	2401      	movs	r4, #1
 8004da6:	2300      	movs	r3, #0
 8004da8:	940b      	str	r4, [sp, #44]	; 0x2c
 8004daa:	9322      	str	r3, [sp, #136]	; 0x88
 8004dac:	f04f 39ff 	mov.w	r9, #4294967295
 8004db0:	2200      	movs	r2, #0
 8004db2:	2312      	movs	r3, #18
 8004db4:	f8cd 9020 	str.w	r9, [sp, #32]
 8004db8:	9223      	str	r2, [sp, #140]	; 0x8c
 8004dba:	e7b0      	b.n	8004d1e <_dtoa_r+0x266>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dc0:	e7f4      	b.n	8004dac <_dtoa_r+0x2f4>
 8004dc2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	f8cd 9020 	str.w	r9, [sp, #32]
 8004dcc:	e7a7      	b.n	8004d1e <_dtoa_r+0x266>
 8004dce:	3101      	adds	r1, #1
 8004dd0:	6041      	str	r1, [r0, #4]
 8004dd2:	0052      	lsls	r2, r2, #1
 8004dd4:	e7a7      	b.n	8004d26 <_dtoa_r+0x26e>
 8004dd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dd8:	9a03      	ldr	r2, [sp, #12]
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	9b08      	ldr	r3, [sp, #32]
 8004dde:	2b0e      	cmp	r3, #14
 8004de0:	f200 80a8 	bhi.w	8004f34 <_dtoa_r+0x47c>
 8004de4:	2c00      	cmp	r4, #0
 8004de6:	f000 80a5 	beq.w	8004f34 <_dtoa_r+0x47c>
 8004dea:	f1ba 0f00 	cmp.w	sl, #0
 8004dee:	dd34      	ble.n	8004e5a <_dtoa_r+0x3a2>
 8004df0:	4a9a      	ldr	r2, [pc, #616]	; (800505c <_dtoa_r+0x5a4>)
 8004df2:	f00a 030f 	and.w	r3, sl, #15
 8004df6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dfa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004dfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e06:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004e0a:	d016      	beq.n	8004e3a <_dtoa_r+0x382>
 8004e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e10:	4b93      	ldr	r3, [pc, #588]	; (8005060 <_dtoa_r+0x5a8>)
 8004e12:	2703      	movs	r7, #3
 8004e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e18:	f7fb fc88 	bl	800072c <__aeabi_ddiv>
 8004e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e20:	f004 040f 	and.w	r4, r4, #15
 8004e24:	4e8e      	ldr	r6, [pc, #568]	; (8005060 <_dtoa_r+0x5a8>)
 8004e26:	b954      	cbnz	r4, 8004e3e <_dtoa_r+0x386>
 8004e28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e30:	f7fb fc7c 	bl	800072c <__aeabi_ddiv>
 8004e34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e38:	e029      	b.n	8004e8e <_dtoa_r+0x3d6>
 8004e3a:	2702      	movs	r7, #2
 8004e3c:	e7f2      	b.n	8004e24 <_dtoa_r+0x36c>
 8004e3e:	07e1      	lsls	r1, r4, #31
 8004e40:	d508      	bpl.n	8004e54 <_dtoa_r+0x39c>
 8004e42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e4a:	f7fb fb45 	bl	80004d8 <__aeabi_dmul>
 8004e4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e52:	3701      	adds	r7, #1
 8004e54:	1064      	asrs	r4, r4, #1
 8004e56:	3608      	adds	r6, #8
 8004e58:	e7e5      	b.n	8004e26 <_dtoa_r+0x36e>
 8004e5a:	f000 80a5 	beq.w	8004fa8 <_dtoa_r+0x4f0>
 8004e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e62:	f1ca 0400 	rsb	r4, sl, #0
 8004e66:	4b7d      	ldr	r3, [pc, #500]	; (800505c <_dtoa_r+0x5a4>)
 8004e68:	f004 020f 	and.w	r2, r4, #15
 8004e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f7fb fb30 	bl	80004d8 <__aeabi_dmul>
 8004e78:	2702      	movs	r7, #2
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e80:	4e77      	ldr	r6, [pc, #476]	; (8005060 <_dtoa_r+0x5a8>)
 8004e82:	1124      	asrs	r4, r4, #4
 8004e84:	2c00      	cmp	r4, #0
 8004e86:	f040 8084 	bne.w	8004f92 <_dtoa_r+0x4da>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1d2      	bne.n	8004e34 <_dtoa_r+0x37c>
 8004e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 808b 	beq.w	8004fac <_dtoa_r+0x4f4>
 8004e96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4b6f      	ldr	r3, [pc, #444]	; (8005064 <_dtoa_r+0x5ac>)
 8004ea6:	f7fb fd89 	bl	80009bc <__aeabi_dcmplt>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d07e      	beq.n	8004fac <_dtoa_r+0x4f4>
 8004eae:	9b08      	ldr	r3, [sp, #32]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d07b      	beq.n	8004fac <_dtoa_r+0x4f4>
 8004eb4:	f1b9 0f00 	cmp.w	r9, #0
 8004eb8:	dd38      	ble.n	8004f2c <_dtoa_r+0x474>
 8004eba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	4b69      	ldr	r3, [pc, #420]	; (8005068 <_dtoa_r+0x5b0>)
 8004ec2:	f7fb fb09 	bl	80004d8 <__aeabi_dmul>
 8004ec6:	464c      	mov	r4, r9
 8004ec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ecc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004ed0:	3701      	adds	r7, #1
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	f7fb fa96 	bl	8000404 <__aeabi_i2d>
 8004ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004edc:	f7fb fafc 	bl	80004d8 <__aeabi_dmul>
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4b62      	ldr	r3, [pc, #392]	; (800506c <_dtoa_r+0x5b4>)
 8004ee4:	f7fb f942 	bl	800016c <__adddf3>
 8004ee8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004eec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ef0:	9611      	str	r6, [sp, #68]	; 0x44
 8004ef2:	2c00      	cmp	r4, #0
 8004ef4:	d15d      	bne.n	8004fb2 <_dtoa_r+0x4fa>
 8004ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004efa:	2200      	movs	r2, #0
 8004efc:	4b5c      	ldr	r3, [pc, #368]	; (8005070 <_dtoa_r+0x5b8>)
 8004efe:	f7fb f933 	bl	8000168 <__aeabi_dsub>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f0a:	4633      	mov	r3, r6
 8004f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f0e:	f7fb fd73 	bl	80009f8 <__aeabi_dcmpgt>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	f040 829c 	bne.w	8005450 <_dtoa_r+0x998>
 8004f18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f22:	f7fb fd4b 	bl	80009bc <__aeabi_dcmplt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f040 8290 	bne.w	800544c <_dtoa_r+0x994>
 8004f2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004f30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f2c0 8152 	blt.w	80051e0 <_dtoa_r+0x728>
 8004f3c:	f1ba 0f0e 	cmp.w	sl, #14
 8004f40:	f300 814e 	bgt.w	80051e0 <_dtoa_r+0x728>
 8004f44:	4b45      	ldr	r3, [pc, #276]	; (800505c <_dtoa_r+0x5a4>)
 8004f46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f280 80db 	bge.w	8005110 <_dtoa_r+0x658>
 8004f5a:	9b08      	ldr	r3, [sp, #32]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f300 80d7 	bgt.w	8005110 <_dtoa_r+0x658>
 8004f62:	f040 8272 	bne.w	800544a <_dtoa_r+0x992>
 8004f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	4b40      	ldr	r3, [pc, #256]	; (8005070 <_dtoa_r+0x5b8>)
 8004f6e:	f7fb fab3 	bl	80004d8 <__aeabi_dmul>
 8004f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f76:	f7fb fd35 	bl	80009e4 <__aeabi_dcmpge>
 8004f7a:	9c08      	ldr	r4, [sp, #32]
 8004f7c:	4626      	mov	r6, r4
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	f040 8248 	bne.w	8005414 <_dtoa_r+0x95c>
 8004f84:	2331      	movs	r3, #49	; 0x31
 8004f86:	9f03      	ldr	r7, [sp, #12]
 8004f88:	f10a 0a01 	add.w	sl, sl, #1
 8004f8c:	f807 3b01 	strb.w	r3, [r7], #1
 8004f90:	e244      	b.n	800541c <_dtoa_r+0x964>
 8004f92:	07e2      	lsls	r2, r4, #31
 8004f94:	d505      	bpl.n	8004fa2 <_dtoa_r+0x4ea>
 8004f96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f9a:	f7fb fa9d 	bl	80004d8 <__aeabi_dmul>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	3701      	adds	r7, #1
 8004fa2:	1064      	asrs	r4, r4, #1
 8004fa4:	3608      	adds	r6, #8
 8004fa6:	e76d      	b.n	8004e84 <_dtoa_r+0x3cc>
 8004fa8:	2702      	movs	r7, #2
 8004faa:	e770      	b.n	8004e8e <_dtoa_r+0x3d6>
 8004fac:	46d0      	mov	r8, sl
 8004fae:	9c08      	ldr	r4, [sp, #32]
 8004fb0:	e78f      	b.n	8004ed2 <_dtoa_r+0x41a>
 8004fb2:	9903      	ldr	r1, [sp, #12]
 8004fb4:	4b29      	ldr	r3, [pc, #164]	; (800505c <_dtoa_r+0x5a4>)
 8004fb6:	4421      	add	r1, r4
 8004fb8:	9112      	str	r1, [sp, #72]	; 0x48
 8004fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fc0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004fc4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	d055      	beq.n	8005078 <_dtoa_r+0x5c0>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	4929      	ldr	r1, [pc, #164]	; (8005074 <_dtoa_r+0x5bc>)
 8004fd0:	f7fb fbac 	bl	800072c <__aeabi_ddiv>
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	4632      	mov	r2, r6
 8004fd8:	f7fb f8c6 	bl	8000168 <__aeabi_dsub>
 8004fdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fe0:	9f03      	ldr	r7, [sp, #12]
 8004fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fe6:	f7fb fd27 	bl	8000a38 <__aeabi_d2iz>
 8004fea:	4604      	mov	r4, r0
 8004fec:	f7fb fa0a 	bl	8000404 <__aeabi_i2d>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff8:	f7fb f8b6 	bl	8000168 <__aeabi_dsub>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	3430      	adds	r4, #48	; 0x30
 8005002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800500a:	f807 4b01 	strb.w	r4, [r7], #1
 800500e:	f7fb fcd5 	bl	80009bc <__aeabi_dcmplt>
 8005012:	2800      	cmp	r0, #0
 8005014:	d174      	bne.n	8005100 <_dtoa_r+0x648>
 8005016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800501a:	2000      	movs	r0, #0
 800501c:	4911      	ldr	r1, [pc, #68]	; (8005064 <_dtoa_r+0x5ac>)
 800501e:	f7fb f8a3 	bl	8000168 <__aeabi_dsub>
 8005022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005026:	f7fb fcc9 	bl	80009bc <__aeabi_dcmplt>
 800502a:	2800      	cmp	r0, #0
 800502c:	f040 80b7 	bne.w	800519e <_dtoa_r+0x6e6>
 8005030:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005032:	429f      	cmp	r7, r3
 8005034:	f43f af7a 	beq.w	8004f2c <_dtoa_r+0x474>
 8005038:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800503c:	2200      	movs	r2, #0
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <_dtoa_r+0x5b0>)
 8005040:	f7fb fa4a 	bl	80004d8 <__aeabi_dmul>
 8005044:	2200      	movs	r2, #0
 8005046:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800504a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <_dtoa_r+0x5b0>)
 8005050:	f7fb fa42 	bl	80004d8 <__aeabi_dmul>
 8005054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005058:	e7c3      	b.n	8004fe2 <_dtoa_r+0x52a>
 800505a:	bf00      	nop
 800505c:	08007b50 	.word	0x08007b50
 8005060:	08007b28 	.word	0x08007b28
 8005064:	3ff00000 	.word	0x3ff00000
 8005068:	40240000 	.word	0x40240000
 800506c:	401c0000 	.word	0x401c0000
 8005070:	40140000 	.word	0x40140000
 8005074:	3fe00000 	.word	0x3fe00000
 8005078:	4630      	mov	r0, r6
 800507a:	4639      	mov	r1, r7
 800507c:	f7fb fa2c 	bl	80004d8 <__aeabi_dmul>
 8005080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005082:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005086:	9c03      	ldr	r4, [sp, #12]
 8005088:	9314      	str	r3, [sp, #80]	; 0x50
 800508a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800508e:	f7fb fcd3 	bl	8000a38 <__aeabi_d2iz>
 8005092:	9015      	str	r0, [sp, #84]	; 0x54
 8005094:	f7fb f9b6 	bl	8000404 <__aeabi_i2d>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050a0:	f7fb f862 	bl	8000168 <__aeabi_dsub>
 80050a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050a6:	4606      	mov	r6, r0
 80050a8:	3330      	adds	r3, #48	; 0x30
 80050aa:	f804 3b01 	strb.w	r3, [r4], #1
 80050ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050b0:	460f      	mov	r7, r1
 80050b2:	429c      	cmp	r4, r3
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	d124      	bne.n	8005104 <_dtoa_r+0x64c>
 80050ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050be:	4bb0      	ldr	r3, [pc, #704]	; (8005380 <_dtoa_r+0x8c8>)
 80050c0:	f7fb f854 	bl	800016c <__adddf3>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4630      	mov	r0, r6
 80050ca:	4639      	mov	r1, r7
 80050cc:	f7fb fc94 	bl	80009f8 <__aeabi_dcmpgt>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d163      	bne.n	800519c <_dtoa_r+0x6e4>
 80050d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050d8:	2000      	movs	r0, #0
 80050da:	49a9      	ldr	r1, [pc, #676]	; (8005380 <_dtoa_r+0x8c8>)
 80050dc:	f7fb f844 	bl	8000168 <__aeabi_dsub>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4630      	mov	r0, r6
 80050e6:	4639      	mov	r1, r7
 80050e8:	f7fb fc68 	bl	80009bc <__aeabi_dcmplt>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	f43f af1d 	beq.w	8004f2c <_dtoa_r+0x474>
 80050f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80050f4:	1e7b      	subs	r3, r7, #1
 80050f6:	9314      	str	r3, [sp, #80]	; 0x50
 80050f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80050fc:	2b30      	cmp	r3, #48	; 0x30
 80050fe:	d0f8      	beq.n	80050f2 <_dtoa_r+0x63a>
 8005100:	46c2      	mov	sl, r8
 8005102:	e03b      	b.n	800517c <_dtoa_r+0x6c4>
 8005104:	4b9f      	ldr	r3, [pc, #636]	; (8005384 <_dtoa_r+0x8cc>)
 8005106:	f7fb f9e7 	bl	80004d8 <__aeabi_dmul>
 800510a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800510e:	e7bc      	b.n	800508a <_dtoa_r+0x5d2>
 8005110:	9f03      	ldr	r7, [sp, #12]
 8005112:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005116:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800511a:	4640      	mov	r0, r8
 800511c:	4649      	mov	r1, r9
 800511e:	f7fb fb05 	bl	800072c <__aeabi_ddiv>
 8005122:	f7fb fc89 	bl	8000a38 <__aeabi_d2iz>
 8005126:	4604      	mov	r4, r0
 8005128:	f7fb f96c 	bl	8000404 <__aeabi_i2d>
 800512c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005130:	f7fb f9d2 	bl	80004d8 <__aeabi_dmul>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4640      	mov	r0, r8
 800513a:	4649      	mov	r1, r9
 800513c:	f7fb f814 	bl	8000168 <__aeabi_dsub>
 8005140:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005144:	f807 6b01 	strb.w	r6, [r7], #1
 8005148:	9e03      	ldr	r6, [sp, #12]
 800514a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800514e:	1bbe      	subs	r6, r7, r6
 8005150:	45b4      	cmp	ip, r6
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	d136      	bne.n	80051c6 <_dtoa_r+0x70e>
 8005158:	f7fb f808 	bl	800016c <__adddf3>
 800515c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005160:	4680      	mov	r8, r0
 8005162:	4689      	mov	r9, r1
 8005164:	f7fb fc48 	bl	80009f8 <__aeabi_dcmpgt>
 8005168:	bb58      	cbnz	r0, 80051c2 <_dtoa_r+0x70a>
 800516a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800516e:	4640      	mov	r0, r8
 8005170:	4649      	mov	r1, r9
 8005172:	f7fb fc19 	bl	80009a8 <__aeabi_dcmpeq>
 8005176:	b108      	cbz	r0, 800517c <_dtoa_r+0x6c4>
 8005178:	07e1      	lsls	r1, r4, #31
 800517a:	d422      	bmi.n	80051c2 <_dtoa_r+0x70a>
 800517c:	4628      	mov	r0, r5
 800517e:	4659      	mov	r1, fp
 8005180:	f000 fe68 	bl	8005e54 <_Bfree>
 8005184:	2300      	movs	r3, #0
 8005186:	703b      	strb	r3, [r7, #0]
 8005188:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800518a:	f10a 0001 	add.w	r0, sl, #1
 800518e:	6018      	str	r0, [r3, #0]
 8005190:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005192:	2b00      	cmp	r3, #0
 8005194:	f43f acde 	beq.w	8004b54 <_dtoa_r+0x9c>
 8005198:	601f      	str	r7, [r3, #0]
 800519a:	e4db      	b.n	8004b54 <_dtoa_r+0x9c>
 800519c:	4627      	mov	r7, r4
 800519e:	463b      	mov	r3, r7
 80051a0:	461f      	mov	r7, r3
 80051a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051a6:	2a39      	cmp	r2, #57	; 0x39
 80051a8:	d107      	bne.n	80051ba <_dtoa_r+0x702>
 80051aa:	9a03      	ldr	r2, [sp, #12]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d1f7      	bne.n	80051a0 <_dtoa_r+0x6e8>
 80051b0:	2230      	movs	r2, #48	; 0x30
 80051b2:	9903      	ldr	r1, [sp, #12]
 80051b4:	f108 0801 	add.w	r8, r8, #1
 80051b8:	700a      	strb	r2, [r1, #0]
 80051ba:	781a      	ldrb	r2, [r3, #0]
 80051bc:	3201      	adds	r2, #1
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e79e      	b.n	8005100 <_dtoa_r+0x648>
 80051c2:	46d0      	mov	r8, sl
 80051c4:	e7eb      	b.n	800519e <_dtoa_r+0x6e6>
 80051c6:	2200      	movs	r2, #0
 80051c8:	4b6e      	ldr	r3, [pc, #440]	; (8005384 <_dtoa_r+0x8cc>)
 80051ca:	f7fb f985 	bl	80004d8 <__aeabi_dmul>
 80051ce:	2200      	movs	r2, #0
 80051d0:	2300      	movs	r3, #0
 80051d2:	4680      	mov	r8, r0
 80051d4:	4689      	mov	r9, r1
 80051d6:	f7fb fbe7 	bl	80009a8 <__aeabi_dcmpeq>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d09b      	beq.n	8005116 <_dtoa_r+0x65e>
 80051de:	e7cd      	b.n	800517c <_dtoa_r+0x6c4>
 80051e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051e2:	2a00      	cmp	r2, #0
 80051e4:	f000 80d0 	beq.w	8005388 <_dtoa_r+0x8d0>
 80051e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80051ea:	2a01      	cmp	r2, #1
 80051ec:	f300 80ae 	bgt.w	800534c <_dtoa_r+0x894>
 80051f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80051f2:	2a00      	cmp	r2, #0
 80051f4:	f000 80a6 	beq.w	8005344 <_dtoa_r+0x88c>
 80051f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051fe:	9f06      	ldr	r7, [sp, #24]
 8005200:	9a06      	ldr	r2, [sp, #24]
 8005202:	2101      	movs	r1, #1
 8005204:	441a      	add	r2, r3
 8005206:	9206      	str	r2, [sp, #24]
 8005208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800520a:	4628      	mov	r0, r5
 800520c:	441a      	add	r2, r3
 800520e:	9209      	str	r2, [sp, #36]	; 0x24
 8005210:	f000 ff20 	bl	8006054 <__i2b>
 8005214:	4606      	mov	r6, r0
 8005216:	2f00      	cmp	r7, #0
 8005218:	dd0c      	ble.n	8005234 <_dtoa_r+0x77c>
 800521a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	dd09      	ble.n	8005234 <_dtoa_r+0x77c>
 8005220:	42bb      	cmp	r3, r7
 8005222:	bfa8      	it	ge
 8005224:	463b      	movge	r3, r7
 8005226:	9a06      	ldr	r2, [sp, #24]
 8005228:	1aff      	subs	r7, r7, r3
 800522a:	1ad2      	subs	r2, r2, r3
 800522c:	9206      	str	r2, [sp, #24]
 800522e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
 8005234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005236:	b1f3      	cbz	r3, 8005276 <_dtoa_r+0x7be>
 8005238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80a8 	beq.w	8005390 <_dtoa_r+0x8d8>
 8005240:	2c00      	cmp	r4, #0
 8005242:	dd10      	ble.n	8005266 <_dtoa_r+0x7ae>
 8005244:	4631      	mov	r1, r6
 8005246:	4622      	mov	r2, r4
 8005248:	4628      	mov	r0, r5
 800524a:	f000 ffc1 	bl	80061d0 <__pow5mult>
 800524e:	465a      	mov	r2, fp
 8005250:	4601      	mov	r1, r0
 8005252:	4606      	mov	r6, r0
 8005254:	4628      	mov	r0, r5
 8005256:	f000 ff13 	bl	8006080 <__multiply>
 800525a:	4680      	mov	r8, r0
 800525c:	4659      	mov	r1, fp
 800525e:	4628      	mov	r0, r5
 8005260:	f000 fdf8 	bl	8005e54 <_Bfree>
 8005264:	46c3      	mov	fp, r8
 8005266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005268:	1b1a      	subs	r2, r3, r4
 800526a:	d004      	beq.n	8005276 <_dtoa_r+0x7be>
 800526c:	4659      	mov	r1, fp
 800526e:	4628      	mov	r0, r5
 8005270:	f000 ffae 	bl	80061d0 <__pow5mult>
 8005274:	4683      	mov	fp, r0
 8005276:	2101      	movs	r1, #1
 8005278:	4628      	mov	r0, r5
 800527a:	f000 feeb 	bl	8006054 <__i2b>
 800527e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005280:	4604      	mov	r4, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	f340 8086 	ble.w	8005394 <_dtoa_r+0x8dc>
 8005288:	461a      	mov	r2, r3
 800528a:	4601      	mov	r1, r0
 800528c:	4628      	mov	r0, r5
 800528e:	f000 ff9f 	bl	80061d0 <__pow5mult>
 8005292:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005294:	4604      	mov	r4, r0
 8005296:	2b01      	cmp	r3, #1
 8005298:	dd7f      	ble.n	800539a <_dtoa_r+0x8e2>
 800529a:	f04f 0800 	mov.w	r8, #0
 800529e:	6923      	ldr	r3, [r4, #16]
 80052a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052a4:	6918      	ldr	r0, [r3, #16]
 80052a6:	f000 fe87 	bl	8005fb8 <__hi0bits>
 80052aa:	f1c0 0020 	rsb	r0, r0, #32
 80052ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b0:	4418      	add	r0, r3
 80052b2:	f010 001f 	ands.w	r0, r0, #31
 80052b6:	f000 8092 	beq.w	80053de <_dtoa_r+0x926>
 80052ba:	f1c0 0320 	rsb	r3, r0, #32
 80052be:	2b04      	cmp	r3, #4
 80052c0:	f340 808a 	ble.w	80053d8 <_dtoa_r+0x920>
 80052c4:	f1c0 001c 	rsb	r0, r0, #28
 80052c8:	9b06      	ldr	r3, [sp, #24]
 80052ca:	4407      	add	r7, r0
 80052cc:	4403      	add	r3, r0
 80052ce:	9306      	str	r3, [sp, #24]
 80052d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d2:	4403      	add	r3, r0
 80052d4:	9309      	str	r3, [sp, #36]	; 0x24
 80052d6:	9b06      	ldr	r3, [sp, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	dd05      	ble.n	80052e8 <_dtoa_r+0x830>
 80052dc:	4659      	mov	r1, fp
 80052de:	461a      	mov	r2, r3
 80052e0:	4628      	mov	r0, r5
 80052e2:	f000 ffcf 	bl	8006284 <__lshift>
 80052e6:	4683      	mov	fp, r0
 80052e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dd05      	ble.n	80052fa <_dtoa_r+0x842>
 80052ee:	4621      	mov	r1, r4
 80052f0:	461a      	mov	r2, r3
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 ffc6 	bl	8006284 <__lshift>
 80052f8:	4604      	mov	r4, r0
 80052fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d070      	beq.n	80053e2 <_dtoa_r+0x92a>
 8005300:	4621      	mov	r1, r4
 8005302:	4658      	mov	r0, fp
 8005304:	f001 f82e 	bl	8006364 <__mcmp>
 8005308:	2800      	cmp	r0, #0
 800530a:	da6a      	bge.n	80053e2 <_dtoa_r+0x92a>
 800530c:	2300      	movs	r3, #0
 800530e:	4659      	mov	r1, fp
 8005310:	220a      	movs	r2, #10
 8005312:	4628      	mov	r0, r5
 8005314:	f000 fdc0 	bl	8005e98 <__multadd>
 8005318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800531a:	4683      	mov	fp, r0
 800531c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8194 	beq.w	800564e <_dtoa_r+0xb96>
 8005326:	4631      	mov	r1, r6
 8005328:	2300      	movs	r3, #0
 800532a:	220a      	movs	r2, #10
 800532c:	4628      	mov	r0, r5
 800532e:	f000 fdb3 	bl	8005e98 <__multadd>
 8005332:	f1b9 0f00 	cmp.w	r9, #0
 8005336:	4606      	mov	r6, r0
 8005338:	f300 8093 	bgt.w	8005462 <_dtoa_r+0x9aa>
 800533c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800533e:	2b02      	cmp	r3, #2
 8005340:	dc57      	bgt.n	80053f2 <_dtoa_r+0x93a>
 8005342:	e08e      	b.n	8005462 <_dtoa_r+0x9aa>
 8005344:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800534a:	e757      	b.n	80051fc <_dtoa_r+0x744>
 800534c:	9b08      	ldr	r3, [sp, #32]
 800534e:	1e5c      	subs	r4, r3, #1
 8005350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005352:	42a3      	cmp	r3, r4
 8005354:	bfb7      	itett	lt
 8005356:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005358:	1b1c      	subge	r4, r3, r4
 800535a:	1ae2      	sublt	r2, r4, r3
 800535c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800535e:	bfbe      	ittt	lt
 8005360:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005362:	189b      	addlt	r3, r3, r2
 8005364:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005366:	9b08      	ldr	r3, [sp, #32]
 8005368:	bfb8      	it	lt
 800536a:	2400      	movlt	r4, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	bfbb      	ittet	lt
 8005370:	9b06      	ldrlt	r3, [sp, #24]
 8005372:	9a08      	ldrlt	r2, [sp, #32]
 8005374:	9f06      	ldrge	r7, [sp, #24]
 8005376:	1a9f      	sublt	r7, r3, r2
 8005378:	bfac      	ite	ge
 800537a:	9b08      	ldrge	r3, [sp, #32]
 800537c:	2300      	movlt	r3, #0
 800537e:	e73f      	b.n	8005200 <_dtoa_r+0x748>
 8005380:	3fe00000 	.word	0x3fe00000
 8005384:	40240000 	.word	0x40240000
 8005388:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800538a:	9f06      	ldr	r7, [sp, #24]
 800538c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800538e:	e742      	b.n	8005216 <_dtoa_r+0x75e>
 8005390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005392:	e76b      	b.n	800526c <_dtoa_r+0x7b4>
 8005394:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005396:	2b01      	cmp	r3, #1
 8005398:	dc19      	bgt.n	80053ce <_dtoa_r+0x916>
 800539a:	9b04      	ldr	r3, [sp, #16]
 800539c:	b9bb      	cbnz	r3, 80053ce <_dtoa_r+0x916>
 800539e:	9b05      	ldr	r3, [sp, #20]
 80053a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a4:	b99b      	cbnz	r3, 80053ce <_dtoa_r+0x916>
 80053a6:	9b05      	ldr	r3, [sp, #20]
 80053a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053ac:	0d1b      	lsrs	r3, r3, #20
 80053ae:	051b      	lsls	r3, r3, #20
 80053b0:	b183      	cbz	r3, 80053d4 <_dtoa_r+0x91c>
 80053b2:	f04f 0801 	mov.w	r8, #1
 80053b6:	9b06      	ldr	r3, [sp, #24]
 80053b8:	3301      	adds	r3, #1
 80053ba:	9306      	str	r3, [sp, #24]
 80053bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053be:	3301      	adds	r3, #1
 80053c0:	9309      	str	r3, [sp, #36]	; 0x24
 80053c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f47f af6a 	bne.w	800529e <_dtoa_r+0x7e6>
 80053ca:	2001      	movs	r0, #1
 80053cc:	e76f      	b.n	80052ae <_dtoa_r+0x7f6>
 80053ce:	f04f 0800 	mov.w	r8, #0
 80053d2:	e7f6      	b.n	80053c2 <_dtoa_r+0x90a>
 80053d4:	4698      	mov	r8, r3
 80053d6:	e7f4      	b.n	80053c2 <_dtoa_r+0x90a>
 80053d8:	f43f af7d 	beq.w	80052d6 <_dtoa_r+0x81e>
 80053dc:	4618      	mov	r0, r3
 80053de:	301c      	adds	r0, #28
 80053e0:	e772      	b.n	80052c8 <_dtoa_r+0x810>
 80053e2:	9b08      	ldr	r3, [sp, #32]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dc36      	bgt.n	8005456 <_dtoa_r+0x99e>
 80053e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	dd33      	ble.n	8005456 <_dtoa_r+0x99e>
 80053ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053f2:	f1b9 0f00 	cmp.w	r9, #0
 80053f6:	d10d      	bne.n	8005414 <_dtoa_r+0x95c>
 80053f8:	4621      	mov	r1, r4
 80053fa:	464b      	mov	r3, r9
 80053fc:	2205      	movs	r2, #5
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fd4a 	bl	8005e98 <__multadd>
 8005404:	4601      	mov	r1, r0
 8005406:	4604      	mov	r4, r0
 8005408:	4658      	mov	r0, fp
 800540a:	f000 ffab 	bl	8006364 <__mcmp>
 800540e:	2800      	cmp	r0, #0
 8005410:	f73f adb8 	bgt.w	8004f84 <_dtoa_r+0x4cc>
 8005414:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005416:	9f03      	ldr	r7, [sp, #12]
 8005418:	ea6f 0a03 	mvn.w	sl, r3
 800541c:	f04f 0800 	mov.w	r8, #0
 8005420:	4621      	mov	r1, r4
 8005422:	4628      	mov	r0, r5
 8005424:	f000 fd16 	bl	8005e54 <_Bfree>
 8005428:	2e00      	cmp	r6, #0
 800542a:	f43f aea7 	beq.w	800517c <_dtoa_r+0x6c4>
 800542e:	f1b8 0f00 	cmp.w	r8, #0
 8005432:	d005      	beq.n	8005440 <_dtoa_r+0x988>
 8005434:	45b0      	cmp	r8, r6
 8005436:	d003      	beq.n	8005440 <_dtoa_r+0x988>
 8005438:	4641      	mov	r1, r8
 800543a:	4628      	mov	r0, r5
 800543c:	f000 fd0a 	bl	8005e54 <_Bfree>
 8005440:	4631      	mov	r1, r6
 8005442:	4628      	mov	r0, r5
 8005444:	f000 fd06 	bl	8005e54 <_Bfree>
 8005448:	e698      	b.n	800517c <_dtoa_r+0x6c4>
 800544a:	2400      	movs	r4, #0
 800544c:	4626      	mov	r6, r4
 800544e:	e7e1      	b.n	8005414 <_dtoa_r+0x95c>
 8005450:	46c2      	mov	sl, r8
 8005452:	4626      	mov	r6, r4
 8005454:	e596      	b.n	8004f84 <_dtoa_r+0x4cc>
 8005456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80fd 	beq.w	800565c <_dtoa_r+0xba4>
 8005462:	2f00      	cmp	r7, #0
 8005464:	dd05      	ble.n	8005472 <_dtoa_r+0x9ba>
 8005466:	4631      	mov	r1, r6
 8005468:	463a      	mov	r2, r7
 800546a:	4628      	mov	r0, r5
 800546c:	f000 ff0a 	bl	8006284 <__lshift>
 8005470:	4606      	mov	r6, r0
 8005472:	f1b8 0f00 	cmp.w	r8, #0
 8005476:	d05c      	beq.n	8005532 <_dtoa_r+0xa7a>
 8005478:	4628      	mov	r0, r5
 800547a:	6871      	ldr	r1, [r6, #4]
 800547c:	f000 fcaa 	bl	8005dd4 <_Balloc>
 8005480:	4607      	mov	r7, r0
 8005482:	b928      	cbnz	r0, 8005490 <_dtoa_r+0x9d8>
 8005484:	4602      	mov	r2, r0
 8005486:	f240 21ea 	movw	r1, #746	; 0x2ea
 800548a:	4b7f      	ldr	r3, [pc, #508]	; (8005688 <_dtoa_r+0xbd0>)
 800548c:	f7ff bb28 	b.w	8004ae0 <_dtoa_r+0x28>
 8005490:	6932      	ldr	r2, [r6, #16]
 8005492:	f106 010c 	add.w	r1, r6, #12
 8005496:	3202      	adds	r2, #2
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	300c      	adds	r0, #12
 800549c:	f000 fc8c 	bl	8005db8 <memcpy>
 80054a0:	2201      	movs	r2, #1
 80054a2:	4639      	mov	r1, r7
 80054a4:	4628      	mov	r0, r5
 80054a6:	f000 feed 	bl	8006284 <__lshift>
 80054aa:	46b0      	mov	r8, r6
 80054ac:	4606      	mov	r6, r0
 80054ae:	9b03      	ldr	r3, [sp, #12]
 80054b0:	3301      	adds	r3, #1
 80054b2:	9308      	str	r3, [sp, #32]
 80054b4:	9b03      	ldr	r3, [sp, #12]
 80054b6:	444b      	add	r3, r9
 80054b8:	930a      	str	r3, [sp, #40]	; 0x28
 80054ba:	9b04      	ldr	r3, [sp, #16]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	9309      	str	r3, [sp, #36]	; 0x24
 80054c2:	9b08      	ldr	r3, [sp, #32]
 80054c4:	4621      	mov	r1, r4
 80054c6:	3b01      	subs	r3, #1
 80054c8:	4658      	mov	r0, fp
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	f7ff fa68 	bl	80049a0 <quorem>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4641      	mov	r1, r8
 80054d4:	3330      	adds	r3, #48	; 0x30
 80054d6:	9006      	str	r0, [sp, #24]
 80054d8:	4658      	mov	r0, fp
 80054da:	930b      	str	r3, [sp, #44]	; 0x2c
 80054dc:	f000 ff42 	bl	8006364 <__mcmp>
 80054e0:	4632      	mov	r2, r6
 80054e2:	4681      	mov	r9, r0
 80054e4:	4621      	mov	r1, r4
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 ff58 	bl	800639c <__mdiff>
 80054ec:	68c2      	ldr	r2, [r0, #12]
 80054ee:	4607      	mov	r7, r0
 80054f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f2:	bb02      	cbnz	r2, 8005536 <_dtoa_r+0xa7e>
 80054f4:	4601      	mov	r1, r0
 80054f6:	4658      	mov	r0, fp
 80054f8:	f000 ff34 	bl	8006364 <__mcmp>
 80054fc:	4602      	mov	r2, r0
 80054fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005500:	4639      	mov	r1, r7
 8005502:	4628      	mov	r0, r5
 8005504:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005508:	f000 fca4 	bl	8005e54 <_Bfree>
 800550c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800550e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005510:	9f08      	ldr	r7, [sp, #32]
 8005512:	ea43 0102 	orr.w	r1, r3, r2
 8005516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005518:	430b      	orrs	r3, r1
 800551a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800551c:	d10d      	bne.n	800553a <_dtoa_r+0xa82>
 800551e:	2b39      	cmp	r3, #57	; 0x39
 8005520:	d029      	beq.n	8005576 <_dtoa_r+0xabe>
 8005522:	f1b9 0f00 	cmp.w	r9, #0
 8005526:	dd01      	ble.n	800552c <_dtoa_r+0xa74>
 8005528:	9b06      	ldr	r3, [sp, #24]
 800552a:	3331      	adds	r3, #49	; 0x31
 800552c:	9a04      	ldr	r2, [sp, #16]
 800552e:	7013      	strb	r3, [r2, #0]
 8005530:	e776      	b.n	8005420 <_dtoa_r+0x968>
 8005532:	4630      	mov	r0, r6
 8005534:	e7b9      	b.n	80054aa <_dtoa_r+0x9f2>
 8005536:	2201      	movs	r2, #1
 8005538:	e7e2      	b.n	8005500 <_dtoa_r+0xa48>
 800553a:	f1b9 0f00 	cmp.w	r9, #0
 800553e:	db06      	blt.n	800554e <_dtoa_r+0xa96>
 8005540:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005542:	ea41 0909 	orr.w	r9, r1, r9
 8005546:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005548:	ea59 0101 	orrs.w	r1, r9, r1
 800554c:	d120      	bne.n	8005590 <_dtoa_r+0xad8>
 800554e:	2a00      	cmp	r2, #0
 8005550:	ddec      	ble.n	800552c <_dtoa_r+0xa74>
 8005552:	4659      	mov	r1, fp
 8005554:	2201      	movs	r2, #1
 8005556:	4628      	mov	r0, r5
 8005558:	9308      	str	r3, [sp, #32]
 800555a:	f000 fe93 	bl	8006284 <__lshift>
 800555e:	4621      	mov	r1, r4
 8005560:	4683      	mov	fp, r0
 8005562:	f000 feff 	bl	8006364 <__mcmp>
 8005566:	2800      	cmp	r0, #0
 8005568:	9b08      	ldr	r3, [sp, #32]
 800556a:	dc02      	bgt.n	8005572 <_dtoa_r+0xaba>
 800556c:	d1de      	bne.n	800552c <_dtoa_r+0xa74>
 800556e:	07da      	lsls	r2, r3, #31
 8005570:	d5dc      	bpl.n	800552c <_dtoa_r+0xa74>
 8005572:	2b39      	cmp	r3, #57	; 0x39
 8005574:	d1d8      	bne.n	8005528 <_dtoa_r+0xa70>
 8005576:	2339      	movs	r3, #57	; 0x39
 8005578:	9a04      	ldr	r2, [sp, #16]
 800557a:	7013      	strb	r3, [r2, #0]
 800557c:	463b      	mov	r3, r7
 800557e:	461f      	mov	r7, r3
 8005580:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005584:	3b01      	subs	r3, #1
 8005586:	2a39      	cmp	r2, #57	; 0x39
 8005588:	d050      	beq.n	800562c <_dtoa_r+0xb74>
 800558a:	3201      	adds	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e747      	b.n	8005420 <_dtoa_r+0x968>
 8005590:	2a00      	cmp	r2, #0
 8005592:	dd03      	ble.n	800559c <_dtoa_r+0xae4>
 8005594:	2b39      	cmp	r3, #57	; 0x39
 8005596:	d0ee      	beq.n	8005576 <_dtoa_r+0xabe>
 8005598:	3301      	adds	r3, #1
 800559a:	e7c7      	b.n	800552c <_dtoa_r+0xa74>
 800559c:	9a08      	ldr	r2, [sp, #32]
 800559e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80055a4:	428a      	cmp	r2, r1
 80055a6:	d02a      	beq.n	80055fe <_dtoa_r+0xb46>
 80055a8:	4659      	mov	r1, fp
 80055aa:	2300      	movs	r3, #0
 80055ac:	220a      	movs	r2, #10
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 fc72 	bl	8005e98 <__multadd>
 80055b4:	45b0      	cmp	r8, r6
 80055b6:	4683      	mov	fp, r0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	f04f 020a 	mov.w	r2, #10
 80055c0:	4641      	mov	r1, r8
 80055c2:	4628      	mov	r0, r5
 80055c4:	d107      	bne.n	80055d6 <_dtoa_r+0xb1e>
 80055c6:	f000 fc67 	bl	8005e98 <__multadd>
 80055ca:	4680      	mov	r8, r0
 80055cc:	4606      	mov	r6, r0
 80055ce:	9b08      	ldr	r3, [sp, #32]
 80055d0:	3301      	adds	r3, #1
 80055d2:	9308      	str	r3, [sp, #32]
 80055d4:	e775      	b.n	80054c2 <_dtoa_r+0xa0a>
 80055d6:	f000 fc5f 	bl	8005e98 <__multadd>
 80055da:	4631      	mov	r1, r6
 80055dc:	4680      	mov	r8, r0
 80055de:	2300      	movs	r3, #0
 80055e0:	220a      	movs	r2, #10
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 fc58 	bl	8005e98 <__multadd>
 80055e8:	4606      	mov	r6, r0
 80055ea:	e7f0      	b.n	80055ce <_dtoa_r+0xb16>
 80055ec:	f1b9 0f00 	cmp.w	r9, #0
 80055f0:	bfcc      	ite	gt
 80055f2:	464f      	movgt	r7, r9
 80055f4:	2701      	movle	r7, #1
 80055f6:	f04f 0800 	mov.w	r8, #0
 80055fa:	9a03      	ldr	r2, [sp, #12]
 80055fc:	4417      	add	r7, r2
 80055fe:	4659      	mov	r1, fp
 8005600:	2201      	movs	r2, #1
 8005602:	4628      	mov	r0, r5
 8005604:	9308      	str	r3, [sp, #32]
 8005606:	f000 fe3d 	bl	8006284 <__lshift>
 800560a:	4621      	mov	r1, r4
 800560c:	4683      	mov	fp, r0
 800560e:	f000 fea9 	bl	8006364 <__mcmp>
 8005612:	2800      	cmp	r0, #0
 8005614:	dcb2      	bgt.n	800557c <_dtoa_r+0xac4>
 8005616:	d102      	bne.n	800561e <_dtoa_r+0xb66>
 8005618:	9b08      	ldr	r3, [sp, #32]
 800561a:	07db      	lsls	r3, r3, #31
 800561c:	d4ae      	bmi.n	800557c <_dtoa_r+0xac4>
 800561e:	463b      	mov	r3, r7
 8005620:	461f      	mov	r7, r3
 8005622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005626:	2a30      	cmp	r2, #48	; 0x30
 8005628:	d0fa      	beq.n	8005620 <_dtoa_r+0xb68>
 800562a:	e6f9      	b.n	8005420 <_dtoa_r+0x968>
 800562c:	9a03      	ldr	r2, [sp, #12]
 800562e:	429a      	cmp	r2, r3
 8005630:	d1a5      	bne.n	800557e <_dtoa_r+0xac6>
 8005632:	2331      	movs	r3, #49	; 0x31
 8005634:	f10a 0a01 	add.w	sl, sl, #1
 8005638:	e779      	b.n	800552e <_dtoa_r+0xa76>
 800563a:	4b14      	ldr	r3, [pc, #80]	; (800568c <_dtoa_r+0xbd4>)
 800563c:	f7ff baa8 	b.w	8004b90 <_dtoa_r+0xd8>
 8005640:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005642:	2b00      	cmp	r3, #0
 8005644:	f47f aa81 	bne.w	8004b4a <_dtoa_r+0x92>
 8005648:	4b11      	ldr	r3, [pc, #68]	; (8005690 <_dtoa_r+0xbd8>)
 800564a:	f7ff baa1 	b.w	8004b90 <_dtoa_r+0xd8>
 800564e:	f1b9 0f00 	cmp.w	r9, #0
 8005652:	dc03      	bgt.n	800565c <_dtoa_r+0xba4>
 8005654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005656:	2b02      	cmp	r3, #2
 8005658:	f73f aecb 	bgt.w	80053f2 <_dtoa_r+0x93a>
 800565c:	9f03      	ldr	r7, [sp, #12]
 800565e:	4621      	mov	r1, r4
 8005660:	4658      	mov	r0, fp
 8005662:	f7ff f99d 	bl	80049a0 <quorem>
 8005666:	9a03      	ldr	r2, [sp, #12]
 8005668:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800566c:	f807 3b01 	strb.w	r3, [r7], #1
 8005670:	1aba      	subs	r2, r7, r2
 8005672:	4591      	cmp	r9, r2
 8005674:	ddba      	ble.n	80055ec <_dtoa_r+0xb34>
 8005676:	4659      	mov	r1, fp
 8005678:	2300      	movs	r3, #0
 800567a:	220a      	movs	r2, #10
 800567c:	4628      	mov	r0, r5
 800567e:	f000 fc0b 	bl	8005e98 <__multadd>
 8005682:	4683      	mov	fp, r0
 8005684:	e7eb      	b.n	800565e <_dtoa_r+0xba6>
 8005686:	bf00      	nop
 8005688:	08007a40 	.word	0x08007a40
 800568c:	08007844 	.word	0x08007844
 8005690:	080079c1 	.word	0x080079c1

08005694 <rshift>:
 8005694:	6903      	ldr	r3, [r0, #16]
 8005696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800569a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800569e:	f100 0414 	add.w	r4, r0, #20
 80056a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80056a6:	dd46      	ble.n	8005736 <rshift+0xa2>
 80056a8:	f011 011f 	ands.w	r1, r1, #31
 80056ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80056b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80056b4:	d10c      	bne.n	80056d0 <rshift+0x3c>
 80056b6:	4629      	mov	r1, r5
 80056b8:	f100 0710 	add.w	r7, r0, #16
 80056bc:	42b1      	cmp	r1, r6
 80056be:	d335      	bcc.n	800572c <rshift+0x98>
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	1eea      	subs	r2, r5, #3
 80056c6:	4296      	cmp	r6, r2
 80056c8:	bf38      	it	cc
 80056ca:	2300      	movcc	r3, #0
 80056cc:	4423      	add	r3, r4
 80056ce:	e015      	b.n	80056fc <rshift+0x68>
 80056d0:	46a1      	mov	r9, r4
 80056d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80056d6:	f1c1 0820 	rsb	r8, r1, #32
 80056da:	40cf      	lsrs	r7, r1
 80056dc:	f105 0e04 	add.w	lr, r5, #4
 80056e0:	4576      	cmp	r6, lr
 80056e2:	46f4      	mov	ip, lr
 80056e4:	d816      	bhi.n	8005714 <rshift+0x80>
 80056e6:	1a9a      	subs	r2, r3, r2
 80056e8:	0092      	lsls	r2, r2, #2
 80056ea:	3a04      	subs	r2, #4
 80056ec:	3501      	adds	r5, #1
 80056ee:	42ae      	cmp	r6, r5
 80056f0:	bf38      	it	cc
 80056f2:	2200      	movcc	r2, #0
 80056f4:	18a3      	adds	r3, r4, r2
 80056f6:	50a7      	str	r7, [r4, r2]
 80056f8:	b107      	cbz	r7, 80056fc <rshift+0x68>
 80056fa:	3304      	adds	r3, #4
 80056fc:	42a3      	cmp	r3, r4
 80056fe:	eba3 0204 	sub.w	r2, r3, r4
 8005702:	bf08      	it	eq
 8005704:	2300      	moveq	r3, #0
 8005706:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800570a:	6102      	str	r2, [r0, #16]
 800570c:	bf08      	it	eq
 800570e:	6143      	streq	r3, [r0, #20]
 8005710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005714:	f8dc c000 	ldr.w	ip, [ip]
 8005718:	fa0c fc08 	lsl.w	ip, ip, r8
 800571c:	ea4c 0707 	orr.w	r7, ip, r7
 8005720:	f849 7b04 	str.w	r7, [r9], #4
 8005724:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005728:	40cf      	lsrs	r7, r1
 800572a:	e7d9      	b.n	80056e0 <rshift+0x4c>
 800572c:	f851 cb04 	ldr.w	ip, [r1], #4
 8005730:	f847 cf04 	str.w	ip, [r7, #4]!
 8005734:	e7c2      	b.n	80056bc <rshift+0x28>
 8005736:	4623      	mov	r3, r4
 8005738:	e7e0      	b.n	80056fc <rshift+0x68>

0800573a <__hexdig_fun>:
 800573a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800573e:	2b09      	cmp	r3, #9
 8005740:	d802      	bhi.n	8005748 <__hexdig_fun+0xe>
 8005742:	3820      	subs	r0, #32
 8005744:	b2c0      	uxtb	r0, r0
 8005746:	4770      	bx	lr
 8005748:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800574c:	2b05      	cmp	r3, #5
 800574e:	d801      	bhi.n	8005754 <__hexdig_fun+0x1a>
 8005750:	3847      	subs	r0, #71	; 0x47
 8005752:	e7f7      	b.n	8005744 <__hexdig_fun+0xa>
 8005754:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005758:	2b05      	cmp	r3, #5
 800575a:	d801      	bhi.n	8005760 <__hexdig_fun+0x26>
 800575c:	3827      	subs	r0, #39	; 0x27
 800575e:	e7f1      	b.n	8005744 <__hexdig_fun+0xa>
 8005760:	2000      	movs	r0, #0
 8005762:	4770      	bx	lr

08005764 <__gethex>:
 8005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005768:	b08b      	sub	sp, #44	; 0x2c
 800576a:	9305      	str	r3, [sp, #20]
 800576c:	4bb2      	ldr	r3, [pc, #712]	; (8005a38 <__gethex+0x2d4>)
 800576e:	9002      	str	r0, [sp, #8]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	468b      	mov	fp, r1
 8005774:	4618      	mov	r0, r3
 8005776:	4690      	mov	r8, r2
 8005778:	9303      	str	r3, [sp, #12]
 800577a:	f7fa fce9 	bl	8000150 <strlen>
 800577e:	4682      	mov	sl, r0
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	f8db 2000 	ldr.w	r2, [fp]
 8005786:	4403      	add	r3, r0
 8005788:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800578c:	9306      	str	r3, [sp, #24]
 800578e:	1c93      	adds	r3, r2, #2
 8005790:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005794:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005798:	32fe      	adds	r2, #254	; 0xfe
 800579a:	18d1      	adds	r1, r2, r3
 800579c:	461f      	mov	r7, r3
 800579e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80057a2:	9101      	str	r1, [sp, #4]
 80057a4:	2830      	cmp	r0, #48	; 0x30
 80057a6:	d0f8      	beq.n	800579a <__gethex+0x36>
 80057a8:	f7ff ffc7 	bl	800573a <__hexdig_fun>
 80057ac:	4604      	mov	r4, r0
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d13a      	bne.n	8005828 <__gethex+0xc4>
 80057b2:	4652      	mov	r2, sl
 80057b4:	4638      	mov	r0, r7
 80057b6:	9903      	ldr	r1, [sp, #12]
 80057b8:	f001 fa26 	bl	8006c08 <strncmp>
 80057bc:	4605      	mov	r5, r0
 80057be:	2800      	cmp	r0, #0
 80057c0:	d166      	bne.n	8005890 <__gethex+0x12c>
 80057c2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80057c6:	eb07 060a 	add.w	r6, r7, sl
 80057ca:	f7ff ffb6 	bl	800573a <__hexdig_fun>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d060      	beq.n	8005894 <__gethex+0x130>
 80057d2:	4633      	mov	r3, r6
 80057d4:	7818      	ldrb	r0, [r3, #0]
 80057d6:	461f      	mov	r7, r3
 80057d8:	2830      	cmp	r0, #48	; 0x30
 80057da:	f103 0301 	add.w	r3, r3, #1
 80057de:	d0f9      	beq.n	80057d4 <__gethex+0x70>
 80057e0:	f7ff ffab 	bl	800573a <__hexdig_fun>
 80057e4:	2301      	movs	r3, #1
 80057e6:	fab0 f480 	clz	r4, r0
 80057ea:	4635      	mov	r5, r6
 80057ec:	0964      	lsrs	r4, r4, #5
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	463a      	mov	r2, r7
 80057f2:	4616      	mov	r6, r2
 80057f4:	7830      	ldrb	r0, [r6, #0]
 80057f6:	3201      	adds	r2, #1
 80057f8:	f7ff ff9f 	bl	800573a <__hexdig_fun>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d1f8      	bne.n	80057f2 <__gethex+0x8e>
 8005800:	4652      	mov	r2, sl
 8005802:	4630      	mov	r0, r6
 8005804:	9903      	ldr	r1, [sp, #12]
 8005806:	f001 f9ff 	bl	8006c08 <strncmp>
 800580a:	b980      	cbnz	r0, 800582e <__gethex+0xca>
 800580c:	b94d      	cbnz	r5, 8005822 <__gethex+0xbe>
 800580e:	eb06 050a 	add.w	r5, r6, sl
 8005812:	462a      	mov	r2, r5
 8005814:	4616      	mov	r6, r2
 8005816:	7830      	ldrb	r0, [r6, #0]
 8005818:	3201      	adds	r2, #1
 800581a:	f7ff ff8e 	bl	800573a <__hexdig_fun>
 800581e:	2800      	cmp	r0, #0
 8005820:	d1f8      	bne.n	8005814 <__gethex+0xb0>
 8005822:	1bad      	subs	r5, r5, r6
 8005824:	00ad      	lsls	r5, r5, #2
 8005826:	e004      	b.n	8005832 <__gethex+0xce>
 8005828:	2400      	movs	r4, #0
 800582a:	4625      	mov	r5, r4
 800582c:	e7e0      	b.n	80057f0 <__gethex+0x8c>
 800582e:	2d00      	cmp	r5, #0
 8005830:	d1f7      	bne.n	8005822 <__gethex+0xbe>
 8005832:	7833      	ldrb	r3, [r6, #0]
 8005834:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005838:	2b50      	cmp	r3, #80	; 0x50
 800583a:	d139      	bne.n	80058b0 <__gethex+0x14c>
 800583c:	7873      	ldrb	r3, [r6, #1]
 800583e:	2b2b      	cmp	r3, #43	; 0x2b
 8005840:	d02a      	beq.n	8005898 <__gethex+0x134>
 8005842:	2b2d      	cmp	r3, #45	; 0x2d
 8005844:	d02c      	beq.n	80058a0 <__gethex+0x13c>
 8005846:	f04f 0900 	mov.w	r9, #0
 800584a:	1c71      	adds	r1, r6, #1
 800584c:	7808      	ldrb	r0, [r1, #0]
 800584e:	f7ff ff74 	bl	800573a <__hexdig_fun>
 8005852:	1e43      	subs	r3, r0, #1
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b18      	cmp	r3, #24
 8005858:	d82a      	bhi.n	80058b0 <__gethex+0x14c>
 800585a:	f1a0 0210 	sub.w	r2, r0, #16
 800585e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005862:	f7ff ff6a 	bl	800573a <__hexdig_fun>
 8005866:	1e43      	subs	r3, r0, #1
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b18      	cmp	r3, #24
 800586c:	d91b      	bls.n	80058a6 <__gethex+0x142>
 800586e:	f1b9 0f00 	cmp.w	r9, #0
 8005872:	d000      	beq.n	8005876 <__gethex+0x112>
 8005874:	4252      	negs	r2, r2
 8005876:	4415      	add	r5, r2
 8005878:	f8cb 1000 	str.w	r1, [fp]
 800587c:	b1d4      	cbz	r4, 80058b4 <__gethex+0x150>
 800587e:	9b01      	ldr	r3, [sp, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf14      	ite	ne
 8005884:	2700      	movne	r7, #0
 8005886:	2706      	moveq	r7, #6
 8005888:	4638      	mov	r0, r7
 800588a:	b00b      	add	sp, #44	; 0x2c
 800588c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005890:	463e      	mov	r6, r7
 8005892:	4625      	mov	r5, r4
 8005894:	2401      	movs	r4, #1
 8005896:	e7cc      	b.n	8005832 <__gethex+0xce>
 8005898:	f04f 0900 	mov.w	r9, #0
 800589c:	1cb1      	adds	r1, r6, #2
 800589e:	e7d5      	b.n	800584c <__gethex+0xe8>
 80058a0:	f04f 0901 	mov.w	r9, #1
 80058a4:	e7fa      	b.n	800589c <__gethex+0x138>
 80058a6:	230a      	movs	r3, #10
 80058a8:	fb03 0202 	mla	r2, r3, r2, r0
 80058ac:	3a10      	subs	r2, #16
 80058ae:	e7d6      	b.n	800585e <__gethex+0xfa>
 80058b0:	4631      	mov	r1, r6
 80058b2:	e7e1      	b.n	8005878 <__gethex+0x114>
 80058b4:	4621      	mov	r1, r4
 80058b6:	1bf3      	subs	r3, r6, r7
 80058b8:	3b01      	subs	r3, #1
 80058ba:	2b07      	cmp	r3, #7
 80058bc:	dc0a      	bgt.n	80058d4 <__gethex+0x170>
 80058be:	9802      	ldr	r0, [sp, #8]
 80058c0:	f000 fa88 	bl	8005dd4 <_Balloc>
 80058c4:	4604      	mov	r4, r0
 80058c6:	b940      	cbnz	r0, 80058da <__gethex+0x176>
 80058c8:	4602      	mov	r2, r0
 80058ca:	21de      	movs	r1, #222	; 0xde
 80058cc:	4b5b      	ldr	r3, [pc, #364]	; (8005a3c <__gethex+0x2d8>)
 80058ce:	485c      	ldr	r0, [pc, #368]	; (8005a40 <__gethex+0x2dc>)
 80058d0:	f001 f9bc 	bl	8006c4c <__assert_func>
 80058d4:	3101      	adds	r1, #1
 80058d6:	105b      	asrs	r3, r3, #1
 80058d8:	e7ef      	b.n	80058ba <__gethex+0x156>
 80058da:	f04f 0b00 	mov.w	fp, #0
 80058de:	f100 0914 	add.w	r9, r0, #20
 80058e2:	f1ca 0301 	rsb	r3, sl, #1
 80058e6:	f8cd 9010 	str.w	r9, [sp, #16]
 80058ea:	f8cd b004 	str.w	fp, [sp, #4]
 80058ee:	9308      	str	r3, [sp, #32]
 80058f0:	42b7      	cmp	r7, r6
 80058f2:	d33f      	bcc.n	8005974 <__gethex+0x210>
 80058f4:	9f04      	ldr	r7, [sp, #16]
 80058f6:	9b01      	ldr	r3, [sp, #4]
 80058f8:	f847 3b04 	str.w	r3, [r7], #4
 80058fc:	eba7 0709 	sub.w	r7, r7, r9
 8005900:	10bf      	asrs	r7, r7, #2
 8005902:	6127      	str	r7, [r4, #16]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fb57 	bl	8005fb8 <__hi0bits>
 800590a:	017f      	lsls	r7, r7, #5
 800590c:	f8d8 6000 	ldr.w	r6, [r8]
 8005910:	1a3f      	subs	r7, r7, r0
 8005912:	42b7      	cmp	r7, r6
 8005914:	dd62      	ble.n	80059dc <__gethex+0x278>
 8005916:	1bbf      	subs	r7, r7, r6
 8005918:	4639      	mov	r1, r7
 800591a:	4620      	mov	r0, r4
 800591c:	f000 fef1 	bl	8006702 <__any_on>
 8005920:	4682      	mov	sl, r0
 8005922:	b1a8      	cbz	r0, 8005950 <__gethex+0x1ec>
 8005924:	f04f 0a01 	mov.w	sl, #1
 8005928:	1e7b      	subs	r3, r7, #1
 800592a:	1159      	asrs	r1, r3, #5
 800592c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005930:	f003 021f 	and.w	r2, r3, #31
 8005934:	fa0a f202 	lsl.w	r2, sl, r2
 8005938:	420a      	tst	r2, r1
 800593a:	d009      	beq.n	8005950 <__gethex+0x1ec>
 800593c:	4553      	cmp	r3, sl
 800593e:	dd05      	ble.n	800594c <__gethex+0x1e8>
 8005940:	4620      	mov	r0, r4
 8005942:	1eb9      	subs	r1, r7, #2
 8005944:	f000 fedd 	bl	8006702 <__any_on>
 8005948:	2800      	cmp	r0, #0
 800594a:	d144      	bne.n	80059d6 <__gethex+0x272>
 800594c:	f04f 0a02 	mov.w	sl, #2
 8005950:	4639      	mov	r1, r7
 8005952:	4620      	mov	r0, r4
 8005954:	f7ff fe9e 	bl	8005694 <rshift>
 8005958:	443d      	add	r5, r7
 800595a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800595e:	42ab      	cmp	r3, r5
 8005960:	da4a      	bge.n	80059f8 <__gethex+0x294>
 8005962:	4621      	mov	r1, r4
 8005964:	9802      	ldr	r0, [sp, #8]
 8005966:	f000 fa75 	bl	8005e54 <_Bfree>
 800596a:	2300      	movs	r3, #0
 800596c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800596e:	27a3      	movs	r7, #163	; 0xa3
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e789      	b.n	8005888 <__gethex+0x124>
 8005974:	1e73      	subs	r3, r6, #1
 8005976:	9a06      	ldr	r2, [sp, #24]
 8005978:	9307      	str	r3, [sp, #28]
 800597a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800597e:	4293      	cmp	r3, r2
 8005980:	d019      	beq.n	80059b6 <__gethex+0x252>
 8005982:	f1bb 0f20 	cmp.w	fp, #32
 8005986:	d107      	bne.n	8005998 <__gethex+0x234>
 8005988:	9b04      	ldr	r3, [sp, #16]
 800598a:	9a01      	ldr	r2, [sp, #4]
 800598c:	f843 2b04 	str.w	r2, [r3], #4
 8005990:	9304      	str	r3, [sp, #16]
 8005992:	2300      	movs	r3, #0
 8005994:	469b      	mov	fp, r3
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800599c:	f7ff fecd 	bl	800573a <__hexdig_fun>
 80059a0:	9b01      	ldr	r3, [sp, #4]
 80059a2:	f000 000f 	and.w	r0, r0, #15
 80059a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80059aa:	4303      	orrs	r3, r0
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	f10b 0b04 	add.w	fp, fp, #4
 80059b2:	9b07      	ldr	r3, [sp, #28]
 80059b4:	e00d      	b.n	80059d2 <__gethex+0x26e>
 80059b6:	9a08      	ldr	r2, [sp, #32]
 80059b8:	1e73      	subs	r3, r6, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	42bb      	cmp	r3, r7
 80059be:	d3e0      	bcc.n	8005982 <__gethex+0x21e>
 80059c0:	4618      	mov	r0, r3
 80059c2:	4652      	mov	r2, sl
 80059c4:	9903      	ldr	r1, [sp, #12]
 80059c6:	9309      	str	r3, [sp, #36]	; 0x24
 80059c8:	f001 f91e 	bl	8006c08 <strncmp>
 80059cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d1d7      	bne.n	8005982 <__gethex+0x21e>
 80059d2:	461e      	mov	r6, r3
 80059d4:	e78c      	b.n	80058f0 <__gethex+0x18c>
 80059d6:	f04f 0a03 	mov.w	sl, #3
 80059da:	e7b9      	b.n	8005950 <__gethex+0x1ec>
 80059dc:	da09      	bge.n	80059f2 <__gethex+0x28e>
 80059de:	1bf7      	subs	r7, r6, r7
 80059e0:	4621      	mov	r1, r4
 80059e2:	463a      	mov	r2, r7
 80059e4:	9802      	ldr	r0, [sp, #8]
 80059e6:	f000 fc4d 	bl	8006284 <__lshift>
 80059ea:	4604      	mov	r4, r0
 80059ec:	1bed      	subs	r5, r5, r7
 80059ee:	f100 0914 	add.w	r9, r0, #20
 80059f2:	f04f 0a00 	mov.w	sl, #0
 80059f6:	e7b0      	b.n	800595a <__gethex+0x1f6>
 80059f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80059fc:	42a8      	cmp	r0, r5
 80059fe:	dd72      	ble.n	8005ae6 <__gethex+0x382>
 8005a00:	1b45      	subs	r5, r0, r5
 8005a02:	42ae      	cmp	r6, r5
 8005a04:	dc35      	bgt.n	8005a72 <__gethex+0x30e>
 8005a06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d029      	beq.n	8005a62 <__gethex+0x2fe>
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d02b      	beq.n	8005a6a <__gethex+0x306>
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d11c      	bne.n	8005a50 <__gethex+0x2ec>
 8005a16:	42ae      	cmp	r6, r5
 8005a18:	d11a      	bne.n	8005a50 <__gethex+0x2ec>
 8005a1a:	2e01      	cmp	r6, #1
 8005a1c:	d112      	bne.n	8005a44 <__gethex+0x2e0>
 8005a1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a22:	9a05      	ldr	r2, [sp, #20]
 8005a24:	2762      	movs	r7, #98	; 0x62
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	2301      	movs	r3, #1
 8005a2a:	6123      	str	r3, [r4, #16]
 8005a2c:	f8c9 3000 	str.w	r3, [r9]
 8005a30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a32:	601c      	str	r4, [r3, #0]
 8005a34:	e728      	b.n	8005888 <__gethex+0x124>
 8005a36:	bf00      	nop
 8005a38:	08007ab8 	.word	0x08007ab8
 8005a3c:	08007a40 	.word	0x08007a40
 8005a40:	08007a51 	.word	0x08007a51
 8005a44:	4620      	mov	r0, r4
 8005a46:	1e71      	subs	r1, r6, #1
 8005a48:	f000 fe5b 	bl	8006702 <__any_on>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d1e6      	bne.n	8005a1e <__gethex+0x2ba>
 8005a50:	4621      	mov	r1, r4
 8005a52:	9802      	ldr	r0, [sp, #8]
 8005a54:	f000 f9fe 	bl	8005e54 <_Bfree>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a5c:	2750      	movs	r7, #80	; 0x50
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e712      	b.n	8005888 <__gethex+0x124>
 8005a62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f3      	bne.n	8005a50 <__gethex+0x2ec>
 8005a68:	e7d9      	b.n	8005a1e <__gethex+0x2ba>
 8005a6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1d6      	bne.n	8005a1e <__gethex+0x2ba>
 8005a70:	e7ee      	b.n	8005a50 <__gethex+0x2ec>
 8005a72:	1e6f      	subs	r7, r5, #1
 8005a74:	f1ba 0f00 	cmp.w	sl, #0
 8005a78:	d132      	bne.n	8005ae0 <__gethex+0x37c>
 8005a7a:	b127      	cbz	r7, 8005a86 <__gethex+0x322>
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 fe3f 	bl	8006702 <__any_on>
 8005a84:	4682      	mov	sl, r0
 8005a86:	2101      	movs	r1, #1
 8005a88:	117b      	asrs	r3, r7, #5
 8005a8a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005a8e:	f007 071f 	and.w	r7, r7, #31
 8005a92:	fa01 f707 	lsl.w	r7, r1, r7
 8005a96:	421f      	tst	r7, r3
 8005a98:	f04f 0702 	mov.w	r7, #2
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	bf18      	it	ne
 8005aa2:	f04a 0a02 	orrne.w	sl, sl, #2
 8005aa6:	1b76      	subs	r6, r6, r5
 8005aa8:	f7ff fdf4 	bl	8005694 <rshift>
 8005aac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005ab0:	f1ba 0f00 	cmp.w	sl, #0
 8005ab4:	d048      	beq.n	8005b48 <__gethex+0x3e4>
 8005ab6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d015      	beq.n	8005aea <__gethex+0x386>
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d017      	beq.n	8005af2 <__gethex+0x38e>
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d109      	bne.n	8005ada <__gethex+0x376>
 8005ac6:	f01a 0f02 	tst.w	sl, #2
 8005aca:	d006      	beq.n	8005ada <__gethex+0x376>
 8005acc:	f8d9 0000 	ldr.w	r0, [r9]
 8005ad0:	ea4a 0a00 	orr.w	sl, sl, r0
 8005ad4:	f01a 0f01 	tst.w	sl, #1
 8005ad8:	d10e      	bne.n	8005af8 <__gethex+0x394>
 8005ada:	f047 0710 	orr.w	r7, r7, #16
 8005ade:	e033      	b.n	8005b48 <__gethex+0x3e4>
 8005ae0:	f04f 0a01 	mov.w	sl, #1
 8005ae4:	e7cf      	b.n	8005a86 <__gethex+0x322>
 8005ae6:	2701      	movs	r7, #1
 8005ae8:	e7e2      	b.n	8005ab0 <__gethex+0x34c>
 8005aea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005aec:	f1c3 0301 	rsb	r3, r3, #1
 8005af0:	9315      	str	r3, [sp, #84]	; 0x54
 8005af2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <__gethex+0x376>
 8005af8:	f04f 0c00 	mov.w	ip, #0
 8005afc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005b00:	f104 0314 	add.w	r3, r4, #20
 8005b04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005b08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b12:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005b16:	d01c      	beq.n	8005b52 <__gethex+0x3ee>
 8005b18:	3201      	adds	r2, #1
 8005b1a:	6002      	str	r2, [r0, #0]
 8005b1c:	2f02      	cmp	r7, #2
 8005b1e:	f104 0314 	add.w	r3, r4, #20
 8005b22:	d13d      	bne.n	8005ba0 <__gethex+0x43c>
 8005b24:	f8d8 2000 	ldr.w	r2, [r8]
 8005b28:	3a01      	subs	r2, #1
 8005b2a:	42b2      	cmp	r2, r6
 8005b2c:	d10a      	bne.n	8005b44 <__gethex+0x3e0>
 8005b2e:	2201      	movs	r2, #1
 8005b30:	1171      	asrs	r1, r6, #5
 8005b32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b36:	f006 061f 	and.w	r6, r6, #31
 8005b3a:	fa02 f606 	lsl.w	r6, r2, r6
 8005b3e:	421e      	tst	r6, r3
 8005b40:	bf18      	it	ne
 8005b42:	4617      	movne	r7, r2
 8005b44:	f047 0720 	orr.w	r7, r7, #32
 8005b48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b4a:	601c      	str	r4, [r3, #0]
 8005b4c:	9b05      	ldr	r3, [sp, #20]
 8005b4e:	601d      	str	r5, [r3, #0]
 8005b50:	e69a      	b.n	8005888 <__gethex+0x124>
 8005b52:	4299      	cmp	r1, r3
 8005b54:	f843 cc04 	str.w	ip, [r3, #-4]
 8005b58:	d8d8      	bhi.n	8005b0c <__gethex+0x3a8>
 8005b5a:	68a3      	ldr	r3, [r4, #8]
 8005b5c:	459b      	cmp	fp, r3
 8005b5e:	db17      	blt.n	8005b90 <__gethex+0x42c>
 8005b60:	6861      	ldr	r1, [r4, #4]
 8005b62:	9802      	ldr	r0, [sp, #8]
 8005b64:	3101      	adds	r1, #1
 8005b66:	f000 f935 	bl	8005dd4 <_Balloc>
 8005b6a:	4681      	mov	r9, r0
 8005b6c:	b918      	cbnz	r0, 8005b76 <__gethex+0x412>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	2184      	movs	r1, #132	; 0x84
 8005b72:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <__gethex+0x474>)
 8005b74:	e6ab      	b.n	80058ce <__gethex+0x16a>
 8005b76:	6922      	ldr	r2, [r4, #16]
 8005b78:	f104 010c 	add.w	r1, r4, #12
 8005b7c:	3202      	adds	r2, #2
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	300c      	adds	r0, #12
 8005b82:	f000 f919 	bl	8005db8 <memcpy>
 8005b86:	4621      	mov	r1, r4
 8005b88:	9802      	ldr	r0, [sp, #8]
 8005b8a:	f000 f963 	bl	8005e54 <_Bfree>
 8005b8e:	464c      	mov	r4, r9
 8005b90:	6923      	ldr	r3, [r4, #16]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	6122      	str	r2, [r4, #16]
 8005b96:	2201      	movs	r2, #1
 8005b98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b9c:	615a      	str	r2, [r3, #20]
 8005b9e:	e7bd      	b.n	8005b1c <__gethex+0x3b8>
 8005ba0:	6922      	ldr	r2, [r4, #16]
 8005ba2:	455a      	cmp	r2, fp
 8005ba4:	dd0b      	ble.n	8005bbe <__gethex+0x45a>
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f7ff fd73 	bl	8005694 <rshift>
 8005bae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bb2:	3501      	adds	r5, #1
 8005bb4:	42ab      	cmp	r3, r5
 8005bb6:	f6ff aed4 	blt.w	8005962 <__gethex+0x1fe>
 8005bba:	2701      	movs	r7, #1
 8005bbc:	e7c2      	b.n	8005b44 <__gethex+0x3e0>
 8005bbe:	f016 061f 	ands.w	r6, r6, #31
 8005bc2:	d0fa      	beq.n	8005bba <__gethex+0x456>
 8005bc4:	4453      	add	r3, sl
 8005bc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005bca:	f000 f9f5 	bl	8005fb8 <__hi0bits>
 8005bce:	f1c6 0620 	rsb	r6, r6, #32
 8005bd2:	42b0      	cmp	r0, r6
 8005bd4:	dbe7      	blt.n	8005ba6 <__gethex+0x442>
 8005bd6:	e7f0      	b.n	8005bba <__gethex+0x456>
 8005bd8:	08007a40 	.word	0x08007a40

08005bdc <L_shift>:
 8005bdc:	f1c2 0208 	rsb	r2, r2, #8
 8005be0:	0092      	lsls	r2, r2, #2
 8005be2:	b570      	push	{r4, r5, r6, lr}
 8005be4:	f1c2 0620 	rsb	r6, r2, #32
 8005be8:	6843      	ldr	r3, [r0, #4]
 8005bea:	6804      	ldr	r4, [r0, #0]
 8005bec:	fa03 f506 	lsl.w	r5, r3, r6
 8005bf0:	432c      	orrs	r4, r5
 8005bf2:	40d3      	lsrs	r3, r2
 8005bf4:	6004      	str	r4, [r0, #0]
 8005bf6:	f840 3f04 	str.w	r3, [r0, #4]!
 8005bfa:	4288      	cmp	r0, r1
 8005bfc:	d3f4      	bcc.n	8005be8 <L_shift+0xc>
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}

08005c00 <__match>:
 8005c00:	b530      	push	{r4, r5, lr}
 8005c02:	6803      	ldr	r3, [r0, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c0a:	b914      	cbnz	r4, 8005c12 <__match+0x12>
 8005c0c:	6003      	str	r3, [r0, #0]
 8005c0e:	2001      	movs	r0, #1
 8005c10:	bd30      	pop	{r4, r5, pc}
 8005c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005c1a:	2d19      	cmp	r5, #25
 8005c1c:	bf98      	it	ls
 8005c1e:	3220      	addls	r2, #32
 8005c20:	42a2      	cmp	r2, r4
 8005c22:	d0f0      	beq.n	8005c06 <__match+0x6>
 8005c24:	2000      	movs	r0, #0
 8005c26:	e7f3      	b.n	8005c10 <__match+0x10>

08005c28 <__hexnan>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	2500      	movs	r5, #0
 8005c2e:	680b      	ldr	r3, [r1, #0]
 8005c30:	4682      	mov	sl, r0
 8005c32:	115e      	asrs	r6, r3, #5
 8005c34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005c38:	f013 031f 	ands.w	r3, r3, #31
 8005c3c:	bf18      	it	ne
 8005c3e:	3604      	addne	r6, #4
 8005c40:	1f37      	subs	r7, r6, #4
 8005c42:	46b9      	mov	r9, r7
 8005c44:	463c      	mov	r4, r7
 8005c46:	46ab      	mov	fp, r5
 8005c48:	b087      	sub	sp, #28
 8005c4a:	4690      	mov	r8, r2
 8005c4c:	6802      	ldr	r2, [r0, #0]
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	f846 5c04 	str.w	r5, [r6, #-4]
 8005c54:	9502      	str	r5, [sp, #8]
 8005c56:	7851      	ldrb	r1, [r2, #1]
 8005c58:	1c53      	adds	r3, r2, #1
 8005c5a:	9303      	str	r3, [sp, #12]
 8005c5c:	b341      	cbz	r1, 8005cb0 <__hexnan+0x88>
 8005c5e:	4608      	mov	r0, r1
 8005c60:	9205      	str	r2, [sp, #20]
 8005c62:	9104      	str	r1, [sp, #16]
 8005c64:	f7ff fd69 	bl	800573a <__hexdig_fun>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d14f      	bne.n	8005d0c <__hexnan+0xe4>
 8005c6c:	9904      	ldr	r1, [sp, #16]
 8005c6e:	9a05      	ldr	r2, [sp, #20]
 8005c70:	2920      	cmp	r1, #32
 8005c72:	d818      	bhi.n	8005ca6 <__hexnan+0x7e>
 8005c74:	9b02      	ldr	r3, [sp, #8]
 8005c76:	459b      	cmp	fp, r3
 8005c78:	dd13      	ble.n	8005ca2 <__hexnan+0x7a>
 8005c7a:	454c      	cmp	r4, r9
 8005c7c:	d206      	bcs.n	8005c8c <__hexnan+0x64>
 8005c7e:	2d07      	cmp	r5, #7
 8005c80:	dc04      	bgt.n	8005c8c <__hexnan+0x64>
 8005c82:	462a      	mov	r2, r5
 8005c84:	4649      	mov	r1, r9
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7ff ffa8 	bl	8005bdc <L_shift>
 8005c8c:	4544      	cmp	r4, r8
 8005c8e:	d950      	bls.n	8005d32 <__hexnan+0x10a>
 8005c90:	2300      	movs	r3, #0
 8005c92:	f1a4 0904 	sub.w	r9, r4, #4
 8005c96:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	464c      	mov	r4, r9
 8005c9e:	f8cd b008 	str.w	fp, [sp, #8]
 8005ca2:	9a03      	ldr	r2, [sp, #12]
 8005ca4:	e7d7      	b.n	8005c56 <__hexnan+0x2e>
 8005ca6:	2929      	cmp	r1, #41	; 0x29
 8005ca8:	d156      	bne.n	8005d58 <__hexnan+0x130>
 8005caa:	3202      	adds	r2, #2
 8005cac:	f8ca 2000 	str.w	r2, [sl]
 8005cb0:	f1bb 0f00 	cmp.w	fp, #0
 8005cb4:	d050      	beq.n	8005d58 <__hexnan+0x130>
 8005cb6:	454c      	cmp	r4, r9
 8005cb8:	d206      	bcs.n	8005cc8 <__hexnan+0xa0>
 8005cba:	2d07      	cmp	r5, #7
 8005cbc:	dc04      	bgt.n	8005cc8 <__hexnan+0xa0>
 8005cbe:	462a      	mov	r2, r5
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f7ff ff8a 	bl	8005bdc <L_shift>
 8005cc8:	4544      	cmp	r4, r8
 8005cca:	d934      	bls.n	8005d36 <__hexnan+0x10e>
 8005ccc:	4623      	mov	r3, r4
 8005cce:	f1a8 0204 	sub.w	r2, r8, #4
 8005cd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8005cd6:	429f      	cmp	r7, r3
 8005cd8:	f842 1f04 	str.w	r1, [r2, #4]!
 8005cdc:	d2f9      	bcs.n	8005cd2 <__hexnan+0xaa>
 8005cde:	1b3b      	subs	r3, r7, r4
 8005ce0:	f023 0303 	bic.w	r3, r3, #3
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	3401      	adds	r4, #1
 8005ce8:	3e03      	subs	r6, #3
 8005cea:	42b4      	cmp	r4, r6
 8005cec:	bf88      	it	hi
 8005cee:	2304      	movhi	r3, #4
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4443      	add	r3, r8
 8005cf4:	f843 2b04 	str.w	r2, [r3], #4
 8005cf8:	429f      	cmp	r7, r3
 8005cfa:	d2fb      	bcs.n	8005cf4 <__hexnan+0xcc>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	b91b      	cbnz	r3, 8005d08 <__hexnan+0xe0>
 8005d00:	4547      	cmp	r7, r8
 8005d02:	d127      	bne.n	8005d54 <__hexnan+0x12c>
 8005d04:	2301      	movs	r3, #1
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	2005      	movs	r0, #5
 8005d0a:	e026      	b.n	8005d5a <__hexnan+0x132>
 8005d0c:	3501      	adds	r5, #1
 8005d0e:	2d08      	cmp	r5, #8
 8005d10:	f10b 0b01 	add.w	fp, fp, #1
 8005d14:	dd06      	ble.n	8005d24 <__hexnan+0xfc>
 8005d16:	4544      	cmp	r4, r8
 8005d18:	d9c3      	bls.n	8005ca2 <__hexnan+0x7a>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2501      	movs	r5, #1
 8005d1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d22:	3c04      	subs	r4, #4
 8005d24:	6822      	ldr	r2, [r4, #0]
 8005d26:	f000 000f 	and.w	r0, r0, #15
 8005d2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005d2e:	6022      	str	r2, [r4, #0]
 8005d30:	e7b7      	b.n	8005ca2 <__hexnan+0x7a>
 8005d32:	2508      	movs	r5, #8
 8005d34:	e7b5      	b.n	8005ca2 <__hexnan+0x7a>
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0df      	beq.n	8005cfc <__hexnan+0xd4>
 8005d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d40:	f1c3 0320 	rsb	r3, r3, #32
 8005d44:	fa22 f303 	lsr.w	r3, r2, r3
 8005d48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005d4c:	401a      	ands	r2, r3
 8005d4e:	f846 2c04 	str.w	r2, [r6, #-4]
 8005d52:	e7d3      	b.n	8005cfc <__hexnan+0xd4>
 8005d54:	3f04      	subs	r7, #4
 8005d56:	e7d1      	b.n	8005cfc <__hexnan+0xd4>
 8005d58:	2004      	movs	r0, #4
 8005d5a:	b007      	add	sp, #28
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d60 <_localeconv_r>:
 8005d60:	4800      	ldr	r0, [pc, #0]	; (8005d64 <_localeconv_r+0x4>)
 8005d62:	4770      	bx	lr
 8005d64:	2000016c 	.word	0x2000016c

08005d68 <malloc>:
 8005d68:	4b02      	ldr	r3, [pc, #8]	; (8005d74 <malloc+0xc>)
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	f000 bd65 	b.w	800683c <_malloc_r>
 8005d72:	bf00      	nop
 8005d74:	20000014 	.word	0x20000014

08005d78 <__ascii_mbtowc>:
 8005d78:	b082      	sub	sp, #8
 8005d7a:	b901      	cbnz	r1, 8005d7e <__ascii_mbtowc+0x6>
 8005d7c:	a901      	add	r1, sp, #4
 8005d7e:	b142      	cbz	r2, 8005d92 <__ascii_mbtowc+0x1a>
 8005d80:	b14b      	cbz	r3, 8005d96 <__ascii_mbtowc+0x1e>
 8005d82:	7813      	ldrb	r3, [r2, #0]
 8005d84:	600b      	str	r3, [r1, #0]
 8005d86:	7812      	ldrb	r2, [r2, #0]
 8005d88:	1e10      	subs	r0, r2, #0
 8005d8a:	bf18      	it	ne
 8005d8c:	2001      	movne	r0, #1
 8005d8e:	b002      	add	sp, #8
 8005d90:	4770      	bx	lr
 8005d92:	4610      	mov	r0, r2
 8005d94:	e7fb      	b.n	8005d8e <__ascii_mbtowc+0x16>
 8005d96:	f06f 0001 	mvn.w	r0, #1
 8005d9a:	e7f8      	b.n	8005d8e <__ascii_mbtowc+0x16>

08005d9c <memchr>:
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	b2c9      	uxtb	r1, r1
 8005da2:	4402      	add	r2, r0
 8005da4:	4293      	cmp	r3, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	d101      	bne.n	8005dae <memchr+0x12>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e003      	b.n	8005db6 <memchr+0x1a>
 8005dae:	7804      	ldrb	r4, [r0, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	428c      	cmp	r4, r1
 8005db4:	d1f6      	bne.n	8005da4 <memchr+0x8>
 8005db6:	bd10      	pop	{r4, pc}

08005db8 <memcpy>:
 8005db8:	440a      	add	r2, r1
 8005dba:	4291      	cmp	r1, r2
 8005dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dc0:	d100      	bne.n	8005dc4 <memcpy+0xc>
 8005dc2:	4770      	bx	lr
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dca:	4291      	cmp	r1, r2
 8005dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd0:	d1f9      	bne.n	8005dc6 <memcpy+0xe>
 8005dd2:	bd10      	pop	{r4, pc}

08005dd4 <_Balloc>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dd8:	4604      	mov	r4, r0
 8005dda:	460d      	mov	r5, r1
 8005ddc:	b976      	cbnz	r6, 8005dfc <_Balloc+0x28>
 8005dde:	2010      	movs	r0, #16
 8005de0:	f7ff ffc2 	bl	8005d68 <malloc>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6260      	str	r0, [r4, #36]	; 0x24
 8005de8:	b920      	cbnz	r0, 8005df4 <_Balloc+0x20>
 8005dea:	2166      	movs	r1, #102	; 0x66
 8005dec:	4b17      	ldr	r3, [pc, #92]	; (8005e4c <_Balloc+0x78>)
 8005dee:	4818      	ldr	r0, [pc, #96]	; (8005e50 <_Balloc+0x7c>)
 8005df0:	f000 ff2c 	bl	8006c4c <__assert_func>
 8005df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005df8:	6006      	str	r6, [r0, #0]
 8005dfa:	60c6      	str	r6, [r0, #12]
 8005dfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005dfe:	68f3      	ldr	r3, [r6, #12]
 8005e00:	b183      	cbz	r3, 8005e24 <_Balloc+0x50>
 8005e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e0a:	b9b8      	cbnz	r0, 8005e3c <_Balloc+0x68>
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	fa01 f605 	lsl.w	r6, r1, r5
 8005e12:	1d72      	adds	r2, r6, #5
 8005e14:	4620      	mov	r0, r4
 8005e16:	0092      	lsls	r2, r2, #2
 8005e18:	f000 fc94 	bl	8006744 <_calloc_r>
 8005e1c:	b160      	cbz	r0, 8005e38 <_Balloc+0x64>
 8005e1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e22:	e00e      	b.n	8005e42 <_Balloc+0x6e>
 8005e24:	2221      	movs	r2, #33	; 0x21
 8005e26:	2104      	movs	r1, #4
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 fc8b 	bl	8006744 <_calloc_r>
 8005e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e30:	60f0      	str	r0, [r6, #12]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e4      	bne.n	8005e02 <_Balloc+0x2e>
 8005e38:	2000      	movs	r0, #0
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	6802      	ldr	r2, [r0, #0]
 8005e3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e42:	2300      	movs	r3, #0
 8005e44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e48:	e7f7      	b.n	8005e3a <_Balloc+0x66>
 8005e4a:	bf00      	nop
 8005e4c:	080079ce 	.word	0x080079ce
 8005e50:	08007acc 	.word	0x08007acc

08005e54 <_Bfree>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e58:	4605      	mov	r5, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	b976      	cbnz	r6, 8005e7c <_Bfree+0x28>
 8005e5e:	2010      	movs	r0, #16
 8005e60:	f7ff ff82 	bl	8005d68 <malloc>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6268      	str	r0, [r5, #36]	; 0x24
 8005e68:	b920      	cbnz	r0, 8005e74 <_Bfree+0x20>
 8005e6a:	218a      	movs	r1, #138	; 0x8a
 8005e6c:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <_Bfree+0x3c>)
 8005e6e:	4809      	ldr	r0, [pc, #36]	; (8005e94 <_Bfree+0x40>)
 8005e70:	f000 feec 	bl	8006c4c <__assert_func>
 8005e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e78:	6006      	str	r6, [r0, #0]
 8005e7a:	60c6      	str	r6, [r0, #12]
 8005e7c:	b13c      	cbz	r4, 8005e8e <_Bfree+0x3a>
 8005e7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e80:	6862      	ldr	r2, [r4, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e88:	6021      	str	r1, [r4, #0]
 8005e8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	080079ce 	.word	0x080079ce
 8005e94:	08007acc 	.word	0x08007acc

08005e98 <__multadd>:
 8005e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	461e      	mov	r6, r3
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	690d      	ldr	r5, [r1, #16]
 8005ea6:	f101 0c14 	add.w	ip, r1, #20
 8005eaa:	f8dc 3000 	ldr.w	r3, [ip]
 8005eae:	3001      	adds	r0, #1
 8005eb0:	b299      	uxth	r1, r3
 8005eb2:	fb02 6101 	mla	r1, r2, r1, r6
 8005eb6:	0c1e      	lsrs	r6, r3, #16
 8005eb8:	0c0b      	lsrs	r3, r1, #16
 8005eba:	fb02 3306 	mla	r3, r2, r6, r3
 8005ebe:	b289      	uxth	r1, r1
 8005ec0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ec4:	4285      	cmp	r5, r0
 8005ec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005eca:	f84c 1b04 	str.w	r1, [ip], #4
 8005ece:	dcec      	bgt.n	8005eaa <__multadd+0x12>
 8005ed0:	b30e      	cbz	r6, 8005f16 <__multadd+0x7e>
 8005ed2:	68a3      	ldr	r3, [r4, #8]
 8005ed4:	42ab      	cmp	r3, r5
 8005ed6:	dc19      	bgt.n	8005f0c <__multadd+0x74>
 8005ed8:	6861      	ldr	r1, [r4, #4]
 8005eda:	4638      	mov	r0, r7
 8005edc:	3101      	adds	r1, #1
 8005ede:	f7ff ff79 	bl	8005dd4 <_Balloc>
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	b928      	cbnz	r0, 8005ef2 <__multadd+0x5a>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	21b5      	movs	r1, #181	; 0xb5
 8005eea:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <__multadd+0x84>)
 8005eec:	480c      	ldr	r0, [pc, #48]	; (8005f20 <__multadd+0x88>)
 8005eee:	f000 fead 	bl	8006c4c <__assert_func>
 8005ef2:	6922      	ldr	r2, [r4, #16]
 8005ef4:	f104 010c 	add.w	r1, r4, #12
 8005ef8:	3202      	adds	r2, #2
 8005efa:	0092      	lsls	r2, r2, #2
 8005efc:	300c      	adds	r0, #12
 8005efe:	f7ff ff5b 	bl	8005db8 <memcpy>
 8005f02:	4621      	mov	r1, r4
 8005f04:	4638      	mov	r0, r7
 8005f06:	f7ff ffa5 	bl	8005e54 <_Bfree>
 8005f0a:	4644      	mov	r4, r8
 8005f0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f10:	3501      	adds	r5, #1
 8005f12:	615e      	str	r6, [r3, #20]
 8005f14:	6125      	str	r5, [r4, #16]
 8005f16:	4620      	mov	r0, r4
 8005f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f1c:	08007a40 	.word	0x08007a40
 8005f20:	08007acc 	.word	0x08007acc

08005f24 <__s2b>:
 8005f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f28:	4615      	mov	r5, r2
 8005f2a:	2209      	movs	r2, #9
 8005f2c:	461f      	mov	r7, r3
 8005f2e:	3308      	adds	r3, #8
 8005f30:	460c      	mov	r4, r1
 8005f32:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f36:	4606      	mov	r6, r0
 8005f38:	2201      	movs	r2, #1
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	db09      	blt.n	8005f54 <__s2b+0x30>
 8005f40:	4630      	mov	r0, r6
 8005f42:	f7ff ff47 	bl	8005dd4 <_Balloc>
 8005f46:	b940      	cbnz	r0, 8005f5a <__s2b+0x36>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	21ce      	movs	r1, #206	; 0xce
 8005f4c:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <__s2b+0x8c>)
 8005f4e:	4819      	ldr	r0, [pc, #100]	; (8005fb4 <__s2b+0x90>)
 8005f50:	f000 fe7c 	bl	8006c4c <__assert_func>
 8005f54:	0052      	lsls	r2, r2, #1
 8005f56:	3101      	adds	r1, #1
 8005f58:	e7f0      	b.n	8005f3c <__s2b+0x18>
 8005f5a:	9b08      	ldr	r3, [sp, #32]
 8005f5c:	2d09      	cmp	r5, #9
 8005f5e:	6143      	str	r3, [r0, #20]
 8005f60:	f04f 0301 	mov.w	r3, #1
 8005f64:	6103      	str	r3, [r0, #16]
 8005f66:	dd16      	ble.n	8005f96 <__s2b+0x72>
 8005f68:	f104 0909 	add.w	r9, r4, #9
 8005f6c:	46c8      	mov	r8, r9
 8005f6e:	442c      	add	r4, r5
 8005f70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f74:	4601      	mov	r1, r0
 8005f76:	220a      	movs	r2, #10
 8005f78:	4630      	mov	r0, r6
 8005f7a:	3b30      	subs	r3, #48	; 0x30
 8005f7c:	f7ff ff8c 	bl	8005e98 <__multadd>
 8005f80:	45a0      	cmp	r8, r4
 8005f82:	d1f5      	bne.n	8005f70 <__s2b+0x4c>
 8005f84:	f1a5 0408 	sub.w	r4, r5, #8
 8005f88:	444c      	add	r4, r9
 8005f8a:	1b2d      	subs	r5, r5, r4
 8005f8c:	1963      	adds	r3, r4, r5
 8005f8e:	42bb      	cmp	r3, r7
 8005f90:	db04      	blt.n	8005f9c <__s2b+0x78>
 8005f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f96:	2509      	movs	r5, #9
 8005f98:	340a      	adds	r4, #10
 8005f9a:	e7f6      	b.n	8005f8a <__s2b+0x66>
 8005f9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	220a      	movs	r2, #10
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	3b30      	subs	r3, #48	; 0x30
 8005fa8:	f7ff ff76 	bl	8005e98 <__multadd>
 8005fac:	e7ee      	b.n	8005f8c <__s2b+0x68>
 8005fae:	bf00      	nop
 8005fb0:	08007a40 	.word	0x08007a40
 8005fb4:	08007acc 	.word	0x08007acc

08005fb8 <__hi0bits>:
 8005fb8:	0c02      	lsrs	r2, r0, #16
 8005fba:	0412      	lsls	r2, r2, #16
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	b9ca      	cbnz	r2, 8005ff4 <__hi0bits+0x3c>
 8005fc0:	0403      	lsls	r3, r0, #16
 8005fc2:	2010      	movs	r0, #16
 8005fc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005fc8:	bf04      	itt	eq
 8005fca:	021b      	lsleq	r3, r3, #8
 8005fcc:	3008      	addeq	r0, #8
 8005fce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005fd2:	bf04      	itt	eq
 8005fd4:	011b      	lsleq	r3, r3, #4
 8005fd6:	3004      	addeq	r0, #4
 8005fd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005fdc:	bf04      	itt	eq
 8005fde:	009b      	lsleq	r3, r3, #2
 8005fe0:	3002      	addeq	r0, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	db05      	blt.n	8005ff2 <__hi0bits+0x3a>
 8005fe6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005fea:	f100 0001 	add.w	r0, r0, #1
 8005fee:	bf08      	it	eq
 8005ff0:	2020      	moveq	r0, #32
 8005ff2:	4770      	bx	lr
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	e7e5      	b.n	8005fc4 <__hi0bits+0xc>

08005ff8 <__lo0bits>:
 8005ff8:	6803      	ldr	r3, [r0, #0]
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	f013 0007 	ands.w	r0, r3, #7
 8006000:	d00b      	beq.n	800601a <__lo0bits+0x22>
 8006002:	07d9      	lsls	r1, r3, #31
 8006004:	d421      	bmi.n	800604a <__lo0bits+0x52>
 8006006:	0798      	lsls	r0, r3, #30
 8006008:	bf49      	itett	mi
 800600a:	085b      	lsrmi	r3, r3, #1
 800600c:	089b      	lsrpl	r3, r3, #2
 800600e:	2001      	movmi	r0, #1
 8006010:	6013      	strmi	r3, [r2, #0]
 8006012:	bf5c      	itt	pl
 8006014:	2002      	movpl	r0, #2
 8006016:	6013      	strpl	r3, [r2, #0]
 8006018:	4770      	bx	lr
 800601a:	b299      	uxth	r1, r3
 800601c:	b909      	cbnz	r1, 8006022 <__lo0bits+0x2a>
 800601e:	2010      	movs	r0, #16
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	b2d9      	uxtb	r1, r3
 8006024:	b909      	cbnz	r1, 800602a <__lo0bits+0x32>
 8006026:	3008      	adds	r0, #8
 8006028:	0a1b      	lsrs	r3, r3, #8
 800602a:	0719      	lsls	r1, r3, #28
 800602c:	bf04      	itt	eq
 800602e:	091b      	lsreq	r3, r3, #4
 8006030:	3004      	addeq	r0, #4
 8006032:	0799      	lsls	r1, r3, #30
 8006034:	bf04      	itt	eq
 8006036:	089b      	lsreq	r3, r3, #2
 8006038:	3002      	addeq	r0, #2
 800603a:	07d9      	lsls	r1, r3, #31
 800603c:	d403      	bmi.n	8006046 <__lo0bits+0x4e>
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	f100 0001 	add.w	r0, r0, #1
 8006044:	d003      	beq.n	800604e <__lo0bits+0x56>
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	4770      	bx	lr
 800604a:	2000      	movs	r0, #0
 800604c:	4770      	bx	lr
 800604e:	2020      	movs	r0, #32
 8006050:	4770      	bx	lr
	...

08006054 <__i2b>:
 8006054:	b510      	push	{r4, lr}
 8006056:	460c      	mov	r4, r1
 8006058:	2101      	movs	r1, #1
 800605a:	f7ff febb 	bl	8005dd4 <_Balloc>
 800605e:	4602      	mov	r2, r0
 8006060:	b928      	cbnz	r0, 800606e <__i2b+0x1a>
 8006062:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006066:	4b04      	ldr	r3, [pc, #16]	; (8006078 <__i2b+0x24>)
 8006068:	4804      	ldr	r0, [pc, #16]	; (800607c <__i2b+0x28>)
 800606a:	f000 fdef 	bl	8006c4c <__assert_func>
 800606e:	2301      	movs	r3, #1
 8006070:	6144      	str	r4, [r0, #20]
 8006072:	6103      	str	r3, [r0, #16]
 8006074:	bd10      	pop	{r4, pc}
 8006076:	bf00      	nop
 8006078:	08007a40 	.word	0x08007a40
 800607c:	08007acc 	.word	0x08007acc

08006080 <__multiply>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	4691      	mov	r9, r2
 8006086:	690a      	ldr	r2, [r1, #16]
 8006088:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800608c:	460c      	mov	r4, r1
 800608e:	429a      	cmp	r2, r3
 8006090:	bfbe      	ittt	lt
 8006092:	460b      	movlt	r3, r1
 8006094:	464c      	movlt	r4, r9
 8006096:	4699      	movlt	r9, r3
 8006098:	6927      	ldr	r7, [r4, #16]
 800609a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	6861      	ldr	r1, [r4, #4]
 80060a2:	eb07 060a 	add.w	r6, r7, sl
 80060a6:	42b3      	cmp	r3, r6
 80060a8:	b085      	sub	sp, #20
 80060aa:	bfb8      	it	lt
 80060ac:	3101      	addlt	r1, #1
 80060ae:	f7ff fe91 	bl	8005dd4 <_Balloc>
 80060b2:	b930      	cbnz	r0, 80060c2 <__multiply+0x42>
 80060b4:	4602      	mov	r2, r0
 80060b6:	f240 115d 	movw	r1, #349	; 0x15d
 80060ba:	4b43      	ldr	r3, [pc, #268]	; (80061c8 <__multiply+0x148>)
 80060bc:	4843      	ldr	r0, [pc, #268]	; (80061cc <__multiply+0x14c>)
 80060be:	f000 fdc5 	bl	8006c4c <__assert_func>
 80060c2:	f100 0514 	add.w	r5, r0, #20
 80060c6:	462b      	mov	r3, r5
 80060c8:	2200      	movs	r2, #0
 80060ca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060ce:	4543      	cmp	r3, r8
 80060d0:	d321      	bcc.n	8006116 <__multiply+0x96>
 80060d2:	f104 0314 	add.w	r3, r4, #20
 80060d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060da:	f109 0314 	add.w	r3, r9, #20
 80060de:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80060e2:	9202      	str	r2, [sp, #8]
 80060e4:	1b3a      	subs	r2, r7, r4
 80060e6:	3a15      	subs	r2, #21
 80060e8:	f022 0203 	bic.w	r2, r2, #3
 80060ec:	3204      	adds	r2, #4
 80060ee:	f104 0115 	add.w	r1, r4, #21
 80060f2:	428f      	cmp	r7, r1
 80060f4:	bf38      	it	cc
 80060f6:	2204      	movcc	r2, #4
 80060f8:	9201      	str	r2, [sp, #4]
 80060fa:	9a02      	ldr	r2, [sp, #8]
 80060fc:	9303      	str	r3, [sp, #12]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d80c      	bhi.n	800611c <__multiply+0x9c>
 8006102:	2e00      	cmp	r6, #0
 8006104:	dd03      	ble.n	800610e <__multiply+0x8e>
 8006106:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800610a:	2b00      	cmp	r3, #0
 800610c:	d059      	beq.n	80061c2 <__multiply+0x142>
 800610e:	6106      	str	r6, [r0, #16]
 8006110:	b005      	add	sp, #20
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	f843 2b04 	str.w	r2, [r3], #4
 800611a:	e7d8      	b.n	80060ce <__multiply+0x4e>
 800611c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006120:	f1ba 0f00 	cmp.w	sl, #0
 8006124:	d023      	beq.n	800616e <__multiply+0xee>
 8006126:	46a9      	mov	r9, r5
 8006128:	f04f 0c00 	mov.w	ip, #0
 800612c:	f104 0e14 	add.w	lr, r4, #20
 8006130:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006134:	f8d9 1000 	ldr.w	r1, [r9]
 8006138:	fa1f fb82 	uxth.w	fp, r2
 800613c:	b289      	uxth	r1, r1
 800613e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006142:	4461      	add	r1, ip
 8006144:	f8d9 c000 	ldr.w	ip, [r9]
 8006148:	0c12      	lsrs	r2, r2, #16
 800614a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800614e:	fb0a c202 	mla	r2, sl, r2, ip
 8006152:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006156:	b289      	uxth	r1, r1
 8006158:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800615c:	4577      	cmp	r7, lr
 800615e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006162:	f849 1b04 	str.w	r1, [r9], #4
 8006166:	d8e3      	bhi.n	8006130 <__multiply+0xb0>
 8006168:	9a01      	ldr	r2, [sp, #4]
 800616a:	f845 c002 	str.w	ip, [r5, r2]
 800616e:	9a03      	ldr	r2, [sp, #12]
 8006170:	3304      	adds	r3, #4
 8006172:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006176:	f1b9 0f00 	cmp.w	r9, #0
 800617a:	d020      	beq.n	80061be <__multiply+0x13e>
 800617c:	46ae      	mov	lr, r5
 800617e:	f04f 0a00 	mov.w	sl, #0
 8006182:	6829      	ldr	r1, [r5, #0]
 8006184:	f104 0c14 	add.w	ip, r4, #20
 8006188:	f8bc b000 	ldrh.w	fp, [ip]
 800618c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006190:	b289      	uxth	r1, r1
 8006192:	fb09 220b 	mla	r2, r9, fp, r2
 8006196:	4492      	add	sl, r2
 8006198:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800619c:	f84e 1b04 	str.w	r1, [lr], #4
 80061a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061a4:	f8be 1000 	ldrh.w	r1, [lr]
 80061a8:	0c12      	lsrs	r2, r2, #16
 80061aa:	fb09 1102 	mla	r1, r9, r2, r1
 80061ae:	4567      	cmp	r7, ip
 80061b0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80061b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061b8:	d8e6      	bhi.n	8006188 <__multiply+0x108>
 80061ba:	9a01      	ldr	r2, [sp, #4]
 80061bc:	50a9      	str	r1, [r5, r2]
 80061be:	3504      	adds	r5, #4
 80061c0:	e79b      	b.n	80060fa <__multiply+0x7a>
 80061c2:	3e01      	subs	r6, #1
 80061c4:	e79d      	b.n	8006102 <__multiply+0x82>
 80061c6:	bf00      	nop
 80061c8:	08007a40 	.word	0x08007a40
 80061cc:	08007acc 	.word	0x08007acc

080061d0 <__pow5mult>:
 80061d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	4615      	mov	r5, r2
 80061d6:	f012 0203 	ands.w	r2, r2, #3
 80061da:	4606      	mov	r6, r0
 80061dc:	460f      	mov	r7, r1
 80061de:	d007      	beq.n	80061f0 <__pow5mult+0x20>
 80061e0:	4c25      	ldr	r4, [pc, #148]	; (8006278 <__pow5mult+0xa8>)
 80061e2:	3a01      	subs	r2, #1
 80061e4:	2300      	movs	r3, #0
 80061e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061ea:	f7ff fe55 	bl	8005e98 <__multadd>
 80061ee:	4607      	mov	r7, r0
 80061f0:	10ad      	asrs	r5, r5, #2
 80061f2:	d03d      	beq.n	8006270 <__pow5mult+0xa0>
 80061f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80061f6:	b97c      	cbnz	r4, 8006218 <__pow5mult+0x48>
 80061f8:	2010      	movs	r0, #16
 80061fa:	f7ff fdb5 	bl	8005d68 <malloc>
 80061fe:	4602      	mov	r2, r0
 8006200:	6270      	str	r0, [r6, #36]	; 0x24
 8006202:	b928      	cbnz	r0, 8006210 <__pow5mult+0x40>
 8006204:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006208:	4b1c      	ldr	r3, [pc, #112]	; (800627c <__pow5mult+0xac>)
 800620a:	481d      	ldr	r0, [pc, #116]	; (8006280 <__pow5mult+0xb0>)
 800620c:	f000 fd1e 	bl	8006c4c <__assert_func>
 8006210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006214:	6004      	str	r4, [r0, #0]
 8006216:	60c4      	str	r4, [r0, #12]
 8006218:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800621c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006220:	b94c      	cbnz	r4, 8006236 <__pow5mult+0x66>
 8006222:	f240 2171 	movw	r1, #625	; 0x271
 8006226:	4630      	mov	r0, r6
 8006228:	f7ff ff14 	bl	8006054 <__i2b>
 800622c:	2300      	movs	r3, #0
 800622e:	4604      	mov	r4, r0
 8006230:	f8c8 0008 	str.w	r0, [r8, #8]
 8006234:	6003      	str	r3, [r0, #0]
 8006236:	f04f 0900 	mov.w	r9, #0
 800623a:	07eb      	lsls	r3, r5, #31
 800623c:	d50a      	bpl.n	8006254 <__pow5mult+0x84>
 800623e:	4639      	mov	r1, r7
 8006240:	4622      	mov	r2, r4
 8006242:	4630      	mov	r0, r6
 8006244:	f7ff ff1c 	bl	8006080 <__multiply>
 8006248:	4680      	mov	r8, r0
 800624a:	4639      	mov	r1, r7
 800624c:	4630      	mov	r0, r6
 800624e:	f7ff fe01 	bl	8005e54 <_Bfree>
 8006252:	4647      	mov	r7, r8
 8006254:	106d      	asrs	r5, r5, #1
 8006256:	d00b      	beq.n	8006270 <__pow5mult+0xa0>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	b938      	cbnz	r0, 800626c <__pow5mult+0x9c>
 800625c:	4622      	mov	r2, r4
 800625e:	4621      	mov	r1, r4
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff ff0d 	bl	8006080 <__multiply>
 8006266:	6020      	str	r0, [r4, #0]
 8006268:	f8c0 9000 	str.w	r9, [r0]
 800626c:	4604      	mov	r4, r0
 800626e:	e7e4      	b.n	800623a <__pow5mult+0x6a>
 8006270:	4638      	mov	r0, r7
 8006272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006276:	bf00      	nop
 8006278:	08007c18 	.word	0x08007c18
 800627c:	080079ce 	.word	0x080079ce
 8006280:	08007acc 	.word	0x08007acc

08006284 <__lshift>:
 8006284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	460c      	mov	r4, r1
 800628a:	4607      	mov	r7, r0
 800628c:	4691      	mov	r9, r2
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	6849      	ldr	r1, [r1, #4]
 8006292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800629c:	f108 0601 	add.w	r6, r8, #1
 80062a0:	42b3      	cmp	r3, r6
 80062a2:	db0b      	blt.n	80062bc <__lshift+0x38>
 80062a4:	4638      	mov	r0, r7
 80062a6:	f7ff fd95 	bl	8005dd4 <_Balloc>
 80062aa:	4605      	mov	r5, r0
 80062ac:	b948      	cbnz	r0, 80062c2 <__lshift+0x3e>
 80062ae:	4602      	mov	r2, r0
 80062b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062b4:	4b29      	ldr	r3, [pc, #164]	; (800635c <__lshift+0xd8>)
 80062b6:	482a      	ldr	r0, [pc, #168]	; (8006360 <__lshift+0xdc>)
 80062b8:	f000 fcc8 	bl	8006c4c <__assert_func>
 80062bc:	3101      	adds	r1, #1
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	e7ee      	b.n	80062a0 <__lshift+0x1c>
 80062c2:	2300      	movs	r3, #0
 80062c4:	f100 0114 	add.w	r1, r0, #20
 80062c8:	f100 0210 	add.w	r2, r0, #16
 80062cc:	4618      	mov	r0, r3
 80062ce:	4553      	cmp	r3, sl
 80062d0:	db37      	blt.n	8006342 <__lshift+0xbe>
 80062d2:	6920      	ldr	r0, [r4, #16]
 80062d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062d8:	f104 0314 	add.w	r3, r4, #20
 80062dc:	f019 091f 	ands.w	r9, r9, #31
 80062e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062e8:	d02f      	beq.n	800634a <__lshift+0xc6>
 80062ea:	468a      	mov	sl, r1
 80062ec:	f04f 0c00 	mov.w	ip, #0
 80062f0:	f1c9 0e20 	rsb	lr, r9, #32
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	fa02 f209 	lsl.w	r2, r2, r9
 80062fa:	ea42 020c 	orr.w	r2, r2, ip
 80062fe:	f84a 2b04 	str.w	r2, [sl], #4
 8006302:	f853 2b04 	ldr.w	r2, [r3], #4
 8006306:	4298      	cmp	r0, r3
 8006308:	fa22 fc0e 	lsr.w	ip, r2, lr
 800630c:	d8f2      	bhi.n	80062f4 <__lshift+0x70>
 800630e:	1b03      	subs	r3, r0, r4
 8006310:	3b15      	subs	r3, #21
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	3304      	adds	r3, #4
 8006318:	f104 0215 	add.w	r2, r4, #21
 800631c:	4290      	cmp	r0, r2
 800631e:	bf38      	it	cc
 8006320:	2304      	movcc	r3, #4
 8006322:	f841 c003 	str.w	ip, [r1, r3]
 8006326:	f1bc 0f00 	cmp.w	ip, #0
 800632a:	d001      	beq.n	8006330 <__lshift+0xac>
 800632c:	f108 0602 	add.w	r6, r8, #2
 8006330:	3e01      	subs	r6, #1
 8006332:	4638      	mov	r0, r7
 8006334:	4621      	mov	r1, r4
 8006336:	612e      	str	r6, [r5, #16]
 8006338:	f7ff fd8c 	bl	8005e54 <_Bfree>
 800633c:	4628      	mov	r0, r5
 800633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006342:	f842 0f04 	str.w	r0, [r2, #4]!
 8006346:	3301      	adds	r3, #1
 8006348:	e7c1      	b.n	80062ce <__lshift+0x4a>
 800634a:	3904      	subs	r1, #4
 800634c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006350:	4298      	cmp	r0, r3
 8006352:	f841 2f04 	str.w	r2, [r1, #4]!
 8006356:	d8f9      	bhi.n	800634c <__lshift+0xc8>
 8006358:	e7ea      	b.n	8006330 <__lshift+0xac>
 800635a:	bf00      	nop
 800635c:	08007a40 	.word	0x08007a40
 8006360:	08007acc 	.word	0x08007acc

08006364 <__mcmp>:
 8006364:	4603      	mov	r3, r0
 8006366:	690a      	ldr	r2, [r1, #16]
 8006368:	6900      	ldr	r0, [r0, #16]
 800636a:	b530      	push	{r4, r5, lr}
 800636c:	1a80      	subs	r0, r0, r2
 800636e:	d10d      	bne.n	800638c <__mcmp+0x28>
 8006370:	3314      	adds	r3, #20
 8006372:	3114      	adds	r1, #20
 8006374:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006378:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800637c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006380:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006384:	4295      	cmp	r5, r2
 8006386:	d002      	beq.n	800638e <__mcmp+0x2a>
 8006388:	d304      	bcc.n	8006394 <__mcmp+0x30>
 800638a:	2001      	movs	r0, #1
 800638c:	bd30      	pop	{r4, r5, pc}
 800638e:	42a3      	cmp	r3, r4
 8006390:	d3f4      	bcc.n	800637c <__mcmp+0x18>
 8006392:	e7fb      	b.n	800638c <__mcmp+0x28>
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	e7f8      	b.n	800638c <__mcmp+0x28>
	...

0800639c <__mdiff>:
 800639c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a0:	460d      	mov	r5, r1
 80063a2:	4607      	mov	r7, r0
 80063a4:	4611      	mov	r1, r2
 80063a6:	4628      	mov	r0, r5
 80063a8:	4614      	mov	r4, r2
 80063aa:	f7ff ffdb 	bl	8006364 <__mcmp>
 80063ae:	1e06      	subs	r6, r0, #0
 80063b0:	d111      	bne.n	80063d6 <__mdiff+0x3a>
 80063b2:	4631      	mov	r1, r6
 80063b4:	4638      	mov	r0, r7
 80063b6:	f7ff fd0d 	bl	8005dd4 <_Balloc>
 80063ba:	4602      	mov	r2, r0
 80063bc:	b928      	cbnz	r0, 80063ca <__mdiff+0x2e>
 80063be:	f240 2132 	movw	r1, #562	; 0x232
 80063c2:	4b3a      	ldr	r3, [pc, #232]	; (80064ac <__mdiff+0x110>)
 80063c4:	483a      	ldr	r0, [pc, #232]	; (80064b0 <__mdiff+0x114>)
 80063c6:	f000 fc41 	bl	8006c4c <__assert_func>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80063d0:	4610      	mov	r0, r2
 80063d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	bfa4      	itt	ge
 80063d8:	4623      	movge	r3, r4
 80063da:	462c      	movge	r4, r5
 80063dc:	4638      	mov	r0, r7
 80063de:	6861      	ldr	r1, [r4, #4]
 80063e0:	bfa6      	itte	ge
 80063e2:	461d      	movge	r5, r3
 80063e4:	2600      	movge	r6, #0
 80063e6:	2601      	movlt	r6, #1
 80063e8:	f7ff fcf4 	bl	8005dd4 <_Balloc>
 80063ec:	4602      	mov	r2, r0
 80063ee:	b918      	cbnz	r0, 80063f8 <__mdiff+0x5c>
 80063f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80063f4:	4b2d      	ldr	r3, [pc, #180]	; (80064ac <__mdiff+0x110>)
 80063f6:	e7e5      	b.n	80063c4 <__mdiff+0x28>
 80063f8:	f102 0814 	add.w	r8, r2, #20
 80063fc:	46c2      	mov	sl, r8
 80063fe:	f04f 0c00 	mov.w	ip, #0
 8006402:	6927      	ldr	r7, [r4, #16]
 8006404:	60c6      	str	r6, [r0, #12]
 8006406:	692e      	ldr	r6, [r5, #16]
 8006408:	f104 0014 	add.w	r0, r4, #20
 800640c:	f105 0914 	add.w	r9, r5, #20
 8006410:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006414:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006418:	3410      	adds	r4, #16
 800641a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800641e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006422:	fa1f f18b 	uxth.w	r1, fp
 8006426:	448c      	add	ip, r1
 8006428:	b299      	uxth	r1, r3
 800642a:	0c1b      	lsrs	r3, r3, #16
 800642c:	ebac 0101 	sub.w	r1, ip, r1
 8006430:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006434:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006438:	b289      	uxth	r1, r1
 800643a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800643e:	454e      	cmp	r6, r9
 8006440:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006444:	f84a 3b04 	str.w	r3, [sl], #4
 8006448:	d8e7      	bhi.n	800641a <__mdiff+0x7e>
 800644a:	1b73      	subs	r3, r6, r5
 800644c:	3b15      	subs	r3, #21
 800644e:	f023 0303 	bic.w	r3, r3, #3
 8006452:	3515      	adds	r5, #21
 8006454:	3304      	adds	r3, #4
 8006456:	42ae      	cmp	r6, r5
 8006458:	bf38      	it	cc
 800645a:	2304      	movcc	r3, #4
 800645c:	4418      	add	r0, r3
 800645e:	4443      	add	r3, r8
 8006460:	461e      	mov	r6, r3
 8006462:	4605      	mov	r5, r0
 8006464:	4575      	cmp	r5, lr
 8006466:	d30e      	bcc.n	8006486 <__mdiff+0xea>
 8006468:	f10e 0103 	add.w	r1, lr, #3
 800646c:	1a09      	subs	r1, r1, r0
 800646e:	f021 0103 	bic.w	r1, r1, #3
 8006472:	3803      	subs	r0, #3
 8006474:	4586      	cmp	lr, r0
 8006476:	bf38      	it	cc
 8006478:	2100      	movcc	r1, #0
 800647a:	4419      	add	r1, r3
 800647c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006480:	b18b      	cbz	r3, 80064a6 <__mdiff+0x10a>
 8006482:	6117      	str	r7, [r2, #16]
 8006484:	e7a4      	b.n	80063d0 <__mdiff+0x34>
 8006486:	f855 8b04 	ldr.w	r8, [r5], #4
 800648a:	fa1f f188 	uxth.w	r1, r8
 800648e:	4461      	add	r1, ip
 8006490:	140c      	asrs	r4, r1, #16
 8006492:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006496:	b289      	uxth	r1, r1
 8006498:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800649c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80064a0:	f846 1b04 	str.w	r1, [r6], #4
 80064a4:	e7de      	b.n	8006464 <__mdiff+0xc8>
 80064a6:	3f01      	subs	r7, #1
 80064a8:	e7e8      	b.n	800647c <__mdiff+0xe0>
 80064aa:	bf00      	nop
 80064ac:	08007a40 	.word	0x08007a40
 80064b0:	08007acc 	.word	0x08007acc

080064b4 <__ulp>:
 80064b4:	4b11      	ldr	r3, [pc, #68]	; (80064fc <__ulp+0x48>)
 80064b6:	400b      	ands	r3, r1
 80064b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dd02      	ble.n	80064c6 <__ulp+0x12>
 80064c0:	2000      	movs	r0, #0
 80064c2:	4619      	mov	r1, r3
 80064c4:	4770      	bx	lr
 80064c6:	425b      	negs	r3, r3
 80064c8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80064cc:	f04f 0000 	mov.w	r0, #0
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80064d8:	da04      	bge.n	80064e4 <__ulp+0x30>
 80064da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80064de:	fa43 f102 	asr.w	r1, r3, r2
 80064e2:	4770      	bx	lr
 80064e4:	f1a2 0314 	sub.w	r3, r2, #20
 80064e8:	2b1e      	cmp	r3, #30
 80064ea:	bfd6      	itet	le
 80064ec:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80064f0:	2301      	movgt	r3, #1
 80064f2:	fa22 f303 	lsrle.w	r3, r2, r3
 80064f6:	4618      	mov	r0, r3
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	7ff00000 	.word	0x7ff00000

08006500 <__b2d>:
 8006500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006504:	6907      	ldr	r7, [r0, #16]
 8006506:	f100 0914 	add.w	r9, r0, #20
 800650a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800650e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006512:	f1a7 0804 	sub.w	r8, r7, #4
 8006516:	4630      	mov	r0, r6
 8006518:	f7ff fd4e 	bl	8005fb8 <__hi0bits>
 800651c:	f1c0 0320 	rsb	r3, r0, #32
 8006520:	280a      	cmp	r0, #10
 8006522:	600b      	str	r3, [r1, #0]
 8006524:	491f      	ldr	r1, [pc, #124]	; (80065a4 <__b2d+0xa4>)
 8006526:	dc17      	bgt.n	8006558 <__b2d+0x58>
 8006528:	45c1      	cmp	r9, r8
 800652a:	bf28      	it	cs
 800652c:	2200      	movcs	r2, #0
 800652e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006532:	fa26 f30c 	lsr.w	r3, r6, ip
 8006536:	bf38      	it	cc
 8006538:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800653c:	ea43 0501 	orr.w	r5, r3, r1
 8006540:	f100 0315 	add.w	r3, r0, #21
 8006544:	fa06 f303 	lsl.w	r3, r6, r3
 8006548:	fa22 f20c 	lsr.w	r2, r2, ip
 800654c:	ea43 0402 	orr.w	r4, r3, r2
 8006550:	4620      	mov	r0, r4
 8006552:	4629      	mov	r1, r5
 8006554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006558:	45c1      	cmp	r9, r8
 800655a:	bf2e      	itee	cs
 800655c:	2200      	movcs	r2, #0
 800655e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006562:	f1a7 0808 	subcc.w	r8, r7, #8
 8006566:	f1b0 030b 	subs.w	r3, r0, #11
 800656a:	d016      	beq.n	800659a <__b2d+0x9a>
 800656c:	f1c3 0720 	rsb	r7, r3, #32
 8006570:	fa22 f107 	lsr.w	r1, r2, r7
 8006574:	45c8      	cmp	r8, r9
 8006576:	fa06 f603 	lsl.w	r6, r6, r3
 800657a:	ea46 0601 	orr.w	r6, r6, r1
 800657e:	bf94      	ite	ls
 8006580:	2100      	movls	r1, #0
 8006582:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006586:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800658a:	fa02 f003 	lsl.w	r0, r2, r3
 800658e:	40f9      	lsrs	r1, r7
 8006590:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006594:	ea40 0401 	orr.w	r4, r0, r1
 8006598:	e7da      	b.n	8006550 <__b2d+0x50>
 800659a:	4614      	mov	r4, r2
 800659c:	ea46 0501 	orr.w	r5, r6, r1
 80065a0:	e7d6      	b.n	8006550 <__b2d+0x50>
 80065a2:	bf00      	nop
 80065a4:	3ff00000 	.word	0x3ff00000

080065a8 <__d2b>:
 80065a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80065ac:	2101      	movs	r1, #1
 80065ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80065b2:	4690      	mov	r8, r2
 80065b4:	461d      	mov	r5, r3
 80065b6:	f7ff fc0d 	bl	8005dd4 <_Balloc>
 80065ba:	4604      	mov	r4, r0
 80065bc:	b930      	cbnz	r0, 80065cc <__d2b+0x24>
 80065be:	4602      	mov	r2, r0
 80065c0:	f240 310a 	movw	r1, #778	; 0x30a
 80065c4:	4b24      	ldr	r3, [pc, #144]	; (8006658 <__d2b+0xb0>)
 80065c6:	4825      	ldr	r0, [pc, #148]	; (800665c <__d2b+0xb4>)
 80065c8:	f000 fb40 	bl	8006c4c <__assert_func>
 80065cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80065d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80065d4:	bb2d      	cbnz	r5, 8006622 <__d2b+0x7a>
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	f1b8 0300 	subs.w	r3, r8, #0
 80065dc:	d026      	beq.n	800662c <__d2b+0x84>
 80065de:	4668      	mov	r0, sp
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	f7ff fd09 	bl	8005ff8 <__lo0bits>
 80065e6:	9900      	ldr	r1, [sp, #0]
 80065e8:	b1f0      	cbz	r0, 8006628 <__d2b+0x80>
 80065ea:	9a01      	ldr	r2, [sp, #4]
 80065ec:	f1c0 0320 	rsb	r3, r0, #32
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	430b      	orrs	r3, r1
 80065f6:	40c2      	lsrs	r2, r0
 80065f8:	6163      	str	r3, [r4, #20]
 80065fa:	9201      	str	r2, [sp, #4]
 80065fc:	9b01      	ldr	r3, [sp, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bf14      	ite	ne
 8006602:	2102      	movne	r1, #2
 8006604:	2101      	moveq	r1, #1
 8006606:	61a3      	str	r3, [r4, #24]
 8006608:	6121      	str	r1, [r4, #16]
 800660a:	b1c5      	cbz	r5, 800663e <__d2b+0x96>
 800660c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006610:	4405      	add	r5, r0
 8006612:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006616:	603d      	str	r5, [r7, #0]
 8006618:	6030      	str	r0, [r6, #0]
 800661a:	4620      	mov	r0, r4
 800661c:	b002      	add	sp, #8
 800661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006626:	e7d6      	b.n	80065d6 <__d2b+0x2e>
 8006628:	6161      	str	r1, [r4, #20]
 800662a:	e7e7      	b.n	80065fc <__d2b+0x54>
 800662c:	a801      	add	r0, sp, #4
 800662e:	f7ff fce3 	bl	8005ff8 <__lo0bits>
 8006632:	2101      	movs	r1, #1
 8006634:	9b01      	ldr	r3, [sp, #4]
 8006636:	6121      	str	r1, [r4, #16]
 8006638:	6163      	str	r3, [r4, #20]
 800663a:	3020      	adds	r0, #32
 800663c:	e7e5      	b.n	800660a <__d2b+0x62>
 800663e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006642:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006646:	6038      	str	r0, [r7, #0]
 8006648:	6918      	ldr	r0, [r3, #16]
 800664a:	f7ff fcb5 	bl	8005fb8 <__hi0bits>
 800664e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006652:	6031      	str	r1, [r6, #0]
 8006654:	e7e1      	b.n	800661a <__d2b+0x72>
 8006656:	bf00      	nop
 8006658:	08007a40 	.word	0x08007a40
 800665c:	08007acc 	.word	0x08007acc

08006660 <__ratio>:
 8006660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	4688      	mov	r8, r1
 8006666:	4669      	mov	r1, sp
 8006668:	4681      	mov	r9, r0
 800666a:	f7ff ff49 	bl	8006500 <__b2d>
 800666e:	460f      	mov	r7, r1
 8006670:	4604      	mov	r4, r0
 8006672:	460d      	mov	r5, r1
 8006674:	4640      	mov	r0, r8
 8006676:	a901      	add	r1, sp, #4
 8006678:	f7ff ff42 	bl	8006500 <__b2d>
 800667c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006680:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006684:	468b      	mov	fp, r1
 8006686:	eba3 0c02 	sub.w	ip, r3, r2
 800668a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800668e:	1a9b      	subs	r3, r3, r2
 8006690:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006694:	2b00      	cmp	r3, #0
 8006696:	bfd5      	itete	le
 8006698:	460a      	movle	r2, r1
 800669a:	462a      	movgt	r2, r5
 800669c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80066a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80066a4:	bfd8      	it	le
 80066a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80066aa:	465b      	mov	r3, fp
 80066ac:	4602      	mov	r2, r0
 80066ae:	4639      	mov	r1, r7
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7fa f83b 	bl	800072c <__aeabi_ddiv>
 80066b6:	b003      	add	sp, #12
 80066b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066bc <__copybits>:
 80066bc:	3901      	subs	r1, #1
 80066be:	b570      	push	{r4, r5, r6, lr}
 80066c0:	1149      	asrs	r1, r1, #5
 80066c2:	6914      	ldr	r4, [r2, #16]
 80066c4:	3101      	adds	r1, #1
 80066c6:	f102 0314 	add.w	r3, r2, #20
 80066ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066d2:	1f05      	subs	r5, r0, #4
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	d30c      	bcc.n	80066f2 <__copybits+0x36>
 80066d8:	1aa3      	subs	r3, r4, r2
 80066da:	3b11      	subs	r3, #17
 80066dc:	f023 0303 	bic.w	r3, r3, #3
 80066e0:	3211      	adds	r2, #17
 80066e2:	42a2      	cmp	r2, r4
 80066e4:	bf88      	it	hi
 80066e6:	2300      	movhi	r3, #0
 80066e8:	4418      	add	r0, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	4288      	cmp	r0, r1
 80066ee:	d305      	bcc.n	80066fc <__copybits+0x40>
 80066f0:	bd70      	pop	{r4, r5, r6, pc}
 80066f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80066f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80066fa:	e7eb      	b.n	80066d4 <__copybits+0x18>
 80066fc:	f840 3b04 	str.w	r3, [r0], #4
 8006700:	e7f4      	b.n	80066ec <__copybits+0x30>

08006702 <__any_on>:
 8006702:	f100 0214 	add.w	r2, r0, #20
 8006706:	6900      	ldr	r0, [r0, #16]
 8006708:	114b      	asrs	r3, r1, #5
 800670a:	4298      	cmp	r0, r3
 800670c:	b510      	push	{r4, lr}
 800670e:	db11      	blt.n	8006734 <__any_on+0x32>
 8006710:	dd0a      	ble.n	8006728 <__any_on+0x26>
 8006712:	f011 011f 	ands.w	r1, r1, #31
 8006716:	d007      	beq.n	8006728 <__any_on+0x26>
 8006718:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800671c:	fa24 f001 	lsr.w	r0, r4, r1
 8006720:	fa00 f101 	lsl.w	r1, r0, r1
 8006724:	428c      	cmp	r4, r1
 8006726:	d10b      	bne.n	8006740 <__any_on+0x3e>
 8006728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800672c:	4293      	cmp	r3, r2
 800672e:	d803      	bhi.n	8006738 <__any_on+0x36>
 8006730:	2000      	movs	r0, #0
 8006732:	bd10      	pop	{r4, pc}
 8006734:	4603      	mov	r3, r0
 8006736:	e7f7      	b.n	8006728 <__any_on+0x26>
 8006738:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800673c:	2900      	cmp	r1, #0
 800673e:	d0f5      	beq.n	800672c <__any_on+0x2a>
 8006740:	2001      	movs	r0, #1
 8006742:	e7f6      	b.n	8006732 <__any_on+0x30>

08006744 <_calloc_r>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	fba1 5402 	umull	r5, r4, r1, r2
 800674a:	b934      	cbnz	r4, 800675a <_calloc_r+0x16>
 800674c:	4629      	mov	r1, r5
 800674e:	f000 f875 	bl	800683c <_malloc_r>
 8006752:	4606      	mov	r6, r0
 8006754:	b928      	cbnz	r0, 8006762 <_calloc_r+0x1e>
 8006756:	4630      	mov	r0, r6
 8006758:	bd70      	pop	{r4, r5, r6, pc}
 800675a:	220c      	movs	r2, #12
 800675c:	2600      	movs	r6, #0
 800675e:	6002      	str	r2, [r0, #0]
 8006760:	e7f9      	b.n	8006756 <_calloc_r+0x12>
 8006762:	462a      	mov	r2, r5
 8006764:	4621      	mov	r1, r4
 8006766:	f7fc fbf3 	bl	8002f50 <memset>
 800676a:	e7f4      	b.n	8006756 <_calloc_r+0x12>

0800676c <_free_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	4605      	mov	r5, r0
 8006770:	2900      	cmp	r1, #0
 8006772:	d040      	beq.n	80067f6 <_free_r+0x8a>
 8006774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006778:	1f0c      	subs	r4, r1, #4
 800677a:	2b00      	cmp	r3, #0
 800677c:	bfb8      	it	lt
 800677e:	18e4      	addlt	r4, r4, r3
 8006780:	f000 faae 	bl	8006ce0 <__malloc_lock>
 8006784:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <_free_r+0x8c>)
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	b933      	cbnz	r3, 8006798 <_free_r+0x2c>
 800678a:	6063      	str	r3, [r4, #4]
 800678c:	6014      	str	r4, [r2, #0]
 800678e:	4628      	mov	r0, r5
 8006790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006794:	f000 baaa 	b.w	8006cec <__malloc_unlock>
 8006798:	42a3      	cmp	r3, r4
 800679a:	d908      	bls.n	80067ae <_free_r+0x42>
 800679c:	6820      	ldr	r0, [r4, #0]
 800679e:	1821      	adds	r1, r4, r0
 80067a0:	428b      	cmp	r3, r1
 80067a2:	bf01      	itttt	eq
 80067a4:	6819      	ldreq	r1, [r3, #0]
 80067a6:	685b      	ldreq	r3, [r3, #4]
 80067a8:	1809      	addeq	r1, r1, r0
 80067aa:	6021      	streq	r1, [r4, #0]
 80067ac:	e7ed      	b.n	800678a <_free_r+0x1e>
 80067ae:	461a      	mov	r2, r3
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	b10b      	cbz	r3, 80067b8 <_free_r+0x4c>
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	d9fa      	bls.n	80067ae <_free_r+0x42>
 80067b8:	6811      	ldr	r1, [r2, #0]
 80067ba:	1850      	adds	r0, r2, r1
 80067bc:	42a0      	cmp	r0, r4
 80067be:	d10b      	bne.n	80067d8 <_free_r+0x6c>
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	4401      	add	r1, r0
 80067c4:	1850      	adds	r0, r2, r1
 80067c6:	4283      	cmp	r3, r0
 80067c8:	6011      	str	r1, [r2, #0]
 80067ca:	d1e0      	bne.n	800678e <_free_r+0x22>
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	4401      	add	r1, r0
 80067d2:	6011      	str	r1, [r2, #0]
 80067d4:	6053      	str	r3, [r2, #4]
 80067d6:	e7da      	b.n	800678e <_free_r+0x22>
 80067d8:	d902      	bls.n	80067e0 <_free_r+0x74>
 80067da:	230c      	movs	r3, #12
 80067dc:	602b      	str	r3, [r5, #0]
 80067de:	e7d6      	b.n	800678e <_free_r+0x22>
 80067e0:	6820      	ldr	r0, [r4, #0]
 80067e2:	1821      	adds	r1, r4, r0
 80067e4:	428b      	cmp	r3, r1
 80067e6:	bf01      	itttt	eq
 80067e8:	6819      	ldreq	r1, [r3, #0]
 80067ea:	685b      	ldreq	r3, [r3, #4]
 80067ec:	1809      	addeq	r1, r1, r0
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	6063      	str	r3, [r4, #4]
 80067f2:	6054      	str	r4, [r2, #4]
 80067f4:	e7cb      	b.n	800678e <_free_r+0x22>
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	200002e4 	.word	0x200002e4

080067fc <sbrk_aligned>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	4e0e      	ldr	r6, [pc, #56]	; (8006838 <sbrk_aligned+0x3c>)
 8006800:	460c      	mov	r4, r1
 8006802:	6831      	ldr	r1, [r6, #0]
 8006804:	4605      	mov	r5, r0
 8006806:	b911      	cbnz	r1, 800680e <sbrk_aligned+0x12>
 8006808:	f000 f9ee 	bl	8006be8 <_sbrk_r>
 800680c:	6030      	str	r0, [r6, #0]
 800680e:	4621      	mov	r1, r4
 8006810:	4628      	mov	r0, r5
 8006812:	f000 f9e9 	bl	8006be8 <_sbrk_r>
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	d00a      	beq.n	8006830 <sbrk_aligned+0x34>
 800681a:	1cc4      	adds	r4, r0, #3
 800681c:	f024 0403 	bic.w	r4, r4, #3
 8006820:	42a0      	cmp	r0, r4
 8006822:	d007      	beq.n	8006834 <sbrk_aligned+0x38>
 8006824:	1a21      	subs	r1, r4, r0
 8006826:	4628      	mov	r0, r5
 8006828:	f000 f9de 	bl	8006be8 <_sbrk_r>
 800682c:	3001      	adds	r0, #1
 800682e:	d101      	bne.n	8006834 <sbrk_aligned+0x38>
 8006830:	f04f 34ff 	mov.w	r4, #4294967295
 8006834:	4620      	mov	r0, r4
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	200002e8 	.word	0x200002e8

0800683c <_malloc_r>:
 800683c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006840:	1ccd      	adds	r5, r1, #3
 8006842:	f025 0503 	bic.w	r5, r5, #3
 8006846:	3508      	adds	r5, #8
 8006848:	2d0c      	cmp	r5, #12
 800684a:	bf38      	it	cc
 800684c:	250c      	movcc	r5, #12
 800684e:	2d00      	cmp	r5, #0
 8006850:	4607      	mov	r7, r0
 8006852:	db01      	blt.n	8006858 <_malloc_r+0x1c>
 8006854:	42a9      	cmp	r1, r5
 8006856:	d905      	bls.n	8006864 <_malloc_r+0x28>
 8006858:	230c      	movs	r3, #12
 800685a:	2600      	movs	r6, #0
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	4630      	mov	r0, r6
 8006860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006864:	4e2e      	ldr	r6, [pc, #184]	; (8006920 <_malloc_r+0xe4>)
 8006866:	f000 fa3b 	bl	8006ce0 <__malloc_lock>
 800686a:	6833      	ldr	r3, [r6, #0]
 800686c:	461c      	mov	r4, r3
 800686e:	bb34      	cbnz	r4, 80068be <_malloc_r+0x82>
 8006870:	4629      	mov	r1, r5
 8006872:	4638      	mov	r0, r7
 8006874:	f7ff ffc2 	bl	80067fc <sbrk_aligned>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	4604      	mov	r4, r0
 800687c:	d14d      	bne.n	800691a <_malloc_r+0xde>
 800687e:	6834      	ldr	r4, [r6, #0]
 8006880:	4626      	mov	r6, r4
 8006882:	2e00      	cmp	r6, #0
 8006884:	d140      	bne.n	8006908 <_malloc_r+0xcc>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	4631      	mov	r1, r6
 800688a:	4638      	mov	r0, r7
 800688c:	eb04 0803 	add.w	r8, r4, r3
 8006890:	f000 f9aa 	bl	8006be8 <_sbrk_r>
 8006894:	4580      	cmp	r8, r0
 8006896:	d13a      	bne.n	800690e <_malloc_r+0xd2>
 8006898:	6821      	ldr	r1, [r4, #0]
 800689a:	3503      	adds	r5, #3
 800689c:	1a6d      	subs	r5, r5, r1
 800689e:	f025 0503 	bic.w	r5, r5, #3
 80068a2:	3508      	adds	r5, #8
 80068a4:	2d0c      	cmp	r5, #12
 80068a6:	bf38      	it	cc
 80068a8:	250c      	movcc	r5, #12
 80068aa:	4638      	mov	r0, r7
 80068ac:	4629      	mov	r1, r5
 80068ae:	f7ff ffa5 	bl	80067fc <sbrk_aligned>
 80068b2:	3001      	adds	r0, #1
 80068b4:	d02b      	beq.n	800690e <_malloc_r+0xd2>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	442b      	add	r3, r5
 80068ba:	6023      	str	r3, [r4, #0]
 80068bc:	e00e      	b.n	80068dc <_malloc_r+0xa0>
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	1b52      	subs	r2, r2, r5
 80068c2:	d41e      	bmi.n	8006902 <_malloc_r+0xc6>
 80068c4:	2a0b      	cmp	r2, #11
 80068c6:	d916      	bls.n	80068f6 <_malloc_r+0xba>
 80068c8:	1961      	adds	r1, r4, r5
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	6025      	str	r5, [r4, #0]
 80068ce:	bf18      	it	ne
 80068d0:	6059      	strne	r1, [r3, #4]
 80068d2:	6863      	ldr	r3, [r4, #4]
 80068d4:	bf08      	it	eq
 80068d6:	6031      	streq	r1, [r6, #0]
 80068d8:	5162      	str	r2, [r4, r5]
 80068da:	604b      	str	r3, [r1, #4]
 80068dc:	4638      	mov	r0, r7
 80068de:	f104 060b 	add.w	r6, r4, #11
 80068e2:	f000 fa03 	bl	8006cec <__malloc_unlock>
 80068e6:	f026 0607 	bic.w	r6, r6, #7
 80068ea:	1d23      	adds	r3, r4, #4
 80068ec:	1af2      	subs	r2, r6, r3
 80068ee:	d0b6      	beq.n	800685e <_malloc_r+0x22>
 80068f0:	1b9b      	subs	r3, r3, r6
 80068f2:	50a3      	str	r3, [r4, r2]
 80068f4:	e7b3      	b.n	800685e <_malloc_r+0x22>
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	42a3      	cmp	r3, r4
 80068fa:	bf0c      	ite	eq
 80068fc:	6032      	streq	r2, [r6, #0]
 80068fe:	605a      	strne	r2, [r3, #4]
 8006900:	e7ec      	b.n	80068dc <_malloc_r+0xa0>
 8006902:	4623      	mov	r3, r4
 8006904:	6864      	ldr	r4, [r4, #4]
 8006906:	e7b2      	b.n	800686e <_malloc_r+0x32>
 8006908:	4634      	mov	r4, r6
 800690a:	6876      	ldr	r6, [r6, #4]
 800690c:	e7b9      	b.n	8006882 <_malloc_r+0x46>
 800690e:	230c      	movs	r3, #12
 8006910:	4638      	mov	r0, r7
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	f000 f9ea 	bl	8006cec <__malloc_unlock>
 8006918:	e7a1      	b.n	800685e <_malloc_r+0x22>
 800691a:	6025      	str	r5, [r4, #0]
 800691c:	e7de      	b.n	80068dc <_malloc_r+0xa0>
 800691e:	bf00      	nop
 8006920:	200002e4 	.word	0x200002e4

08006924 <__ssputs_r>:
 8006924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006928:	688e      	ldr	r6, [r1, #8]
 800692a:	4682      	mov	sl, r0
 800692c:	429e      	cmp	r6, r3
 800692e:	460c      	mov	r4, r1
 8006930:	4690      	mov	r8, r2
 8006932:	461f      	mov	r7, r3
 8006934:	d838      	bhi.n	80069a8 <__ssputs_r+0x84>
 8006936:	898a      	ldrh	r2, [r1, #12]
 8006938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800693c:	d032      	beq.n	80069a4 <__ssputs_r+0x80>
 800693e:	6825      	ldr	r5, [r4, #0]
 8006940:	6909      	ldr	r1, [r1, #16]
 8006942:	3301      	adds	r3, #1
 8006944:	eba5 0901 	sub.w	r9, r5, r1
 8006948:	6965      	ldr	r5, [r4, #20]
 800694a:	444b      	add	r3, r9
 800694c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006950:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006954:	106d      	asrs	r5, r5, #1
 8006956:	429d      	cmp	r5, r3
 8006958:	bf38      	it	cc
 800695a:	461d      	movcc	r5, r3
 800695c:	0553      	lsls	r3, r2, #21
 800695e:	d531      	bpl.n	80069c4 <__ssputs_r+0xa0>
 8006960:	4629      	mov	r1, r5
 8006962:	f7ff ff6b 	bl	800683c <_malloc_r>
 8006966:	4606      	mov	r6, r0
 8006968:	b950      	cbnz	r0, 8006980 <__ssputs_r+0x5c>
 800696a:	230c      	movs	r3, #12
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
 8006970:	f8ca 3000 	str.w	r3, [sl]
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697a:	81a3      	strh	r3, [r4, #12]
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	464a      	mov	r2, r9
 8006982:	6921      	ldr	r1, [r4, #16]
 8006984:	f7ff fa18 	bl	8005db8 <memcpy>
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800698e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	6126      	str	r6, [r4, #16]
 8006996:	444e      	add	r6, r9
 8006998:	6026      	str	r6, [r4, #0]
 800699a:	463e      	mov	r6, r7
 800699c:	6165      	str	r5, [r4, #20]
 800699e:	eba5 0509 	sub.w	r5, r5, r9
 80069a2:	60a5      	str	r5, [r4, #8]
 80069a4:	42be      	cmp	r6, r7
 80069a6:	d900      	bls.n	80069aa <__ssputs_r+0x86>
 80069a8:	463e      	mov	r6, r7
 80069aa:	4632      	mov	r2, r6
 80069ac:	4641      	mov	r1, r8
 80069ae:	6820      	ldr	r0, [r4, #0]
 80069b0:	f000 f97c 	bl	8006cac <memmove>
 80069b4:	68a3      	ldr	r3, [r4, #8]
 80069b6:	2000      	movs	r0, #0
 80069b8:	1b9b      	subs	r3, r3, r6
 80069ba:	60a3      	str	r3, [r4, #8]
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	4433      	add	r3, r6
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	e7db      	b.n	800697c <__ssputs_r+0x58>
 80069c4:	462a      	mov	r2, r5
 80069c6:	f000 f997 	bl	8006cf8 <_realloc_r>
 80069ca:	4606      	mov	r6, r0
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d1e1      	bne.n	8006994 <__ssputs_r+0x70>
 80069d0:	4650      	mov	r0, sl
 80069d2:	6921      	ldr	r1, [r4, #16]
 80069d4:	f7ff feca 	bl	800676c <_free_r>
 80069d8:	e7c7      	b.n	800696a <__ssputs_r+0x46>
	...

080069dc <_svfiprintf_r>:
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	4698      	mov	r8, r3
 80069e2:	898b      	ldrh	r3, [r1, #12]
 80069e4:	4607      	mov	r7, r0
 80069e6:	061b      	lsls	r3, r3, #24
 80069e8:	460d      	mov	r5, r1
 80069ea:	4614      	mov	r4, r2
 80069ec:	b09d      	sub	sp, #116	; 0x74
 80069ee:	d50e      	bpl.n	8006a0e <_svfiprintf_r+0x32>
 80069f0:	690b      	ldr	r3, [r1, #16]
 80069f2:	b963      	cbnz	r3, 8006a0e <_svfiprintf_r+0x32>
 80069f4:	2140      	movs	r1, #64	; 0x40
 80069f6:	f7ff ff21 	bl	800683c <_malloc_r>
 80069fa:	6028      	str	r0, [r5, #0]
 80069fc:	6128      	str	r0, [r5, #16]
 80069fe:	b920      	cbnz	r0, 8006a0a <_svfiprintf_r+0x2e>
 8006a00:	230c      	movs	r3, #12
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	e0d1      	b.n	8006bae <_svfiprintf_r+0x1d2>
 8006a0a:	2340      	movs	r3, #64	; 0x40
 8006a0c:	616b      	str	r3, [r5, #20]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	9309      	str	r3, [sp, #36]	; 0x24
 8006a12:	2320      	movs	r3, #32
 8006a14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a18:	2330      	movs	r3, #48	; 0x30
 8006a1a:	f04f 0901 	mov.w	r9, #1
 8006a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006bc8 <_svfiprintf_r+0x1ec>
 8006a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	469a      	mov	sl, r3
 8006a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a32:	b10a      	cbz	r2, 8006a38 <_svfiprintf_r+0x5c>
 8006a34:	2a25      	cmp	r2, #37	; 0x25
 8006a36:	d1f9      	bne.n	8006a2c <_svfiprintf_r+0x50>
 8006a38:	ebba 0b04 	subs.w	fp, sl, r4
 8006a3c:	d00b      	beq.n	8006a56 <_svfiprintf_r+0x7a>
 8006a3e:	465b      	mov	r3, fp
 8006a40:	4622      	mov	r2, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	4638      	mov	r0, r7
 8006a46:	f7ff ff6d 	bl	8006924 <__ssputs_r>
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f000 80aa 	beq.w	8006ba4 <_svfiprintf_r+0x1c8>
 8006a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a52:	445a      	add	r2, fp
 8006a54:	9209      	str	r2, [sp, #36]	; 0x24
 8006a56:	f89a 3000 	ldrb.w	r3, [sl]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80a2 	beq.w	8006ba4 <_svfiprintf_r+0x1c8>
 8006a60:	2300      	movs	r3, #0
 8006a62:	f04f 32ff 	mov.w	r2, #4294967295
 8006a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a6a:	f10a 0a01 	add.w	sl, sl, #1
 8006a6e:	9304      	str	r3, [sp, #16]
 8006a70:	9307      	str	r3, [sp, #28]
 8006a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a76:	931a      	str	r3, [sp, #104]	; 0x68
 8006a78:	4654      	mov	r4, sl
 8006a7a:	2205      	movs	r2, #5
 8006a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a80:	4851      	ldr	r0, [pc, #324]	; (8006bc8 <_svfiprintf_r+0x1ec>)
 8006a82:	f7ff f98b 	bl	8005d9c <memchr>
 8006a86:	9a04      	ldr	r2, [sp, #16]
 8006a88:	b9d8      	cbnz	r0, 8006ac2 <_svfiprintf_r+0xe6>
 8006a8a:	06d0      	lsls	r0, r2, #27
 8006a8c:	bf44      	itt	mi
 8006a8e:	2320      	movmi	r3, #32
 8006a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a94:	0711      	lsls	r1, r2, #28
 8006a96:	bf44      	itt	mi
 8006a98:	232b      	movmi	r3, #43	; 0x2b
 8006a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa4:	d015      	beq.n	8006ad2 <_svfiprintf_r+0xf6>
 8006aa6:	4654      	mov	r4, sl
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	f04f 0c0a 	mov.w	ip, #10
 8006aae:	9a07      	ldr	r2, [sp, #28]
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ab6:	3b30      	subs	r3, #48	; 0x30
 8006ab8:	2b09      	cmp	r3, #9
 8006aba:	d94e      	bls.n	8006b5a <_svfiprintf_r+0x17e>
 8006abc:	b1b0      	cbz	r0, 8006aec <_svfiprintf_r+0x110>
 8006abe:	9207      	str	r2, [sp, #28]
 8006ac0:	e014      	b.n	8006aec <_svfiprintf_r+0x110>
 8006ac2:	eba0 0308 	sub.w	r3, r0, r8
 8006ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8006aca:	4313      	orrs	r3, r2
 8006acc:	46a2      	mov	sl, r4
 8006ace:	9304      	str	r3, [sp, #16]
 8006ad0:	e7d2      	b.n	8006a78 <_svfiprintf_r+0x9c>
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	1d19      	adds	r1, r3, #4
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	9103      	str	r1, [sp, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	bfbb      	ittet	lt
 8006ade:	425b      	neglt	r3, r3
 8006ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ae4:	9307      	strge	r3, [sp, #28]
 8006ae6:	9307      	strlt	r3, [sp, #28]
 8006ae8:	bfb8      	it	lt
 8006aea:	9204      	strlt	r2, [sp, #16]
 8006aec:	7823      	ldrb	r3, [r4, #0]
 8006aee:	2b2e      	cmp	r3, #46	; 0x2e
 8006af0:	d10c      	bne.n	8006b0c <_svfiprintf_r+0x130>
 8006af2:	7863      	ldrb	r3, [r4, #1]
 8006af4:	2b2a      	cmp	r3, #42	; 0x2a
 8006af6:	d135      	bne.n	8006b64 <_svfiprintf_r+0x188>
 8006af8:	9b03      	ldr	r3, [sp, #12]
 8006afa:	3402      	adds	r4, #2
 8006afc:	1d1a      	adds	r2, r3, #4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	9203      	str	r2, [sp, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bfb8      	it	lt
 8006b06:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b0a:	9305      	str	r3, [sp, #20]
 8006b0c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006bcc <_svfiprintf_r+0x1f0>
 8006b10:	2203      	movs	r2, #3
 8006b12:	4650      	mov	r0, sl
 8006b14:	7821      	ldrb	r1, [r4, #0]
 8006b16:	f7ff f941 	bl	8005d9c <memchr>
 8006b1a:	b140      	cbz	r0, 8006b2e <_svfiprintf_r+0x152>
 8006b1c:	2340      	movs	r3, #64	; 0x40
 8006b1e:	eba0 000a 	sub.w	r0, r0, sl
 8006b22:	fa03 f000 	lsl.w	r0, r3, r0
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	3401      	adds	r4, #1
 8006b2a:	4303      	orrs	r3, r0
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b32:	2206      	movs	r2, #6
 8006b34:	4826      	ldr	r0, [pc, #152]	; (8006bd0 <_svfiprintf_r+0x1f4>)
 8006b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b3a:	f7ff f92f 	bl	8005d9c <memchr>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d038      	beq.n	8006bb4 <_svfiprintf_r+0x1d8>
 8006b42:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <_svfiprintf_r+0x1f8>)
 8006b44:	bb1b      	cbnz	r3, 8006b8e <_svfiprintf_r+0x1b2>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	3307      	adds	r3, #7
 8006b4a:	f023 0307 	bic.w	r3, r3, #7
 8006b4e:	3308      	adds	r3, #8
 8006b50:	9303      	str	r3, [sp, #12]
 8006b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b54:	4433      	add	r3, r6
 8006b56:	9309      	str	r3, [sp, #36]	; 0x24
 8006b58:	e767      	b.n	8006a2a <_svfiprintf_r+0x4e>
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b62:	e7a5      	b.n	8006ab0 <_svfiprintf_r+0xd4>
 8006b64:	2300      	movs	r3, #0
 8006b66:	f04f 0c0a 	mov.w	ip, #10
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	3401      	adds	r4, #1
 8006b6e:	9305      	str	r3, [sp, #20]
 8006b70:	4620      	mov	r0, r4
 8006b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b76:	3a30      	subs	r2, #48	; 0x30
 8006b78:	2a09      	cmp	r2, #9
 8006b7a:	d903      	bls.n	8006b84 <_svfiprintf_r+0x1a8>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0c5      	beq.n	8006b0c <_svfiprintf_r+0x130>
 8006b80:	9105      	str	r1, [sp, #20]
 8006b82:	e7c3      	b.n	8006b0c <_svfiprintf_r+0x130>
 8006b84:	4604      	mov	r4, r0
 8006b86:	2301      	movs	r3, #1
 8006b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b8c:	e7f0      	b.n	8006b70 <_svfiprintf_r+0x194>
 8006b8e:	ab03      	add	r3, sp, #12
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	462a      	mov	r2, r5
 8006b94:	4638      	mov	r0, r7
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <_svfiprintf_r+0x1fc>)
 8006b98:	a904      	add	r1, sp, #16
 8006b9a:	f7fc fa7f 	bl	800309c <_printf_float>
 8006b9e:	1c42      	adds	r2, r0, #1
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	d1d6      	bne.n	8006b52 <_svfiprintf_r+0x176>
 8006ba4:	89ab      	ldrh	r3, [r5, #12]
 8006ba6:	065b      	lsls	r3, r3, #25
 8006ba8:	f53f af2c 	bmi.w	8006a04 <_svfiprintf_r+0x28>
 8006bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bae:	b01d      	add	sp, #116	; 0x74
 8006bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb4:	ab03      	add	r3, sp, #12
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	462a      	mov	r2, r5
 8006bba:	4638      	mov	r0, r7
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <_svfiprintf_r+0x1fc>)
 8006bbe:	a904      	add	r1, sp, #16
 8006bc0:	f7fc fd08 	bl	80035d4 <_printf_i>
 8006bc4:	e7eb      	b.n	8006b9e <_svfiprintf_r+0x1c2>
 8006bc6:	bf00      	nop
 8006bc8:	08007c24 	.word	0x08007c24
 8006bcc:	08007c2a 	.word	0x08007c2a
 8006bd0:	08007c2e 	.word	0x08007c2e
 8006bd4:	0800309d 	.word	0x0800309d
 8006bd8:	08006925 	.word	0x08006925

08006bdc <nan>:
 8006bdc:	2000      	movs	r0, #0
 8006bde:	4901      	ldr	r1, [pc, #4]	; (8006be4 <nan+0x8>)
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	7ff80000 	.word	0x7ff80000

08006be8 <_sbrk_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	2300      	movs	r3, #0
 8006bec:	4d05      	ldr	r5, [pc, #20]	; (8006c04 <_sbrk_r+0x1c>)
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	f7fa fd7c 	bl	80016f0 <_sbrk>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_sbrk_r+0x1a>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_sbrk_r+0x1a>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	200002ec 	.word	0x200002ec

08006c08 <strncmp>:
 8006c08:	4603      	mov	r3, r0
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	b172      	cbz	r2, 8006c2c <strncmp+0x24>
 8006c0e:	3901      	subs	r1, #1
 8006c10:	1884      	adds	r4, r0, r2
 8006c12:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006c1a:	4290      	cmp	r0, r2
 8006c1c:	d101      	bne.n	8006c22 <strncmp+0x1a>
 8006c1e:	42a3      	cmp	r3, r4
 8006c20:	d101      	bne.n	8006c26 <strncmp+0x1e>
 8006c22:	1a80      	subs	r0, r0, r2
 8006c24:	bd10      	pop	{r4, pc}
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d1f3      	bne.n	8006c12 <strncmp+0xa>
 8006c2a:	e7fa      	b.n	8006c22 <strncmp+0x1a>
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	e7f9      	b.n	8006c24 <strncmp+0x1c>

08006c30 <__ascii_wctomb>:
 8006c30:	4603      	mov	r3, r0
 8006c32:	4608      	mov	r0, r1
 8006c34:	b141      	cbz	r1, 8006c48 <__ascii_wctomb+0x18>
 8006c36:	2aff      	cmp	r2, #255	; 0xff
 8006c38:	d904      	bls.n	8006c44 <__ascii_wctomb+0x14>
 8006c3a:	228a      	movs	r2, #138	; 0x8a
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	4770      	bx	lr
 8006c44:	2001      	movs	r0, #1
 8006c46:	700a      	strb	r2, [r1, #0]
 8006c48:	4770      	bx	lr
	...

08006c4c <__assert_func>:
 8006c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c4e:	4614      	mov	r4, r2
 8006c50:	461a      	mov	r2, r3
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <__assert_func+0x2c>)
 8006c54:	4605      	mov	r5, r0
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68d8      	ldr	r0, [r3, #12]
 8006c5a:	b14c      	cbz	r4, 8006c70 <__assert_func+0x24>
 8006c5c:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <__assert_func+0x30>)
 8006c5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c62:	9100      	str	r1, [sp, #0]
 8006c64:	462b      	mov	r3, r5
 8006c66:	4906      	ldr	r1, [pc, #24]	; (8006c80 <__assert_func+0x34>)
 8006c68:	f000 f80e 	bl	8006c88 <fiprintf>
 8006c6c:	f000 fa8a 	bl	8007184 <abort>
 8006c70:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <__assert_func+0x38>)
 8006c72:	461c      	mov	r4, r3
 8006c74:	e7f3      	b.n	8006c5e <__assert_func+0x12>
 8006c76:	bf00      	nop
 8006c78:	20000014 	.word	0x20000014
 8006c7c:	08007c35 	.word	0x08007c35
 8006c80:	08007c42 	.word	0x08007c42
 8006c84:	08007c70 	.word	0x08007c70

08006c88 <fiprintf>:
 8006c88:	b40e      	push	{r1, r2, r3}
 8006c8a:	b503      	push	{r0, r1, lr}
 8006c8c:	4601      	mov	r1, r0
 8006c8e:	ab03      	add	r3, sp, #12
 8006c90:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <fiprintf+0x20>)
 8006c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	f000 f883 	bl	8006da4 <_vfiprintf_r>
 8006c9e:	b002      	add	sp, #8
 8006ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca4:	b003      	add	sp, #12
 8006ca6:	4770      	bx	lr
 8006ca8:	20000014 	.word	0x20000014

08006cac <memmove>:
 8006cac:	4288      	cmp	r0, r1
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	eb01 0402 	add.w	r4, r1, r2
 8006cb4:	d902      	bls.n	8006cbc <memmove+0x10>
 8006cb6:	4284      	cmp	r4, r0
 8006cb8:	4623      	mov	r3, r4
 8006cba:	d807      	bhi.n	8006ccc <memmove+0x20>
 8006cbc:	1e43      	subs	r3, r0, #1
 8006cbe:	42a1      	cmp	r1, r4
 8006cc0:	d008      	beq.n	8006cd4 <memmove+0x28>
 8006cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cca:	e7f8      	b.n	8006cbe <memmove+0x12>
 8006ccc:	4601      	mov	r1, r0
 8006cce:	4402      	add	r2, r0
 8006cd0:	428a      	cmp	r2, r1
 8006cd2:	d100      	bne.n	8006cd6 <memmove+0x2a>
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cde:	e7f7      	b.n	8006cd0 <memmove+0x24>

08006ce0 <__malloc_lock>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__malloc_lock+0x8>)
 8006ce2:	f000 bc0b 	b.w	80074fc <__retarget_lock_acquire_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	200002f0 	.word	0x200002f0

08006cec <__malloc_unlock>:
 8006cec:	4801      	ldr	r0, [pc, #4]	; (8006cf4 <__malloc_unlock+0x8>)
 8006cee:	f000 bc06 	b.w	80074fe <__retarget_lock_release_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	200002f0 	.word	0x200002f0

08006cf8 <_realloc_r>:
 8006cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfc:	4680      	mov	r8, r0
 8006cfe:	4614      	mov	r4, r2
 8006d00:	460e      	mov	r6, r1
 8006d02:	b921      	cbnz	r1, 8006d0e <_realloc_r+0x16>
 8006d04:	4611      	mov	r1, r2
 8006d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	f7ff bd97 	b.w	800683c <_malloc_r>
 8006d0e:	b92a      	cbnz	r2, 8006d1c <_realloc_r+0x24>
 8006d10:	f7ff fd2c 	bl	800676c <_free_r>
 8006d14:	4625      	mov	r5, r4
 8006d16:	4628      	mov	r0, r5
 8006d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d1c:	f000 fc56 	bl	80075cc <_malloc_usable_size_r>
 8006d20:	4284      	cmp	r4, r0
 8006d22:	4607      	mov	r7, r0
 8006d24:	d802      	bhi.n	8006d2c <_realloc_r+0x34>
 8006d26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d2a:	d812      	bhi.n	8006d52 <_realloc_r+0x5a>
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f7ff fd84 	bl	800683c <_malloc_r>
 8006d34:	4605      	mov	r5, r0
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d0ed      	beq.n	8006d16 <_realloc_r+0x1e>
 8006d3a:	42bc      	cmp	r4, r7
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4631      	mov	r1, r6
 8006d40:	bf28      	it	cs
 8006d42:	463a      	movcs	r2, r7
 8006d44:	f7ff f838 	bl	8005db8 <memcpy>
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f7ff fd0e 	bl	800676c <_free_r>
 8006d50:	e7e1      	b.n	8006d16 <_realloc_r+0x1e>
 8006d52:	4635      	mov	r5, r6
 8006d54:	e7df      	b.n	8006d16 <_realloc_r+0x1e>

08006d56 <__sfputc_r>:
 8006d56:	6893      	ldr	r3, [r2, #8]
 8006d58:	b410      	push	{r4}
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	6093      	str	r3, [r2, #8]
 8006d60:	da07      	bge.n	8006d72 <__sfputc_r+0x1c>
 8006d62:	6994      	ldr	r4, [r2, #24]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	db01      	blt.n	8006d6c <__sfputc_r+0x16>
 8006d68:	290a      	cmp	r1, #10
 8006d6a:	d102      	bne.n	8006d72 <__sfputc_r+0x1c>
 8006d6c:	bc10      	pop	{r4}
 8006d6e:	f000 b949 	b.w	8007004 <__swbuf_r>
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	1c58      	adds	r0, r3, #1
 8006d76:	6010      	str	r0, [r2, #0]
 8006d78:	7019      	strb	r1, [r3, #0]
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	bc10      	pop	{r4}
 8006d7e:	4770      	bx	lr

08006d80 <__sfputs_r>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	4606      	mov	r6, r0
 8006d84:	460f      	mov	r7, r1
 8006d86:	4614      	mov	r4, r2
 8006d88:	18d5      	adds	r5, r2, r3
 8006d8a:	42ac      	cmp	r4, r5
 8006d8c:	d101      	bne.n	8006d92 <__sfputs_r+0x12>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e007      	b.n	8006da2 <__sfputs_r+0x22>
 8006d92:	463a      	mov	r2, r7
 8006d94:	4630      	mov	r0, r6
 8006d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9a:	f7ff ffdc 	bl	8006d56 <__sfputc_r>
 8006d9e:	1c43      	adds	r3, r0, #1
 8006da0:	d1f3      	bne.n	8006d8a <__sfputs_r+0xa>
 8006da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006da4 <_vfiprintf_r>:
 8006da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	460d      	mov	r5, r1
 8006daa:	4614      	mov	r4, r2
 8006dac:	4698      	mov	r8, r3
 8006dae:	4606      	mov	r6, r0
 8006db0:	b09d      	sub	sp, #116	; 0x74
 8006db2:	b118      	cbz	r0, 8006dbc <_vfiprintf_r+0x18>
 8006db4:	6983      	ldr	r3, [r0, #24]
 8006db6:	b90b      	cbnz	r3, 8006dbc <_vfiprintf_r+0x18>
 8006db8:	f000 fb02 	bl	80073c0 <__sinit>
 8006dbc:	4b89      	ldr	r3, [pc, #548]	; (8006fe4 <_vfiprintf_r+0x240>)
 8006dbe:	429d      	cmp	r5, r3
 8006dc0:	d11b      	bne.n	8006dfa <_vfiprintf_r+0x56>
 8006dc2:	6875      	ldr	r5, [r6, #4]
 8006dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dc6:	07d9      	lsls	r1, r3, #31
 8006dc8:	d405      	bmi.n	8006dd6 <_vfiprintf_r+0x32>
 8006dca:	89ab      	ldrh	r3, [r5, #12]
 8006dcc:	059a      	lsls	r2, r3, #22
 8006dce:	d402      	bmi.n	8006dd6 <_vfiprintf_r+0x32>
 8006dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dd2:	f000 fb93 	bl	80074fc <__retarget_lock_acquire_recursive>
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
 8006dd8:	071b      	lsls	r3, r3, #28
 8006dda:	d501      	bpl.n	8006de0 <_vfiprintf_r+0x3c>
 8006ddc:	692b      	ldr	r3, [r5, #16]
 8006dde:	b9eb      	cbnz	r3, 8006e1c <_vfiprintf_r+0x78>
 8006de0:	4629      	mov	r1, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	f000 f960 	bl	80070a8 <__swsetup_r>
 8006de8:	b1c0      	cbz	r0, 8006e1c <_vfiprintf_r+0x78>
 8006dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dec:	07dc      	lsls	r4, r3, #31
 8006dee:	d50e      	bpl.n	8006e0e <_vfiprintf_r+0x6a>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b01d      	add	sp, #116	; 0x74
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	4b7b      	ldr	r3, [pc, #492]	; (8006fe8 <_vfiprintf_r+0x244>)
 8006dfc:	429d      	cmp	r5, r3
 8006dfe:	d101      	bne.n	8006e04 <_vfiprintf_r+0x60>
 8006e00:	68b5      	ldr	r5, [r6, #8]
 8006e02:	e7df      	b.n	8006dc4 <_vfiprintf_r+0x20>
 8006e04:	4b79      	ldr	r3, [pc, #484]	; (8006fec <_vfiprintf_r+0x248>)
 8006e06:	429d      	cmp	r5, r3
 8006e08:	bf08      	it	eq
 8006e0a:	68f5      	ldreq	r5, [r6, #12]
 8006e0c:	e7da      	b.n	8006dc4 <_vfiprintf_r+0x20>
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	0598      	lsls	r0, r3, #22
 8006e12:	d4ed      	bmi.n	8006df0 <_vfiprintf_r+0x4c>
 8006e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e16:	f000 fb72 	bl	80074fe <__retarget_lock_release_recursive>
 8006e1a:	e7e9      	b.n	8006df0 <_vfiprintf_r+0x4c>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e20:	2320      	movs	r3, #32
 8006e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e26:	2330      	movs	r3, #48	; 0x30
 8006e28:	f04f 0901 	mov.w	r9, #1
 8006e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e30:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006ff0 <_vfiprintf_r+0x24c>
 8006e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e38:	4623      	mov	r3, r4
 8006e3a:	469a      	mov	sl, r3
 8006e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e40:	b10a      	cbz	r2, 8006e46 <_vfiprintf_r+0xa2>
 8006e42:	2a25      	cmp	r2, #37	; 0x25
 8006e44:	d1f9      	bne.n	8006e3a <_vfiprintf_r+0x96>
 8006e46:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4a:	d00b      	beq.n	8006e64 <_vfiprintf_r+0xc0>
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	4622      	mov	r2, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7ff ff94 	bl	8006d80 <__sfputs_r>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f000 80aa 	beq.w	8006fb2 <_vfiprintf_r+0x20e>
 8006e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e60:	445a      	add	r2, fp
 8006e62:	9209      	str	r2, [sp, #36]	; 0x24
 8006e64:	f89a 3000 	ldrb.w	r3, [sl]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80a2 	beq.w	8006fb2 <_vfiprintf_r+0x20e>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f04f 32ff 	mov.w	r2, #4294967295
 8006e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e78:	f10a 0a01 	add.w	sl, sl, #1
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	9307      	str	r3, [sp, #28]
 8006e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e84:	931a      	str	r3, [sp, #104]	; 0x68
 8006e86:	4654      	mov	r4, sl
 8006e88:	2205      	movs	r2, #5
 8006e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8e:	4858      	ldr	r0, [pc, #352]	; (8006ff0 <_vfiprintf_r+0x24c>)
 8006e90:	f7fe ff84 	bl	8005d9c <memchr>
 8006e94:	9a04      	ldr	r2, [sp, #16]
 8006e96:	b9d8      	cbnz	r0, 8006ed0 <_vfiprintf_r+0x12c>
 8006e98:	06d1      	lsls	r1, r2, #27
 8006e9a:	bf44      	itt	mi
 8006e9c:	2320      	movmi	r3, #32
 8006e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea2:	0713      	lsls	r3, r2, #28
 8006ea4:	bf44      	itt	mi
 8006ea6:	232b      	movmi	r3, #43	; 0x2b
 8006ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eac:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb2:	d015      	beq.n	8006ee0 <_vfiprintf_r+0x13c>
 8006eb4:	4654      	mov	r4, sl
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	f04f 0c0a 	mov.w	ip, #10
 8006ebc:	9a07      	ldr	r2, [sp, #28]
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec4:	3b30      	subs	r3, #48	; 0x30
 8006ec6:	2b09      	cmp	r3, #9
 8006ec8:	d94e      	bls.n	8006f68 <_vfiprintf_r+0x1c4>
 8006eca:	b1b0      	cbz	r0, 8006efa <_vfiprintf_r+0x156>
 8006ecc:	9207      	str	r2, [sp, #28]
 8006ece:	e014      	b.n	8006efa <_vfiprintf_r+0x156>
 8006ed0:	eba0 0308 	sub.w	r3, r0, r8
 8006ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	46a2      	mov	sl, r4
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	e7d2      	b.n	8006e86 <_vfiprintf_r+0xe2>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	1d19      	adds	r1, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9103      	str	r1, [sp, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfbb      	ittet	lt
 8006eec:	425b      	neglt	r3, r3
 8006eee:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef2:	9307      	strge	r3, [sp, #28]
 8006ef4:	9307      	strlt	r3, [sp, #28]
 8006ef6:	bfb8      	it	lt
 8006ef8:	9204      	strlt	r2, [sp, #16]
 8006efa:	7823      	ldrb	r3, [r4, #0]
 8006efc:	2b2e      	cmp	r3, #46	; 0x2e
 8006efe:	d10c      	bne.n	8006f1a <_vfiprintf_r+0x176>
 8006f00:	7863      	ldrb	r3, [r4, #1]
 8006f02:	2b2a      	cmp	r3, #42	; 0x2a
 8006f04:	d135      	bne.n	8006f72 <_vfiprintf_r+0x1ce>
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	3402      	adds	r4, #2
 8006f0a:	1d1a      	adds	r2, r3, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	9203      	str	r2, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bfb8      	it	lt
 8006f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f18:	9305      	str	r3, [sp, #20]
 8006f1a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006ff4 <_vfiprintf_r+0x250>
 8006f1e:	2203      	movs	r2, #3
 8006f20:	4650      	mov	r0, sl
 8006f22:	7821      	ldrb	r1, [r4, #0]
 8006f24:	f7fe ff3a 	bl	8005d9c <memchr>
 8006f28:	b140      	cbz	r0, 8006f3c <_vfiprintf_r+0x198>
 8006f2a:	2340      	movs	r3, #64	; 0x40
 8006f2c:	eba0 000a 	sub.w	r0, r0, sl
 8006f30:	fa03 f000 	lsl.w	r0, r3, r0
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	3401      	adds	r4, #1
 8006f38:	4303      	orrs	r3, r0
 8006f3a:	9304      	str	r3, [sp, #16]
 8006f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f40:	2206      	movs	r2, #6
 8006f42:	482d      	ldr	r0, [pc, #180]	; (8006ff8 <_vfiprintf_r+0x254>)
 8006f44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f48:	f7fe ff28 	bl	8005d9c <memchr>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d03f      	beq.n	8006fd0 <_vfiprintf_r+0x22c>
 8006f50:	4b2a      	ldr	r3, [pc, #168]	; (8006ffc <_vfiprintf_r+0x258>)
 8006f52:	bb1b      	cbnz	r3, 8006f9c <_vfiprintf_r+0x1f8>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	3307      	adds	r3, #7
 8006f58:	f023 0307 	bic.w	r3, r3, #7
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	9303      	str	r3, [sp, #12]
 8006f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f62:	443b      	add	r3, r7
 8006f64:	9309      	str	r3, [sp, #36]	; 0x24
 8006f66:	e767      	b.n	8006e38 <_vfiprintf_r+0x94>
 8006f68:	460c      	mov	r4, r1
 8006f6a:	2001      	movs	r0, #1
 8006f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f70:	e7a5      	b.n	8006ebe <_vfiprintf_r+0x11a>
 8006f72:	2300      	movs	r3, #0
 8006f74:	f04f 0c0a 	mov.w	ip, #10
 8006f78:	4619      	mov	r1, r3
 8006f7a:	3401      	adds	r4, #1
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f84:	3a30      	subs	r2, #48	; 0x30
 8006f86:	2a09      	cmp	r2, #9
 8006f88:	d903      	bls.n	8006f92 <_vfiprintf_r+0x1ee>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0c5      	beq.n	8006f1a <_vfiprintf_r+0x176>
 8006f8e:	9105      	str	r1, [sp, #20]
 8006f90:	e7c3      	b.n	8006f1a <_vfiprintf_r+0x176>
 8006f92:	4604      	mov	r4, r0
 8006f94:	2301      	movs	r3, #1
 8006f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f9a:	e7f0      	b.n	8006f7e <_vfiprintf_r+0x1da>
 8006f9c:	ab03      	add	r3, sp, #12
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	4b16      	ldr	r3, [pc, #88]	; (8007000 <_vfiprintf_r+0x25c>)
 8006fa6:	a904      	add	r1, sp, #16
 8006fa8:	f7fc f878 	bl	800309c <_printf_float>
 8006fac:	4607      	mov	r7, r0
 8006fae:	1c78      	adds	r0, r7, #1
 8006fb0:	d1d6      	bne.n	8006f60 <_vfiprintf_r+0x1bc>
 8006fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb4:	07d9      	lsls	r1, r3, #31
 8006fb6:	d405      	bmi.n	8006fc4 <_vfiprintf_r+0x220>
 8006fb8:	89ab      	ldrh	r3, [r5, #12]
 8006fba:	059a      	lsls	r2, r3, #22
 8006fbc:	d402      	bmi.n	8006fc4 <_vfiprintf_r+0x220>
 8006fbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc0:	f000 fa9d 	bl	80074fe <__retarget_lock_release_recursive>
 8006fc4:	89ab      	ldrh	r3, [r5, #12]
 8006fc6:	065b      	lsls	r3, r3, #25
 8006fc8:	f53f af12 	bmi.w	8006df0 <_vfiprintf_r+0x4c>
 8006fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fce:	e711      	b.n	8006df4 <_vfiprintf_r+0x50>
 8006fd0:	ab03      	add	r3, sp, #12
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4b09      	ldr	r3, [pc, #36]	; (8007000 <_vfiprintf_r+0x25c>)
 8006fda:	a904      	add	r1, sp, #16
 8006fdc:	f7fc fafa 	bl	80035d4 <_printf_i>
 8006fe0:	e7e4      	b.n	8006fac <_vfiprintf_r+0x208>
 8006fe2:	bf00      	nop
 8006fe4:	08007c94 	.word	0x08007c94
 8006fe8:	08007cb4 	.word	0x08007cb4
 8006fec:	08007c74 	.word	0x08007c74
 8006ff0:	08007c24 	.word	0x08007c24
 8006ff4:	08007c2a 	.word	0x08007c2a
 8006ff8:	08007c2e 	.word	0x08007c2e
 8006ffc:	0800309d 	.word	0x0800309d
 8007000:	08006d81 	.word	0x08006d81

08007004 <__swbuf_r>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	460e      	mov	r6, r1
 8007008:	4614      	mov	r4, r2
 800700a:	4605      	mov	r5, r0
 800700c:	b118      	cbz	r0, 8007016 <__swbuf_r+0x12>
 800700e:	6983      	ldr	r3, [r0, #24]
 8007010:	b90b      	cbnz	r3, 8007016 <__swbuf_r+0x12>
 8007012:	f000 f9d5 	bl	80073c0 <__sinit>
 8007016:	4b21      	ldr	r3, [pc, #132]	; (800709c <__swbuf_r+0x98>)
 8007018:	429c      	cmp	r4, r3
 800701a:	d12b      	bne.n	8007074 <__swbuf_r+0x70>
 800701c:	686c      	ldr	r4, [r5, #4]
 800701e:	69a3      	ldr	r3, [r4, #24]
 8007020:	60a3      	str	r3, [r4, #8]
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	071a      	lsls	r2, r3, #28
 8007026:	d52f      	bpl.n	8007088 <__swbuf_r+0x84>
 8007028:	6923      	ldr	r3, [r4, #16]
 800702a:	b36b      	cbz	r3, 8007088 <__swbuf_r+0x84>
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	b2f6      	uxtb	r6, r6
 8007032:	1ac0      	subs	r0, r0, r3
 8007034:	6963      	ldr	r3, [r4, #20]
 8007036:	4637      	mov	r7, r6
 8007038:	4283      	cmp	r3, r0
 800703a:	dc04      	bgt.n	8007046 <__swbuf_r+0x42>
 800703c:	4621      	mov	r1, r4
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f92a 	bl	8007298 <_fflush_r>
 8007044:	bb30      	cbnz	r0, 8007094 <__swbuf_r+0x90>
 8007046:	68a3      	ldr	r3, [r4, #8]
 8007048:	3001      	adds	r0, #1
 800704a:	3b01      	subs	r3, #1
 800704c:	60a3      	str	r3, [r4, #8]
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	6022      	str	r2, [r4, #0]
 8007054:	701e      	strb	r6, [r3, #0]
 8007056:	6963      	ldr	r3, [r4, #20]
 8007058:	4283      	cmp	r3, r0
 800705a:	d004      	beq.n	8007066 <__swbuf_r+0x62>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	07db      	lsls	r3, r3, #31
 8007060:	d506      	bpl.n	8007070 <__swbuf_r+0x6c>
 8007062:	2e0a      	cmp	r6, #10
 8007064:	d104      	bne.n	8007070 <__swbuf_r+0x6c>
 8007066:	4621      	mov	r1, r4
 8007068:	4628      	mov	r0, r5
 800706a:	f000 f915 	bl	8007298 <_fflush_r>
 800706e:	b988      	cbnz	r0, 8007094 <__swbuf_r+0x90>
 8007070:	4638      	mov	r0, r7
 8007072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007074:	4b0a      	ldr	r3, [pc, #40]	; (80070a0 <__swbuf_r+0x9c>)
 8007076:	429c      	cmp	r4, r3
 8007078:	d101      	bne.n	800707e <__swbuf_r+0x7a>
 800707a:	68ac      	ldr	r4, [r5, #8]
 800707c:	e7cf      	b.n	800701e <__swbuf_r+0x1a>
 800707e:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <__swbuf_r+0xa0>)
 8007080:	429c      	cmp	r4, r3
 8007082:	bf08      	it	eq
 8007084:	68ec      	ldreq	r4, [r5, #12]
 8007086:	e7ca      	b.n	800701e <__swbuf_r+0x1a>
 8007088:	4621      	mov	r1, r4
 800708a:	4628      	mov	r0, r5
 800708c:	f000 f80c 	bl	80070a8 <__swsetup_r>
 8007090:	2800      	cmp	r0, #0
 8007092:	d0cb      	beq.n	800702c <__swbuf_r+0x28>
 8007094:	f04f 37ff 	mov.w	r7, #4294967295
 8007098:	e7ea      	b.n	8007070 <__swbuf_r+0x6c>
 800709a:	bf00      	nop
 800709c:	08007c94 	.word	0x08007c94
 80070a0:	08007cb4 	.word	0x08007cb4
 80070a4:	08007c74 	.word	0x08007c74

080070a8 <__swsetup_r>:
 80070a8:	4b32      	ldr	r3, [pc, #200]	; (8007174 <__swsetup_r+0xcc>)
 80070aa:	b570      	push	{r4, r5, r6, lr}
 80070ac:	681d      	ldr	r5, [r3, #0]
 80070ae:	4606      	mov	r6, r0
 80070b0:	460c      	mov	r4, r1
 80070b2:	b125      	cbz	r5, 80070be <__swsetup_r+0x16>
 80070b4:	69ab      	ldr	r3, [r5, #24]
 80070b6:	b913      	cbnz	r3, 80070be <__swsetup_r+0x16>
 80070b8:	4628      	mov	r0, r5
 80070ba:	f000 f981 	bl	80073c0 <__sinit>
 80070be:	4b2e      	ldr	r3, [pc, #184]	; (8007178 <__swsetup_r+0xd0>)
 80070c0:	429c      	cmp	r4, r3
 80070c2:	d10f      	bne.n	80070e4 <__swsetup_r+0x3c>
 80070c4:	686c      	ldr	r4, [r5, #4]
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070cc:	0719      	lsls	r1, r3, #28
 80070ce:	d42c      	bmi.n	800712a <__swsetup_r+0x82>
 80070d0:	06dd      	lsls	r5, r3, #27
 80070d2:	d411      	bmi.n	80070f8 <__swsetup_r+0x50>
 80070d4:	2309      	movs	r3, #9
 80070d6:	6033      	str	r3, [r6, #0]
 80070d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295
 80070e0:	81a3      	strh	r3, [r4, #12]
 80070e2:	e03e      	b.n	8007162 <__swsetup_r+0xba>
 80070e4:	4b25      	ldr	r3, [pc, #148]	; (800717c <__swsetup_r+0xd4>)
 80070e6:	429c      	cmp	r4, r3
 80070e8:	d101      	bne.n	80070ee <__swsetup_r+0x46>
 80070ea:	68ac      	ldr	r4, [r5, #8]
 80070ec:	e7eb      	b.n	80070c6 <__swsetup_r+0x1e>
 80070ee:	4b24      	ldr	r3, [pc, #144]	; (8007180 <__swsetup_r+0xd8>)
 80070f0:	429c      	cmp	r4, r3
 80070f2:	bf08      	it	eq
 80070f4:	68ec      	ldreq	r4, [r5, #12]
 80070f6:	e7e6      	b.n	80070c6 <__swsetup_r+0x1e>
 80070f8:	0758      	lsls	r0, r3, #29
 80070fa:	d512      	bpl.n	8007122 <__swsetup_r+0x7a>
 80070fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070fe:	b141      	cbz	r1, 8007112 <__swsetup_r+0x6a>
 8007100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007104:	4299      	cmp	r1, r3
 8007106:	d002      	beq.n	800710e <__swsetup_r+0x66>
 8007108:	4630      	mov	r0, r6
 800710a:	f7ff fb2f 	bl	800676c <_free_r>
 800710e:	2300      	movs	r3, #0
 8007110:	6363      	str	r3, [r4, #52]	; 0x34
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	2300      	movs	r3, #0
 800711c:	6063      	str	r3, [r4, #4]
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	f043 0308 	orr.w	r3, r3, #8
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	b94b      	cbnz	r3, 8007142 <__swsetup_r+0x9a>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007138:	d003      	beq.n	8007142 <__swsetup_r+0x9a>
 800713a:	4621      	mov	r1, r4
 800713c:	4630      	mov	r0, r6
 800713e:	f000 fa05 	bl	800754c <__smakebuf_r>
 8007142:	89a0      	ldrh	r0, [r4, #12]
 8007144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007148:	f010 0301 	ands.w	r3, r0, #1
 800714c:	d00a      	beq.n	8007164 <__swsetup_r+0xbc>
 800714e:	2300      	movs	r3, #0
 8007150:	60a3      	str	r3, [r4, #8]
 8007152:	6963      	ldr	r3, [r4, #20]
 8007154:	425b      	negs	r3, r3
 8007156:	61a3      	str	r3, [r4, #24]
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	b943      	cbnz	r3, 800716e <__swsetup_r+0xc6>
 800715c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007160:	d1ba      	bne.n	80070d8 <__swsetup_r+0x30>
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	0781      	lsls	r1, r0, #30
 8007166:	bf58      	it	pl
 8007168:	6963      	ldrpl	r3, [r4, #20]
 800716a:	60a3      	str	r3, [r4, #8]
 800716c:	e7f4      	b.n	8007158 <__swsetup_r+0xb0>
 800716e:	2000      	movs	r0, #0
 8007170:	e7f7      	b.n	8007162 <__swsetup_r+0xba>
 8007172:	bf00      	nop
 8007174:	20000014 	.word	0x20000014
 8007178:	08007c94 	.word	0x08007c94
 800717c:	08007cb4 	.word	0x08007cb4
 8007180:	08007c74 	.word	0x08007c74

08007184 <abort>:
 8007184:	2006      	movs	r0, #6
 8007186:	b508      	push	{r3, lr}
 8007188:	f000 fa50 	bl	800762c <raise>
 800718c:	2001      	movs	r0, #1
 800718e:	f7fa fa3b 	bl	8001608 <_exit>
	...

08007194 <__sflush_r>:
 8007194:	898a      	ldrh	r2, [r1, #12]
 8007196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007198:	4605      	mov	r5, r0
 800719a:	0710      	lsls	r0, r2, #28
 800719c:	460c      	mov	r4, r1
 800719e:	d457      	bmi.n	8007250 <__sflush_r+0xbc>
 80071a0:	684b      	ldr	r3, [r1, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dc04      	bgt.n	80071b0 <__sflush_r+0x1c>
 80071a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dc01      	bgt.n	80071b0 <__sflush_r+0x1c>
 80071ac:	2000      	movs	r0, #0
 80071ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071b2:	2e00      	cmp	r6, #0
 80071b4:	d0fa      	beq.n	80071ac <__sflush_r+0x18>
 80071b6:	2300      	movs	r3, #0
 80071b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071bc:	682f      	ldr	r7, [r5, #0]
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	d032      	beq.n	8007228 <__sflush_r+0x94>
 80071c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	075a      	lsls	r2, r3, #29
 80071c8:	d505      	bpl.n	80071d6 <__sflush_r+0x42>
 80071ca:	6863      	ldr	r3, [r4, #4]
 80071cc:	1ac0      	subs	r0, r0, r3
 80071ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071d0:	b10b      	cbz	r3, 80071d6 <__sflush_r+0x42>
 80071d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071d4:	1ac0      	subs	r0, r0, r3
 80071d6:	2300      	movs	r3, #0
 80071d8:	4602      	mov	r2, r0
 80071da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071dc:	4628      	mov	r0, r5
 80071de:	6a21      	ldr	r1, [r4, #32]
 80071e0:	47b0      	blx	r6
 80071e2:	1c43      	adds	r3, r0, #1
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	d106      	bne.n	80071f6 <__sflush_r+0x62>
 80071e8:	6829      	ldr	r1, [r5, #0]
 80071ea:	291d      	cmp	r1, #29
 80071ec:	d82c      	bhi.n	8007248 <__sflush_r+0xb4>
 80071ee:	4a29      	ldr	r2, [pc, #164]	; (8007294 <__sflush_r+0x100>)
 80071f0:	40ca      	lsrs	r2, r1
 80071f2:	07d6      	lsls	r6, r2, #31
 80071f4:	d528      	bpl.n	8007248 <__sflush_r+0xb4>
 80071f6:	2200      	movs	r2, #0
 80071f8:	6062      	str	r2, [r4, #4]
 80071fa:	6922      	ldr	r2, [r4, #16]
 80071fc:	04d9      	lsls	r1, r3, #19
 80071fe:	6022      	str	r2, [r4, #0]
 8007200:	d504      	bpl.n	800720c <__sflush_r+0x78>
 8007202:	1c42      	adds	r2, r0, #1
 8007204:	d101      	bne.n	800720a <__sflush_r+0x76>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	b903      	cbnz	r3, 800720c <__sflush_r+0x78>
 800720a:	6560      	str	r0, [r4, #84]	; 0x54
 800720c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800720e:	602f      	str	r7, [r5, #0]
 8007210:	2900      	cmp	r1, #0
 8007212:	d0cb      	beq.n	80071ac <__sflush_r+0x18>
 8007214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007218:	4299      	cmp	r1, r3
 800721a:	d002      	beq.n	8007222 <__sflush_r+0x8e>
 800721c:	4628      	mov	r0, r5
 800721e:	f7ff faa5 	bl	800676c <_free_r>
 8007222:	2000      	movs	r0, #0
 8007224:	6360      	str	r0, [r4, #52]	; 0x34
 8007226:	e7c2      	b.n	80071ae <__sflush_r+0x1a>
 8007228:	6a21      	ldr	r1, [r4, #32]
 800722a:	2301      	movs	r3, #1
 800722c:	4628      	mov	r0, r5
 800722e:	47b0      	blx	r6
 8007230:	1c41      	adds	r1, r0, #1
 8007232:	d1c7      	bne.n	80071c4 <__sflush_r+0x30>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0c4      	beq.n	80071c4 <__sflush_r+0x30>
 800723a:	2b1d      	cmp	r3, #29
 800723c:	d001      	beq.n	8007242 <__sflush_r+0xae>
 800723e:	2b16      	cmp	r3, #22
 8007240:	d101      	bne.n	8007246 <__sflush_r+0xb2>
 8007242:	602f      	str	r7, [r5, #0]
 8007244:	e7b2      	b.n	80071ac <__sflush_r+0x18>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724c:	81a3      	strh	r3, [r4, #12]
 800724e:	e7ae      	b.n	80071ae <__sflush_r+0x1a>
 8007250:	690f      	ldr	r7, [r1, #16]
 8007252:	2f00      	cmp	r7, #0
 8007254:	d0aa      	beq.n	80071ac <__sflush_r+0x18>
 8007256:	0793      	lsls	r3, r2, #30
 8007258:	bf18      	it	ne
 800725a:	2300      	movne	r3, #0
 800725c:	680e      	ldr	r6, [r1, #0]
 800725e:	bf08      	it	eq
 8007260:	694b      	ldreq	r3, [r1, #20]
 8007262:	1bf6      	subs	r6, r6, r7
 8007264:	600f      	str	r7, [r1, #0]
 8007266:	608b      	str	r3, [r1, #8]
 8007268:	2e00      	cmp	r6, #0
 800726a:	dd9f      	ble.n	80071ac <__sflush_r+0x18>
 800726c:	4633      	mov	r3, r6
 800726e:	463a      	mov	r2, r7
 8007270:	4628      	mov	r0, r5
 8007272:	6a21      	ldr	r1, [r4, #32]
 8007274:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007278:	47e0      	blx	ip
 800727a:	2800      	cmp	r0, #0
 800727c:	dc06      	bgt.n	800728c <__sflush_r+0xf8>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	e790      	b.n	80071ae <__sflush_r+0x1a>
 800728c:	4407      	add	r7, r0
 800728e:	1a36      	subs	r6, r6, r0
 8007290:	e7ea      	b.n	8007268 <__sflush_r+0xd4>
 8007292:	bf00      	nop
 8007294:	20400001 	.word	0x20400001

08007298 <_fflush_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	690b      	ldr	r3, [r1, #16]
 800729c:	4605      	mov	r5, r0
 800729e:	460c      	mov	r4, r1
 80072a0:	b913      	cbnz	r3, 80072a8 <_fflush_r+0x10>
 80072a2:	2500      	movs	r5, #0
 80072a4:	4628      	mov	r0, r5
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	b118      	cbz	r0, 80072b2 <_fflush_r+0x1a>
 80072aa:	6983      	ldr	r3, [r0, #24]
 80072ac:	b90b      	cbnz	r3, 80072b2 <_fflush_r+0x1a>
 80072ae:	f000 f887 	bl	80073c0 <__sinit>
 80072b2:	4b14      	ldr	r3, [pc, #80]	; (8007304 <_fflush_r+0x6c>)
 80072b4:	429c      	cmp	r4, r3
 80072b6:	d11b      	bne.n	80072f0 <_fflush_r+0x58>
 80072b8:	686c      	ldr	r4, [r5, #4]
 80072ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0ef      	beq.n	80072a2 <_fflush_r+0xa>
 80072c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072c4:	07d0      	lsls	r0, r2, #31
 80072c6:	d404      	bmi.n	80072d2 <_fflush_r+0x3a>
 80072c8:	0599      	lsls	r1, r3, #22
 80072ca:	d402      	bmi.n	80072d2 <_fflush_r+0x3a>
 80072cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ce:	f000 f915 	bl	80074fc <__retarget_lock_acquire_recursive>
 80072d2:	4628      	mov	r0, r5
 80072d4:	4621      	mov	r1, r4
 80072d6:	f7ff ff5d 	bl	8007194 <__sflush_r>
 80072da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072dc:	4605      	mov	r5, r0
 80072de:	07da      	lsls	r2, r3, #31
 80072e0:	d4e0      	bmi.n	80072a4 <_fflush_r+0xc>
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	059b      	lsls	r3, r3, #22
 80072e6:	d4dd      	bmi.n	80072a4 <_fflush_r+0xc>
 80072e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ea:	f000 f908 	bl	80074fe <__retarget_lock_release_recursive>
 80072ee:	e7d9      	b.n	80072a4 <_fflush_r+0xc>
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <_fflush_r+0x70>)
 80072f2:	429c      	cmp	r4, r3
 80072f4:	d101      	bne.n	80072fa <_fflush_r+0x62>
 80072f6:	68ac      	ldr	r4, [r5, #8]
 80072f8:	e7df      	b.n	80072ba <_fflush_r+0x22>
 80072fa:	4b04      	ldr	r3, [pc, #16]	; (800730c <_fflush_r+0x74>)
 80072fc:	429c      	cmp	r4, r3
 80072fe:	bf08      	it	eq
 8007300:	68ec      	ldreq	r4, [r5, #12]
 8007302:	e7da      	b.n	80072ba <_fflush_r+0x22>
 8007304:	08007c94 	.word	0x08007c94
 8007308:	08007cb4 	.word	0x08007cb4
 800730c:	08007c74 	.word	0x08007c74

08007310 <std>:
 8007310:	2300      	movs	r3, #0
 8007312:	b510      	push	{r4, lr}
 8007314:	4604      	mov	r4, r0
 8007316:	e9c0 3300 	strd	r3, r3, [r0]
 800731a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800731e:	6083      	str	r3, [r0, #8]
 8007320:	8181      	strh	r1, [r0, #12]
 8007322:	6643      	str	r3, [r0, #100]	; 0x64
 8007324:	81c2      	strh	r2, [r0, #14]
 8007326:	6183      	str	r3, [r0, #24]
 8007328:	4619      	mov	r1, r3
 800732a:	2208      	movs	r2, #8
 800732c:	305c      	adds	r0, #92	; 0x5c
 800732e:	f7fb fe0f 	bl	8002f50 <memset>
 8007332:	4b05      	ldr	r3, [pc, #20]	; (8007348 <std+0x38>)
 8007334:	6224      	str	r4, [r4, #32]
 8007336:	6263      	str	r3, [r4, #36]	; 0x24
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <std+0x3c>)
 800733a:	62a3      	str	r3, [r4, #40]	; 0x28
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <std+0x40>)
 800733e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007340:	4b04      	ldr	r3, [pc, #16]	; (8007354 <std+0x44>)
 8007342:	6323      	str	r3, [r4, #48]	; 0x30
 8007344:	bd10      	pop	{r4, pc}
 8007346:	bf00      	nop
 8007348:	08007665 	.word	0x08007665
 800734c:	08007687 	.word	0x08007687
 8007350:	080076bf 	.word	0x080076bf
 8007354:	080076e3 	.word	0x080076e3

08007358 <_cleanup_r>:
 8007358:	4901      	ldr	r1, [pc, #4]	; (8007360 <_cleanup_r+0x8>)
 800735a:	f000 b8af 	b.w	80074bc <_fwalk_reent>
 800735e:	bf00      	nop
 8007360:	08007299 	.word	0x08007299

08007364 <__sfmoreglue>:
 8007364:	2268      	movs	r2, #104	; 0x68
 8007366:	b570      	push	{r4, r5, r6, lr}
 8007368:	1e4d      	subs	r5, r1, #1
 800736a:	4355      	muls	r5, r2
 800736c:	460e      	mov	r6, r1
 800736e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007372:	f7ff fa63 	bl	800683c <_malloc_r>
 8007376:	4604      	mov	r4, r0
 8007378:	b140      	cbz	r0, 800738c <__sfmoreglue+0x28>
 800737a:	2100      	movs	r1, #0
 800737c:	e9c0 1600 	strd	r1, r6, [r0]
 8007380:	300c      	adds	r0, #12
 8007382:	60a0      	str	r0, [r4, #8]
 8007384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007388:	f7fb fde2 	bl	8002f50 <memset>
 800738c:	4620      	mov	r0, r4
 800738e:	bd70      	pop	{r4, r5, r6, pc}

08007390 <__sfp_lock_acquire>:
 8007390:	4801      	ldr	r0, [pc, #4]	; (8007398 <__sfp_lock_acquire+0x8>)
 8007392:	f000 b8b3 	b.w	80074fc <__retarget_lock_acquire_recursive>
 8007396:	bf00      	nop
 8007398:	200002f1 	.word	0x200002f1

0800739c <__sfp_lock_release>:
 800739c:	4801      	ldr	r0, [pc, #4]	; (80073a4 <__sfp_lock_release+0x8>)
 800739e:	f000 b8ae 	b.w	80074fe <__retarget_lock_release_recursive>
 80073a2:	bf00      	nop
 80073a4:	200002f1 	.word	0x200002f1

080073a8 <__sinit_lock_acquire>:
 80073a8:	4801      	ldr	r0, [pc, #4]	; (80073b0 <__sinit_lock_acquire+0x8>)
 80073aa:	f000 b8a7 	b.w	80074fc <__retarget_lock_acquire_recursive>
 80073ae:	bf00      	nop
 80073b0:	200002f2 	.word	0x200002f2

080073b4 <__sinit_lock_release>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__sinit_lock_release+0x8>)
 80073b6:	f000 b8a2 	b.w	80074fe <__retarget_lock_release_recursive>
 80073ba:	bf00      	nop
 80073bc:	200002f2 	.word	0x200002f2

080073c0 <__sinit>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	4604      	mov	r4, r0
 80073c4:	f7ff fff0 	bl	80073a8 <__sinit_lock_acquire>
 80073c8:	69a3      	ldr	r3, [r4, #24]
 80073ca:	b11b      	cbz	r3, 80073d4 <__sinit+0x14>
 80073cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d0:	f7ff bff0 	b.w	80073b4 <__sinit_lock_release>
 80073d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073d8:	6523      	str	r3, [r4, #80]	; 0x50
 80073da:	4b13      	ldr	r3, [pc, #76]	; (8007428 <__sinit+0x68>)
 80073dc:	4a13      	ldr	r2, [pc, #76]	; (800742c <__sinit+0x6c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80073e2:	42a3      	cmp	r3, r4
 80073e4:	bf08      	it	eq
 80073e6:	2301      	moveq	r3, #1
 80073e8:	4620      	mov	r0, r4
 80073ea:	bf08      	it	eq
 80073ec:	61a3      	streq	r3, [r4, #24]
 80073ee:	f000 f81f 	bl	8007430 <__sfp>
 80073f2:	6060      	str	r0, [r4, #4]
 80073f4:	4620      	mov	r0, r4
 80073f6:	f000 f81b 	bl	8007430 <__sfp>
 80073fa:	60a0      	str	r0, [r4, #8]
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 f817 	bl	8007430 <__sfp>
 8007402:	2200      	movs	r2, #0
 8007404:	2104      	movs	r1, #4
 8007406:	60e0      	str	r0, [r4, #12]
 8007408:	6860      	ldr	r0, [r4, #4]
 800740a:	f7ff ff81 	bl	8007310 <std>
 800740e:	2201      	movs	r2, #1
 8007410:	2109      	movs	r1, #9
 8007412:	68a0      	ldr	r0, [r4, #8]
 8007414:	f7ff ff7c 	bl	8007310 <std>
 8007418:	2202      	movs	r2, #2
 800741a:	2112      	movs	r1, #18
 800741c:	68e0      	ldr	r0, [r4, #12]
 800741e:	f7ff ff77 	bl	8007310 <std>
 8007422:	2301      	movs	r3, #1
 8007424:	61a3      	str	r3, [r4, #24]
 8007426:	e7d1      	b.n	80073cc <__sinit+0xc>
 8007428:	08007830 	.word	0x08007830
 800742c:	08007359 	.word	0x08007359

08007430 <__sfp>:
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007432:	4607      	mov	r7, r0
 8007434:	f7ff ffac 	bl	8007390 <__sfp_lock_acquire>
 8007438:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <__sfp+0x84>)
 800743a:	681e      	ldr	r6, [r3, #0]
 800743c:	69b3      	ldr	r3, [r6, #24]
 800743e:	b913      	cbnz	r3, 8007446 <__sfp+0x16>
 8007440:	4630      	mov	r0, r6
 8007442:	f7ff ffbd 	bl	80073c0 <__sinit>
 8007446:	3648      	adds	r6, #72	; 0x48
 8007448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800744c:	3b01      	subs	r3, #1
 800744e:	d503      	bpl.n	8007458 <__sfp+0x28>
 8007450:	6833      	ldr	r3, [r6, #0]
 8007452:	b30b      	cbz	r3, 8007498 <__sfp+0x68>
 8007454:	6836      	ldr	r6, [r6, #0]
 8007456:	e7f7      	b.n	8007448 <__sfp+0x18>
 8007458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800745c:	b9d5      	cbnz	r5, 8007494 <__sfp+0x64>
 800745e:	4b16      	ldr	r3, [pc, #88]	; (80074b8 <__sfp+0x88>)
 8007460:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007464:	60e3      	str	r3, [r4, #12]
 8007466:	6665      	str	r5, [r4, #100]	; 0x64
 8007468:	f000 f847 	bl	80074fa <__retarget_lock_init_recursive>
 800746c:	f7ff ff96 	bl	800739c <__sfp_lock_release>
 8007470:	2208      	movs	r2, #8
 8007472:	4629      	mov	r1, r5
 8007474:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007478:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800747c:	6025      	str	r5, [r4, #0]
 800747e:	61a5      	str	r5, [r4, #24]
 8007480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007484:	f7fb fd64 	bl	8002f50 <memset>
 8007488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800748c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007490:	4620      	mov	r0, r4
 8007492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007494:	3468      	adds	r4, #104	; 0x68
 8007496:	e7d9      	b.n	800744c <__sfp+0x1c>
 8007498:	2104      	movs	r1, #4
 800749a:	4638      	mov	r0, r7
 800749c:	f7ff ff62 	bl	8007364 <__sfmoreglue>
 80074a0:	4604      	mov	r4, r0
 80074a2:	6030      	str	r0, [r6, #0]
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d1d5      	bne.n	8007454 <__sfp+0x24>
 80074a8:	f7ff ff78 	bl	800739c <__sfp_lock_release>
 80074ac:	230c      	movs	r3, #12
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	e7ee      	b.n	8007490 <__sfp+0x60>
 80074b2:	bf00      	nop
 80074b4:	08007830 	.word	0x08007830
 80074b8:	ffff0001 	.word	0xffff0001

080074bc <_fwalk_reent>:
 80074bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c0:	4606      	mov	r6, r0
 80074c2:	4688      	mov	r8, r1
 80074c4:	2700      	movs	r7, #0
 80074c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074ce:	f1b9 0901 	subs.w	r9, r9, #1
 80074d2:	d505      	bpl.n	80074e0 <_fwalk_reent+0x24>
 80074d4:	6824      	ldr	r4, [r4, #0]
 80074d6:	2c00      	cmp	r4, #0
 80074d8:	d1f7      	bne.n	80074ca <_fwalk_reent+0xe>
 80074da:	4638      	mov	r0, r7
 80074dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074e0:	89ab      	ldrh	r3, [r5, #12]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d907      	bls.n	80074f6 <_fwalk_reent+0x3a>
 80074e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074ea:	3301      	adds	r3, #1
 80074ec:	d003      	beq.n	80074f6 <_fwalk_reent+0x3a>
 80074ee:	4629      	mov	r1, r5
 80074f0:	4630      	mov	r0, r6
 80074f2:	47c0      	blx	r8
 80074f4:	4307      	orrs	r7, r0
 80074f6:	3568      	adds	r5, #104	; 0x68
 80074f8:	e7e9      	b.n	80074ce <_fwalk_reent+0x12>

080074fa <__retarget_lock_init_recursive>:
 80074fa:	4770      	bx	lr

080074fc <__retarget_lock_acquire_recursive>:
 80074fc:	4770      	bx	lr

080074fe <__retarget_lock_release_recursive>:
 80074fe:	4770      	bx	lr

08007500 <__swhatbuf_r>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	460e      	mov	r6, r1
 8007504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007508:	4614      	mov	r4, r2
 800750a:	2900      	cmp	r1, #0
 800750c:	461d      	mov	r5, r3
 800750e:	b096      	sub	sp, #88	; 0x58
 8007510:	da08      	bge.n	8007524 <__swhatbuf_r+0x24>
 8007512:	2200      	movs	r2, #0
 8007514:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007518:	602a      	str	r2, [r5, #0]
 800751a:	061a      	lsls	r2, r3, #24
 800751c:	d410      	bmi.n	8007540 <__swhatbuf_r+0x40>
 800751e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007522:	e00e      	b.n	8007542 <__swhatbuf_r+0x42>
 8007524:	466a      	mov	r2, sp
 8007526:	f000 f903 	bl	8007730 <_fstat_r>
 800752a:	2800      	cmp	r0, #0
 800752c:	dbf1      	blt.n	8007512 <__swhatbuf_r+0x12>
 800752e:	9a01      	ldr	r2, [sp, #4]
 8007530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007538:	425a      	negs	r2, r3
 800753a:	415a      	adcs	r2, r3
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	e7ee      	b.n	800751e <__swhatbuf_r+0x1e>
 8007540:	2340      	movs	r3, #64	; 0x40
 8007542:	2000      	movs	r0, #0
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	b016      	add	sp, #88	; 0x58
 8007548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800754c <__smakebuf_r>:
 800754c:	898b      	ldrh	r3, [r1, #12]
 800754e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007550:	079d      	lsls	r5, r3, #30
 8007552:	4606      	mov	r6, r0
 8007554:	460c      	mov	r4, r1
 8007556:	d507      	bpl.n	8007568 <__smakebuf_r+0x1c>
 8007558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	2301      	movs	r3, #1
 8007562:	6163      	str	r3, [r4, #20]
 8007564:	b002      	add	sp, #8
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	466a      	mov	r2, sp
 800756a:	ab01      	add	r3, sp, #4
 800756c:	f7ff ffc8 	bl	8007500 <__swhatbuf_r>
 8007570:	9900      	ldr	r1, [sp, #0]
 8007572:	4605      	mov	r5, r0
 8007574:	4630      	mov	r0, r6
 8007576:	f7ff f961 	bl	800683c <_malloc_r>
 800757a:	b948      	cbnz	r0, 8007590 <__smakebuf_r+0x44>
 800757c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007580:	059a      	lsls	r2, r3, #22
 8007582:	d4ef      	bmi.n	8007564 <__smakebuf_r+0x18>
 8007584:	f023 0303 	bic.w	r3, r3, #3
 8007588:	f043 0302 	orr.w	r3, r3, #2
 800758c:	81a3      	strh	r3, [r4, #12]
 800758e:	e7e3      	b.n	8007558 <__smakebuf_r+0xc>
 8007590:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <__smakebuf_r+0x7c>)
 8007592:	62b3      	str	r3, [r6, #40]	; 0x28
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	6020      	str	r0, [r4, #0]
 8007598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759c:	81a3      	strh	r3, [r4, #12]
 800759e:	9b00      	ldr	r3, [sp, #0]
 80075a0:	6120      	str	r0, [r4, #16]
 80075a2:	6163      	str	r3, [r4, #20]
 80075a4:	9b01      	ldr	r3, [sp, #4]
 80075a6:	b15b      	cbz	r3, 80075c0 <__smakebuf_r+0x74>
 80075a8:	4630      	mov	r0, r6
 80075aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ae:	f000 f8d1 	bl	8007754 <_isatty_r>
 80075b2:	b128      	cbz	r0, 80075c0 <__smakebuf_r+0x74>
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	f023 0303 	bic.w	r3, r3, #3
 80075ba:	f043 0301 	orr.w	r3, r3, #1
 80075be:	81a3      	strh	r3, [r4, #12]
 80075c0:	89a0      	ldrh	r0, [r4, #12]
 80075c2:	4305      	orrs	r5, r0
 80075c4:	81a5      	strh	r5, [r4, #12]
 80075c6:	e7cd      	b.n	8007564 <__smakebuf_r+0x18>
 80075c8:	08007359 	.word	0x08007359

080075cc <_malloc_usable_size_r>:
 80075cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d0:	1f18      	subs	r0, r3, #4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bfbc      	itt	lt
 80075d6:	580b      	ldrlt	r3, [r1, r0]
 80075d8:	18c0      	addlt	r0, r0, r3
 80075da:	4770      	bx	lr

080075dc <_raise_r>:
 80075dc:	291f      	cmp	r1, #31
 80075de:	b538      	push	{r3, r4, r5, lr}
 80075e0:	4604      	mov	r4, r0
 80075e2:	460d      	mov	r5, r1
 80075e4:	d904      	bls.n	80075f0 <_raise_r+0x14>
 80075e6:	2316      	movs	r3, #22
 80075e8:	6003      	str	r3, [r0, #0]
 80075ea:	f04f 30ff 	mov.w	r0, #4294967295
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075f2:	b112      	cbz	r2, 80075fa <_raise_r+0x1e>
 80075f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075f8:	b94b      	cbnz	r3, 800760e <_raise_r+0x32>
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 f830 	bl	8007660 <_getpid_r>
 8007600:	462a      	mov	r2, r5
 8007602:	4601      	mov	r1, r0
 8007604:	4620      	mov	r0, r4
 8007606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800760a:	f000 b817 	b.w	800763c <_kill_r>
 800760e:	2b01      	cmp	r3, #1
 8007610:	d00a      	beq.n	8007628 <_raise_r+0x4c>
 8007612:	1c59      	adds	r1, r3, #1
 8007614:	d103      	bne.n	800761e <_raise_r+0x42>
 8007616:	2316      	movs	r3, #22
 8007618:	6003      	str	r3, [r0, #0]
 800761a:	2001      	movs	r0, #1
 800761c:	e7e7      	b.n	80075ee <_raise_r+0x12>
 800761e:	2400      	movs	r4, #0
 8007620:	4628      	mov	r0, r5
 8007622:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007626:	4798      	blx	r3
 8007628:	2000      	movs	r0, #0
 800762a:	e7e0      	b.n	80075ee <_raise_r+0x12>

0800762c <raise>:
 800762c:	4b02      	ldr	r3, [pc, #8]	; (8007638 <raise+0xc>)
 800762e:	4601      	mov	r1, r0
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	f7ff bfd3 	b.w	80075dc <_raise_r>
 8007636:	bf00      	nop
 8007638:	20000014 	.word	0x20000014

0800763c <_kill_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	2300      	movs	r3, #0
 8007640:	4d06      	ldr	r5, [pc, #24]	; (800765c <_kill_r+0x20>)
 8007642:	4604      	mov	r4, r0
 8007644:	4608      	mov	r0, r1
 8007646:	4611      	mov	r1, r2
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	f7f9 ffcd 	bl	80015e8 <_kill>
 800764e:	1c43      	adds	r3, r0, #1
 8007650:	d102      	bne.n	8007658 <_kill_r+0x1c>
 8007652:	682b      	ldr	r3, [r5, #0]
 8007654:	b103      	cbz	r3, 8007658 <_kill_r+0x1c>
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	bd38      	pop	{r3, r4, r5, pc}
 800765a:	bf00      	nop
 800765c:	200002ec 	.word	0x200002ec

08007660 <_getpid_r>:
 8007660:	f7f9 bfbb 	b.w	80015da <_getpid>

08007664 <__sread>:
 8007664:	b510      	push	{r4, lr}
 8007666:	460c      	mov	r4, r1
 8007668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766c:	f000 f894 	bl	8007798 <_read_r>
 8007670:	2800      	cmp	r0, #0
 8007672:	bfab      	itete	ge
 8007674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007676:	89a3      	ldrhlt	r3, [r4, #12]
 8007678:	181b      	addge	r3, r3, r0
 800767a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800767e:	bfac      	ite	ge
 8007680:	6563      	strge	r3, [r4, #84]	; 0x54
 8007682:	81a3      	strhlt	r3, [r4, #12]
 8007684:	bd10      	pop	{r4, pc}

08007686 <__swrite>:
 8007686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768a:	461f      	mov	r7, r3
 800768c:	898b      	ldrh	r3, [r1, #12]
 800768e:	4605      	mov	r5, r0
 8007690:	05db      	lsls	r3, r3, #23
 8007692:	460c      	mov	r4, r1
 8007694:	4616      	mov	r6, r2
 8007696:	d505      	bpl.n	80076a4 <__swrite+0x1e>
 8007698:	2302      	movs	r3, #2
 800769a:	2200      	movs	r2, #0
 800769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a0:	f000 f868 	bl	8007774 <_lseek_r>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	4632      	mov	r2, r6
 80076a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	4628      	mov	r0, r5
 80076b0:	463b      	mov	r3, r7
 80076b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ba:	f000 b817 	b.w	80076ec <_write_r>

080076be <__sseek>:
 80076be:	b510      	push	{r4, lr}
 80076c0:	460c      	mov	r4, r1
 80076c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c6:	f000 f855 	bl	8007774 <_lseek_r>
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	bf15      	itete	ne
 80076d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80076d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076da:	81a3      	strheq	r3, [r4, #12]
 80076dc:	bf18      	it	ne
 80076de:	81a3      	strhne	r3, [r4, #12]
 80076e0:	bd10      	pop	{r4, pc}

080076e2 <__sclose>:
 80076e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e6:	f000 b813 	b.w	8007710 <_close_r>
	...

080076ec <_write_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4604      	mov	r4, r0
 80076f0:	4608      	mov	r0, r1
 80076f2:	4611      	mov	r1, r2
 80076f4:	2200      	movs	r2, #0
 80076f6:	4d05      	ldr	r5, [pc, #20]	; (800770c <_write_r+0x20>)
 80076f8:	602a      	str	r2, [r5, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	f7f9 ffab 	bl	8001656 <_write>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_write_r+0x1e>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	b103      	cbz	r3, 800770a <_write_r+0x1e>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	200002ec 	.word	0x200002ec

08007710 <_close_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	2300      	movs	r3, #0
 8007714:	4d05      	ldr	r5, [pc, #20]	; (800772c <_close_r+0x1c>)
 8007716:	4604      	mov	r4, r0
 8007718:	4608      	mov	r0, r1
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	f7f9 ffb7 	bl	800168e <_close>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_close_r+0x1a>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	b103      	cbz	r3, 800772a <_close_r+0x1a>
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	200002ec 	.word	0x200002ec

08007730 <_fstat_r>:
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	2300      	movs	r3, #0
 8007734:	4d06      	ldr	r5, [pc, #24]	; (8007750 <_fstat_r+0x20>)
 8007736:	4604      	mov	r4, r0
 8007738:	4608      	mov	r0, r1
 800773a:	4611      	mov	r1, r2
 800773c:	602b      	str	r3, [r5, #0]
 800773e:	f7f9 ffb1 	bl	80016a4 <_fstat>
 8007742:	1c43      	adds	r3, r0, #1
 8007744:	d102      	bne.n	800774c <_fstat_r+0x1c>
 8007746:	682b      	ldr	r3, [r5, #0]
 8007748:	b103      	cbz	r3, 800774c <_fstat_r+0x1c>
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	bd38      	pop	{r3, r4, r5, pc}
 800774e:	bf00      	nop
 8007750:	200002ec 	.word	0x200002ec

08007754 <_isatty_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	2300      	movs	r3, #0
 8007758:	4d05      	ldr	r5, [pc, #20]	; (8007770 <_isatty_r+0x1c>)
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	f7f9 ffaf 	bl	80016c2 <_isatty>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_isatty_r+0x1a>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_isatty_r+0x1a>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	200002ec 	.word	0x200002ec

08007774 <_lseek_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	4611      	mov	r1, r2
 800777c:	2200      	movs	r2, #0
 800777e:	4d05      	ldr	r5, [pc, #20]	; (8007794 <_lseek_r+0x20>)
 8007780:	602a      	str	r2, [r5, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	f7f9 ffa7 	bl	80016d6 <_lseek>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_lseek_r+0x1e>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_lseek_r+0x1e>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	200002ec 	.word	0x200002ec

08007798 <_read_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	2200      	movs	r2, #0
 80077a2:	4d05      	ldr	r5, [pc, #20]	; (80077b8 <_read_r+0x20>)
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f7f9 ff38 	bl	800161c <_read>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_read_r+0x1e>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_read_r+0x1e>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	200002ec 	.word	0x200002ec

080077bc <_init>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	bf00      	nop
 80077c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c2:	bc08      	pop	{r3}
 80077c4:	469e      	mov	lr, r3
 80077c6:	4770      	bx	lr

080077c8 <_fini>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	bf00      	nop
 80077cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ce:	bc08      	pop	{r3}
 80077d0:	469e      	mov	lr, r3
 80077d2:	4770      	bx	lr
